using UnrealSharp;
using Object = UnrealSharp.UEObject;
using Guid = SDK.Script.CoreUObjectSDK.Guid;
using Enum = SDK.Script.CoreUObjectSDK.Enum;
using DateTime = SDK.Script.CoreUObjectSDK.DateTime;
using SDK.Script.CoreUObjectSDK;
using SDK.Script.InputCoreSDK;
using SDK.Script.PhysicsCoreSDK;
using SDK.Script.ClothingSystemRuntimeInterfaceSDK;
using SDK.Script.UMGSDK;
using SDK.Script.AudioExtensionsSDK;
using SDK.Script.AudioMixerSDK;
using SDK.Script.AudioPlatformConfigurationSDK;
using SDK.Script.DeveloperSettingsSDK;
using SDK.Script.StaticMeshDescriptionSDK;
using SDK.Script.TypedElementRuntimeSDK;
using SDK.Script.SlateCoreSDK;
using SDK.Script.SlateSDK;
using SDK.Script.NetCoreSDK;
using SDK.Script.PacketHandlerSDK;
using SDK.Script.MeshDescriptionSDK;
using SDK.Script.CoreOnlineSDK;
using SDK.Script.LandscapeSDK;
using SDK.Script.ChaosSDK;
namespace SDK.Script.EngineSDK
{
    public class ActorComponent : Object
    {
        public ActorComponent(nint addr) : base(addr) { }
        public ActorComponentTickFunction PrimaryComponentTick { get { return this[nameof(PrimaryComponentTick)].As<ActorComponentTickFunction>(); } set { this["PrimaryComponentTick"] = value; } }
        public Array<Object> ComponentTags { get { return new Array<Object>(this[nameof(ComponentTags)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public int UCSSerializationIndex { get { return this[nameof(UCSSerializationIndex)].GetValue<int>(); } set { this[nameof(UCSSerializationIndex)].SetValue<int>(value); } }
        public bool bNetAddressable { get { return this[nameof(bNetAddressable)].Flag; } set { this[nameof(bNetAddressable)].Flag = value; } }
        public bool bReplicateUsingRegisteredSubObjectList { get { return this[nameof(bReplicateUsingRegisteredSubObjectList)].Flag; } set { this[nameof(bReplicateUsingRegisteredSubObjectList)].Flag = value; } }
        public bool bReplicates { get { return this[nameof(bReplicates)].Flag; } set { this[nameof(bReplicates)].Flag = value; } }
        public bool bAutoActivate { get { return this[nameof(bAutoActivate)].Flag; } set { this[nameof(bAutoActivate)].Flag = value; } }
        public bool bIsActive { get { return this[nameof(bIsActive)].Flag; } set { this[nameof(bIsActive)].Flag = value; } }
        public bool bEditableWhenInherited { get { return this[nameof(bEditableWhenInherited)].Flag; } set { this[nameof(bEditableWhenInherited)].Flag = value; } }
        public bool bCanEverAffectNavigation { get { return this[nameof(bCanEverAffectNavigation)].Flag; } set { this[nameof(bCanEverAffectNavigation)].Flag = value; } }
        public bool bIsEditorOnly { get { return this[nameof(bIsEditorOnly)].Flag; } set { this[nameof(bIsEditorOnly)].Flag = value; } }
        public EComponentCreationMethod CreationMethod { get { return (EComponentCreationMethod)this[nameof(CreationMethod)].GetValue<int>(); } set { this[nameof(CreationMethod)].SetValue<int>((int)value); } }
        public Object OnComponentActivated { get { return this[nameof(OnComponentActivated)]; } set { this[nameof(OnComponentActivated)] = value; } }
        public Object OnComponentDeactivated { get { return this[nameof(OnComponentDeactivated)]; } set { this[nameof(OnComponentDeactivated)] = value; } }
        public void ToggleActive() { Invoke(nameof(ToggleActive)); }
        public void SetTickGroup(byte NewTickGroup) { Invoke(nameof(SetTickGroup), NewTickGroup); }
        public void SetTickableWhenPaused(bool bTickableWhenPaused) { Invoke(nameof(SetTickableWhenPaused), bTickableWhenPaused); }
        public void SetIsReplicated(bool ShouldReplicate) { Invoke(nameof(SetIsReplicated), ShouldReplicate); }
        public void SetComponentTickIntervalAndCooldown(float TickInterval) { Invoke(nameof(SetComponentTickIntervalAndCooldown), TickInterval); }
        public void SetComponentTickInterval(float TickInterval) { Invoke(nameof(SetComponentTickInterval), TickInterval); }
        public void SetComponentTickEnabled(bool bEnabled) { Invoke(nameof(SetComponentTickEnabled), bEnabled); }
        public void SetAutoActivate(bool bNewAutoActivate) { Invoke(nameof(SetAutoActivate), bNewAutoActivate); }
        public void SetActive(bool bNewActive, bool bReset) { Invoke(nameof(SetActive), bNewActive, bReset); }
        public void RemoveTickPrerequisiteComponent(ActorComponent PrerequisiteComponent) { Invoke(nameof(RemoveTickPrerequisiteComponent), PrerequisiteComponent); }
        public void RemoveTickPrerequisiteActor(Actor PrerequisiteActor) { Invoke(nameof(RemoveTickPrerequisiteActor), PrerequisiteActor); }
        public void ReceiveTick(float DeltaSeconds) { Invoke(nameof(ReceiveTick), DeltaSeconds); }
        public void ReceiveEndPlay(byte EndPlayReason) { Invoke(nameof(ReceiveEndPlay), EndPlayReason); }
        public void ReceiveBeginPlay() { Invoke(nameof(ReceiveBeginPlay)); }
        public void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds) { Invoke(nameof(ReceiveAsyncPhysicsTick), DeltaSeconds, SimSeconds); }
        public void OnRep_IsActive() { Invoke(nameof(OnRep_IsActive)); }
        public void K2_DestroyComponent(Object Object) { Invoke(nameof(K2_DestroyComponent), Object); }
        public bool IsComponentTickEnabled() { return Invoke<bool>(nameof(IsComponentTickEnabled)); }
        public bool IsBeingDestroyed() { return Invoke<bool>(nameof(IsBeingDestroyed)); }
        public bool IsActive() { return Invoke<bool>(nameof(IsActive)); }
        public Actor GetOwner() { return Invoke<Actor>(nameof(GetOwner)); }
        public float GetComponentTickInterval() { return Invoke<float>(nameof(GetComponentTickInterval)); }
        public void Deactivate() { Invoke(nameof(Deactivate)); }
        public bool ComponentHasTag(Object Tag) { return Invoke<bool>(nameof(ComponentHasTag), Tag); }
        public void AddTickPrerequisiteComponent(ActorComponent PrerequisiteComponent) { Invoke(nameof(AddTickPrerequisiteComponent), PrerequisiteComponent); }
        public void AddTickPrerequisiteActor(Actor PrerequisiteActor) { Invoke(nameof(AddTickPrerequisiteActor), PrerequisiteActor); }
        public void Activate(bool bReset) { Invoke(nameof(Activate), bReset); }
    }
    public class Actor : Object
    {
        public Actor(nint addr) : base(addr) { }
        public ActorTickFunction PrimaryActorTick { get { return this[nameof(PrimaryActorTick)].As<ActorTickFunction>(); } set { this["PrimaryActorTick"] = value; } }
        public bool bNetTemporary { get { return this[nameof(bNetTemporary)].Flag; } set { this[nameof(bNetTemporary)].Flag = value; } }
        public bool bOnlyRelevantToOwner { get { return this[nameof(bOnlyRelevantToOwner)].Flag; } set { this[nameof(bOnlyRelevantToOwner)].Flag = value; } }
        public bool bAlwaysRelevant { get { return this[nameof(bAlwaysRelevant)].Flag; } set { this[nameof(bAlwaysRelevant)].Flag = value; } }
        public bool bReplicateMovement { get { return this[nameof(bReplicateMovement)].Flag; } set { this[nameof(bReplicateMovement)].Flag = value; } }
        public bool bCallPreReplication { get { return this[nameof(bCallPreReplication)].Flag; } set { this[nameof(bCallPreReplication)].Flag = value; } }
        public bool bCallPreReplicationForReplay { get { return this[nameof(bCallPreReplicationForReplay)].Flag; } set { this[nameof(bCallPreReplicationForReplay)].Flag = value; } }
        public bool bHidden { get { return this[nameof(bHidden)].Flag; } set { this[nameof(bHidden)].Flag = value; } }
        public bool bTearOff { get { return this[nameof(bTearOff)].Flag; } set { this[nameof(bTearOff)].Flag = value; } }
        public bool bForceNetAddressable { get { return this[nameof(bForceNetAddressable)].Flag; } set { this[nameof(bForceNetAddressable)].Flag = value; } }
        public bool bExchangedRoles { get { return this[nameof(bExchangedRoles)].Flag; } set { this[nameof(bExchangedRoles)].Flag = value; } }
        public bool bNetLoadOnClient { get { return this[nameof(bNetLoadOnClient)].Flag; } set { this[nameof(bNetLoadOnClient)].Flag = value; } }
        public bool bNetUseOwnerRelevancy { get { return this[nameof(bNetUseOwnerRelevancy)].Flag; } set { this[nameof(bNetUseOwnerRelevancy)].Flag = value; } }
        public bool bRelevantForNetworkReplays { get { return this[nameof(bRelevantForNetworkReplays)].Flag; } set { this[nameof(bRelevantForNetworkReplays)].Flag = value; } }
        public bool bRelevantForLevelBounds { get { return this[nameof(bRelevantForLevelBounds)].Flag; } set { this[nameof(bRelevantForLevelBounds)].Flag = value; } }
        public bool bReplayRewindable { get { return this[nameof(bReplayRewindable)].Flag; } set { this[nameof(bReplayRewindable)].Flag = value; } }
        public bool bAllowTickBeforeBeginPlay { get { return this[nameof(bAllowTickBeforeBeginPlay)].Flag; } set { this[nameof(bAllowTickBeforeBeginPlay)].Flag = value; } }
        public bool bAutoDestroyWhenFinished { get { return this[nameof(bAutoDestroyWhenFinished)].Flag; } set { this[nameof(bAutoDestroyWhenFinished)].Flag = value; } }
        public bool bCanBeDamaged { get { return this[nameof(bCanBeDamaged)].Flag; } set { this[nameof(bCanBeDamaged)].Flag = value; } }
        public bool bBlockInput { get { return this[nameof(bBlockInput)].Flag; } set { this[nameof(bBlockInput)].Flag = value; } }
        public bool bCollideWhenPlacing { get { return this[nameof(bCollideWhenPlacing)].Flag; } set { this[nameof(bCollideWhenPlacing)].Flag = value; } }
        public bool bFindCameraComponentWhenViewTarget { get { return this[nameof(bFindCameraComponentWhenViewTarget)].Flag; } set { this[nameof(bFindCameraComponentWhenViewTarget)].Flag = value; } }
        public bool bGenerateOverlapEventsDuringLevelStreaming { get { return this[nameof(bGenerateOverlapEventsDuringLevelStreaming)].Flag; } set { this[nameof(bGenerateOverlapEventsDuringLevelStreaming)].Flag = value; } }
        public bool bIgnoresOriginShifting { get { return this[nameof(bIgnoresOriginShifting)].Flag; } set { this[nameof(bIgnoresOriginShifting)].Flag = value; } }
        public bool bEnableAutoLODGeneration { get { return this[nameof(bEnableAutoLODGeneration)].Flag; } set { this[nameof(bEnableAutoLODGeneration)].Flag = value; } }
        public bool bIsEditorOnlyActor { get { return this[nameof(bIsEditorOnlyActor)].Flag; } set { this[nameof(bIsEditorOnlyActor)].Flag = value; } }
        public bool bActorSeamlessTraveled { get { return this[nameof(bActorSeamlessTraveled)].Flag; } set { this[nameof(bActorSeamlessTraveled)].Flag = value; } }
        public bool bReplicates { get { return this[nameof(bReplicates)].Flag; } set { this[nameof(bReplicates)].Flag = value; } }
        public bool bCanBeInCluster { get { return this[nameof(bCanBeInCluster)].Flag; } set { this[nameof(bCanBeInCluster)].Flag = value; } }
        public bool bAllowReceiveTickEventOnDedicatedServer { get { return this[nameof(bAllowReceiveTickEventOnDedicatedServer)].Flag; } set { this[nameof(bAllowReceiveTickEventOnDedicatedServer)].Flag = value; } }
        public bool bReplicateUsingRegisteredSubObjectList { get { return this[nameof(bReplicateUsingRegisteredSubObjectList)].Flag; } set { this[nameof(bReplicateUsingRegisteredSubObjectList)].Flag = value; } }
        public bool bActorEnableCollision { get { return this[nameof(bActorEnableCollision)].Flag; } set { this[nameof(bActorEnableCollision)].Flag = value; } }
        public bool bActorIsBeingDestroyed { get { return this[nameof(bActorIsBeingDestroyed)].Flag; } set { this[nameof(bActorIsBeingDestroyed)].Flag = value; } }
        public bool bAsyncPhysicsTickEnabled { get { return this[nameof(bAsyncPhysicsTickEnabled)].Flag; } set { this[nameof(bAsyncPhysicsTickEnabled)].Flag = value; } }
        public EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming { get { return (EActorUpdateOverlapsMethod)this[nameof(UpdateOverlapsMethodDuringLevelStreaming)].GetValue<int>(); } set { this[nameof(UpdateOverlapsMethodDuringLevelStreaming)].SetValue<int>((int)value); } }
        public EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming { get { return (EActorUpdateOverlapsMethod)this[nameof(DefaultUpdateOverlapsMethodDuringLevelStreaming)].GetValue<int>(); } set { this[nameof(DefaultUpdateOverlapsMethodDuringLevelStreaming)].SetValue<int>((int)value); } }
        public float InitialLifeSpan { get { return this[nameof(InitialLifeSpan)].GetValue<float>(); } set { this[nameof(InitialLifeSpan)].SetValue<float>(value); } }
        public float CustomTimeDilation { get { return this[nameof(CustomTimeDilation)].GetValue<float>(); } set { this[nameof(CustomTimeDilation)].SetValue<float>(value); } }
        public byte RemoteRole { get { return this[nameof(RemoteRole)].GetValue<byte>(); } set { this[nameof(RemoteRole)].SetValue<byte>(value); } }
        public int RayTracingGroupId { get { return this[nameof(RayTracingGroupId)].GetValue<int>(); } set { this[nameof(RayTracingGroupId)].SetValue<int>(value); } }
        public RepAttachment AttachmentReplication { get { return this[nameof(AttachmentReplication)].As<RepAttachment>(); } set { this["AttachmentReplication"] = value; } }
        public RepMovement ReplicatedMovement { get { return this[nameof(ReplicatedMovement)].As<RepMovement>(); } set { this["ReplicatedMovement"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public Object NetDriverName { get { return this[nameof(NetDriverName)]; } set { this[nameof(NetDriverName)] = value; } }
        public byte Role { get { return this[nameof(Role)].GetValue<byte>(); } set { this[nameof(Role)].SetValue<byte>(value); } }
        public byte NetDormancy { get { return this[nameof(NetDormancy)].GetValue<byte>(); } set { this[nameof(NetDormancy)].SetValue<byte>(value); } }
        public ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod { get { return (ESpawnActorCollisionHandlingMethod)this[nameof(SpawnCollisionHandlingMethod)].GetValue<int>(); } set { this[nameof(SpawnCollisionHandlingMethod)].SetValue<int>((int)value); } }
        public byte AutoReceiveInput { get { return this[nameof(AutoReceiveInput)].GetValue<byte>(); } set { this[nameof(AutoReceiveInput)].SetValue<byte>(value); } }
        public int InputPriority { get { return this[nameof(InputPriority)].GetValue<int>(); } set { this[nameof(InputPriority)].SetValue<int>(value); } }
        public InputComponent InputComponent { get { return this[nameof(InputComponent)].As<InputComponent>(); } set { this["InputComponent"] = value; } }
        public float NetCullDistanceSquared { get { return this[nameof(NetCullDistanceSquared)].GetValue<float>(); } set { this[nameof(NetCullDistanceSquared)].SetValue<float>(value); } }
        public int NetTag { get { return this[nameof(NetTag)].GetValue<int>(); } set { this[nameof(NetTag)].SetValue<int>(value); } }
        public float NetUpdateFrequency { get { return this[nameof(NetUpdateFrequency)].GetValue<float>(); } set { this[nameof(NetUpdateFrequency)].SetValue<float>(value); } }
        public float MinNetUpdateFrequency { get { return this[nameof(MinNetUpdateFrequency)].GetValue<float>(); } set { this[nameof(MinNetUpdateFrequency)].SetValue<float>(value); } }
        public float NetPriority { get { return this[nameof(NetPriority)].GetValue<float>(); } set { this[nameof(NetPriority)].SetValue<float>(value); } }
        public Pawn Instigator { get { return this[nameof(Instigator)].As<Pawn>(); } set { this["Instigator"] = value; } }
        public Array<Actor> Children { get { return new Array<Actor>(this[nameof(Children)].Address); } }
        public SceneComponent RootComponent { get { return this[nameof(RootComponent)].As<SceneComponent>(); } set { this["RootComponent"] = value; } }
        public Array<Object> Layers { get { return new Array<Object>(this[nameof(Layers)].Address); } }
        public Object ParentComponent { get { return this[nameof(ParentComponent)]; } set { this[nameof(ParentComponent)] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Object OnTakeAnyDamage { get { return this[nameof(OnTakeAnyDamage)]; } set { this[nameof(OnTakeAnyDamage)] = value; } }
        public Object OnTakePointDamage { get { return this[nameof(OnTakePointDamage)]; } set { this[nameof(OnTakePointDamage)] = value; } }
        public Object OnTakeRadialDamage { get { return this[nameof(OnTakeRadialDamage)]; } set { this[nameof(OnTakeRadialDamage)] = value; } }
        public Object OnActorBeginOverlap { get { return this[nameof(OnActorBeginOverlap)]; } set { this[nameof(OnActorBeginOverlap)] = value; } }
        public Object OnActorEndOverlap { get { return this[nameof(OnActorEndOverlap)]; } set { this[nameof(OnActorEndOverlap)] = value; } }
        public Object OnBeginCursorOver { get { return this[nameof(OnBeginCursorOver)]; } set { this[nameof(OnBeginCursorOver)] = value; } }
        public Object OnEndCursorOver { get { return this[nameof(OnEndCursorOver)]; } set { this[nameof(OnEndCursorOver)] = value; } }
        public Object OnClicked { get { return this[nameof(OnClicked)]; } set { this[nameof(OnClicked)] = value; } }
        public Object OnReleased { get { return this[nameof(OnReleased)]; } set { this[nameof(OnReleased)] = value; } }
        public Object OnInputTouchBegin { get { return this[nameof(OnInputTouchBegin)]; } set { this[nameof(OnInputTouchBegin)] = value; } }
        public Object OnInputTouchEnd { get { return this[nameof(OnInputTouchEnd)]; } set { this[nameof(OnInputTouchEnd)] = value; } }
        public Object OnInputTouchEnter { get { return this[nameof(OnInputTouchEnter)]; } set { this[nameof(OnInputTouchEnter)] = value; } }
        public Object OnInputTouchLeave { get { return this[nameof(OnInputTouchLeave)]; } set { this[nameof(OnInputTouchLeave)] = value; } }
        public Object OnActorHit { get { return this[nameof(OnActorHit)]; } set { this[nameof(OnActorHit)] = value; } }
        public Object OnDestroyed { get { return this[nameof(OnDestroyed)]; } set { this[nameof(OnDestroyed)] = value; } }
        public Object OnEndPlay { get { return this[nameof(OnEndPlay)]; } set { this[nameof(OnEndPlay)] = value; } }
        public Array<ActorComponent> InstanceComponents { get { return new Array<ActorComponent>(this[nameof(InstanceComponents)].Address); } }
        public Array<ActorComponent> BlueprintCreatedComponents { get { return new Array<ActorComponent>(this[nameof(BlueprintCreatedComponents)].Address); } }
        public bool WasRecentlyRendered(float Tolerance) { return Invoke<bool>(nameof(WasRecentlyRendered), Tolerance); }
        public void UserConstructionScript() { Invoke(nameof(UserConstructionScript)); }
        public void TearOff() { Invoke(nameof(TearOff)); }
        public void SetTickGroup(byte NewTickGroup) { Invoke(nameof(SetTickGroup), NewTickGroup); }
        public void SetTickableWhenPaused(bool bTickableWhenPaused) { Invoke(nameof(SetTickableWhenPaused), bTickableWhenPaused); }
        public void SetReplicates(bool bInReplicates) { Invoke(nameof(SetReplicates), bInReplicates); }
        public void SetReplicateMovement(bool bInReplicateMovement) { Invoke(nameof(SetReplicateMovement), bInReplicateMovement); }
        public void SetRayTracingGroupId(int InRaytracingGroupId) { Invoke(nameof(SetRayTracingGroupId), InRaytracingGroupId); }
        public void SetOwner(Actor NewOwner) { Invoke(nameof(SetOwner), NewOwner); }
        public void SetNetDormancy(byte NewDormancy) { Invoke(nameof(SetNetDormancy), NewDormancy); }
        public void SetLifeSpan(float InLifespan) { Invoke(nameof(SetLifeSpan), InLifespan); }
        public void SetAutoDestroyWhenFinished(bool bVal) { Invoke(nameof(SetAutoDestroyWhenFinished), bVal); }
        public void SetActorTickInterval(float TickInterval) { Invoke(nameof(SetActorTickInterval), TickInterval); }
        public void SetActorTickEnabled(bool bEnabled) { Invoke(nameof(SetActorTickEnabled), bEnabled); }
        public void SetActorScale3D(Vector NewScale3D) { Invoke(nameof(SetActorScale3D), NewScale3D); }
        public void SetActorRelativeScale3D(Vector NewRelativeScale) { Invoke(nameof(SetActorRelativeScale3D), NewRelativeScale); }
        public void SetActorHiddenInGame(bool bNewHidden) { Invoke(nameof(SetActorHiddenInGame), bNewHidden); }
        public void SetActorEnableCollision(bool bNewActorEnableCollision) { Invoke(nameof(SetActorEnableCollision), bNewActorEnableCollision); }
        public void RemoveTickPrerequisiteComponent(ActorComponent PrerequisiteComponent) { Invoke(nameof(RemoveTickPrerequisiteComponent), PrerequisiteComponent); }
        public void RemoveTickPrerequisiteActor(Actor PrerequisiteActor) { Invoke(nameof(RemoveTickPrerequisiteActor), PrerequisiteActor); }
        public void ReceiveTick(float DeltaSeconds) { Invoke(nameof(ReceiveTick), DeltaSeconds); }
        public void ReceiveRadialDamage(float DamageReceived, DamageType DamageType, Vector Origin, HitResult HitInfo, Controller InstigatedBy, Actor DamageCauser) { Invoke(nameof(ReceiveRadialDamage), DamageReceived, DamageType, Origin, HitInfo, InstigatedBy, DamageCauser); }
        public void ReceivePointDamage(float Damage, DamageType DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent HitComponent, Object BoneName, Vector ShotFromDirection, Controller InstigatedBy, Actor DamageCauser, HitResult HitInfo) { Invoke(nameof(ReceivePointDamage), Damage, DamageType, HitLocation, HitNormal, HitComponent, BoneName, ShotFromDirection, InstigatedBy, DamageCauser, HitInfo); }
        public void ReceiveHit(PrimitiveComponent MyComp, Actor Other, PrimitiveComponent OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(ReceiveHit), MyComp, Other, OtherComp, bSelfMoved, HitLocation, HitNormal, NormalImpulse, Hit); }
        public void ReceiveEndPlay(byte EndPlayReason) { Invoke(nameof(ReceiveEndPlay), EndPlayReason); }
        public void ReceiveDestroyed() { Invoke(nameof(ReceiveDestroyed)); }
        public void ReceiveBeginPlay() { Invoke(nameof(ReceiveBeginPlay)); }
        public void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds) { Invoke(nameof(ReceiveAsyncPhysicsTick), DeltaSeconds, SimSeconds); }
        public void ReceiveAnyDamage(float Damage, DamageType DamageType, Controller InstigatedBy, Actor DamageCauser) { Invoke(nameof(ReceiveAnyDamage), Damage, DamageType, InstigatedBy, DamageCauser); }
        public void ReceiveActorOnReleased(Key ButtonReleased) { Invoke(nameof(ReceiveActorOnReleased), ButtonReleased); }
        public void ReceiveActorOnInputTouchLeave(byte FingerIndex) { Invoke(nameof(ReceiveActorOnInputTouchLeave), FingerIndex); }
        public void ReceiveActorOnInputTouchEnter(byte FingerIndex) { Invoke(nameof(ReceiveActorOnInputTouchEnter), FingerIndex); }
        public void ReceiveActorOnInputTouchEnd(byte FingerIndex) { Invoke(nameof(ReceiveActorOnInputTouchEnd), FingerIndex); }
        public void ReceiveActorOnInputTouchBegin(byte FingerIndex) { Invoke(nameof(ReceiveActorOnInputTouchBegin), FingerIndex); }
        public void ReceiveActorOnClicked(Key ButtonPressed) { Invoke(nameof(ReceiveActorOnClicked), ButtonPressed); }
        public void ReceiveActorEndOverlap(Actor OtherActor) { Invoke(nameof(ReceiveActorEndOverlap), OtherActor); }
        public void ReceiveActorEndCursorOver() { Invoke(nameof(ReceiveActorEndCursorOver)); }
        public void ReceiveActorBeginOverlap(Actor OtherActor) { Invoke(nameof(ReceiveActorBeginOverlap), OtherActor); }
        public void ReceiveActorBeginCursorOver() { Invoke(nameof(ReceiveActorBeginCursorOver)); }
        public void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups) { Invoke(nameof(PrestreamTextures), Seconds, bEnableStreaming, CinematicTextureGroups); }
        public void OnRep_ReplicateMovement() { Invoke(nameof(OnRep_ReplicateMovement)); }
        public void OnRep_ReplicatedMovement() { Invoke(nameof(OnRep_ReplicatedMovement)); }
        public void OnRep_Owner() { Invoke(nameof(OnRep_Owner)); }
        public void OnRep_Instigator() { Invoke(nameof(OnRep_Instigator)); }
        public void OnRep_AttachmentReplication() { Invoke(nameof(OnRep_AttachmentReplication)); }
        public void MakeNoise(float Loudness, Pawn NoiseInstigator, Vector NoiseLocation, float MaxRange, Object Tag) { Invoke(nameof(MakeNoise), Loudness, NoiseInstigator, NoiseLocation, MaxRange, Tag); }
        public bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation) { return Invoke<bool>(nameof(K2_TeleportTo), DestLocation, DestRotation); }
        public bool K2_SetActorTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { return Invoke<bool>(nameof(K2_SetActorTransform), NewTransform, bSweep, SweepHitResult, bTeleport); }
        public bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics) { return Invoke<bool>(nameof(K2_SetActorRotation), NewRotation, bTeleportPhysics); }
        public void K2_SetActorRelativeTransform(Transform NewRelativeTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetActorRelativeTransform), NewRelativeTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetActorRelativeRotation), NewRelativeRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetActorRelativeLocation), NewRelativeLocation, bSweep, SweepHitResult, bTeleport); }
        public bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { return Invoke<bool>(nameof(K2_SetActorLocationAndRotation), NewLocation, NewRotation, bSweep, SweepHitResult, bTeleport); }
        public bool K2_SetActorLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { return Invoke<bool>(nameof(K2_SetActorLocation), NewLocation, bSweep, SweepHitResult, bTeleport); }
        public void K2_OnReset() { Invoke(nameof(K2_OnReset)); }
        public void K2_OnEndViewTarget(PlayerController PC) { Invoke(nameof(K2_OnEndViewTarget), PC); }
        public void K2_OnBecomeViewTarget(PlayerController PC) { Invoke(nameof(K2_OnBecomeViewTarget), PC); }
        public SceneComponent K2_GetRootComponent() { return Invoke<SceneComponent>(nameof(K2_GetRootComponent)); }
        public Array<ActorComponent> K2_GetComponentsByClass(Object ComponentClass) { return Invoke<Array<ActorComponent>>(nameof(K2_GetComponentsByClass), ComponentClass); }
        public Rotator K2_GetActorRotation() { return Invoke<Rotator>(nameof(K2_GetActorRotation)); }
        public Vector K2_GetActorLocation() { return Invoke<Vector>(nameof(K2_GetActorLocation)); }
        public void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule) { Invoke(nameof(K2_DetachFromActor), LocationRule, RotationRule, ScaleRule); }
        public void K2_DestroyActor() { Invoke(nameof(K2_DestroyActor)); }
        public void K2_AttachToComponent(SceneComponent Parent, Object SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) { Invoke(nameof(K2_AttachToComponent), Parent, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies); }
        public void K2_AttachToActor(Actor ParentActor, Object SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) { Invoke(nameof(K2_AttachToActor), ParentActor, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies); }
        public void K2_AttachRootComponentToActor(Actor InParentActor, Object InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies) { Invoke(nameof(K2_AttachRootComponentToActor), InParentActor, InSocketName, AttachLocationType, bWeldSimulatedBodies); }
        public void K2_AttachRootComponentTo(SceneComponent InParent, Object InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies) { Invoke(nameof(K2_AttachRootComponentTo), InParent, InSocketName, AttachLocationType, bWeldSimulatedBodies); }
        public void K2_AddActorWorldTransformKeepScale(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorWorldTransformKeepScale), DeltaTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorWorldTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorWorldTransform), DeltaTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorWorldRotation), DeltaRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorWorldOffset), DeltaLocation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorLocalTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorLocalTransform), NewTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorLocalRotation), DeltaRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddActorLocalOffset), DeltaLocation, bSweep, SweepHitResult, bTeleport); }
        public bool IsOverlappingActor(Actor Other) { return Invoke<bool>(nameof(IsOverlappingActor), Other); }
        public bool IsChildActor() { return Invoke<bool>(nameof(IsChildActor)); }
        public bool IsActorTickEnabled() { return Invoke<bool>(nameof(IsActorTickEnabled)); }
        public bool IsActorBeingDestroyed() { return Invoke<bool>(nameof(IsActorBeingDestroyed)); }
        public bool HasAuthority() { return Invoke<bool>(nameof(HasAuthority)); }
        public float GetVerticalDistanceTo(Actor OtherActor) { return Invoke<float>(nameof(GetVerticalDistanceTo), OtherActor); }
        public Vector GetVelocity() { return Invoke<Vector>(nameof(GetVelocity)); }
        public Transform GetTransform() { return Invoke<Transform>(nameof(GetTransform)); }
        public bool GetTickableWhenPaused() { return Invoke<bool>(nameof(GetTickableWhenPaused)); }
        public float GetSquaredHorizontalDistanceTo(Actor OtherActor) { return Invoke<float>(nameof(GetSquaredHorizontalDistanceTo), OtherActor); }
        public float GetSquaredDistanceTo(Actor OtherActor) { return Invoke<float>(nameof(GetSquaredDistanceTo), OtherActor); }
        public byte GetRemoteRole() { return Invoke<byte>(nameof(GetRemoteRole)); }
        public int GetRayTracingGroupId() { return Invoke<int>(nameof(GetRayTracingGroupId)); }
        public ChildActorComponent GetParentComponent() { return Invoke<ChildActorComponent>(nameof(GetParentComponent)); }
        public Actor GetParentActor() { return Invoke<Actor>(nameof(GetParentActor)); }
        public Actor GetOwner() { return Invoke<Actor>(nameof(GetOwner)); }
        public void GetOverlappingComponents(Array<PrimitiveComponent> OverlappingComponents) { Invoke(nameof(GetOverlappingComponents), OverlappingComponents); }
        public void GetOverlappingActors(Array<Actor> OverlappingActors, Object ClassFilter) { Invoke(nameof(GetOverlappingActors), OverlappingActors, ClassFilter); }
        public byte GetLocalRole() { return Invoke<byte>(nameof(GetLocalRole)); }
        public float GetLifeSpan() { return Invoke<float>(nameof(GetLifeSpan)); }
        public Transform GetLevelTransform() { return Invoke<Transform>(nameof(GetLevelTransform)); }
        public Level GetLevel() { return Invoke<Level>(nameof(GetLevel)); }
        public Controller GetInstigatorController() { return Invoke<Controller>(nameof(GetInstigatorController)); }
        public Pawn GetInstigator() { return Invoke<Pawn>(nameof(GetInstigator)); }
        public Vector GetInputVectorAxisValue(Key InputAxisKey) { return Invoke<Vector>(nameof(GetInputVectorAxisValue), InputAxisKey); }
        public float GetInputAxisValue(Object InputAxisName) { return Invoke<float>(nameof(GetInputAxisValue), InputAxisName); }
        public float GetInputAxisKeyValue(Key InputAxisKey) { return Invoke<float>(nameof(GetInputAxisKeyValue), InputAxisKey); }
        public float GetHorizontalDotProductTo(Actor OtherActor) { return Invoke<float>(nameof(GetHorizontalDotProductTo), OtherActor); }
        public float GetHorizontalDistanceTo(Actor OtherActor) { return Invoke<float>(nameof(GetHorizontalDistanceTo), OtherActor); }
        public float GetGameTimeSinceCreation() { return Invoke<float>(nameof(GetGameTimeSinceCreation)); }
        public float GetDotProductTo(Actor OtherActor) { return Invoke<float>(nameof(GetDotProductTo), OtherActor); }
        public float GetDistanceTo(Actor OtherActor) { return Invoke<float>(nameof(GetDistanceTo), OtherActor); }
        public Array<ActorComponent> GetComponentsByTag(Object ComponentClass, Object Tag) { return Invoke<Array<ActorComponent>>(nameof(GetComponentsByTag), ComponentClass, Tag); }
        public Array<ActorComponent> GetComponentsByInterface(Object Interface) { return Invoke<Array<ActorComponent>>(nameof(GetComponentsByInterface), Interface); }
        public ActorComponent GetComponentByClass(Object ComponentClass) { return Invoke<ActorComponent>(nameof(GetComponentByClass), ComponentClass); }
        public Object GetAttachParentSocketName() { return Invoke<Object>(nameof(GetAttachParentSocketName)); }
        public Actor GetAttachParentActor() { return Invoke<Actor>(nameof(GetAttachParentActor)); }
        public void GetAttachedActors(Array<Actor> OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors) { Invoke(nameof(GetAttachedActors), OutActors, bResetArray, bRecursivelyIncludeAttachedActors); }
        public void GetAllChildActors(Array<Actor> ChildActors, bool bIncludeDescendants) { Invoke(nameof(GetAllChildActors), ChildActors, bIncludeDescendants); }
        public Vector GetActorUpVector() { return Invoke<Vector>(nameof(GetActorUpVector)); }
        public float GetActorTimeDilation() { return Invoke<float>(nameof(GetActorTimeDilation)); }
        public float GetActorTickInterval() { return Invoke<float>(nameof(GetActorTickInterval)); }
        public Vector GetActorScale3D() { return Invoke<Vector>(nameof(GetActorScale3D)); }
        public Vector GetActorRightVector() { return Invoke<Vector>(nameof(GetActorRightVector)); }
        public Vector GetActorRelativeScale3D() { return Invoke<Vector>(nameof(GetActorRelativeScale3D)); }
        public Vector GetActorForwardVector() { return Invoke<Vector>(nameof(GetActorForwardVector)); }
        public void GetActorEyesViewPoint(Vector OutLocation, Rotator OutRotation) { Invoke(nameof(GetActorEyesViewPoint), OutLocation, OutRotation); }
        public bool GetActorEnableCollision() { return Invoke<bool>(nameof(GetActorEnableCollision)); }
        public void GetActorBounds(bool bOnlyCollidingComponents, Vector Origin, Vector BoxExtent, bool bIncludeFromChildActors) { Invoke(nameof(GetActorBounds), bOnlyCollidingComponents, Origin, BoxExtent, bIncludeFromChildActors); }
        public void ForceNetUpdate() { Invoke(nameof(ForceNetUpdate)); }
        public void FlushNetDormancy() { Invoke(nameof(FlushNetDormancy)); }
        public void FinishAddComponent(ActorComponent Component, bool bManualAttachment, Transform RelativeTransform) { Invoke(nameof(FinishAddComponent), Component, bManualAttachment, RelativeTransform); }
        public void EnableInput(PlayerController PlayerController) { Invoke(nameof(EnableInput), PlayerController); }
        public void DisableInput(PlayerController PlayerController) { Invoke(nameof(DisableInput), PlayerController); }
        public void DetachRootComponentFromParent(bool bMaintainWorldPosition) { Invoke(nameof(DetachRootComponentFromParent), bMaintainWorldPosition); }
        public void AddTickPrerequisiteComponent(ActorComponent PrerequisiteComponent) { Invoke(nameof(AddTickPrerequisiteComponent), PrerequisiteComponent); }
        public void AddTickPrerequisiteActor(Actor PrerequisiteActor) { Invoke(nameof(AddTickPrerequisiteActor), PrerequisiteActor); }
        public ActorComponent AddComponentByClass(Object Class, bool bManualAttachment, Transform RelativeTransform, bool bDeferredFinish) { return Invoke<ActorComponent>(nameof(AddComponentByClass), Class, bManualAttachment, RelativeTransform, bDeferredFinish); }
        public ActorComponent AddComponent(Object TemplateName, bool bManualAttachment, Transform RelativeTransform, Object ComponentTemplateContext, bool bDeferredFinish) { return Invoke<ActorComponent>(nameof(AddComponent), TemplateName, bManualAttachment, RelativeTransform, ComponentTemplateContext, bDeferredFinish); }
        public bool ActorHasTag(Object Tag) { return Invoke<bool>(nameof(ActorHasTag), Tag); }
    }
    public class Subsystem : Object
    {
        public Subsystem(nint addr) : base(addr) { }
    }
    public class DynamicSubsystem : Subsystem
    {
        public DynamicSubsystem(nint addr) : base(addr) { }
    }
    public class EngineSubsystem : DynamicSubsystem
    {
        public EngineSubsystem(nint addr) : base(addr) { }
    }
    public class SceneComponent : ActorComponent
    {
        public SceneComponent(nint addr) : base(addr) { }
        public Object PhysicsVolume { get { return this[nameof(PhysicsVolume)]; } set { this[nameof(PhysicsVolume)] = value; } }
        public SceneComponent AttachParent { get { return this[nameof(AttachParent)].As<SceneComponent>(); } set { this["AttachParent"] = value; } }
        public Object AttachSocketName { get { return this[nameof(AttachSocketName)]; } set { this[nameof(AttachSocketName)] = value; } }
        public Array<SceneComponent> AttachChildren { get { return new Array<SceneComponent>(this[nameof(AttachChildren)].Address); } }
        public Array<SceneComponent> ClientAttachedChildren { get { return new Array<SceneComponent>(this[nameof(ClientAttachedChildren)].Address); } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector>(); } set { this["RelativeScale3D"] = value; } }
        public Vector ComponentVelocity { get { return this[nameof(ComponentVelocity)].As<Vector>(); } set { this["ComponentVelocity"] = value; } }
        public bool bComponentToWorldUpdated { get { return this[nameof(bComponentToWorldUpdated)].Flag; } set { this[nameof(bComponentToWorldUpdated)].Flag = value; } }
        public bool bAbsoluteLocation { get { return this[nameof(bAbsoluteLocation)].Flag; } set { this[nameof(bAbsoluteLocation)].Flag = value; } }
        public bool bAbsoluteRotation { get { return this[nameof(bAbsoluteRotation)].Flag; } set { this[nameof(bAbsoluteRotation)].Flag = value; } }
        public bool bAbsoluteScale { get { return this[nameof(bAbsoluteScale)].Flag; } set { this[nameof(bAbsoluteScale)].Flag = value; } }
        public bool bVisible { get { return this[nameof(bVisible)].Flag; } set { this[nameof(bVisible)].Flag = value; } }
        public bool bShouldBeAttached { get { return this[nameof(bShouldBeAttached)].Flag; } set { this[nameof(bShouldBeAttached)].Flag = value; } }
        public bool bShouldSnapLocationWhenAttached { get { return this[nameof(bShouldSnapLocationWhenAttached)].Flag; } set { this[nameof(bShouldSnapLocationWhenAttached)].Flag = value; } }
        public bool bShouldSnapRotationWhenAttached { get { return this[nameof(bShouldSnapRotationWhenAttached)].Flag; } set { this[nameof(bShouldSnapRotationWhenAttached)].Flag = value; } }
        public bool bShouldSnapScaleWhenAttached { get { return this[nameof(bShouldSnapScaleWhenAttached)].Flag; } set { this[nameof(bShouldSnapScaleWhenAttached)].Flag = value; } }
        public bool bShouldUpdatePhysicsVolume { get { return this[nameof(bShouldUpdatePhysicsVolume)].Flag; } set { this[nameof(bShouldUpdatePhysicsVolume)].Flag = value; } }
        public bool bHiddenInGame { get { return this[nameof(bHiddenInGame)].Flag; } set { this[nameof(bHiddenInGame)].Flag = value; } }
        public bool bBoundsChangeTriggersStreamingDataRebuild { get { return this[nameof(bBoundsChangeTriggersStreamingDataRebuild)].Flag; } set { this[nameof(bBoundsChangeTriggersStreamingDataRebuild)].Flag = value; } }
        public bool bUseAttachParentBound { get { return this[nameof(bUseAttachParentBound)].Flag; } set { this[nameof(bUseAttachParentBound)].Flag = value; } }
        public bool bComputeFastLocalBounds { get { return this[nameof(bComputeFastLocalBounds)].Flag; } set { this[nameof(bComputeFastLocalBounds)].Flag = value; } }
        public bool bComputeBoundsOnceForGame { get { return this[nameof(bComputeBoundsOnceForGame)].Flag; } set { this[nameof(bComputeBoundsOnceForGame)].Flag = value; } }
        public bool bComputedBoundsOnceForGame { get { return this[nameof(bComputedBoundsOnceForGame)].Flag; } set { this[nameof(bComputedBoundsOnceForGame)].Flag = value; } }
        public bool bIsNotRenderAttachmentRoot { get { return this[nameof(bIsNotRenderAttachmentRoot)].Flag; } set { this[nameof(bIsNotRenderAttachmentRoot)].Flag = value; } }
        public byte Mobility { get { return this[nameof(Mobility)].GetValue<byte>(); } set { this[nameof(Mobility)].SetValue<byte>(value); } }
        public byte DetailMode { get { return this[nameof(DetailMode)].GetValue<byte>(); } set { this[nameof(DetailMode)].SetValue<byte>(value); } }
        public Object PhysicsVolumeChangedDelegate { get { return this[nameof(PhysicsVolumeChangedDelegate)]; } set { this[nameof(PhysicsVolumeChangedDelegate)] = value; } }
        public void ToggleVisibility(bool bPropagateToChildren) { Invoke(nameof(ToggleVisibility), bPropagateToChildren); }
        public void SetWorldScale3D(Vector NewScale) { Invoke(nameof(SetWorldScale3D), NewScale); }
        public void SetVisibility(bool bNewVisibility, bool bPropagateToChildren) { Invoke(nameof(SetVisibility), bNewVisibility, bPropagateToChildren); }
        public void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume) { Invoke(nameof(SetShouldUpdatePhysicsVolume), bInShouldUpdatePhysicsVolume); }
        public void SetRelativeScale3D(Vector NewScale3D) { Invoke(nameof(SetRelativeScale3D), NewScale3D); }
        public void SetMobility(byte NewMobility) { Invoke(nameof(SetMobility), NewMobility); }
        public void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren) { Invoke(nameof(SetHiddenInGame), NewHidden, bPropagateToChildren); }
        public void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale) { Invoke(nameof(SetAbsolute), bNewAbsoluteLocation, bNewAbsoluteRotation, bNewAbsoluteScale); }
        public void ResetRelativeTransform() { Invoke(nameof(ResetRelativeTransform)); }
        public void OnRep_Visibility(bool OldValue) { Invoke(nameof(OnRep_Visibility), OldValue); }
        public void OnRep_Transform() { Invoke(nameof(OnRep_Transform)); }
        public void OnRep_AttachSocketName() { Invoke(nameof(OnRep_AttachSocketName)); }
        public void OnRep_AttachParent() { Invoke(nameof(OnRep_AttachParent)); }
        public void OnRep_AttachChildren() { Invoke(nameof(OnRep_AttachChildren)); }
        public void K2_SetWorldTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetWorldTransform), NewTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetWorldRotation), NewRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetWorldLocationAndRotation), NewLocation, NewRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetWorldLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetWorldLocation), NewLocation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetRelativeTransform(Transform NewTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetRelativeTransform), NewTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetRelativeRotation), NewRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetRelativeLocationAndRotation), NewLocation, NewRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_SetRelativeLocation), NewLocation, bSweep, SweepHitResult, bTeleport); }
        public Transform K2_GetComponentToWorld() { return Invoke<Transform>(nameof(K2_GetComponentToWorld)); }
        public Vector K2_GetComponentScale() { return Invoke<Vector>(nameof(K2_GetComponentScale)); }
        public Rotator K2_GetComponentRotation() { return Invoke<Rotator>(nameof(K2_GetComponentRotation)); }
        public Vector K2_GetComponentLocation() { return Invoke<Vector>(nameof(K2_GetComponentLocation)); }
        public void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify) { Invoke(nameof(K2_DetachFromComponent), LocationRule, RotationRule, ScaleRule, bCallModify); }
        public bool K2_AttachToComponent(SceneComponent Parent, Object SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies) { return Invoke<bool>(nameof(K2_AttachToComponent), Parent, SocketName, LocationRule, RotationRule, ScaleRule, bWeldSimulatedBodies); }
        public bool K2_AttachTo(SceneComponent InParent, Object InSocketName, byte AttachType, bool bWeldSimulatedBodies) { return Invoke<bool>(nameof(K2_AttachTo), InParent, InSocketName, AttachType, bWeldSimulatedBodies); }
        public void K2_AddWorldTransformKeepScale(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddWorldTransformKeepScale), DeltaTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddWorldTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddWorldTransform), DeltaTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddWorldRotation), DeltaRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddWorldOffset), DeltaLocation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddRelativeRotation), DeltaRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddRelativeLocation), DeltaLocation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddLocalTransform(Transform DeltaTransform, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddLocalTransform), DeltaTransform, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddLocalRotation), DeltaRotation, bSweep, SweepHitResult, bTeleport); }
        public void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, HitResult SweepHitResult, bool bTeleport) { Invoke(nameof(K2_AddLocalOffset), DeltaLocation, bSweep, SweepHitResult, bTeleport); }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public bool IsSimulatingPhysics(Object BoneName) { return Invoke<bool>(nameof(IsSimulatingPhysics), BoneName); }
        public bool IsAnySimulatingPhysics() { return Invoke<bool>(nameof(IsAnySimulatingPhysics)); }
        public Vector GetUpVector() { return Invoke<Vector>(nameof(GetUpVector)); }
        public Transform GetSocketTransform(Object InSocketName, byte TransformSpace) { return Invoke<Transform>(nameof(GetSocketTransform), InSocketName, TransformSpace); }
        public Rotator GetSocketRotation(Object InSocketName) { return Invoke<Rotator>(nameof(GetSocketRotation), InSocketName); }
        public Quat GetSocketQuaternion(Object InSocketName) { return Invoke<Quat>(nameof(GetSocketQuaternion), InSocketName); }
        public Vector GetSocketLocation(Object InSocketName) { return Invoke<Vector>(nameof(GetSocketLocation), InSocketName); }
        public bool GetShouldUpdatePhysicsVolume() { return Invoke<bool>(nameof(GetShouldUpdatePhysicsVolume)); }
        public Vector GetRightVector() { return Invoke<Vector>(nameof(GetRightVector)); }
        public Transform GetRelativeTransform() { return Invoke<Transform>(nameof(GetRelativeTransform)); }
        public PhysicsVolume GetPhysicsVolume() { return Invoke<PhysicsVolume>(nameof(GetPhysicsVolume)); }
        public void GetParentComponents(Array<SceneComponent> Parents) { Invoke(nameof(GetParentComponents), Parents); }
        public int GetNumChildrenComponents() { return Invoke<int>(nameof(GetNumChildrenComponents)); }
        public Vector GetForwardVector() { return Invoke<Vector>(nameof(GetForwardVector)); }
        public Vector GetComponentVelocity() { return Invoke<Vector>(nameof(GetComponentVelocity)); }
        public void GetChildrenComponents(bool bIncludeAllDescendants, Array<SceneComponent> Children) { Invoke(nameof(GetChildrenComponents), bIncludeAllDescendants, Children); }
        public SceneComponent GetChildComponent(int ChildIndex) { return Invoke<SceneComponent>(nameof(GetChildComponent), ChildIndex); }
        public Object GetAttachSocketName() { return Invoke<Object>(nameof(GetAttachSocketName)); }
        public SceneComponent GetAttachParent() { return Invoke<SceneComponent>(nameof(GetAttachParent)); }
        public Array<Object> GetAllSocketNames() { return Invoke<Array<Object>>(nameof(GetAllSocketNames)); }
        public bool DoesSocketExist(Object InSocketName) { return Invoke<bool>(nameof(DoesSocketExist), InSocketName); }
        public void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify) { Invoke(nameof(DetachFromParent), bMaintainWorldPosition, bCallModify); }
    }
    public class PrimitiveComponent : SceneComponent
    {
        public PrimitiveComponent(nint addr) : base(addr) { }
        public float MinDrawDistance { get { return this[nameof(MinDrawDistance)].GetValue<float>(); } set { this[nameof(MinDrawDistance)].SetValue<float>(value); } }
        public float LDMaxDrawDistance { get { return this[nameof(LDMaxDrawDistance)].GetValue<float>(); } set { this[nameof(LDMaxDrawDistance)].SetValue<float>(value); } }
        public float CachedMaxDrawDistance { get { return this[nameof(CachedMaxDrawDistance)].GetValue<float>(); } set { this[nameof(CachedMaxDrawDistance)].SetValue<float>(value); } }
        public byte DepthPriorityGroup { get { return this[nameof(DepthPriorityGroup)].GetValue<byte>(); } set { this[nameof(DepthPriorityGroup)].SetValue<byte>(value); } }
        public byte ViewOwnerDepthPriorityGroup { get { return this[nameof(ViewOwnerDepthPriorityGroup)].GetValue<byte>(); } set { this[nameof(ViewOwnerDepthPriorityGroup)].SetValue<byte>(value); } }
        public byte IndirectLightingCacheQuality { get { return this[nameof(IndirectLightingCacheQuality)].GetValue<byte>(); } set { this[nameof(IndirectLightingCacheQuality)].SetValue<byte>(value); } }
        public ELightmapType LightmapType { get { return (ELightmapType)this[nameof(LightmapType)].GetValue<int>(); } set { this[nameof(LightmapType)].SetValue<int>((int)value); } }
        public bool bIsValidTextureStreamingBuiltData { get { return this[nameof(bIsValidTextureStreamingBuiltData)].Flag; } set { this[nameof(bIsValidTextureStreamingBuiltData)].Flag = value; } }
        public bool bNeverDistanceCull { get { return this[nameof(bNeverDistanceCull)].Flag; } set { this[nameof(bNeverDistanceCull)].Flag = value; } }
        public bool bAlwaysCreatePhysicsState { get { return this[nameof(bAlwaysCreatePhysicsState)].Flag; } set { this[nameof(bAlwaysCreatePhysicsState)].Flag = value; } }
        public bool bGenerateOverlapEvents { get { return this[nameof(bGenerateOverlapEvents)].Flag; } set { this[nameof(bGenerateOverlapEvents)].Flag = value; } }
        public bool bMultiBodyOverlap { get { return this[nameof(bMultiBodyOverlap)].Flag; } set { this[nameof(bMultiBodyOverlap)].Flag = value; } }
        public bool bTraceComplexOnMove { get { return this[nameof(bTraceComplexOnMove)].Flag; } set { this[nameof(bTraceComplexOnMove)].Flag = value; } }
        public bool bReturnMaterialOnMove { get { return this[nameof(bReturnMaterialOnMove)].Flag; } set { this[nameof(bReturnMaterialOnMove)].Flag = value; } }
        public bool bUseViewOwnerDepthPriorityGroup { get { return this[nameof(bUseViewOwnerDepthPriorityGroup)].Flag; } set { this[nameof(bUseViewOwnerDepthPriorityGroup)].Flag = value; } }
        public bool bAllowCullDistanceVolume { get { return this[nameof(bAllowCullDistanceVolume)].Flag; } set { this[nameof(bAllowCullDistanceVolume)].Flag = value; } }
        public bool bVisibleInReflectionCaptures { get { return this[nameof(bVisibleInReflectionCaptures)].Flag; } set { this[nameof(bVisibleInReflectionCaptures)].Flag = value; } }
        public bool bVisibleInRealTimeSkyCaptures { get { return this[nameof(bVisibleInRealTimeSkyCaptures)].Flag; } set { this[nameof(bVisibleInRealTimeSkyCaptures)].Flag = value; } }
        public bool bVisibleInRayTracing { get { return this[nameof(bVisibleInRayTracing)].Flag; } set { this[nameof(bVisibleInRayTracing)].Flag = value; } }
        public bool bRenderInMainPass { get { return this[nameof(bRenderInMainPass)].Flag; } set { this[nameof(bRenderInMainPass)].Flag = value; } }
        public bool bRenderInDepthPass { get { return this[nameof(bRenderInDepthPass)].Flag; } set { this[nameof(bRenderInDepthPass)].Flag = value; } }
        public bool bReceivesDecals { get { return this[nameof(bReceivesDecals)].Flag; } set { this[nameof(bReceivesDecals)].Flag = value; } }
        public bool bOwnerNoSee { get { return this[nameof(bOwnerNoSee)].Flag; } set { this[nameof(bOwnerNoSee)].Flag = value; } }
        public bool bOnlyOwnerSee { get { return this[nameof(bOnlyOwnerSee)].Flag; } set { this[nameof(bOnlyOwnerSee)].Flag = value; } }
        public bool bTreatAsBackgroundForOcclusion { get { return this[nameof(bTreatAsBackgroundForOcclusion)].Flag; } set { this[nameof(bTreatAsBackgroundForOcclusion)].Flag = value; } }
        public bool bUseAsOccluder { get { return this[nameof(bUseAsOccluder)].Flag; } set { this[nameof(bUseAsOccluder)].Flag = value; } }
        public bool bSelectable { get { return this[nameof(bSelectable)].Flag; } set { this[nameof(bSelectable)].Flag = value; } }
        public bool bForceMipStreaming { get { return this[nameof(bForceMipStreaming)].Flag; } set { this[nameof(bForceMipStreaming)].Flag = value; } }
        public bool bHasPerInstanceHitProxies { get { return this[nameof(bHasPerInstanceHitProxies)].Flag; } set { this[nameof(bHasPerInstanceHitProxies)].Flag = value; } }
        public bool CastShadow { get { return this[nameof(CastShadow)].Flag; } set { this[nameof(CastShadow)].Flag = value; } }
        public bool bEmissiveLightSource { get { return this[nameof(bEmissiveLightSource)].Flag; } set { this[nameof(bEmissiveLightSource)].Flag = value; } }
        public bool bAffectDynamicIndirectLighting { get { return this[nameof(bAffectDynamicIndirectLighting)].Flag; } set { this[nameof(bAffectDynamicIndirectLighting)].Flag = value; } }
        public bool bAffectIndirectLightingWhileHidden { get { return this[nameof(bAffectIndirectLightingWhileHidden)].Flag; } set { this[nameof(bAffectIndirectLightingWhileHidden)].Flag = value; } }
        public bool bAffectDistanceFieldLighting { get { return this[nameof(bAffectDistanceFieldLighting)].Flag; } set { this[nameof(bAffectDistanceFieldLighting)].Flag = value; } }
        public bool bCastDynamicShadow { get { return this[nameof(bCastDynamicShadow)].Flag; } set { this[nameof(bCastDynamicShadow)].Flag = value; } }
        public bool bCastStaticShadow { get { return this[nameof(bCastStaticShadow)].Flag; } set { this[nameof(bCastStaticShadow)].Flag = value; } }
        public bool bCastVolumetricTranslucentShadow { get { return this[nameof(bCastVolumetricTranslucentShadow)].Flag; } set { this[nameof(bCastVolumetricTranslucentShadow)].Flag = value; } }
        public bool bCastContactShadow { get { return this[nameof(bCastContactShadow)].Flag; } set { this[nameof(bCastContactShadow)].Flag = value; } }
        public bool bSelfShadowOnly { get { return this[nameof(bSelfShadowOnly)].Flag; } set { this[nameof(bSelfShadowOnly)].Flag = value; } }
        public bool bCastFarShadow { get { return this[nameof(bCastFarShadow)].Flag; } set { this[nameof(bCastFarShadow)].Flag = value; } }
        public bool bCastInsetShadow { get { return this[nameof(bCastInsetShadow)].Flag; } set { this[nameof(bCastInsetShadow)].Flag = value; } }
        public bool bCastCinematicShadow { get { return this[nameof(bCastCinematicShadow)].Flag; } set { this[nameof(bCastCinematicShadow)].Flag = value; } }
        public bool bCastHiddenShadow { get { return this[nameof(bCastHiddenShadow)].Flag; } set { this[nameof(bCastHiddenShadow)].Flag = value; } }
        public bool bCastShadowAsTwoSided { get { return this[nameof(bCastShadowAsTwoSided)].Flag; } set { this[nameof(bCastShadowAsTwoSided)].Flag = value; } }
        public bool bLightAsIfStatic { get { return this[nameof(bLightAsIfStatic)].Flag; } set { this[nameof(bLightAsIfStatic)].Flag = value; } }
        public bool bLightAttachmentsAsGroup { get { return this[nameof(bLightAttachmentsAsGroup)].Flag; } set { this[nameof(bLightAttachmentsAsGroup)].Flag = value; } }
        public bool bExcludeFromLightAttachmentGroup { get { return this[nameof(bExcludeFromLightAttachmentGroup)].Flag; } set { this[nameof(bExcludeFromLightAttachmentGroup)].Flag = value; } }
        public bool bReceiveMobileCSMShadows { get { return this[nameof(bReceiveMobileCSMShadows)].Flag; } set { this[nameof(bReceiveMobileCSMShadows)].Flag = value; } }
        public bool bSingleSampleShadowFromStationaryLights { get { return this[nameof(bSingleSampleShadowFromStationaryLights)].Flag; } set { this[nameof(bSingleSampleShadowFromStationaryLights)].Flag = value; } }
        public bool bIgnoreRadialImpulse { get { return this[nameof(bIgnoreRadialImpulse)].Flag; } set { this[nameof(bIgnoreRadialImpulse)].Flag = value; } }
        public bool bIgnoreRadialForce { get { return this[nameof(bIgnoreRadialForce)].Flag; } set { this[nameof(bIgnoreRadialForce)].Flag = value; } }
        public bool bApplyImpulseOnDamage { get { return this[nameof(bApplyImpulseOnDamage)].Flag; } set { this[nameof(bApplyImpulseOnDamage)].Flag = value; } }
        public bool bReplicatePhysicsToAutonomousProxy { get { return this[nameof(bReplicatePhysicsToAutonomousProxy)].Flag; } set { this[nameof(bReplicatePhysicsToAutonomousProxy)].Flag = value; } }
        public bool bFillCollisionUnderneathForNavmesh { get { return this[nameof(bFillCollisionUnderneathForNavmesh)].Flag; } set { this[nameof(bFillCollisionUnderneathForNavmesh)].Flag = value; } }
        public bool AlwaysLoadOnClient { get { return this[nameof(AlwaysLoadOnClient)].Flag; } set { this[nameof(AlwaysLoadOnClient)].Flag = value; } }
        public bool AlwaysLoadOnServer { get { return this[nameof(AlwaysLoadOnServer)].Flag; } set { this[nameof(AlwaysLoadOnServer)].Flag = value; } }
        public bool bUseEditorCompositing { get { return this[nameof(bUseEditorCompositing)].Flag; } set { this[nameof(bUseEditorCompositing)].Flag = value; } }
        public bool bIsBeingMovedByEditor { get { return this[nameof(bIsBeingMovedByEditor)].Flag; } set { this[nameof(bIsBeingMovedByEditor)].Flag = value; } }
        public bool bRenderCustomDepth { get { return this[nameof(bRenderCustomDepth)].Flag; } set { this[nameof(bRenderCustomDepth)].Flag = value; } }
        public bool bVisibleInSceneCaptureOnly { get { return this[nameof(bVisibleInSceneCaptureOnly)].Flag; } set { this[nameof(bVisibleInSceneCaptureOnly)].Flag = value; } }
        public bool bHiddenInSceneCapture { get { return this[nameof(bHiddenInSceneCapture)].Flag; } set { this[nameof(bHiddenInSceneCapture)].Flag = value; } }
        public bool bRayTracingFarField { get { return this[nameof(bRayTracingFarField)].Flag; } set { this[nameof(bRayTracingFarField)].Flag = value; } }
        public bool bHasNoStreamableTextures { get { return this[nameof(bHasNoStreamableTextures)].Flag; } set { this[nameof(bHasNoStreamableTextures)].Flag = value; } }
        public byte bHasCustomNavigableGeometry { get { return this[nameof(bHasCustomNavigableGeometry)].GetValue<byte>(); } set { this[nameof(bHasCustomNavigableGeometry)].SetValue<byte>(value); } }
        public byte CanCharacterStepUpOn { get { return this[nameof(CanCharacterStepUpOn)].GetValue<byte>(); } set { this[nameof(CanCharacterStepUpOn)].SetValue<byte>(value); } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public int RayTracingGroupId { get { return this[nameof(RayTracingGroupId)].GetValue<int>(); } set { this[nameof(RayTracingGroupId)].SetValue<int>(value); } }
        public int VisibilityId { get { return this[nameof(VisibilityId)].GetValue<int>(); } set { this[nameof(VisibilityId)].SetValue<int>(value); } }
        public int CustomDepthStencilValue { get { return this[nameof(CustomDepthStencilValue)].GetValue<int>(); } set { this[nameof(CustomDepthStencilValue)].SetValue<int>(value); } }
        public CustomPrimitiveData CustomPrimitiveData { get { return this[nameof(CustomPrimitiveData)].As<CustomPrimitiveData>(); } set { this["CustomPrimitiveData"] = value; } }
        public CustomPrimitiveData CustomPrimitiveDataInternal { get { return this[nameof(CustomPrimitiveDataInternal)].As<CustomPrimitiveData>(); } set { this["CustomPrimitiveDataInternal"] = value; } }
        public int TranslucencySortPriority { get { return this[nameof(TranslucencySortPriority)].GetValue<int>(); } set { this[nameof(TranslucencySortPriority)].SetValue<int>(value); } }
        public float TranslucencySortDistanceOffset { get { return this[nameof(TranslucencySortDistanceOffset)].GetValue<float>(); } set { this[nameof(TranslucencySortDistanceOffset)].SetValue<float>(value); } }
        public Array<RuntimeVirtualTexture> RuntimeVirtualTextures { get { return new Array<RuntimeVirtualTexture>(this[nameof(RuntimeVirtualTextures)].Address); } }
        public byte VirtualTextureLodBias { get { return this[nameof(VirtualTextureLodBias)].GetValue<byte>(); } set { this[nameof(VirtualTextureLodBias)].SetValue<byte>(value); } }
        public byte VirtualTextureCullMips { get { return this[nameof(VirtualTextureCullMips)].GetValue<byte>(); } set { this[nameof(VirtualTextureCullMips)].SetValue<byte>(value); } }
        public byte VirtualTextureMinCoverage { get { return this[nameof(VirtualTextureMinCoverage)].GetValue<byte>(); } set { this[nameof(VirtualTextureMinCoverage)].SetValue<byte>(value); } }
        public ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType { get { return (ERuntimeVirtualTextureMainPassType)this[nameof(VirtualTextureRenderPassType)].GetValue<int>(); } set { this[nameof(VirtualTextureRenderPassType)].SetValue<int>((int)value); } }
        public float BoundsScale { get { return this[nameof(BoundsScale)].GetValue<float>(); } set { this[nameof(BoundsScale)].SetValue<float>(value); } }
        public Array<Actor> MoveIgnoreActors { get { return new Array<Actor>(this[nameof(MoveIgnoreActors)].Address); } }
        public Array<PrimitiveComponent> MoveIgnoreComponents { get { return new Array<PrimitiveComponent>(this[nameof(MoveIgnoreComponents)].Address); } }
        public BodyInstance BodyInstance { get { return this[nameof(BodyInstance)].As<BodyInstance>(); } set { this["BodyInstance"] = value; } }
        public Object OnComponentHit { get { return this[nameof(OnComponentHit)]; } set { this[nameof(OnComponentHit)] = value; } }
        public Object OnComponentBeginOverlap { get { return this[nameof(OnComponentBeginOverlap)]; } set { this[nameof(OnComponentBeginOverlap)] = value; } }
        public Object OnComponentEndOverlap { get { return this[nameof(OnComponentEndOverlap)]; } set { this[nameof(OnComponentEndOverlap)] = value; } }
        public Object OnComponentWake { get { return this[nameof(OnComponentWake)]; } set { this[nameof(OnComponentWake)] = value; } }
        public Object OnComponentSleep { get { return this[nameof(OnComponentSleep)]; } set { this[nameof(OnComponentSleep)] = value; } }
        public Object OnComponentPhysicsStateChanged { get { return this[nameof(OnComponentPhysicsStateChanged)]; } set { this[nameof(OnComponentPhysicsStateChanged)] = value; } }
        public Object OnBeginCursorOver { get { return this[nameof(OnBeginCursorOver)]; } set { this[nameof(OnBeginCursorOver)] = value; } }
        public Object OnEndCursorOver { get { return this[nameof(OnEndCursorOver)]; } set { this[nameof(OnEndCursorOver)] = value; } }
        public Object OnClicked { get { return this[nameof(OnClicked)]; } set { this[nameof(OnClicked)] = value; } }
        public Object OnReleased { get { return this[nameof(OnReleased)]; } set { this[nameof(OnReleased)] = value; } }
        public Object OnInputTouchBegin { get { return this[nameof(OnInputTouchBegin)]; } set { this[nameof(OnInputTouchBegin)] = value; } }
        public Object OnInputTouchEnd { get { return this[nameof(OnInputTouchEnd)]; } set { this[nameof(OnInputTouchEnd)] = value; } }
        public Object OnInputTouchEnter { get { return this[nameof(OnInputTouchEnter)]; } set { this[nameof(OnInputTouchEnter)] = value; } }
        public Object OnInputTouchLeave { get { return this[nameof(OnInputTouchLeave)]; } set { this[nameof(OnInputTouchLeave)] = value; } }
        public ERayTracingGroupCullingPriority RayTracingGroupCullingPriority { get { return (ERayTracingGroupCullingPriority)this[nameof(RayTracingGroupCullingPriority)].GetValue<int>(); } set { this[nameof(RayTracingGroupCullingPriority)].SetValue<int>((int)value); } }
        public ERendererStencilMask CustomDepthStencilWriteMask { get { return (ERendererStencilMask)this[nameof(CustomDepthStencilWriteMask)].GetValue<int>(); } set { this[nameof(CustomDepthStencilWriteMask)].SetValue<int>((int)value); } }
        public PrimitiveComponent LODParentPrimitive { get { return this[nameof(LODParentPrimitive)].As<PrimitiveComponent>(); } set { this["LODParentPrimitive"] = value; } }
        public bool WasRecentlyRendered(float Tolerance) { return Invoke<bool>(nameof(WasRecentlyRendered), Tolerance); }
        public void WakeRigidBody(Object BoneName) { Invoke(nameof(WakeRigidBody), BoneName); }
        public void WakeAllRigidBodies() { Invoke(nameof(WakeAllRigidBodies)); }
        public void SetWalkableSlopeOverride(WalkableSlopeOverride NewOverride) { Invoke(nameof(SetWalkableSlopeOverride), NewOverride); }
        public void SetVisibleInSceneCaptureOnly(bool bValue) { Invoke(nameof(SetVisibleInSceneCaptureOnly), bValue); }
        public void SetVisibleInRayTracing(bool bNewVisibleInRayTracing) { Invoke(nameof(SetVisibleInRayTracing), bNewVisibleInRayTracing); }
        public void SetVectorParameterForDefaultCustomPrimitiveData(Object ParameterName, Vector4 Value) { Invoke(nameof(SetVectorParameterForDefaultCustomPrimitiveData), ParameterName, Value); }
        public void SetVectorParameterForCustomPrimitiveData(Object ParameterName, Vector4 Value) { Invoke(nameof(SetVectorParameterForCustomPrimitiveData), ParameterName, Value); }
        public void SetUseCCD(bool InUseCCD, Object BoneName) { Invoke(nameof(SetUseCCD), InUseCCD, BoneName); }
        public void SetTranslucentSortPriority(int NewTranslucentSortPriority) { Invoke(nameof(SetTranslucentSortPriority), NewTranslucentSortPriority); }
        public void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset) { Invoke(nameof(SetTranslucencySortDistanceOffset), NewTranslucencySortDistanceOffset); }
        public void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights) { Invoke(nameof(SetSingleSampleShadowFromStationaryLights), bNewSingleSampleShadowFromStationaryLights); }
        public void SetSimulatePhysics(bool bSimulate) { Invoke(nameof(SetSimulatePhysics), bSimulate); }
        public void SetScalarParameterForDefaultCustomPrimitiveData(Object ParameterName, float Value) { Invoke(nameof(SetScalarParameterForDefaultCustomPrimitiveData), ParameterName, Value); }
        public void SetScalarParameterForCustomPrimitiveData(Object ParameterName, float Value) { Invoke(nameof(SetScalarParameterForCustomPrimitiveData), ParameterName, Value); }
        public void SetRenderInMainPass(bool bValue) { Invoke(nameof(SetRenderInMainPass), bValue); }
        public void SetRenderInDepthPass(bool bValue) { Invoke(nameof(SetRenderInDepthPass), bValue); }
        public void SetRenderCustomDepth(bool bValue) { Invoke(nameof(SetRenderCustomDepth), bValue); }
        public void SetReceivesDecals(bool bNewReceivesDecals) { Invoke(nameof(SetReceivesDecals), bNewReceivesDecals); }
        public void SetPhysMaterialOverride(PhysicalMaterial NewPhysMaterial) { Invoke(nameof(SetPhysMaterialOverride), NewPhysMaterial); }
        public void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, Object BoneName) { Invoke(nameof(SetPhysicsMaxAngularVelocityInRadians), NewMaxAngVel, bAddToCurrent, BoneName); }
        public void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, Object BoneName) { Invoke(nameof(SetPhysicsMaxAngularVelocityInDegrees), NewMaxAngVel, bAddToCurrent, BoneName); }
        public void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, Object BoneName) { Invoke(nameof(SetPhysicsLinearVelocity), NewVel, bAddToCurrent, BoneName); }
        public void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, Object BoneName) { Invoke(nameof(SetPhysicsAngularVelocityInRadians), NewAngVel, bAddToCurrent, BoneName); }
        public void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, Object BoneName) { Invoke(nameof(SetPhysicsAngularVelocityInDegrees), NewAngVel, bAddToCurrent, BoneName); }
        public void SetOwnerNoSee(bool bNewOwnerNoSee) { Invoke(nameof(SetOwnerNoSee), bNewOwnerNoSee); }
        public void SetOnlyOwnerSee(bool bNewOnlyOwnerSee) { Invoke(nameof(SetOnlyOwnerSee), bNewOnlyOwnerSee); }
        public void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision) { Invoke(nameof(SetNotifyRigidBodyCollision), bNewNotifyRigidBodyCollision); }
        public void SetMaterialByName(Object MaterialSlotName, MaterialInterface Material) { Invoke(nameof(SetMaterialByName), MaterialSlotName, Material); }
        public void SetMaterial(int ElementIndex, MaterialInterface Material) { Invoke(nameof(SetMaterial), ElementIndex, Material); }
        public void SetMassScale(Object BoneName, float InMassScale) { Invoke(nameof(SetMassScale), BoneName, InMassScale); }
        public void SetMassOverrideInKg(Object BoneName, float MassInKg, bool bOverrideMass) { Invoke(nameof(SetMassOverrideInKg), BoneName, MassInKg, bOverrideMass); }
        public void SetLinearDamping(float InDamping) { Invoke(nameof(SetLinearDamping), InDamping); }
        public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2) { Invoke(nameof(SetLightingChannels), bChannel0, bChannel1, bChannel2); }
        public void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup) { Invoke(nameof(SetLightAttachmentsAsGroup), bInLightAttachmentsAsGroup); }
        public void SetHiddenInSceneCapture(bool bValue) { Invoke(nameof(SetHiddenInSceneCapture), bValue); }
        public void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents) { Invoke(nameof(SetGenerateOverlapEvents), bInGenerateOverlapEvents); }
        public void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup) { Invoke(nameof(SetExcludeFromLightAttachmentGroup), bInExcludeFromLightAttachmentGroup); }
        public void SetEnableGravity(bool bGravityEnabled) { Invoke(nameof(SetEnableGravity), bGravityEnabled); }
        public void SetEmissiveLightSource(bool NewEmissiveLightSource) { Invoke(nameof(SetEmissiveLightSource), NewEmissiveLightSource); }
        public void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value) { Invoke(nameof(SetDefaultCustomPrimitiveDataVector4), DataIndex, Value); }
        public void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value) { Invoke(nameof(SetDefaultCustomPrimitiveDataVector3), DataIndex, Value); }
        public void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value) { Invoke(nameof(SetDefaultCustomPrimitiveDataVector2), DataIndex, Value); }
        public void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value) { Invoke(nameof(SetDefaultCustomPrimitiveDataFloat), DataIndex, Value); }
        public void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value) { Invoke(nameof(SetCustomPrimitiveDataVector4), DataIndex, Value); }
        public void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value) { Invoke(nameof(SetCustomPrimitiveDataVector3), DataIndex, Value); }
        public void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value) { Invoke(nameof(SetCustomPrimitiveDataVector2), DataIndex, Value); }
        public void SetCustomPrimitiveDataFloat(int DataIndex, float Value) { Invoke(nameof(SetCustomPrimitiveDataFloat), DataIndex, Value); }
        public void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit) { Invoke(nameof(SetCustomDepthStencilWriteMask), WriteMaskBit); }
        public void SetCustomDepthStencilValue(int Value) { Invoke(nameof(SetCustomDepthStencilValue), Value); }
        public void SetCullDistance(float NewCullDistance) { Invoke(nameof(SetCullDistance), NewCullDistance); }
        public void SetConstraintMode(byte ConstraintMode) { Invoke(nameof(SetConstraintMode), ConstraintMode); }
        public void SetCollisionResponseToChannel(byte Channel, byte NewResponse) { Invoke(nameof(SetCollisionResponseToChannel), Channel, NewResponse); }
        public void SetCollisionResponseToAllChannels(byte NewResponse) { Invoke(nameof(SetCollisionResponseToAllChannels), NewResponse); }
        public void SetCollisionProfileName(Object InCollisionProfileName, bool bUpdateOverlaps) { Invoke(nameof(SetCollisionProfileName), InCollisionProfileName, bUpdateOverlaps); }
        public void SetCollisionObjectType(byte Channel) { Invoke(nameof(SetCollisionObjectType), Channel); }
        public void SetCollisionEnabled(byte NewType) { Invoke(nameof(SetCollisionEnabled), NewType); }
        public void SetCenterOfMass(Vector CenterOfMassOffset, Object BoneName) { Invoke(nameof(SetCenterOfMass), CenterOfMassOffset, BoneName); }
        public void SetCastShadow(bool NewCastShadow) { Invoke(nameof(SetCastShadow), NewCastShadow); }
        public void SetCastInsetShadow(bool bInCastInsetShadow) { Invoke(nameof(SetCastInsetShadow), bInCastInsetShadow); }
        public void SetCastHiddenShadow(bool NewCastHiddenShadow) { Invoke(nameof(SetCastHiddenShadow), NewCastHiddenShadow); }
        public void SetCastContactShadow(bool bInCastContactShadow) { Invoke(nameof(SetCastContactShadow), bInCastContactShadow); }
        public void SetBoundsScale(float NewBoundsScale) { Invoke(nameof(SetBoundsScale), NewBoundsScale); }
        public void SetAngularDamping(float InDamping) { Invoke(nameof(SetAngularDamping), InDamping); }
        public void SetAllUseCCD(bool InUseCCD) { Invoke(nameof(SetAllUseCCD), InUseCCD); }
        public void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent) { Invoke(nameof(SetAllPhysicsLinearVelocity), NewVel, bAddToCurrent); }
        public void SetAllPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent) { Invoke(nameof(SetAllPhysicsAngularVelocityInRadians), NewAngVel, bAddToCurrent); }
        public void SetAllPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent) { Invoke(nameof(SetAllPhysicsAngularVelocityInDegrees), NewAngVel, bAddToCurrent); }
        public void SetAllMassScale(float InMassScale) { Invoke(nameof(SetAllMassScale), InMassScale); }
        public Vector ScaleByMomentOfInertia(Vector InputVector, Object BoneName) { return Invoke<Vector>(nameof(ScaleByMomentOfInertia), InputVector, BoneName); }
        public void PutRigidBodyToSleep(Object BoneName) { Invoke(nameof(PutRigidBodyToSleep), BoneName); }
        public bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, Object BoneName, HitResult OutHit) { return Invoke<bool>(nameof(K2_SphereTraceComponent), TraceStart, TraceEnd, SphereRadius, bTraceComplex, bShowTrace, bPersistentShowTrace, HitLocation, HitNormal, BoneName, OutHit); }
        public bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, Object BoneName, HitResult OutHit) { return Invoke<bool>(nameof(K2_SphereOverlapComponent), InSphereCentre, InSphereRadius, bTraceComplex, bShowTrace, bPersistentShowTrace, HitLocation, HitNormal, BoneName, OutHit); }
        public bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, Object BoneName, HitResult OutHit) { return Invoke<bool>(nameof(K2_LineTraceComponent), TraceStart, TraceEnd, bTraceComplex, bShowTrace, bPersistentShowTrace, HitLocation, HitNormal, BoneName, OutHit); }
        public bool K2_IsQueryCollisionEnabled() { return Invoke<bool>(nameof(K2_IsQueryCollisionEnabled)); }
        public bool K2_IsPhysicsCollisionEnabled() { return Invoke<bool>(nameof(K2_IsPhysicsCollisionEnabled)); }
        public bool K2_IsCollisionEnabled() { return Invoke<bool>(nameof(K2_IsCollisionEnabled)); }
        public bool K2_BoxOverlapComponent(Vector InBoxCentre, Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, Vector HitLocation, Vector HitNormal, Object BoneName, HitResult OutHit) { return Invoke<bool>(nameof(K2_BoxOverlapComponent), InBoxCentre, InBox, bTraceComplex, bShowTrace, bPersistentShowTrace, HitLocation, HitNormal, BoneName, OutHit); }
        public bool IsOverlappingComponent(PrimitiveComponent OtherComp) { return Invoke<bool>(nameof(IsOverlappingComponent), OtherComp); }
        public bool IsOverlappingActor(Actor Other) { return Invoke<bool>(nameof(IsOverlappingActor), Other); }
        public bool IsGravityEnabled() { return Invoke<bool>(nameof(IsGravityEnabled)); }
        public bool IsAnyRigidBodyAwake() { return Invoke<bool>(nameof(IsAnyRigidBodyAwake)); }
        public void InvalidateLumenSurfaceCache() { Invoke(nameof(InvalidateLumenSurfaceCache)); }
        public void IgnoreComponentWhenMoving(PrimitiveComponent Component, bool bShouldIgnore) { Invoke(nameof(IgnoreComponentWhenMoving), Component, bShouldIgnore); }
        public void IgnoreActorWhenMoving(Actor Actor, bool bShouldIgnore) { Invoke(nameof(IgnoreActorWhenMoving), Actor, bShouldIgnore); }
        public WalkableSlopeOverride GetWalkableSlopeOverride() { return Invoke<WalkableSlopeOverride>(nameof(GetWalkableSlopeOverride)); }
        public Vector GetPhysicsLinearVelocityAtPoint(Vector Point, Object BoneName) { return Invoke<Vector>(nameof(GetPhysicsLinearVelocityAtPoint), Point, BoneName); }
        public Vector GetPhysicsLinearVelocity(Object BoneName) { return Invoke<Vector>(nameof(GetPhysicsLinearVelocity), BoneName); }
        public Vector GetPhysicsAngularVelocityInRadians(Object BoneName) { return Invoke<Vector>(nameof(GetPhysicsAngularVelocityInRadians), BoneName); }
        public Vector GetPhysicsAngularVelocityInDegrees(Object BoneName) { return Invoke<Vector>(nameof(GetPhysicsAngularVelocityInDegrees), BoneName); }
        public void GetOverlappingComponents(Array<PrimitiveComponent> OutOverlappingComponents) { Invoke(nameof(GetOverlappingComponents), OutOverlappingComponents); }
        public void GetOverlappingActors(Array<Actor> OverlappingActors, Object ClassFilter) { Invoke(nameof(GetOverlappingActors), OverlappingActors, ClassFilter); }
        public int GetNumMaterials() { return Invoke<int>(nameof(GetNumMaterials)); }
        public MaterialInterface GetMaterialFromCollisionFaceIndex(int FaceIndex, int SectionIndex) { return Invoke<MaterialInterface>(nameof(GetMaterialFromCollisionFaceIndex), FaceIndex, SectionIndex); }
        public MaterialInterface GetMaterial(int ElementIndex) { return Invoke<MaterialInterface>(nameof(GetMaterial), ElementIndex); }
        public float GetMassScale(Object BoneName) { return Invoke<float>(nameof(GetMassScale), BoneName); }
        public float GetMass() { return Invoke<float>(nameof(GetMass)); }
        public float GetLinearDamping() { return Invoke<float>(nameof(GetLinearDamping)); }
        public Vector GetInertiaTensor(Object BoneName) { return Invoke<Vector>(nameof(GetInertiaTensor), BoneName); }
        public bool GetGenerateOverlapEvents() { return Invoke<bool>(nameof(GetGenerateOverlapEvents)); }
        public int GetCustomPrimitiveDataIndexForVectorParameter(Object ParameterName) { return Invoke<int>(nameof(GetCustomPrimitiveDataIndexForVectorParameter), ParameterName); }
        public int GetCustomPrimitiveDataIndexForScalarParameter(Object ParameterName) { return Invoke<int>(nameof(GetCustomPrimitiveDataIndexForScalarParameter), ParameterName); }
        public byte GetCollisionResponseToChannel(byte Channel) { return Invoke<byte>(nameof(GetCollisionResponseToChannel), Channel); }
        public Object GetCollisionProfileName() { return Invoke<Object>(nameof(GetCollisionProfileName)); }
        public byte GetCollisionObjectType() { return Invoke<byte>(nameof(GetCollisionObjectType)); }
        public byte GetCollisionEnabled() { return Invoke<byte>(nameof(GetCollisionEnabled)); }
        public float GetClosestPointOnCollision(Vector Point, Vector OutPointOnBody, Object BoneName) { return Invoke<float>(nameof(GetClosestPointOnCollision), Point, OutPointOnBody, BoneName); }
        public Vector GetCenterOfMass(Object BoneName) { return Invoke<Vector>(nameof(GetCenterOfMass), BoneName); }
        public BodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(Object BoneName, bool bGetWelded, int Index) { return Invoke<BodyInstanceAsyncPhysicsTickHandle>(nameof(GetBodyInstanceAsyncPhysicsTickHandle), BoneName, bGetWelded, Index); }
        public float GetAngularDamping() { return Invoke<float>(nameof(GetAngularDamping)); }
        public MaterialInstanceDynamic CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface SourceMaterial, Object OptionalName) { return Invoke<MaterialInstanceDynamic>(nameof(CreateDynamicMaterialInstance), ElementIndex, SourceMaterial, OptionalName); }
        public MaterialInstanceDynamic CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface Parent) { return Invoke<MaterialInstanceDynamic>(nameof(CreateAndSetMaterialInstanceDynamicFromMaterial), ElementIndex, Parent); }
        public MaterialInstanceDynamic CreateAndSetMaterialInstanceDynamic(int ElementIndex) { return Invoke<MaterialInstanceDynamic>(nameof(CreateAndSetMaterialInstanceDynamic), ElementIndex); }
        public Array<PrimitiveComponent> CopyArrayOfMoveIgnoreComponents() { return Invoke<Array<PrimitiveComponent>>(nameof(CopyArrayOfMoveIgnoreComponents)); }
        public Array<Actor> CopyArrayOfMoveIgnoreActors() { return Invoke<Array<Actor>>(nameof(CopyArrayOfMoveIgnoreActors)); }
        public void ClearMoveIgnoreComponents() { Invoke(nameof(ClearMoveIgnoreComponents)); }
        public void ClearMoveIgnoreActors() { Invoke(nameof(ClearMoveIgnoreActors)); }
        public bool CanCharacterStepUp(Pawn Pawn) { return Invoke<bool>(nameof(CanCharacterStepUp), Pawn); }
        public void AddVelocityChangeImpulseAtLocation(Vector Impulse, Vector Location, Object BoneName) { Invoke(nameof(AddVelocityChangeImpulseAtLocation), Impulse, Location, BoneName); }
        public void AddTorqueInRadians(Vector Torque, Object BoneName, bool bAccelChange) { Invoke(nameof(AddTorqueInRadians), Torque, BoneName, bAccelChange); }
        public void AddTorqueInDegrees(Vector Torque, Object BoneName, bool bAccelChange) { Invoke(nameof(AddTorqueInDegrees), Torque, BoneName, bAccelChange); }
        public void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange) { Invoke(nameof(AddRadialImpulse), Origin, Radius, Strength, Falloff, bVelChange); }
        public void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange) { Invoke(nameof(AddRadialForce), Origin, Radius, Strength, Falloff, bAccelChange); }
        public void AddImpulseAtLocation(Vector Impulse, Vector Location, Object BoneName) { Invoke(nameof(AddImpulseAtLocation), Impulse, Location, BoneName); }
        public void AddImpulse(Vector Impulse, Object BoneName, bool bVelChange) { Invoke(nameof(AddImpulse), Impulse, BoneName, bVelChange); }
        public void AddForceAtLocationLocal(Vector Force, Vector Location, Object BoneName) { Invoke(nameof(AddForceAtLocationLocal), Force, Location, BoneName); }
        public void AddForceAtLocation(Vector Force, Vector Location, Object BoneName) { Invoke(nameof(AddForceAtLocation), Force, Location, BoneName); }
        public void AddForce(Vector Force, Object BoneName, bool bAccelChange) { Invoke(nameof(AddForce), Force, BoneName, bAccelChange); }
        public void AddAngularImpulseInRadians(Vector Impulse, Object BoneName, bool bVelChange) { Invoke(nameof(AddAngularImpulseInRadians), Impulse, BoneName, bVelChange); }
        public void AddAngularImpulseInDegrees(Vector Impulse, Object BoneName, bool bVelChange) { Invoke(nameof(AddAngularImpulseInDegrees), Impulse, BoneName, bVelChange); }
    }
    public class BlueprintFunctionLibrary : Object
    {
        public BlueprintFunctionLibrary(nint addr) : base(addr) { }
    }
    public class ShapeComponent : PrimitiveComponent
    {
        public ShapeComponent(nint addr) : base(addr) { }
        public BodySetup ShapeBodySetup { get { return this[nameof(ShapeBodySetup)].As<BodySetup>(); } set { this["ShapeBodySetup"] = value; } }
        public Color ShapeColor { get { return this[nameof(ShapeColor)].As<Color>(); } set { this["ShapeColor"] = value; } }
        public bool bDrawOnlyIfSelected { get { return this[nameof(bDrawOnlyIfSelected)].Flag; } set { this[nameof(bDrawOnlyIfSelected)].Flag = value; } }
        public bool bShouldCollideWhenPlacing { get { return this[nameof(bShouldCollideWhenPlacing)].Flag; } set { this[nameof(bShouldCollideWhenPlacing)].Flag = value; } }
        public bool bDynamicObstacle { get { return this[nameof(bDynamicObstacle)].Flag; } set { this[nameof(bDynamicObstacle)].Flag = value; } }
        public Object AreaClassOverride { get { return this[nameof(AreaClassOverride)]; } set { this[nameof(AreaClassOverride)] = value; } }
        public bool bUseSystemDefaultObstacleAreaClass { get { return this[nameof(bUseSystemDefaultObstacleAreaClass)].Flag; } set { this[nameof(bUseSystemDefaultObstacleAreaClass)].Flag = value; } }
    }
    public class BoxComponent : ShapeComponent
    {
        public BoxComponent(nint addr) : base(addr) { }
        public Vector BoxExtent { get { return this[nameof(BoxExtent)].As<Vector>(); } set { this["BoxExtent"] = value; } }
        public float LineThickness { get { return this[nameof(LineThickness)].GetValue<float>(); } set { this[nameof(LineThickness)].SetValue<float>(value); } }
        public void SetLineThickness(float Thickness) { Invoke(nameof(SetLineThickness), Thickness); }
        public void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps) { Invoke(nameof(SetBoxExtent), InBoxExtent, bUpdateOverlaps); }
        public Vector GetUnscaledBoxExtent() { return Invoke<Vector>(nameof(GetUnscaledBoxExtent)); }
        public Vector GetScaledBoxExtent() { return Invoke<Vector>(nameof(GetScaledBoxExtent)); }
    }
    public class Brush : Actor
    {
        public Brush(nint addr) : base(addr) { }
        public byte BrushType { get { return this[nameof(BrushType)].GetValue<byte>(); } set { this[nameof(BrushType)].SetValue<byte>(value); } }
        public Color BrushColor { get { return this[nameof(BrushColor)].As<Color>(); } set { this["BrushColor"] = value; } }
        public int PolyFlags { get { return this[nameof(PolyFlags)].GetValue<int>(); } set { this[nameof(PolyFlags)].SetValue<int>(value); } }
        public bool bColored { get { return this[nameof(bColored)].Flag; } set { this[nameof(bColored)].Flag = value; } }
        public bool bSolidWhenSelected { get { return this[nameof(bSolidWhenSelected)].Flag; } set { this[nameof(bSolidWhenSelected)].Flag = value; } }
        public bool bPlaceableFromClassBrowser { get { return this[nameof(bPlaceableFromClassBrowser)].Flag; } set { this[nameof(bPlaceableFromClassBrowser)].Flag = value; } }
        public bool bNotForClientOrServer { get { return this[nameof(bNotForClientOrServer)].Flag; } set { this[nameof(bNotForClientOrServer)].Flag = value; } }
        public Model Brush_value { get { return this[nameof(Brush)].As<Model>(); } set { this["Brush"] = value; } }
        public BrushComponent BrushComponent { get { return this[nameof(BrushComponent)].As<BrushComponent>(); } set { this["BrushComponent"] = value; } }
        public bool bInManipulation { get { return this[nameof(bInManipulation)].Flag; } set { this[nameof(bInManipulation)].Flag = value; } }
        public Array<GeomSelection> SavedSelections { get { return new Array<GeomSelection>(this[nameof(SavedSelections)].Address); } }
    }
    public class Volume : Brush
    {
        public Volume(nint addr) : base(addr) { }
    }
    public class PhysicsVolume : Volume
    {
        public PhysicsVolume(nint addr) : base(addr) { }
        public float TerminalVelocity { get { return this[nameof(TerminalVelocity)].GetValue<float>(); } set { this[nameof(TerminalVelocity)].SetValue<float>(value); } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public float FluidFriction { get { return this[nameof(FluidFriction)].GetValue<float>(); } set { this[nameof(FluidFriction)].SetValue<float>(value); } }
        public bool bWaterVolume { get { return this[nameof(bWaterVolume)].Flag; } set { this[nameof(bWaterVolume)].Flag = value; } }
        public bool bPhysicsOnContact { get { return this[nameof(bPhysicsOnContact)].Flag; } set { this[nameof(bPhysicsOnContact)].Flag = value; } }
    }
    public class HLODBuilder : Object
    {
        public HLODBuilder(nint addr) : base(addr) { }
    }
    public class MeshComponent : PrimitiveComponent
    {
        public MeshComponent(nint addr) : base(addr) { }
        public Array<MaterialInterface> OverrideMaterials { get { return new Array<MaterialInterface>(this[nameof(OverrideMaterials)].Address); } }
        public MaterialInterface OverlayMaterial { get { return this[nameof(OverlayMaterial)].As<MaterialInterface>(); } set { this["OverlayMaterial"] = value; } }
        public float OverlayMaterialMaxDrawDistance { get { return this[nameof(OverlayMaterialMaxDrawDistance)].GetValue<float>(); } set { this[nameof(OverlayMaterialMaxDrawDistance)].SetValue<float>(value); } }
        public bool bEnableMaterialParameterCaching { get { return this[nameof(bEnableMaterialParameterCaching)].Flag; } set { this[nameof(bEnableMaterialParameterCaching)].Flag = value; } }
        public void SetVectorParameterValueOnMaterials(Object ParameterName, Vector ParameterValue) { Invoke(nameof(SetVectorParameterValueOnMaterials), ParameterName, ParameterValue); }
        public void SetScalarParameterValueOnMaterials(Object ParameterName, float ParameterValue) { Invoke(nameof(SetScalarParameterValueOnMaterials), ParameterName, ParameterValue); }
        public void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance) { Invoke(nameof(SetOverlayMaterialMaxDrawDistance), InMaxDrawDistance); }
        public void SetOverlayMaterial(MaterialInterface NewOverlayMaterial) { Invoke(nameof(SetOverlayMaterial), NewOverlayMaterial); }
        public void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups) { Invoke(nameof(PrestreamTextures), Seconds, bPrioritizeCharacterTextures, CinematicTextureGroups); }
        public bool IsMaterialSlotNameValid(Object MaterialSlotName) { return Invoke<bool>(nameof(IsMaterialSlotNameValid), MaterialSlotName); }
        public MaterialInterface GetOverlayMaterial() { return Invoke<MaterialInterface>(nameof(GetOverlayMaterial)); }
        public Array<Object> GetMaterialSlotNames() { return Invoke<Array<Object>>(nameof(GetMaterialSlotNames)); }
        public Array<MaterialInterface> GetMaterials() { return Invoke<Array<MaterialInterface>>(nameof(GetMaterials)); }
        public int GetMaterialIndex(Object MaterialSlotName) { return Invoke<int>(nameof(GetMaterialIndex), MaterialSlotName); }
    }
    public class SplineComponent : PrimitiveComponent
    {
        public SplineComponent(nint addr) : base(addr) { }
        public SplineCurves SplineCurves { get { return this[nameof(SplineCurves)].As<SplineCurves>(); } set { this["SplineCurves"] = value; } }
        public InterpCurveVector SplineInfo { get { return this[nameof(SplineInfo)].As<InterpCurveVector>(); } set { this["SplineInfo"] = value; } }
        public InterpCurveQuat SplineRotInfo { get { return this[nameof(SplineRotInfo)].As<InterpCurveQuat>(); } set { this["SplineRotInfo"] = value; } }
        public InterpCurveVector SplineScaleInfo { get { return this[nameof(SplineScaleInfo)].As<InterpCurveVector>(); } set { this["SplineScaleInfo"] = value; } }
        public InterpCurveFloat SplineReparamTable { get { return this[nameof(SplineReparamTable)].As<InterpCurveFloat>(); } set { this["SplineReparamTable"] = value; } }
        public bool bAllowSplineEditingPerInstance { get { return this[nameof(bAllowSplineEditingPerInstance)].Flag; } set { this[nameof(bAllowSplineEditingPerInstance)].Flag = value; } }
        public int ReparamStepsPerSegment { get { return this[nameof(ReparamStepsPerSegment)].GetValue<int>(); } set { this[nameof(ReparamStepsPerSegment)].SetValue<int>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool bStationaryEndpoints { get { return this[nameof(bStationaryEndpoints)].Flag; } set { this[nameof(bStationaryEndpoints)].Flag = value; } }
        public bool bSplineHasBeenEdited { get { return this[nameof(bSplineHasBeenEdited)].Flag; } set { this[nameof(bSplineHasBeenEdited)].Flag = value; } }
        public bool bModifiedByConstructionScript { get { return this[nameof(bModifiedByConstructionScript)].Flag; } set { this[nameof(bModifiedByConstructionScript)].Flag = value; } }
        public bool bInputSplinePointsToConstructionScript { get { return this[nameof(bInputSplinePointsToConstructionScript)].Flag; } set { this[nameof(bInputSplinePointsToConstructionScript)].Flag = value; } }
        public bool bDrawDebug { get { return this[nameof(bDrawDebug)].Flag; } set { this[nameof(bDrawDebug)].Flag = value; } }
        public bool bClosedLoop { get { return this[nameof(bClosedLoop)].Flag; } set { this[nameof(bClosedLoop)].Flag = value; } }
        public bool bLoopPositionOverride { get { return this[nameof(bLoopPositionOverride)].Flag; } set { this[nameof(bLoopPositionOverride)].Flag = value; } }
        public float LoopPosition { get { return this[nameof(LoopPosition)].GetValue<float>(); } set { this[nameof(LoopPosition)].SetValue<float>(value); } }
        public Vector DefaultUpVector { get { return this[nameof(DefaultUpVector)].As<Vector>(); } set { this["DefaultUpVector"] = value; } }
        public void UpdateSpline() { Invoke(nameof(UpdateSpline)); }
        public void SetWorldLocationAtSplinePoint(int PointIndex, Vector InLocation) { Invoke(nameof(SetWorldLocationAtSplinePoint), PointIndex, InLocation); }
        public void SetUpVectorAtSplinePoint(int PointIndex, Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetUpVectorAtSplinePoint), PointIndex, InUpVector, CoordinateSpace, bUpdateSpline); }
        public void SetUnselectedSplineSegmentColor(LinearColor SegmentColor) { Invoke(nameof(SetUnselectedSplineSegmentColor), SegmentColor); }
        public void SetTangentsAtSplinePoint(int PointIndex, Vector InArriveTangent, Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetTangentsAtSplinePoint), PointIndex, InArriveTangent, InLeaveTangent, CoordinateSpace, bUpdateSpline); }
        public void SetTangentColor(LinearColor TangentColor) { Invoke(nameof(SetTangentColor), TangentColor); }
        public void SetTangentAtSplinePoint(int PointIndex, Vector InTangent, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetTangentAtSplinePoint), PointIndex, InTangent, CoordinateSpace, bUpdateSpline); }
        public void SetSplineWorldPoints(Array<Vector> Points) { Invoke(nameof(SetSplineWorldPoints), Points); }
        public void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline) { Invoke(nameof(SetSplinePointType), PointIndex, Type, bUpdateSpline); }
        public void SetSplinePoints(Array<Vector> Points, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetSplinePoints), Points, CoordinateSpace, bUpdateSpline); }
        public void SetSplineLocalPoints(Array<Vector> Points) { Invoke(nameof(SetSplineLocalPoints), Points); }
        public void SetSelectedSplineSegmentColor(LinearColor SegmentColor) { Invoke(nameof(SetSelectedSplineSegmentColor), SegmentColor); }
        public void SetScaleAtSplinePoint(int PointIndex, Vector InScaleVector, bool bUpdateSpline) { Invoke(nameof(SetScaleAtSplinePoint), PointIndex, InScaleVector, bUpdateSpline); }
        public void SetRotationAtSplinePoint(int PointIndex, Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetRotationAtSplinePoint), PointIndex, InRotation, CoordinateSpace, bUpdateSpline); }
        public void SetLocationAtSplinePoint(int PointIndex, Vector InLocation, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(SetLocationAtSplinePoint), PointIndex, InLocation, CoordinateSpace, bUpdateSpline); }
        public void SetDrawDebug(bool bShow) { Invoke(nameof(SetDrawDebug), bShow); }
        public void SetDefaultUpVector(Vector UpVector, byte CoordinateSpace) { Invoke(nameof(SetDefaultUpVector), UpVector, CoordinateSpace); }
        public void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline) { Invoke(nameof(SetClosedLoopAtPosition), bInClosedLoop, Key, bUpdateSpline); }
        public void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline) { Invoke(nameof(SetClosedLoop), bInClosedLoop, bUpdateSpline); }
        public void RemoveSplinePoint(int Index, bool bUpdateSpline) { Invoke(nameof(RemoveSplinePoint), Index, bUpdateSpline); }
        public bool IsClosedLoop() { return Invoke<bool>(nameof(IsClosedLoop)); }
        public Vector GetWorldTangentAtDistanceAlongSpline(float Distance) { return Invoke<Vector>(nameof(GetWorldTangentAtDistanceAlongSpline), Distance); }
        public Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity) { return Invoke<Rotator>(nameof(GetWorldRotationAtTime), Time, bUseConstantVelocity); }
        public Rotator GetWorldRotationAtDistanceAlongSpline(float Distance) { return Invoke<Rotator>(nameof(GetWorldRotationAtDistanceAlongSpline), Distance); }
        public Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetWorldLocationAtTime), Time, bUseConstantVelocity); }
        public Vector GetWorldLocationAtSplinePoint(int PointIndex) { return Invoke<Vector>(nameof(GetWorldLocationAtSplinePoint), PointIndex); }
        public Vector GetWorldLocationAtDistanceAlongSpline(float Distance) { return Invoke<Vector>(nameof(GetWorldLocationAtDistanceAlongSpline), Distance); }
        public Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetWorldDirectionAtTime), Time, bUseConstantVelocity); }
        public Vector GetWorldDirectionAtDistanceAlongSpline(float Distance) { return Invoke<Vector>(nameof(GetWorldDirectionAtDistanceAlongSpline), Distance); }
        public Vector GetVectorPropertyAtSplinePoint(int Index, Object PropertyName) { return Invoke<Vector>(nameof(GetVectorPropertyAtSplinePoint), Index, PropertyName); }
        public Vector GetVectorPropertyAtSplineInputKey(float InKey, Object PropertyName) { return Invoke<Vector>(nameof(GetVectorPropertyAtSplineInputKey), InKey, PropertyName); }
        public Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetUpVectorAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetUpVectorAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetUpVectorAtSplineInputKey), InKey, CoordinateSpace); }
        public Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetUpVectorAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale) { return Invoke<Transform>(nameof(GetTransformAtTime), Time, CoordinateSpace, bUseConstantVelocity, bUseScale); }
        public Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale) { return Invoke<Transform>(nameof(GetTransformAtSplinePoint), PointIndex, CoordinateSpace, bUseScale); }
        public Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale) { return Invoke<Transform>(nameof(GetTransformAtSplineInputKey), InKey, CoordinateSpace, bUseScale); }
        public Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale) { return Invoke<Transform>(nameof(GetTransformAtDistanceAlongSpline), Distance, CoordinateSpace, bUseScale); }
        public float GetTimeAtDistanceAlongSpline(float Distance) { return Invoke<float>(nameof(GetTimeAtDistanceAlongSpline), Distance); }
        public Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetTangentAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetTangentAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetTangentAtSplineInputKey), InKey, CoordinateSpace); }
        public Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetTangentAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public byte GetSplinePointType(int PointIndex) { return Invoke<byte>(nameof(GetSplinePointType), PointIndex); }
        public float GetSplineLength() { return Invoke<float>(nameof(GetSplineLength)); }
        public Vector GetScaleAtTime(float Time, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetScaleAtTime), Time, bUseConstantVelocity); }
        public Vector GetScaleAtSplinePoint(int PointIndex) { return Invoke<Vector>(nameof(GetScaleAtSplinePoint), PointIndex); }
        public Vector GetScaleAtSplineInputKey(float InKey) { return Invoke<Vector>(nameof(GetScaleAtSplineInputKey), InKey); }
        public Vector GetScaleAtDistanceAlongSpline(float Distance) { return Invoke<Vector>(nameof(GetScaleAtDistanceAlongSpline), Distance); }
        public Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Rotator>(nameof(GetRotationAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Rotator>(nameof(GetRotationAtSplinePoint), PointIndex, CoordinateSpace); }
        public Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Rotator>(nameof(GetRotationAtSplineInputKey), InKey, CoordinateSpace); }
        public Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Rotator>(nameof(GetRotationAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<float>(nameof(GetRollAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<float>(nameof(GetRollAtSplinePoint), PointIndex, CoordinateSpace); }
        public float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<float>(nameof(GetRollAtSplineInputKey), InKey, CoordinateSpace); }
        public float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<float>(nameof(GetRollAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetRightVectorAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetRightVectorAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetRightVectorAtSplineInputKey), InKey, CoordinateSpace); }
        public Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetRightVectorAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public int GetNumberOfSplineSegments() { return Invoke<int>(nameof(GetNumberOfSplineSegments)); }
        public int GetNumberOfSplinePoints() { return Invoke<int>(nameof(GetNumberOfSplinePoints)); }
        public Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetLocationAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetLocationAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetLocationAtSplineInputKey), InKey, CoordinateSpace); }
        public Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetLocationAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public void GetLocationAndTangentAtSplinePoint(int PointIndex, Vector Location, Vector Tangent, byte CoordinateSpace) { Invoke(nameof(GetLocationAndTangentAtSplinePoint), PointIndex, Location, Tangent, CoordinateSpace); }
        public void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, Vector LocalLocation, Vector LocalTangent) { Invoke(nameof(GetLocalLocationAndTangentAtSplinePoint), PointIndex, LocalLocation, LocalTangent); }
        public Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetLeaveTangentAtSplinePoint), PointIndex, CoordinateSpace); }
        public float GetInputKeyValueAtDistanceAlongSpline(float Distance) { return Invoke<float>(nameof(GetInputKeyValueAtDistanceAlongSpline), Distance); }
        public float GetInputKeyAtDistanceAlongSpline(float Distance) { return Invoke<float>(nameof(GetInputKeyAtDistanceAlongSpline), Distance); }
        public float GetFloatPropertyAtSplinePoint(int Index, Object PropertyName) { return Invoke<float>(nameof(GetFloatPropertyAtSplinePoint), Index, PropertyName); }
        public float GetFloatPropertyAtSplineInputKey(float InKey, Object PropertyName) { return Invoke<float>(nameof(GetFloatPropertyAtSplineInputKey), InKey, PropertyName); }
        public float GetDistanceAlongSplineAtSplinePoint(int PointIndex) { return Invoke<float>(nameof(GetDistanceAlongSplineAtSplinePoint), PointIndex); }
        public float GetDistanceAlongSplineAtSplineInputKey(float InKey) { return Invoke<float>(nameof(GetDistanceAlongSplineAtSplineInputKey), InKey); }
        public Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity) { return Invoke<Vector>(nameof(GetDirectionAtTime), Time, CoordinateSpace, bUseConstantVelocity); }
        public Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetDirectionAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetDirectionAtSplineInputKey), InKey, CoordinateSpace); }
        public Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetDirectionAtDistanceAlongSpline), Distance, CoordinateSpace); }
        public Vector GetDefaultUpVector(byte CoordinateSpace) { return Invoke<Vector>(nameof(GetDefaultUpVector), CoordinateSpace); }
        public Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetArriveTangentAtSplinePoint), PointIndex, CoordinateSpace); }
        public Vector FindUpVectorClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Vector>(nameof(FindUpVectorClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public Transform FindTransformClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace, bool bUseScale) { return Invoke<Transform>(nameof(FindTransformClosestToWorldLocation), WorldLocation, CoordinateSpace, bUseScale); }
        public Vector FindTangentClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Vector>(nameof(FindTangentClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public Vector FindScaleClosestToWorldLocation(Vector WorldLocation) { return Invoke<Vector>(nameof(FindScaleClosestToWorldLocation), WorldLocation); }
        public Rotator FindRotationClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Rotator>(nameof(FindRotationClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public float FindRollClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<float>(nameof(FindRollClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public Vector FindRightVectorClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Vector>(nameof(FindRightVectorClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public Vector FindLocationClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Vector>(nameof(FindLocationClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public float FindInputKeyClosestToWorldLocation(Vector WorldLocation) { return Invoke<float>(nameof(FindInputKeyClosestToWorldLocation), WorldLocation); }
        public Vector FindDirectionClosestToWorldLocation(Vector WorldLocation, byte CoordinateSpace) { return Invoke<Vector>(nameof(FindDirectionClosestToWorldLocation), WorldLocation, CoordinateSpace); }
        public bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, byte CoordinateSpace, float MaxSquareDistanceFromSpline, Array<Vector> OutPoints, Array<double> OutDistancesAlongSpline) { return Invoke<bool>(nameof(DivideSplineIntoPolylineRecursiveWithDistances), StartDistanceAlongSpline, EndDistanceAlongSpline, CoordinateSpace, MaxSquareDistanceFromSpline, OutPoints, OutDistancesAlongSpline); }
        public bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, byte CoordinateSpace, float MaxSquareDistanceFromSpline, Array<Vector> OutPoints) { return Invoke<bool>(nameof(DivideSplineIntoPolylineRecursive), StartDistanceAlongSpline, EndDistanceAlongSpline, CoordinateSpace, MaxSquareDistanceFromSpline, OutPoints); }
        public bool ConvertSplineToPolyLine(byte CoordinateSpace, float MaxSquareDistanceFromSpline, Array<Vector> OutPoints) { return Invoke<bool>(nameof(ConvertSplineToPolyLine), CoordinateSpace, MaxSquareDistanceFromSpline, OutPoints); }
        public bool ConvertSplineSegmentToPolyLine(int SplinePointStartIndex, byte CoordinateSpace, float MaxSquareDistanceFromSpline, Array<Vector> OutPoints) { return Invoke<bool>(nameof(ConvertSplineSegmentToPolyLine), SplinePointStartIndex, CoordinateSpace, MaxSquareDistanceFromSpline, OutPoints); }
        public void ClearSplinePoints(bool bUpdateSpline) { Invoke(nameof(ClearSplinePoints), bUpdateSpline); }
        public void AddSplineWorldPoint(Vector Position) { Invoke(nameof(AddSplineWorldPoint), Position); }
        public void AddSplinePointAtIndex(Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(AddSplinePointAtIndex), Position, Index, CoordinateSpace, bUpdateSpline); }
        public void AddSplinePoint(Vector Position, byte CoordinateSpace, bool bUpdateSpline) { Invoke(nameof(AddSplinePoint), Position, CoordinateSpace, bUpdateSpline); }
        public void AddSplineLocalPoint(Vector Position) { Invoke(nameof(AddSplineLocalPoint), Position); }
        public void AddPoints(Array<SplinePoint> Points, bool bUpdateSpline) { Invoke(nameof(AddPoints), Points, bUpdateSpline); }
        public void AddPoint(SplinePoint Point, bool bUpdateSpline) { Invoke(nameof(AddPoint), Point, bUpdateSpline); }
    }
    public class SplineMetadata : Object
    {
        public SplineMetadata(nint addr) : base(addr) { }
    }
    public class WorldSubsystem : Subsystem
    {
        public WorldSubsystem(nint addr) : base(addr) { }
    }
    public class TickableWorldSubsystem : WorldSubsystem
    {
        public TickableWorldSubsystem(nint addr) : base(addr) { }
    }
    public class FXSystemComponent : PrimitiveComponent
    {
        public FXSystemComponent(nint addr) : base(addr) { }
        public void SetVectorParameter(Object ParameterName, Vector Param) { Invoke(nameof(SetVectorParameter), ParameterName, Param); }
        public void SetUseAutoManageAttachment(bool bAutoManage) { Invoke(nameof(SetUseAutoManageAttachment), bAutoManage); }
        public void SetIntParameter(Object ParameterName, int Param) { Invoke(nameof(SetIntParameter), ParameterName, Param); }
        public void SetFloatParameter(Object ParameterName, float Param) { Invoke(nameof(SetFloatParameter), ParameterName, Param); }
        public void SetEmitterEnable(Object EmitterName, bool bNewEnableState) { Invoke(nameof(SetEmitterEnable), EmitterName, bNewEnableState); }
        public void SetColorParameter(Object ParameterName, LinearColor Param) { Invoke(nameof(SetColorParameter), ParameterName, Param); }
        public void SetBoolParameter(Object ParameterName, bool Param) { Invoke(nameof(SetBoolParameter), ParameterName, Param); }
        public void SetAutoAttachmentParameters(SceneComponent Parent, Object SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule) { Invoke(nameof(SetAutoAttachmentParameters), Parent, SocketName, LocationRule, RotationRule, ScaleRule); }
        public void SetActorParameter(Object ParameterName, Actor Param) { Invoke(nameof(SetActorParameter), ParameterName, Param); }
        public void ReleaseToPool() { Invoke(nameof(ReleaseToPool)); }
        public FXSystemAsset GetFXSystemAsset() { return Invoke<FXSystemAsset>(nameof(GetFXSystemAsset)); }
    }
    public class BlueprintAsyncActionBase : Object
    {
        public BlueprintAsyncActionBase(nint addr) : base(addr) { }
        public void Activate() { Invoke(nameof(Activate)); }
    }
    public class FXSystemAsset : Object
    {
        public FXSystemAsset(nint addr) : base(addr) { }
        public uint MaxPoolSize { get { return this[nameof(MaxPoolSize)].GetValue<uint>(); } set { this[nameof(MaxPoolSize)].SetValue<uint>(value); } }
        public uint PoolPrimeSize { get { return this[nameof(PoolPrimeSize)].GetValue<uint>(); } set { this[nameof(PoolPrimeSize)].SetValue<uint>(value); } }
    }
    public class AnimNotifyState : Object
    {
        public AnimNotifyState(nint addr) : base(addr) { }
        public bool Received_NotifyTick(SkeletalMeshComponent MeshComp, AnimSequenceBase Animation, float FrameDeltaTime, AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(Received_NotifyTick), MeshComp, Animation, FrameDeltaTime, EventReference); }
        public bool Received_NotifyEnd(SkeletalMeshComponent MeshComp, AnimSequenceBase Animation, AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(Received_NotifyEnd), MeshComp, Animation, EventReference); }
        public bool Received_NotifyBegin(SkeletalMeshComponent MeshComp, AnimSequenceBase Animation, float TotalDuration, AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(Received_NotifyBegin), MeshComp, Animation, TotalDuration, EventReference); }
        public Object GetNotifyName() { return Invoke<Object>(nameof(GetNotifyName)); }
        public float GetDefaultTriggerWeightThreshold() { return Invoke<float>(nameof(GetDefaultTriggerWeightThreshold)); }
    }
    public class AnimNotify : Object
    {
        public AnimNotify(nint addr) : base(addr) { }
        public bool Received_Notify(SkeletalMeshComponent MeshComp, AnimSequenceBase Animation, AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(Received_Notify), MeshComp, Animation, EventReference); }
        public Object GetNotifyName() { return Invoke<Object>(nameof(GetNotifyName)); }
        public float GetDefaultTriggerWeightThreshold() { return Invoke<float>(nameof(GetDefaultTriggerWeightThreshold)); }
    }
    public class SkinnedMeshComponent : MeshComponent
    {
        public SkinnedMeshComponent(nint addr) : base(addr) { }
        public SkeletalMesh SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMesh>(); } set { this["SkeletalMesh"] = value; } }
        public SkinnedAsset SkinnedAsset { get { return this[nameof(SkinnedAsset)].As<SkinnedAsset>(); } set { this["SkinnedAsset"] = value; } }
        public Object LeaderPoseComponent { get { return this[nameof(LeaderPoseComponent)]; } set { this[nameof(LeaderPoseComponent)] = value; } }
        public Array<ESkinCacheUsage> SkinCacheUsage { get { return new Array<ESkinCacheUsage>(this[nameof(SkinCacheUsage)].Address); } }
        public bool bSetMeshDeformer { get { return this[nameof(bSetMeshDeformer)].Flag; } set { this[nameof(bSetMeshDeformer)].Flag = value; } }
        public MeshDeformer MeshDeformer { get { return this[nameof(MeshDeformer)].As<MeshDeformer>(); } set { this["MeshDeformer"] = value; } }
        public MeshDeformerInstanceSettings MeshDeformerInstanceSettings { get { return this[nameof(MeshDeformerInstanceSettings)].As<MeshDeformerInstanceSettings>(); } set { this["MeshDeformerInstanceSettings"] = value; } }
        public MeshDeformerInstance MeshDeformerInstance { get { return this[nameof(MeshDeformerInstance)].As<MeshDeformerInstance>(); } set { this["MeshDeformerInstance"] = value; } }
        public PhysicsAsset PhysicsAssetOverride { get { return this[nameof(PhysicsAssetOverride)].As<PhysicsAsset>(); } set { this["PhysicsAssetOverride"] = value; } }
        public int ForcedLodModel { get { return this[nameof(ForcedLodModel)].GetValue<int>(); } set { this[nameof(ForcedLodModel)].SetValue<int>(value); } }
        public int MinLodModel { get { return this[nameof(MinLodModel)].GetValue<int>(); } set { this[nameof(MinLodModel)].SetValue<int>(value); } }
        public float StreamingDistanceMultiplier { get { return this[nameof(StreamingDistanceMultiplier)].GetValue<float>(); } set { this[nameof(StreamingDistanceMultiplier)].SetValue<float>(value); } }
        public Array<SkelMeshComponentLODInfo> LODInfo { get { return new Array<SkelMeshComponentLODInfo>(this[nameof(LODInfo)].Address); } }
        public EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption { get { return (EVisibilityBasedAnimTickOption)this[nameof(VisibilityBasedAnimTickOption)].GetValue<int>(); } set { this[nameof(VisibilityBasedAnimTickOption)].SetValue<int>((int)value); } }
        public bool bOverrideMinLOD { get { return this[nameof(bOverrideMinLOD)].Flag; } set { this[nameof(bOverrideMinLOD)].Flag = value; } }
        public bool bUseBoundsFromLeaderPoseComponent { get { return this[nameof(bUseBoundsFromLeaderPoseComponent)].Flag; } set { this[nameof(bUseBoundsFromLeaderPoseComponent)].Flag = value; } }
        public bool bForceWireframe { get { return this[nameof(bForceWireframe)].Flag; } set { this[nameof(bForceWireframe)].Flag = value; } }
        public bool bDisplayBones { get { return this[nameof(bDisplayBones)].Flag; } set { this[nameof(bDisplayBones)].Flag = value; } }
        public bool bDisableMorphTarget { get { return this[nameof(bDisableMorphTarget)].Flag; } set { this[nameof(bDisableMorphTarget)].Flag = value; } }
        public bool bHideSkin { get { return this[nameof(bHideSkin)].Flag; } set { this[nameof(bHideSkin)].Flag = value; } }
        public bool bPerBoneMotionBlur { get { return this[nameof(bPerBoneMotionBlur)].Flag; } set { this[nameof(bPerBoneMotionBlur)].Flag = value; } }
        public bool bComponentUseFixedSkelBounds { get { return this[nameof(bComponentUseFixedSkelBounds)].Flag; } set { this[nameof(bComponentUseFixedSkelBounds)].Flag = value; } }
        public bool bConsiderAllBodiesForBounds { get { return this[nameof(bConsiderAllBodiesForBounds)].Flag; } set { this[nameof(bConsiderAllBodiesForBounds)].Flag = value; } }
        public bool bSyncAttachParentLOD { get { return this[nameof(bSyncAttachParentLOD)].Flag; } set { this[nameof(bSyncAttachParentLOD)].Flag = value; } }
        public bool bCanHighlightSelectedSections { get { return this[nameof(bCanHighlightSelectedSections)].Flag; } set { this[nameof(bCanHighlightSelectedSections)].Flag = value; } }
        public bool bRecentlyRendered { get { return this[nameof(bRecentlyRendered)].Flag; } set { this[nameof(bRecentlyRendered)].Flag = value; } }
        public bool bCastCapsuleDirectShadow { get { return this[nameof(bCastCapsuleDirectShadow)].Flag; } set { this[nameof(bCastCapsuleDirectShadow)].Flag = value; } }
        public bool bCastCapsuleIndirectShadow { get { return this[nameof(bCastCapsuleIndirectShadow)].Flag; } set { this[nameof(bCastCapsuleIndirectShadow)].Flag = value; } }
        public bool bCPUSkinning { get { return this[nameof(bCPUSkinning)].Flag; } set { this[nameof(bCPUSkinning)].Flag = value; } }
        public bool bEnableUpdateRateOptimizations { get { return this[nameof(bEnableUpdateRateOptimizations)].Flag; } set { this[nameof(bEnableUpdateRateOptimizations)].Flag = value; } }
        public bool bDisplayDebugUpdateRateOptimizations { get { return this[nameof(bDisplayDebugUpdateRateOptimizations)].Flag; } set { this[nameof(bDisplayDebugUpdateRateOptimizations)].Flag = value; } }
        public bool bRenderStatic { get { return this[nameof(bRenderStatic)].Flag; } set { this[nameof(bRenderStatic)].Flag = value; } }
        public bool bIgnoreLeaderPoseComponentLOD { get { return this[nameof(bIgnoreLeaderPoseComponentLOD)].Flag; } set { this[nameof(bIgnoreLeaderPoseComponentLOD)].Flag = value; } }
        public bool bCachedLocalBoundsUpToDate { get { return this[nameof(bCachedLocalBoundsUpToDate)].Flag; } set { this[nameof(bCachedLocalBoundsUpToDate)].Flag = value; } }
        public bool bCachedWorldSpaceBoundsUpToDate { get { return this[nameof(bCachedWorldSpaceBoundsUpToDate)].Flag; } set { this[nameof(bCachedWorldSpaceBoundsUpToDate)].Flag = value; } }
        public bool bForceMeshObjectUpdate { get { return this[nameof(bForceMeshObjectUpdate)].Flag; } set { this[nameof(bForceMeshObjectUpdate)].Flag = value; } }
        public bool bFollowerShouldTickPose { get { return this[nameof(bFollowerShouldTickPose)].Flag; } set { this[nameof(bFollowerShouldTickPose)].Flag = value; } }
        public float CapsuleIndirectShadowMinVisibility { get { return this[nameof(CapsuleIndirectShadowMinVisibility)].GetValue<float>(); } set { this[nameof(CapsuleIndirectShadowMinVisibility)].SetValue<float>(value); } }
        public BoxSphereBounds CachedWorldOrLocalSpaceBounds { get { return this[nameof(CachedWorldOrLocalSpaceBounds)].As<BoxSphereBounds>(); } set { this["CachedWorldOrLocalSpaceBounds"] = value; } }
        public Matrix CachedWorldToLocalTransform { get { return this[nameof(CachedWorldToLocalTransform)].As<Matrix>(); } set { this["CachedWorldToLocalTransform"] = value; } }
        public void UnloadSkinWeightProfile(Object InProfileName) { Invoke(nameof(UnloadSkinWeightProfile), InProfileName); }
        public void UnHideBoneByName(Object BoneName) { Invoke(nameof(UnHideBoneByName), BoneName); }
        public void TransformToBoneSpace(Object BoneName, Vector InPosition, Rotator InRotation, Vector OutPosition, Rotator OutRotation) { Invoke(nameof(TransformToBoneSpace), BoneName, InPosition, InRotation, OutPosition, OutRotation); }
        public void TransformFromBoneSpace(Object BoneName, Vector InPosition, Rotator InRotation, Vector OutPosition, Rotator OutRotation) { Invoke(nameof(TransformFromBoneSpace), BoneName, InPosition, InRotation, OutPosition, OutRotation); }
        public void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex) { Invoke(nameof(ShowMaterialSection), MaterialID, SectionIndex, bShow, LODIndex); }
        public void ShowAllMaterialSections(int LODIndex) { Invoke(nameof(ShowAllMaterialSections), LODIndex); }
        public void SetVertexOffsetUsage(int LODIndex, int Usage) { Invoke(nameof(SetVertexOffsetUsage), LODIndex, Usage); }
        public void SetVertexColorOverride_LinearColor(int LODIndex, Array<LinearColor> VertexColors) { Invoke(nameof(SetVertexColorOverride_LinearColor), LODIndex, VertexColors); }
        public bool SetSkinWeightProfile(Object InProfileName) { return Invoke<bool>(nameof(SetSkinWeightProfile), InProfileName); }
        public void SetSkinWeightOverride(int LODIndex, Array<SkelMeshSkinWeightInfo> SkinWeights) { Invoke(nameof(SetSkinWeightOverride), LODIndex, SkinWeights); }
        public void SetSkinnedAssetAndUpdate(SkinnedAsset NewMesh, bool bReinitPose) { Invoke(nameof(SetSkinnedAssetAndUpdate), NewMesh, bReinitPose); }
        public void SetRenderStatic(bool bNewValue) { Invoke(nameof(SetRenderStatic), bNewValue); }
        public void SetPreSkinningOffsets(int LODIndex, Array<Vector> Offsets) { Invoke(nameof(SetPreSkinningOffsets), LODIndex, Offsets); }
        public void SetPostSkinningOffsets(int LODIndex, Array<Vector> Offsets) { Invoke(nameof(SetPostSkinningOffsets), LODIndex, Offsets); }
        public void SetPhysicsAsset(PhysicsAsset NewPhysicsAsset, bool bForceReInit) { Invoke(nameof(SetPhysicsAsset), NewPhysicsAsset, bForceReInit); }
        public void SetMinLOD(int InNewMinLOD) { Invoke(nameof(SetMinLOD), InNewMinLOD); }
        public void SetMeshDeformer(MeshDeformer InMeshDeformer) { Invoke(nameof(SetMeshDeformer), InMeshDeformer); }
        public void SetLeaderPoseComponent(SkinnedMeshComponent NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose) { Invoke(nameof(SetLeaderPoseComponent), NewLeaderBoneComponent, bForceUpdate, bInFollowerShouldTickPose); }
        public void SetForcedLOD(int InNewForcedLOD) { Invoke(nameof(SetForcedLOD), InNewForcedLOD); }
        public void SetCastCapsuleIndirectShadow(bool bNewValue) { Invoke(nameof(SetCastCapsuleIndirectShadow), bNewValue); }
        public void SetCastCapsuleDirectShadow(bool bNewValue) { Invoke(nameof(SetCastCapsuleDirectShadow), bNewValue); }
        public void SetCapsuleIndirectShadowMinVisibility(float NewValue) { Invoke(nameof(SetCapsuleIndirectShadowMinVisibility), NewValue); }
        public bool IsUsingSkinWeightProfile() { return Invoke<bool>(nameof(IsUsingSkinWeightProfile)); }
        public bool IsMaterialSectionShown(int MaterialID, int LODIndex) { return Invoke<bool>(nameof(IsMaterialSectionShown), MaterialID, LODIndex); }
        public bool IsBoneHiddenByName(Object BoneName) { return Invoke<bool>(nameof(IsBoneHiddenByName), BoneName); }
        public void HideBoneByName(Object BoneName, byte PhysBodyOption) { Invoke(nameof(HideBoneByName), BoneName, PhysBodyOption); }
        public int GetVertexOffsetUsage(int LODIndex) { return Invoke<int>(nameof(GetVertexOffsetUsage), LODIndex); }
        public bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(Object BoneName, float OutTwistAngle, float OutSwingAngle) { return Invoke<bool>(nameof(GetTwistAndSwingAngleOfDeltaRotationFromRefPose), BoneName, OutTwistAngle, OutSwingAngle); }
        public Object GetSocketBoneName(Object InSocketName) { return Invoke<Object>(nameof(GetSocketBoneName), InSocketName); }
        public SkinnedAsset GetSkinnedAsset() { return Invoke<SkinnedAsset>(nameof(GetSkinnedAsset)); }
        public SkeletalMesh GetSkeletalMesh_DEPRECATED() { return Invoke<SkeletalMesh>(nameof(GetSkeletalMesh_DEPRECATED)); }
        public Transform GetRefPoseTransform(int BoneIndex) { return Invoke<Transform>(nameof(GetRefPoseTransform), BoneIndex); }
        public Vector GetRefPosePosition(int BoneIndex) { return Invoke<Vector>(nameof(GetRefPosePosition), BoneIndex); }
        public int GetPredictedLODLevel() { return Invoke<int>(nameof(GetPredictedLODLevel)); }
        public Object GetParentBone(Object BoneName) { return Invoke<Object>(nameof(GetParentBone), BoneName); }
        public int GetNumLODs() { return Invoke<int>(nameof(GetNumLODs)); }
        public int GetNumBones() { return Invoke<int>(nameof(GetNumBones)); }
        public int GetForcedLOD() { return Invoke<int>(nameof(GetForcedLOD)); }
        public Transform GetDeltaTransformFromRefPose(Object BoneName, Object BaseName) { return Invoke<Transform>(nameof(GetDeltaTransformFromRefPose), BoneName, BaseName); }
        public Object GetCurrentSkinWeightProfileName() { return Invoke<Object>(nameof(GetCurrentSkinWeightProfileName)); }
        public Object GetBoneName(int BoneIndex) { return Invoke<Object>(nameof(GetBoneName), BoneIndex); }
        public int GetBoneIndex(Object BoneName) { return Invoke<int>(nameof(GetBoneIndex), BoneName); }
        public Object FindClosestBone_K2(Vector TestLocation, Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset) { return Invoke<Object>(nameof(FindClosestBone_K2), TestLocation, BoneLocation, IgnoreScale, bRequirePhysicsAsset); }
        public void ClearVertexColorOverride(int LODIndex) { Invoke(nameof(ClearVertexColorOverride), LODIndex); }
        public void ClearSkinWeightProfile() { Invoke(nameof(ClearSkinWeightProfile)); }
        public void ClearSkinWeightOverride(int LODIndex) { Invoke(nameof(ClearSkinWeightOverride), LODIndex); }
        public bool BoneIsChildOf(Object BoneName, Object ParentBoneName) { return Invoke<bool>(nameof(BoneIsChildOf), BoneName, ParentBoneName); }
    }
    public class StreamableRenderAsset : Object
    {
        public StreamableRenderAsset(nint addr) : base(addr) { }
        public double ForceMipLevelsToBeResidentTimestamp { get { return this[nameof(ForceMipLevelsToBeResidentTimestamp)].GetValue<double>(); } set { this[nameof(ForceMipLevelsToBeResidentTimestamp)].SetValue<double>(value); } }
        public int NumCinematicMipLevels { get { return this[nameof(NumCinematicMipLevels)].GetValue<int>(); } set { this[nameof(NumCinematicMipLevels)].SetValue<int>(value); } }
        public PerQualityLevelInt NoRefStreamingLODBias { get { return this[nameof(NoRefStreamingLODBias)].As<PerQualityLevelInt>(); } set { this["NoRefStreamingLODBias"] = value; } }
        public int StreamingIndex { get { return this[nameof(StreamingIndex)].GetValue<int>(); } set { this[nameof(StreamingIndex)].SetValue<int>(value); } }
        public int CachedCombinedLODBias { get { return this[nameof(CachedCombinedLODBias)].GetValue<int>(); } set { this[nameof(CachedCombinedLODBias)].SetValue<int>(value); } }
        public bool NeverStream { get { return this[nameof(NeverStream)].Flag; } set { this[nameof(NeverStream)].Flag = value; } }
        public bool bGlobalForceMipLevelsToBeResident { get { return this[nameof(bGlobalForceMipLevelsToBeResident)].Flag; } set { this[nameof(bGlobalForceMipLevelsToBeResident)].Flag = value; } }
        public bool bHasStreamingUpdatePending { get { return this[nameof(bHasStreamingUpdatePending)].Flag; } set { this[nameof(bHasStreamingUpdatePending)].Flag = value; } }
        public bool bForceMiplevelsToBeResident { get { return this[nameof(bForceMiplevelsToBeResident)].Flag; } set { this[nameof(bForceMiplevelsToBeResident)].Flag = value; } }
        public bool bIgnoreStreamingMipBias { get { return this[nameof(bIgnoreStreamingMipBias)].Flag; } set { this[nameof(bIgnoreStreamingMipBias)].Flag = value; } }
        public bool bUseCinematicMipLevels { get { return this[nameof(bUseCinematicMipLevels)].Flag; } set { this[nameof(bUseCinematicMipLevels)].Flag = value; } }
        public void SetForceMipLevelsToBeResident(float Seconds, int CinematicLODGroupMask) { Invoke(nameof(SetForceMipLevelsToBeResident), Seconds, CinematicLODGroupMask); }
    }
    public class SkinnedAsset : StreamableRenderAsset
    {
        public SkinnedAsset(nint addr) : base(addr) { }
        public SkeletalMeshSocket FindSocketInfo(Object InSocketName, Transform OutTransform, int OutBoneIndex, int OutIndex) { return Invoke<SkeletalMeshSocket>(nameof(FindSocketInfo), InSocketName, OutTransform, OutBoneIndex, OutIndex); }
        public SkeletalMeshSocket FindSocket(Object InSocketName) { return Invoke<SkeletalMeshSocket>(nameof(FindSocket), InSocketName); }
    }
    public class SkeletalMesh : SkinnedAsset
    {
        public SkeletalMesh(nint addr) : base(addr) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public BoxSphereBounds ImportedBounds { get { return this[nameof(ImportedBounds)].As<BoxSphereBounds>(); } set { this["ImportedBounds"] = value; } }
        public BoxSphereBounds ExtendedBounds { get { return this[nameof(ExtendedBounds)].As<BoxSphereBounds>(); } set { this["ExtendedBounds"] = value; } }
        public Vector PositiveBoundsExtension { get { return this[nameof(PositiveBoundsExtension)].As<Vector>(); } set { this["PositiveBoundsExtension"] = value; } }
        public Vector NegativeBoundsExtension { get { return this[nameof(NegativeBoundsExtension)].As<Vector>(); } set { this["NegativeBoundsExtension"] = value; } }
        public Array<SkeletalMaterial> Materials { get { return new Array<SkeletalMaterial>(this[nameof(Materials)].Address); } }
        public Array<BoneMirrorInfo> SkelMirrorTable { get { return new Array<BoneMirrorInfo>(this[nameof(SkelMirrorTable)].Address); } }
        public Array<SkeletalMeshLODInfo> LODInfo { get { return new Array<SkeletalMeshLODInfo>(this[nameof(LODInfo)].Address); } }
        public PerQualityLevelInt MinQualityLevelLOD { get { return this[nameof(MinQualityLevelLOD)].As<PerQualityLevelInt>(); } set { this["MinQualityLevelLOD"] = value; } }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public PerPlatformBool DisableBelowMinLodStripping { get { return this[nameof(DisableBelowMinLodStripping)].As<PerPlatformBool>(); } set { this["DisableBelowMinLodStripping"] = value; } }
        public byte SkelMirrorAxis { get { return this[nameof(SkelMirrorAxis)].GetValue<byte>(); } set { this[nameof(SkelMirrorAxis)].SetValue<byte>(value); } }
        public byte SkelMirrorFlipAxis { get { return this[nameof(SkelMirrorFlipAxis)].GetValue<byte>(); } set { this[nameof(SkelMirrorFlipAxis)].SetValue<byte>(value); } }
        public bool bUseFullPrecisionUVs { get { return this[nameof(bUseFullPrecisionUVs)].Flag; } set { this[nameof(bUseFullPrecisionUVs)].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this[nameof(bUseHighPrecisionTangentBasis)].Flag; } set { this[nameof(bUseHighPrecisionTangentBasis)].Flag = value; } }
        public bool bHasBeenSimplified { get { return this[nameof(bHasBeenSimplified)].Flag; } set { this[nameof(bHasBeenSimplified)].Flag = value; } }
        public bool bHasVertexColors { get { return this[nameof(bHasVertexColors)].Flag; } set { this[nameof(bHasVertexColors)].Flag = value; } }
        public bool bEnablePerPolyCollision { get { return this[nameof(bEnablePerPolyCollision)].Flag; } set { this[nameof(bEnablePerPolyCollision)].Flag = value; } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public PhysicsAsset PhysicsAsset { get { return this[nameof(PhysicsAsset)].As<PhysicsAsset>(); } set { this["PhysicsAsset"] = value; } }
        public PhysicsAsset ShadowPhysicsAsset { get { return this[nameof(ShadowPhysicsAsset)].As<PhysicsAsset>(); } set { this["ShadowPhysicsAsset"] = value; } }
        public Array<NodeMappingContainer> NodeMappingData { get { return new Array<NodeMappingContainer>(this[nameof(NodeMappingData)].Address); } }
        public bool bSupportRayTracing { get { return this[nameof(bSupportRayTracing)].Flag; } set { this[nameof(bSupportRayTracing)].Flag = value; } }
        public int RayTracingMinLOD { get { return this[nameof(RayTracingMinLOD)].GetValue<int>(); } set { this[nameof(RayTracingMinLOD)].SetValue<int>(value); } }
        public EClothLODBiasMode ClothLODBiasMode { get { return (EClothLODBiasMode)this[nameof(ClothLODBiasMode)].GetValue<int>(); } set { this[nameof(ClothLODBiasMode)].SetValue<int>((int)value); } }
        public Array<MorphTarget> MorphTargets { get { return new Array<MorphTarget>(this[nameof(MorphTargets)].Address); } }
        public Object PostProcessAnimBlueprint { get { return this[nameof(PostProcessAnimBlueprint)]; } set { this[nameof(PostProcessAnimBlueprint)] = value; } }
        public Array<ClothingAssetBase> MeshClothingAssets { get { return new Array<ClothingAssetBase>(this[nameof(MeshClothingAssets)].Address); } }
        public SkeletalMeshSamplingInfo SamplingInfo { get { return this[nameof(SamplingInfo)].As<SkeletalMeshSamplingInfo>(); } set { this["SamplingInfo"] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public Array<SkeletalMeshSocket> Sockets { get { return new Array<SkeletalMeshSocket>(this[nameof(Sockets)].Address); } }
        public Array<SkinWeightProfileInfo> SkinWeightProfiles { get { return new Array<SkinWeightProfileInfo>(this[nameof(SkinWeightProfiles)].Address); } }
        public MeshDeformer DefaultMeshDeformer { get { return this[nameof(DefaultMeshDeformer)].As<MeshDeformer>(); } set { this["DefaultMeshDeformer"] = value; } }
        public void SetSkeleton(Skeleton InSkeleton) { Invoke(nameof(SetSkeleton), InSkeleton); }
        public void SetMorphTargets(Array<MorphTarget> InMorphTargets) { Invoke(nameof(SetMorphTargets), InMorphTargets); }
        public void SetMinLODForQualityLevels(Object QualityLevelMinimumLODs, int Default) { Invoke(nameof(SetMinLODForQualityLevels), QualityLevelMinimumLODs, Default); }
        public void SetMeshClothingAssets(Array<ClothingAssetBase> InMeshClothingAssets) { Invoke(nameof(SetMeshClothingAssets), InMeshClothingAssets); }
        public void SetMaterials(Array<SkeletalMaterial> InMaterials) { Invoke(nameof(SetMaterials), InMaterials); }
        public void SetLODSettings(SkeletalMeshLODSettings InLODSettings) { Invoke(nameof(SetLODSettings), InLODSettings); }
        public void SetDefaultAnimatingRig(Object InAnimatingRig) { Invoke(nameof(SetDefaultAnimatingRig), InAnimatingRig); }
        public int NumSockets() { return Invoke<int>(nameof(NumSockets)); }
        public Array<Object> K2_GetAllMorphTargetNames() { return Invoke<Array<Object>>(nameof(K2_GetAllMorphTargetNames)); }
        public bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections) { return Invoke<bool>(nameof(IsSectionUsingCloth), InSectionIndex, bCheckCorrespondingSections); }
        public SkeletalMeshSocket GetSocketByIndex(int Index) { return Invoke<SkeletalMeshSocket>(nameof(GetSocketByIndex), Index); }
        public Skeleton GetSkeleton() { return Invoke<Skeleton>(nameof(GetSkeleton)); }
        public PhysicsAsset GetShadowPhysicsAsset() { return Invoke<PhysicsAsset>(nameof(GetShadowPhysicsAsset)); }
        public PhysicsAsset GetPhysicsAsset() { return Invoke<PhysicsAsset>(nameof(GetPhysicsAsset)); }
        public Array<NodeMappingContainer> GetNodeMappingData() { return Invoke<Array<NodeMappingContainer>>(nameof(GetNodeMappingData)); }
        public NodeMappingContainer GetNodeMappingContainer(Blueprint SourceAsset) { return Invoke<NodeMappingContainer>(nameof(GetNodeMappingContainer), SourceAsset); }
        public Array<MorphTarget> GetMorphTargetsPtrConv() { return Invoke<Array<MorphTarget>>(nameof(GetMorphTargetsPtrConv)); }
        public void GetMinLODForQualityLevels(Object QualityLevelMinimumLODs, int Default) { Invoke(nameof(GetMinLODForQualityLevels), QualityLevelMinimumLODs, Default); }
        public Array<ClothingAssetBase> GetMeshClothingAssets() { return Invoke<Array<ClothingAssetBase>>(nameof(GetMeshClothingAssets)); }
        public Array<SkeletalMaterial> GetMaterials() { return Invoke<Array<SkeletalMaterial>>(nameof(GetMaterials)); }
        public SkeletalMeshLODSettings GetLODSettings() { return Invoke<SkeletalMeshLODSettings>(nameof(GetLODSettings)); }
        public BoxSphereBounds GetImportedBounds() { return Invoke<BoxSphereBounds>(nameof(GetImportedBounds)); }
        public Object GetDefaultAnimatingRig() { return Invoke<Object>(nameof(GetDefaultAnimatingRig)); }
        public BoxSphereBounds GetBounds() { return Invoke<BoxSphereBounds>(nameof(GetBounds)); }
        public SkeletalMeshSocket FindSocketAndIndex(Object InSocketName, int OutIndex) { return Invoke<SkeletalMeshSocket>(nameof(FindSocketAndIndex), InSocketName, OutIndex); }
    }
    public class TimecodeProvider : Object
    {
        public TimecodeProvider(nint addr) : base(addr) { }
        public float FrameDelay { get { return this[nameof(FrameDelay)].GetValue<float>(); } set { this[nameof(FrameDelay)].SetValue<float>(value); } }
        public Timecode GetTimecode() { return Invoke<Timecode>(nameof(GetTimecode)); }
        public ETimecodeProviderSynchronizationState GetSynchronizationState() { return Invoke<ETimecodeProviderSynchronizationState>(nameof(GetSynchronizationState)); }
        public QualifiedFrameTime GetQualifiedFrameTime() { return Invoke<QualifiedFrameTime>(nameof(GetQualifiedFrameTime)); }
        public FrameRate GetFrameRate() { return Invoke<FrameRate>(nameof(GetFrameRate)); }
        public Timecode GetDelayedTimecode() { return Invoke<Timecode>(nameof(GetDelayedTimecode)); }
        public QualifiedFrameTime GetDelayedQualifiedFrameTime() { return Invoke<QualifiedFrameTime>(nameof(GetDelayedQualifiedFrameTime)); }
        public bool FetchTimecode(QualifiedFrameTime OutFrameTime) { return Invoke<bool>(nameof(FetchTimecode), OutFrameTime); }
        public void FetchAndUpdate() { Invoke(nameof(FetchAndUpdate)); }
    }
    public class DataAsset : Object
    {
        public DataAsset(nint addr) : base(addr) { }
        public Object NativeClass { get { return this[nameof(NativeClass)]; } set { this[nameof(NativeClass)] = value; } }
    }
    public class PrimaryDataAsset : DataAsset
    {
        public PrimaryDataAsset(nint addr) : base(addr) { }
    }
    public class GameInstance : Object
    {
        public GameInstance(nint addr) : base(addr) { }
        public Array<LocalPlayer> LocalPlayers { get { return new Array<LocalPlayer>(this[nameof(LocalPlayers)].Address); } }
        public OnlineSession OnlineSession { get { return this[nameof(OnlineSession)].As<OnlineSession>(); } set { this["OnlineSession"] = value; } }
        public Array<Object> ReferencedObjects { get { return new Array<Object>(this[nameof(ReferencedObjects)].Address); } }
        public Object OnPawnControllerChangedDelegates { get { return this[nameof(OnPawnControllerChangedDelegates)]; } set { this[nameof(OnPawnControllerChangedDelegates)] = value; } }
        public Object OnInputDeviceConnectionChange { get { return this[nameof(OnInputDeviceConnectionChange)]; } set { this[nameof(OnInputDeviceConnectionChange)] = value; } }
        public Object OnUserInputDevicePairingChange { get { return this[nameof(OnUserInputDevicePairingChange)]; } set { this[nameof(OnUserInputDevicePairingChange)] = value; } }
        public void ReceiveShutdown() { Invoke(nameof(ReceiveShutdown)); }
        public void ReceiveInit() { Invoke(nameof(ReceiveInit)); }
        public void HandleTravelError(byte FailureType) { Invoke(nameof(HandleTravelError), FailureType); }
        public void HandleNetworkError(byte FailureType, bool bIsServer) { Invoke(nameof(HandleNetworkError), FailureType, bIsServer); }
        public void DebugRemovePlayer(int ControllerId) { Invoke(nameof(DebugRemovePlayer), ControllerId); }
        public void DebugCreatePlayer(int ControllerId) { Invoke(nameof(DebugCreatePlayer), ControllerId); }
    }
    public class GameInstanceSubsystem : Subsystem
    {
        public GameInstanceSubsystem(nint addr) : base(addr) { }
    }
    public class Controller : Actor
    {
        public Controller(nint addr) : base(addr) { }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
        public Object OnInstigatedAnyDamage { get { return this[nameof(OnInstigatedAnyDamage)]; } set { this[nameof(OnInstigatedAnyDamage)] = value; } }
        public Object OnPossessedPawnChanged { get { return this[nameof(OnPossessedPawnChanged)]; } set { this[nameof(OnPossessedPawnChanged)] = value; } }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
        public Pawn Pawn { get { return this[nameof(Pawn)].As<Pawn>(); } set { this["Pawn"] = value; } }
        public Character Character { get { return this[nameof(Character)].As<Character>(); } set { this["Character"] = value; } }
        public SceneComponent TransformComponent { get { return this[nameof(TransformComponent)].As<SceneComponent>(); } set { this["TransformComponent"] = value; } }
        public Rotator ControlRotation { get { return this[nameof(ControlRotation)].As<Rotator>(); } set { this["ControlRotation"] = value; } }
        public bool bAttachToPawn { get { return this[nameof(bAttachToPawn)].Flag; } set { this[nameof(bAttachToPawn)].Flag = value; } }
        public void UnPossess() { Invoke(nameof(UnPossess)); }
        public void StopMovement() { Invoke(nameof(StopMovement)); }
        public void SetInitialLocationAndRotation(Vector NewLocation, Rotator NewRotation) { Invoke(nameof(SetInitialLocationAndRotation), NewLocation, NewRotation); }
        public void SetIgnoreMoveInput(bool bNewMoveInput) { Invoke(nameof(SetIgnoreMoveInput), bNewMoveInput); }
        public void SetIgnoreLookInput(bool bNewLookInput) { Invoke(nameof(SetIgnoreLookInput), bNewLookInput); }
        public void SetControlRotation(Rotator NewRotation) { Invoke(nameof(SetControlRotation), NewRotation); }
        public void ResetIgnoreMoveInput() { Invoke(nameof(ResetIgnoreMoveInput)); }
        public void ResetIgnoreLookInput() { Invoke(nameof(ResetIgnoreLookInput)); }
        public void ResetIgnoreInputFlags() { Invoke(nameof(ResetIgnoreInputFlags)); }
        public void ReceiveUnPossess(Pawn UnpossessedPawn) { Invoke(nameof(ReceiveUnPossess), UnpossessedPawn); }
        public void ReceivePossess(Pawn PossessedPawn) { Invoke(nameof(ReceivePossess), PossessedPawn); }
        public void ReceiveInstigatedAnyDamage(float Damage, DamageType DamageType, Actor DamagedActor, Actor DamageCauser) { Invoke(nameof(ReceiveInstigatedAnyDamage), Damage, DamageType, DamagedActor, DamageCauser); }
        public void Possess(Pawn InPawn) { Invoke(nameof(Possess), InPawn); }
        public void OnRep_PlayerState() { Invoke(nameof(OnRep_PlayerState)); }
        public void OnRep_Pawn() { Invoke(nameof(OnRep_Pawn)); }
        public bool LineOfSightTo(Actor Other, Vector ViewPoint, bool bAlternateChecks) { return Invoke<bool>(nameof(LineOfSightTo), Other, ViewPoint, bAlternateChecks); }
        public Pawn K2_GetPawn() { return Invoke<Pawn>(nameof(K2_GetPawn)); }
        public bool IsPlayerController() { return Invoke<bool>(nameof(IsPlayerController)); }
        public bool IsMoveInputIgnored() { return Invoke<bool>(nameof(IsMoveInputIgnored)); }
        public bool IsLookInputIgnored() { return Invoke<bool>(nameof(IsLookInputIgnored)); }
        public bool IsLocalPlayerController() { return Invoke<bool>(nameof(IsLocalPlayerController)); }
        public bool IsLocalController() { return Invoke<bool>(nameof(IsLocalController)); }
        public Actor GetViewTarget() { return Invoke<Actor>(nameof(GetViewTarget)); }
        public void GetPlayerViewPoint(Vector Location, Rotator Rotation) { Invoke(nameof(GetPlayerViewPoint), Location, Rotation); }
        public Rotator GetDesiredRotation() { return Invoke<Rotator>(nameof(GetDesiredRotation)); }
        public Rotator GetControlRotation() { return Invoke<Rotator>(nameof(GetControlRotation)); }
        public void ClientSetRotation(Rotator NewRotation, bool bResetCamera) { Invoke(nameof(ClientSetRotation), NewRotation, bResetCamera); }
        public void ClientSetLocation(Vector NewLocation, Rotator NewRotation) { Invoke(nameof(ClientSetLocation), NewLocation, NewRotation); }
    }
    public class Pawn : Actor
    {
        public Pawn(nint addr) : base(addr) { }
        public bool bUseControllerRotationPitch { get { return this[nameof(bUseControllerRotationPitch)].Flag; } set { this[nameof(bUseControllerRotationPitch)].Flag = value; } }
        public bool bUseControllerRotationYaw { get { return this[nameof(bUseControllerRotationYaw)].Flag; } set { this[nameof(bUseControllerRotationYaw)].Flag = value; } }
        public bool bUseControllerRotationRoll { get { return this[nameof(bUseControllerRotationRoll)].Flag; } set { this[nameof(bUseControllerRotationRoll)].Flag = value; } }
        public bool bCanAffectNavigationGeneration { get { return this[nameof(bCanAffectNavigationGeneration)].Flag; } set { this[nameof(bCanAffectNavigationGeneration)].Flag = value; } }
        public bool bIsLocalViewTarget { get { return this[nameof(bIsLocalViewTarget)].Flag; } set { this[nameof(bIsLocalViewTarget)].Flag = value; } }
        public float BaseEyeHeight { get { return this[nameof(BaseEyeHeight)].GetValue<float>(); } set { this[nameof(BaseEyeHeight)].SetValue<float>(value); } }
        public byte AutoPossessPlayer { get { return this[nameof(AutoPossessPlayer)].GetValue<byte>(); } set { this[nameof(AutoPossessPlayer)].SetValue<byte>(value); } }
        public EAutoPossessAI AutoPossessAI { get { return (EAutoPossessAI)this[nameof(AutoPossessAI)].GetValue<int>(); } set { this[nameof(AutoPossessAI)].SetValue<int>((int)value); } }
        public byte RemoteViewPitch { get { return this[nameof(RemoteViewPitch)].GetValue<byte>(); } set { this[nameof(RemoteViewPitch)].SetValue<byte>(value); } }
        public Object AIControllerClass { get { return this[nameof(AIControllerClass)]; } set { this[nameof(AIControllerClass)] = value; } }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
        public Controller LastHitBy { get { return this[nameof(LastHitBy)].As<Controller>(); } set { this["LastHitBy"] = value; } }
        public Controller Controller { get { return this[nameof(Controller)].As<Controller>(); } set { this["Controller"] = value; } }
        public Controller PreviousController { get { return this[nameof(PreviousController)].As<Controller>(); } set { this["PreviousController"] = value; } }
        public Object ReceiveControllerChangedDelegate { get { return this[nameof(ReceiveControllerChangedDelegate)]; } set { this[nameof(ReceiveControllerChangedDelegate)] = value; } }
        public Object ReceiveRestartedDelegate { get { return this[nameof(ReceiveRestartedDelegate)]; } set { this[nameof(ReceiveRestartedDelegate)] = value; } }
        public Vector ControlInputVector { get { return this[nameof(ControlInputVector)].As<Vector>(); } set { this["ControlInputVector"] = value; } }
        public Vector LastControlInputVector { get { return this[nameof(LastControlInputVector)].As<Vector>(); } set { this["LastControlInputVector"] = value; } }
        public Object OverrideInputComponentClass { get { return this[nameof(OverrideInputComponentClass)]; } set { this[nameof(OverrideInputComponentClass)] = value; } }
        public void SpawnDefaultController() { Invoke(nameof(SpawnDefaultController)); }
        public void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate) { Invoke(nameof(SetCanAffectNavigationGeneration), bNewValue, bForceUpdate); }
        public void ReceiveUnpossessed(Controller OldController) { Invoke(nameof(ReceiveUnpossessed), OldController); }
        public void ReceiveRestarted() { Invoke(nameof(ReceiveRestarted)); }
        public void ReceivePossessed(Controller NewController) { Invoke(nameof(ReceivePossessed), NewController); }
        public void ReceiveControllerChanged(Controller OldController, Controller NewController) { Invoke(nameof(ReceiveControllerChanged), OldController, NewController); }
        public void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor NoiseMaker) { Invoke(nameof(PawnMakeNoise), Loudness, NoiseLocation, bUseNoiseMakerLocation, NoiseMaker); }
        public void OnRep_PlayerState() { Invoke(nameof(OnRep_PlayerState)); }
        public void OnRep_Controller() { Invoke(nameof(OnRep_Controller)); }
        public bool IsPlayerControlled() { return Invoke<bool>(nameof(IsPlayerControlled)); }
        public bool IsPawnControlled() { return Invoke<bool>(nameof(IsPawnControlled)); }
        public bool IsMoveInputIgnored() { return Invoke<bool>(nameof(IsMoveInputIgnored)); }
        public bool IsLocallyViewed() { return Invoke<bool>(nameof(IsLocallyViewed)); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool IsControlled() { return Invoke<bool>(nameof(IsControlled)); }
        public bool IsBotControlled() { return Invoke<bool>(nameof(IsBotControlled)); }
        public Vector GetPendingMovementInputVector() { return Invoke<Vector>(nameof(GetPendingMovementInputVector)); }
        public Object GetOverrideInputComponentClass() { return Invoke<Object>(nameof(GetOverrideInputComponentClass)); }
        public Vector GetNavAgentLocation() { return Invoke<Vector>(nameof(GetNavAgentLocation)); }
        public PawnMovementComponent GetMovementComponent() { return Invoke<PawnMovementComponent>(nameof(GetMovementComponent)); }
        public Actor GetMovementBaseActor(Pawn Pawn) { return Invoke<Actor>(nameof(GetMovementBaseActor), Pawn); }
        public PlayerController GetLocalViewingPlayerController() { return Invoke<PlayerController>(nameof(GetLocalViewingPlayerController)); }
        public Vector GetLastMovementInputVector() { return Invoke<Vector>(nameof(GetLastMovementInputVector)); }
        public Rotator GetControlRotation() { return Invoke<Rotator>(nameof(GetControlRotation)); }
        public Controller GetController() { return Invoke<Controller>(nameof(GetController)); }
        public Rotator GetBaseAimRotation() { return Invoke<Rotator>(nameof(GetBaseAimRotation)); }
        public void DetachFromControllerPendingDestroy() { Invoke(nameof(DetachFromControllerPendingDestroy)); }
        public Vector ConsumeMovementInputVector() { return Invoke<Vector>(nameof(ConsumeMovementInputVector)); }
        public void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce) { Invoke(nameof(AddMovementInput), WorldDirection, ScaleValue, bForce); }
        public void AddControllerYawInput(float Val) { Invoke(nameof(AddControllerYawInput), Val); }
        public void AddControllerRollInput(float Val) { Invoke(nameof(AddControllerRollInput), Val); }
        public void AddControllerPitchInput(float Val) { Invoke(nameof(AddControllerPitchInput), Val); }
    }
    public class Character : Pawn
    {
        public Character(nint addr) : base(addr) { }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public CharacterMovementComponent CharacterMovement { get { return this[nameof(CharacterMovement)].As<CharacterMovementComponent>(); } set { this["CharacterMovement"] = value; } }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public BasedMovementInfo BasedMovement { get { return this[nameof(BasedMovement)].As<BasedMovementInfo>(); } set { this["BasedMovement"] = value; } }
        public BasedMovementInfo ReplicatedBasedMovement { get { return this[nameof(ReplicatedBasedMovement)].As<BasedMovementInfo>(); } set { this["ReplicatedBasedMovement"] = value; } }
        public float AnimRootMotionTranslationScale { get { return this[nameof(AnimRootMotionTranslationScale)].GetValue<float>(); } set { this[nameof(AnimRootMotionTranslationScale)].SetValue<float>(value); } }
        public Vector BaseTranslationOffset { get { return this[nameof(BaseTranslationOffset)].As<Vector>(); } set { this["BaseTranslationOffset"] = value; } }
        public Quat BaseRotationOffset { get { return this[nameof(BaseRotationOffset)].As<Quat>(); } set { this["BaseRotationOffset"] = value; } }
        public float ReplicatedServerLastTransformUpdateTimeStamp { get { return this[nameof(ReplicatedServerLastTransformUpdateTimeStamp)].GetValue<float>(); } set { this[nameof(ReplicatedServerLastTransformUpdateTimeStamp)].SetValue<float>(value); } }
        public float ReplayLastTransformUpdateTimeStamp { get { return this[nameof(ReplayLastTransformUpdateTimeStamp)].GetValue<float>(); } set { this[nameof(ReplayLastTransformUpdateTimeStamp)].SetValue<float>(value); } }
        public byte ReplicatedMovementMode { get { return this[nameof(ReplicatedMovementMode)].GetValue<byte>(); } set { this[nameof(ReplicatedMovementMode)].SetValue<byte>(value); } }
        public bool bInBaseReplication { get { return this[nameof(bInBaseReplication)].Flag; } set { this[nameof(bInBaseReplication)].Flag = value; } }
        public float CrouchedEyeHeight { get { return this[nameof(CrouchedEyeHeight)].GetValue<float>(); } set { this[nameof(CrouchedEyeHeight)].SetValue<float>(value); } }
        public bool bIsCrouched { get { return this[nameof(bIsCrouched)].Flag; } set { this[nameof(bIsCrouched)].Flag = value; } }
        public bool bProxyIsJumpForceApplied { get { return this[nameof(bProxyIsJumpForceApplied)].Flag; } set { this[nameof(bProxyIsJumpForceApplied)].Flag = value; } }
        public bool bPressedJump { get { return this[nameof(bPressedJump)].Flag; } set { this[nameof(bPressedJump)].Flag = value; } }
        public bool bClientUpdating { get { return this[nameof(bClientUpdating)].Flag; } set { this[nameof(bClientUpdating)].Flag = value; } }
        public bool bClientWasFalling { get { return this[nameof(bClientWasFalling)].Flag; } set { this[nameof(bClientWasFalling)].Flag = value; } }
        public bool bClientResimulateRootMotion { get { return this[nameof(bClientResimulateRootMotion)].Flag; } set { this[nameof(bClientResimulateRootMotion)].Flag = value; } }
        public bool bClientResimulateRootMotionSources { get { return this[nameof(bClientResimulateRootMotionSources)].Flag; } set { this[nameof(bClientResimulateRootMotionSources)].Flag = value; } }
        public bool bSimGravityDisabled { get { return this[nameof(bSimGravityDisabled)].Flag; } set { this[nameof(bSimGravityDisabled)].Flag = value; } }
        public bool bClientCheckEncroachmentOnNetUpdate { get { return this[nameof(bClientCheckEncroachmentOnNetUpdate)].Flag; } set { this[nameof(bClientCheckEncroachmentOnNetUpdate)].Flag = value; } }
        public bool bServerMoveIgnoreRootMotion { get { return this[nameof(bServerMoveIgnoreRootMotion)].Flag; } set { this[nameof(bServerMoveIgnoreRootMotion)].Flag = value; } }
        public bool bWasJumping { get { return this[nameof(bWasJumping)].Flag; } set { this[nameof(bWasJumping)].Flag = value; } }
        public float JumpKeyHoldTime { get { return this[nameof(JumpKeyHoldTime)].GetValue<float>(); } set { this[nameof(JumpKeyHoldTime)].SetValue<float>(value); } }
        public float JumpForceTimeRemaining { get { return this[nameof(JumpForceTimeRemaining)].GetValue<float>(); } set { this[nameof(JumpForceTimeRemaining)].SetValue<float>(value); } }
        public float ProxyJumpForceStartedTime { get { return this[nameof(ProxyJumpForceStartedTime)].GetValue<float>(); } set { this[nameof(ProxyJumpForceStartedTime)].SetValue<float>(value); } }
        public float JumpMaxHoldTime { get { return this[nameof(JumpMaxHoldTime)].GetValue<float>(); } set { this[nameof(JumpMaxHoldTime)].SetValue<float>(value); } }
        public int JumpMaxCount { get { return this[nameof(JumpMaxCount)].GetValue<int>(); } set { this[nameof(JumpMaxCount)].SetValue<int>(value); } }
        public int JumpCurrentCount { get { return this[nameof(JumpCurrentCount)].GetValue<int>(); } set { this[nameof(JumpCurrentCount)].SetValue<int>(value); } }
        public int JumpCurrentCountPreJump { get { return this[nameof(JumpCurrentCountPreJump)].GetValue<int>(); } set { this[nameof(JumpCurrentCountPreJump)].SetValue<int>(value); } }
        public Object OnReachedJumpApex { get { return this[nameof(OnReachedJumpApex)]; } set { this[nameof(OnReachedJumpApex)] = value; } }
        public Object LandedDelegate { get { return this[nameof(LandedDelegate)]; } set { this[nameof(LandedDelegate)] = value; } }
        public Object MovementModeChangedDelegate { get { return this[nameof(MovementModeChangedDelegate)]; } set { this[nameof(MovementModeChangedDelegate)] = value; } }
        public Object OnCharacterMovementUpdated { get { return this[nameof(OnCharacterMovementUpdated)]; } set { this[nameof(OnCharacterMovementUpdated)] = value; } }
        public RootMotionSourceGroup SavedRootMotion { get { return this[nameof(SavedRootMotion)].As<RootMotionSourceGroup>(); } set { this["SavedRootMotion"] = value; } }
        public RootMotionMovementParams ClientRootMotionParams { get { return this[nameof(ClientRootMotionParams)].As<RootMotionMovementParams>(); } set { this["ClientRootMotionParams"] = value; } }
        public Array<SimulatedRootMotionReplicatedMove> RootMotionRepMoves { get { return new Array<SimulatedRootMotionReplicatedMove>(this[nameof(RootMotionRepMoves)].Address); } }
        public RepRootMotionMontage RepRootMotion { get { return this[nameof(RepRootMotion)].As<RepRootMotionMontage>(); } set { this["RepRootMotion"] = value; } }
        public void UnCrouch(bool bClientSimulation) { Invoke(nameof(UnCrouch), bClientSimulation); }
        public void StopJumping() { Invoke(nameof(StopJumping)); }
        public void StopAnimMontage(AnimMontage AnimMontage) { Invoke(nameof(StopAnimMontage), AnimMontage); }
        public void ServerMovePacked(CharacterServerMovePackedBits PackedBits) { Invoke(nameof(ServerMovePacked), PackedBits); }
        public void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags) { Invoke(nameof(ServerMoveOld), OldTimeStamp, OldAccel, OldMoveFlags); }
        public void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint View, byte ClientMovementMode) { Invoke(nameof(ServerMoveNoBase), Timestamp, InAccel, ClientLoc, CompressedMoveFlags, ClientRoll, View, ClientMovementMode); }
        public void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, byte ClientMovementMode) { Invoke(nameof(ServerMoveDualNoBase), TimeStamp0, InAccel0, PendingFlags, View0, Timestamp, InAccel, ClientLoc, NewFlags, ClientRoll, View, ClientMovementMode); }
        public void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, PrimitiveComponent ClientMovementBase, Object ClientBaseBoneName, byte ClientMovementMode) { Invoke(nameof(ServerMoveDualHybridRootMotion), TimeStamp0, InAccel0, PendingFlags, View0, Timestamp, InAccel, ClientLoc, NewFlags, ClientRoll, View, ClientMovementBase, ClientBaseBoneName, ClientMovementMode); }
        public void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint View, PrimitiveComponent ClientMovementBase, Object ClientBaseBoneName, byte ClientMovementMode) { Invoke(nameof(ServerMoveDual), TimeStamp0, InAccel0, PendingFlags, View0, Timestamp, InAccel, ClientLoc, NewFlags, ClientRoll, View, ClientMovementBase, ClientBaseBoneName, ClientMovementMode); }
        public void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint View, PrimitiveComponent ClientMovementBase, Object ClientBaseBoneName, byte ClientMovementMode) { Invoke(nameof(ServerMove), Timestamp, InAccel, ClientLoc, CompressedMoveFlags, ClientRoll, View, ClientMovementBase, ClientBaseBoneName, ClientMovementMode); }
        public void RootMotionDebugClientPrintOnScreen(Object InString) { Invoke(nameof(RootMotionDebugClientPrintOnScreen), InString); }
        public float PlayAnimMontage(AnimMontage AnimMontage, float InPlayRate, Object StartSectionName) { return Invoke<float>(nameof(PlayAnimMontage), AnimMontage, InPlayRate, StartSectionName); }
        public void OnWalkingOffLedge(Vector PreviousFloorImpactNormal, Vector PreviousFloorContactNormal, Vector PreviousLocation, float TimeDelta) { Invoke(nameof(OnWalkingOffLedge), PreviousFloorImpactNormal, PreviousFloorContactNormal, PreviousLocation, TimeDelta); }
        public void OnRep_RootMotion() { Invoke(nameof(OnRep_RootMotion)); }
        public void OnRep_ReplicatedBasedMovement() { Invoke(nameof(OnRep_ReplicatedBasedMovement)); }
        public void OnRep_ReplayLastTransformUpdateTimeStamp() { Invoke(nameof(OnRep_ReplayLastTransformUpdateTimeStamp)); }
        public void OnRep_IsCrouched() { Invoke(nameof(OnRep_IsCrouched)); }
        public void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride) { Invoke(nameof(OnLaunched), LaunchVelocity, bXYOverride, bZOverride); }
        public void OnLanded(HitResult Hit) { Invoke(nameof(OnLanded), Hit); }
        public void OnJumped() { Invoke(nameof(OnJumped)); }
        public void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride) { Invoke(nameof(LaunchCharacter), LaunchVelocity, bXYOverride, bZOverride); }
        public void K2_UpdateCustomMovement(float DeltaTime) { Invoke(nameof(K2_UpdateCustomMovement), DeltaTime); }
        public void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) { Invoke(nameof(K2_OnStartCrouch), HalfHeightAdjust, ScaledHalfHeightAdjust); }
        public void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode) { Invoke(nameof(K2_OnMovementModeChanged), PrevMovementMode, NewMovementMode, PrevCustomMode, NewCustomMode); }
        public void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) { Invoke(nameof(K2_OnEndCrouch), HalfHeightAdjust, ScaledHalfHeightAdjust); }
        public void Jump() { Invoke(nameof(Jump)); }
        public bool IsPlayingRootMotion() { return Invoke<bool>(nameof(IsPlayingRootMotion)); }
        public bool IsPlayingNetworkedRootMotionMontage() { return Invoke<bool>(nameof(IsPlayingNetworkedRootMotionMontage)); }
        public bool IsJumpProvidingForce() { return Invoke<bool>(nameof(IsJumpProvidingForce)); }
        public bool HasAnyRootMotion() { return Invoke<bool>(nameof(HasAnyRootMotion)); }
        public AnimMontage GetCurrentMontage() { return Invoke<AnimMontage>(nameof(GetCurrentMontage)); }
        public Vector GetBaseTranslationOffset() { return Invoke<Vector>(nameof(GetBaseTranslationOffset)); }
        public Rotator GetBaseRotationOffsetRotator() { return Invoke<Rotator>(nameof(GetBaseRotationOffsetRotator)); }
        public float GetAnimRootMotionTranslationScale() { return Invoke<float>(nameof(GetAnimRootMotionTranslationScale)); }
        public void Crouch(bool bClientSimulation) { Invoke(nameof(Crouch), bClientSimulation); }
        public void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent NewBase, Object NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode) { Invoke(nameof(ClientVeryShortAdjustPosition), Timestamp, NewLoc, NewBase, NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode); }
        public void ClientMoveResponsePacked(CharacterMoveResponsePackedBits PackedBits) { Invoke(nameof(ClientMoveResponsePacked), PackedBits); }
        public void ClientCheatWalk() { Invoke(nameof(ClientCheatWalk)); }
        public void ClientCheatGhost() { Invoke(nameof(ClientCheatGhost)); }
        public void ClientCheatFly() { Invoke(nameof(ClientCheatFly)); }
        public void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent ServerBase, Object ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode) { Invoke(nameof(ClientAdjustRootMotionSourcePosition), Timestamp, ServerRootMotion, bHasAnimRootMotion, ServerMontageTrackPosition, ServerLoc, ServerRotation, ServerVelZ, ServerBase, ServerBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode); }
        public void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent ServerBase, Object ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode) { Invoke(nameof(ClientAdjustRootMotionPosition), Timestamp, ServerMontageTrackPosition, ServerLoc, ServerRotation, ServerVelZ, ServerBase, ServerBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode); }
        public void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent NewBase, Object NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode) { Invoke(nameof(ClientAdjustPosition), Timestamp, NewLoc, NewVel, NewBase, NewBaseBoneName, bHasBase, bBaseRelativePosition, ServerMovementMode); }
        public void ClientAckGoodMove(float Timestamp) { Invoke(nameof(ClientAckGoodMove), Timestamp); }
        public bool CanJumpInternal() { return Invoke<bool>(nameof(CanJumpInternal)); }
        public bool CanJump() { return Invoke<bool>(nameof(CanJump)); }
        public bool CanCrouch() { return Invoke<bool>(nameof(CanCrouch)); }
        public void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation) { Invoke(nameof(CacheInitialMeshOffset), MeshRelativeLocation, MeshRelativeRotation); }
    }
    public class Info : Actor
    {
        public Info(nint addr) : base(addr) { }
    }
    public class GameModeBase : Info
    {
        public GameModeBase(nint addr) : base(addr) { }
        public Object OptionsString { get { return this[nameof(OptionsString)]; } set { this[nameof(OptionsString)] = value; } }
        public Object GameSessionClass { get { return this[nameof(GameSessionClass)]; } set { this[nameof(GameSessionClass)] = value; } }
        public Object GameStateClass { get { return this[nameof(GameStateClass)]; } set { this[nameof(GameStateClass)] = value; } }
        public Object PlayerControllerClass { get { return this[nameof(PlayerControllerClass)]; } set { this[nameof(PlayerControllerClass)] = value; } }
        public Object PlayerStateClass { get { return this[nameof(PlayerStateClass)]; } set { this[nameof(PlayerStateClass)] = value; } }
        public Object HUDClass { get { return this[nameof(HUDClass)]; } set { this[nameof(HUDClass)] = value; } }
        public Object DefaultPawnClass { get { return this[nameof(DefaultPawnClass)]; } set { this[nameof(DefaultPawnClass)] = value; } }
        public Object SpectatorClass { get { return this[nameof(SpectatorClass)]; } set { this[nameof(SpectatorClass)] = value; } }
        public Object ReplaySpectatorPlayerControllerClass { get { return this[nameof(ReplaySpectatorPlayerControllerClass)]; } set { this[nameof(ReplaySpectatorPlayerControllerClass)] = value; } }
        public Object ServerStatReplicatorClass { get { return this[nameof(ServerStatReplicatorClass)]; } set { this[nameof(ServerStatReplicatorClass)] = value; } }
        public GameSession GameSession { get { return this[nameof(GameSession)].As<GameSession>(); } set { this["GameSession"] = value; } }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public ServerStatReplicator ServerStatReplicator { get { return this[nameof(ServerStatReplicator)].As<ServerStatReplicator>(); } set { this["ServerStatReplicator"] = value; } }
        public Object DefaultPlayerName { get { return this[nameof(DefaultPlayerName)]; } set { this[nameof(DefaultPlayerName)] = value; } }
        public bool bUseSeamlessTravel { get { return this[nameof(bUseSeamlessTravel)].Flag; } set { this[nameof(bUseSeamlessTravel)].Flag = value; } }
        public bool bStartPlayersAsSpectators { get { return this[nameof(bStartPlayersAsSpectators)].Flag; } set { this[nameof(bStartPlayersAsSpectators)].Flag = value; } }
        public bool bPauseable { get { return this[nameof(bPauseable)].Flag; } set { this[nameof(bPauseable)].Flag = value; } }
        public void StartPlay() { Invoke(nameof(StartPlay)); }
        public Pawn SpawnDefaultPawnFor(Controller NewPlayer, Actor StartSpot) { return Invoke<Pawn>(nameof(SpawnDefaultPawnFor), NewPlayer, StartSpot); }
        public Pawn SpawnDefaultPawnAtTransform(Controller NewPlayer, Transform SpawnTransform) { return Invoke<Pawn>(nameof(SpawnDefaultPawnAtTransform), NewPlayer, SpawnTransform); }
        public bool ShouldReset(Actor ActorToReset) { return Invoke<bool>(nameof(ShouldReset), ActorToReset); }
        public void ReturnToMainMenuHost() { Invoke(nameof(ReturnToMainMenuHost)); }
        public void RestartPlayerAtTransform(Controller NewPlayer, Transform SpawnTransform) { Invoke(nameof(RestartPlayerAtTransform), NewPlayer, SpawnTransform); }
        public void RestartPlayerAtPlayerStart(Controller NewPlayer, Actor StartSpot) { Invoke(nameof(RestartPlayerAtPlayerStart), NewPlayer, StartSpot); }
        public void RestartPlayer(Controller NewPlayer) { Invoke(nameof(RestartPlayer), NewPlayer); }
        public void ResetLevel() { Invoke(nameof(ResetLevel)); }
        public bool PlayerCanRestart(PlayerController Player) { return Invoke<bool>(nameof(PlayerCanRestart), Player); }
        public bool MustSpectate(PlayerController NewPlayerController) { return Invoke<bool>(nameof(MustSpectate), NewPlayerController); }
        public void K2_PostLogin(PlayerController NewPlayer) { Invoke(nameof(K2_PostLogin), NewPlayer); }
        public void K2_OnSwapPlayerControllers(PlayerController OldPC, PlayerController NewPC) { Invoke(nameof(K2_OnSwapPlayerControllers), OldPC, NewPC); }
        public void K2_OnRestartPlayer(Controller NewPlayer) { Invoke(nameof(K2_OnRestartPlayer), NewPlayer); }
        public void K2_OnLogout(Controller ExitingController) { Invoke(nameof(K2_OnLogout), ExitingController); }
        public void K2_OnChangeName(Controller Other, Object NewName, bool bNameChange) { Invoke(nameof(K2_OnChangeName), Other, NewName, bNameChange); }
        public Actor K2_FindPlayerStart(Controller Player, Object IncomingName) { return Invoke<Actor>(nameof(K2_FindPlayerStart), Player, IncomingName); }
        public void InitStartSpot(Actor StartSpot, Controller NewPlayer) { Invoke(nameof(InitStartSpot), StartSpot, NewPlayer); }
        public void InitializeHUDForPlayer(PlayerController NewPlayer) { Invoke(nameof(InitializeHUDForPlayer), NewPlayer); }
        public bool HasMatchStarted() { return Invoke<bool>(nameof(HasMatchStarted)); }
        public bool HasMatchEnded() { return Invoke<bool>(nameof(HasMatchEnded)); }
        public void HandleStartingNewPlayer(PlayerController NewPlayer) { Invoke(nameof(HandleStartingNewPlayer), NewPlayer); }
        public int GetNumSpectators() { return Invoke<int>(nameof(GetNumSpectators)); }
        public int GetNumPlayers() { return Invoke<int>(nameof(GetNumPlayers)); }
        public Object GetDefaultPawnClassForController(Controller InController) { return Invoke<Object>(nameof(GetDefaultPawnClassForController), InController); }
        public Actor FindPlayerStart(Controller Player, Object IncomingName) { return Invoke<Actor>(nameof(FindPlayerStart), Player, IncomingName); }
        public Actor ChoosePlayerStart(Controller Player) { return Invoke<Actor>(nameof(ChoosePlayerStart), Player); }
        public void ChangeName(Controller Controller, Object NewName, bool bNameChange) { Invoke(nameof(ChangeName), Controller, NewName, bNameChange); }
        public bool CanSpectate(PlayerController Viewer, PlayerState ViewTarget) { return Invoke<bool>(nameof(CanSpectate), Viewer, ViewTarget); }
    }
    public class GameMode : GameModeBase
    {
        public GameMode(nint addr) : base(addr) { }
        public Object MatchState { get { return this[nameof(MatchState)]; } set { this[nameof(MatchState)] = value; } }
        public bool bDelayedStart { get { return this[nameof(bDelayedStart)].Flag; } set { this[nameof(bDelayedStart)].Flag = value; } }
        public int NumSpectators { get { return this[nameof(NumSpectators)].GetValue<int>(); } set { this[nameof(NumSpectators)].SetValue<int>(value); } }
        public int NumPlayers { get { return this[nameof(NumPlayers)].GetValue<int>(); } set { this[nameof(NumPlayers)].SetValue<int>(value); } }
        public int NumBots { get { return this[nameof(NumBots)].GetValue<int>(); } set { this[nameof(NumBots)].SetValue<int>(value); } }
        public float MinRespawnDelay { get { return this[nameof(MinRespawnDelay)].GetValue<float>(); } set { this[nameof(MinRespawnDelay)].SetValue<float>(value); } }
        public int NumTravellingPlayers { get { return this[nameof(NumTravellingPlayers)].GetValue<int>(); } set { this[nameof(NumTravellingPlayers)].SetValue<int>(value); } }
        public Object EngineMessageClass { get { return this[nameof(EngineMessageClass)]; } set { this[nameof(EngineMessageClass)] = value; } }
        public Array<PlayerState> InactivePlayerArray { get { return new Array<PlayerState>(this[nameof(InactivePlayerArray)].Address); } }
        public float InactivePlayerStateLifeSpan { get { return this[nameof(InactivePlayerStateLifeSpan)].GetValue<float>(); } set { this[nameof(InactivePlayerStateLifeSpan)].SetValue<float>(value); } }
        public int MaxInactivePlayers { get { return this[nameof(MaxInactivePlayers)].GetValue<int>(); } set { this[nameof(MaxInactivePlayers)].SetValue<int>(value); } }
        public bool bHandleDedicatedServerReplays { get { return this[nameof(bHandleDedicatedServerReplays)].Flag; } set { this[nameof(bHandleDedicatedServerReplays)].Flag = value; } }
        public void StartMatch() { Invoke(nameof(StartMatch)); }
        public void Say(Object Msg) { Invoke(nameof(Say), Msg); }
        public void RestartGame() { Invoke(nameof(RestartGame)); }
        public bool ReadyToStartMatch() { return Invoke<bool>(nameof(ReadyToStartMatch)); }
        public bool ReadyToEndMatch() { return Invoke<bool>(nameof(ReadyToEndMatch)); }
        public void K2_OnSetMatchState(Object NewState) { Invoke(nameof(K2_OnSetMatchState), NewState); }
        public bool IsMatchInProgress() { return Invoke<bool>(nameof(IsMatchInProgress)); }
        public Object GetMatchState() { return Invoke<Object>(nameof(GetMatchState)); }
        public void EndMatch() { Invoke(nameof(EndMatch)); }
        public void AbortMatch() { Invoke(nameof(AbortMatch)); }
    }
    public class GameStateBase : Info
    {
        public GameStateBase(nint addr) : base(addr) { }
        public Object GameModeClass { get { return this[nameof(GameModeClass)]; } set { this[nameof(GameModeClass)] = value; } }
        public GameModeBase AuthorityGameMode { get { return this[nameof(AuthorityGameMode)].As<GameModeBase>(); } set { this["AuthorityGameMode"] = value; } }
        public Object SpectatorClass { get { return this[nameof(SpectatorClass)]; } set { this[nameof(SpectatorClass)] = value; } }
        public Array<PlayerState> PlayerArray { get { return new Array<PlayerState>(this[nameof(PlayerArray)].Address); } }
        public bool bReplicatedHasBegunPlay { get { return this[nameof(bReplicatedHasBegunPlay)].Flag; } set { this[nameof(bReplicatedHasBegunPlay)].Flag = value; } }
        public float ReplicatedWorldTimeSeconds { get { return this[nameof(ReplicatedWorldTimeSeconds)].GetValue<float>(); } set { this[nameof(ReplicatedWorldTimeSeconds)].SetValue<float>(value); } }
        public float ServerWorldTimeSecondsDelta { get { return this[nameof(ServerWorldTimeSecondsDelta)].GetValue<float>(); } set { this[nameof(ServerWorldTimeSecondsDelta)].SetValue<float>(value); } }
        public float ServerWorldTimeSecondsUpdateFrequency { get { return this[nameof(ServerWorldTimeSecondsUpdateFrequency)].GetValue<float>(); } set { this[nameof(ServerWorldTimeSecondsUpdateFrequency)].SetValue<float>(value); } }
        public void OnRep_SpectatorClass() { Invoke(nameof(OnRep_SpectatorClass)); }
        public void OnRep_ReplicatedWorldTimeSeconds() { Invoke(nameof(OnRep_ReplicatedWorldTimeSeconds)); }
        public void OnRep_ReplicatedHasBegunPlay() { Invoke(nameof(OnRep_ReplicatedHasBegunPlay)); }
        public void OnRep_GameModeClass() { Invoke(nameof(OnRep_GameModeClass)); }
        public bool HasMatchStarted() { return Invoke<bool>(nameof(HasMatchStarted)); }
        public bool HasMatchEnded() { return Invoke<bool>(nameof(HasMatchEnded)); }
        public bool HasBegunPlay() { return Invoke<bool>(nameof(HasBegunPlay)); }
        public float GetServerWorldTimeSeconds() { return Invoke<float>(nameof(GetServerWorldTimeSeconds)); }
        public float GetPlayerStartTime(Controller Controller) { return Invoke<float>(nameof(GetPlayerStartTime), Controller); }
        public float GetPlayerRespawnDelay(Controller Controller) { return Invoke<float>(nameof(GetPlayerRespawnDelay), Controller); }
    }
    public class GameState : GameStateBase
    {
        public GameState(nint addr) : base(addr) { }
        public Object MatchState { get { return this[nameof(MatchState)]; } set { this[nameof(MatchState)] = value; } }
        public Object PreviousMatchState { get { return this[nameof(PreviousMatchState)]; } set { this[nameof(PreviousMatchState)] = value; } }
        public int ElapsedTime { get { return this[nameof(ElapsedTime)].GetValue<int>(); } set { this[nameof(ElapsedTime)].SetValue<int>(value); } }
        public void OnRep_MatchState() { Invoke(nameof(OnRep_MatchState)); }
        public void OnRep_ElapsedTime() { Invoke(nameof(OnRep_ElapsedTime)); }
    }
    public class PlayerController : Controller
    {
        public PlayerController(nint addr) : base(addr) { }
        public Player Player { get { return this[nameof(Player)].As<Player>(); } set { this["Player"] = value; } }
        public Pawn AcknowledgedPawn { get { return this[nameof(AcknowledgedPawn)].As<Pawn>(); } set { this["AcknowledgedPawn"] = value; } }
        public HUD MyHUD { get { return this[nameof(MyHUD)].As<HUD>(); } set { this["MyHUD"] = value; } }
        public PlayerCameraManager PlayerCameraManager { get { return this[nameof(PlayerCameraManager)].As<PlayerCameraManager>(); } set { this["PlayerCameraManager"] = value; } }
        public Object PlayerCameraManagerClass { get { return this[nameof(PlayerCameraManagerClass)]; } set { this[nameof(PlayerCameraManagerClass)] = value; } }
        public bool bAutoManageActiveCameraTarget { get { return this[nameof(bAutoManageActiveCameraTarget)].Flag; } set { this[nameof(bAutoManageActiveCameraTarget)].Flag = value; } }
        public Rotator TargetViewRotation { get { return this[nameof(TargetViewRotation)].As<Rotator>(); } set { this["TargetViewRotation"] = value; } }
        public float SmoothTargetViewRotationSpeed { get { return this[nameof(SmoothTargetViewRotationSpeed)].GetValue<float>(); } set { this[nameof(SmoothTargetViewRotationSpeed)].SetValue<float>(value); } }
        public Array<Actor> HiddenActors { get { return new Array<Actor>(this[nameof(HiddenActors)].Address); } }
        public Array<Object> HiddenPrimitiveComponents { get { return new Array<Object>(this[nameof(HiddenPrimitiveComponents)].Address); } }
        public float LastSpectatorStateSynchTime { get { return this[nameof(LastSpectatorStateSynchTime)].GetValue<float>(); } set { this[nameof(LastSpectatorStateSynchTime)].SetValue<float>(value); } }
        public Vector LastSpectatorSyncLocation { get { return this[nameof(LastSpectatorSyncLocation)].As<Vector>(); } set { this["LastSpectatorSyncLocation"] = value; } }
        public Rotator LastSpectatorSyncRotation { get { return this[nameof(LastSpectatorSyncRotation)].As<Rotator>(); } set { this["LastSpectatorSyncRotation"] = value; } }
        public int ClientCap { get { return this[nameof(ClientCap)].GetValue<int>(); } set { this[nameof(ClientCap)].SetValue<int>(value); } }
        public CheatManager CheatManager { get { return this[nameof(CheatManager)].As<CheatManager>(); } set { this["CheatManager"] = value; } }
        public Object CheatClass { get { return this[nameof(CheatClass)]; } set { this[nameof(CheatClass)] = value; } }
        public PlayerInput PlayerInput { get { return this[nameof(PlayerInput)].As<PlayerInput>(); } set { this["PlayerInput"] = value; } }
        public Array<ActiveForceFeedbackEffect> ActiveForceFeedbackEffects { get { return new Array<ActiveForceFeedbackEffect>(this[nameof(ActiveForceFeedbackEffects)].Address); } }
        public Object AsyncPhysicsDataClass { get { return this[nameof(AsyncPhysicsDataClass)]; } set { this[nameof(AsyncPhysicsDataClass)] = value; } }
        public AsyncPhysicsInputComponent AsyncPhysicsDataComponent { get { return this[nameof(AsyncPhysicsDataComponent)].As<AsyncPhysicsInputComponent>(); } set { this["AsyncPhysicsDataComponent"] = value; } }
        public bool bPlayerIsWaiting { get { return this[nameof(bPlayerIsWaiting)].Flag; } set { this[nameof(bPlayerIsWaiting)].Flag = value; } }
        public byte NetPlayerIndex { get { return this[nameof(NetPlayerIndex)].GetValue<byte>(); } set { this[nameof(NetPlayerIndex)].SetValue<byte>(value); } }
        public NetConnection PendingSwapConnection { get { return this[nameof(PendingSwapConnection)].As<NetConnection>(); } set { this["PendingSwapConnection"] = value; } }
        public NetConnection NetConnection { get { return this[nameof(NetConnection)].As<NetConnection>(); } set { this["NetConnection"] = value; } }
        public float InputYawScale { get { return this[nameof(InputYawScale)].GetValue<float>(); } set { this[nameof(InputYawScale)].SetValue<float>(value); } }
        public float InputPitchScale { get { return this[nameof(InputPitchScale)].GetValue<float>(); } set { this[nameof(InputPitchScale)].SetValue<float>(value); } }
        public float InputRollScale { get { return this[nameof(InputRollScale)].GetValue<float>(); } set { this[nameof(InputRollScale)].SetValue<float>(value); } }
        public bool bShowMouseCursor { get { return this[nameof(bShowMouseCursor)].Flag; } set { this[nameof(bShowMouseCursor)].Flag = value; } }
        public bool bEnableClickEvents { get { return this[nameof(bEnableClickEvents)].Flag; } set { this[nameof(bEnableClickEvents)].Flag = value; } }
        public bool bEnableTouchEvents { get { return this[nameof(bEnableTouchEvents)].Flag; } set { this[nameof(bEnableTouchEvents)].Flag = value; } }
        public bool bEnableMouseOverEvents { get { return this[nameof(bEnableMouseOverEvents)].Flag; } set { this[nameof(bEnableMouseOverEvents)].Flag = value; } }
        public bool bEnableTouchOverEvents { get { return this[nameof(bEnableTouchOverEvents)].Flag; } set { this[nameof(bEnableTouchOverEvents)].Flag = value; } }
        public bool bForceFeedbackEnabled { get { return this[nameof(bForceFeedbackEnabled)].Flag; } set { this[nameof(bForceFeedbackEnabled)].Flag = value; } }
        public bool bEnableMotionControls { get { return this[nameof(bEnableMotionControls)].Flag; } set { this[nameof(bEnableMotionControls)].Flag = value; } }
        public bool bEnableStreamingSource { get { return this[nameof(bEnableStreamingSource)].Flag; } set { this[nameof(bEnableStreamingSource)].Flag = value; } }
        public bool bStreamingSourceShouldActivate { get { return this[nameof(bStreamingSourceShouldActivate)].Flag; } set { this[nameof(bStreamingSourceShouldActivate)].Flag = value; } }
        public bool bStreamingSourceShouldBlockOnSlowStreaming { get { return this[nameof(bStreamingSourceShouldBlockOnSlowStreaming)].Flag; } set { this[nameof(bStreamingSourceShouldBlockOnSlowStreaming)].Flag = value; } }
        public EStreamingSourcePriority StreamingSourcePriority { get { return (EStreamingSourcePriority)this[nameof(StreamingSourcePriority)].GetValue<int>(); } set { this[nameof(StreamingSourcePriority)].SetValue<int>((int)value); } }
        public Color StreamingSourceDebugColor { get { return this[nameof(StreamingSourceDebugColor)].As<Color>(); } set { this["StreamingSourceDebugColor"] = value; } }
        public Array<StreamingSourceShape> StreamingSourceShapes { get { return new Array<StreamingSourceShape>(this[nameof(StreamingSourceShapes)].Address); } }
        public float ForceFeedbackScale { get { return this[nameof(ForceFeedbackScale)].GetValue<float>(); } set { this[nameof(ForceFeedbackScale)].SetValue<float>(value); } }
        public Array<Key> ClickEventKeys { get { return new Array<Key>(this[nameof(ClickEventKeys)].Address); } }
        public byte DefaultMouseCursor { get { return this[nameof(DefaultMouseCursor)].GetValue<byte>(); } set { this[nameof(DefaultMouseCursor)].SetValue<byte>(value); } }
        public byte CurrentMouseCursor { get { return this[nameof(CurrentMouseCursor)].GetValue<byte>(); } set { this[nameof(CurrentMouseCursor)].SetValue<byte>(value); } }
        public byte DefaultClickTraceChannel { get { return this[nameof(DefaultClickTraceChannel)].GetValue<byte>(); } set { this[nameof(DefaultClickTraceChannel)].SetValue<byte>(value); } }
        public byte CurrentClickTraceChannel { get { return this[nameof(CurrentClickTraceChannel)].GetValue<byte>(); } set { this[nameof(CurrentClickTraceChannel)].SetValue<byte>(value); } }
        public float HitResultTraceDistance { get { return this[nameof(HitResultTraceDistance)].GetValue<float>(); } set { this[nameof(HitResultTraceDistance)].SetValue<float>(value); } }
        public ushort SeamlessTravelCount { get { return this[nameof(SeamlessTravelCount)].GetValue<ushort>(); } set { this[nameof(SeamlessTravelCount)].SetValue<ushort>(value); } }
        public ushort LastCompletedSeamlessTravelCount { get { return this[nameof(LastCompletedSeamlessTravelCount)].GetValue<ushort>(); } set { this[nameof(LastCompletedSeamlessTravelCount)].SetValue<ushort>(value); } }
        public InputComponent InactiveStateInputComponent { get { return this[nameof(InactiveStateInputComponent)].As<InputComponent>(); } set { this["InactiveStateInputComponent"] = value; } }
        public bool bShouldPerformFullTickWhenPaused { get { return this[nameof(bShouldPerformFullTickWhenPaused)].Flag; } set { this[nameof(bShouldPerformFullTickWhenPaused)].Flag = value; } }
        public TouchInterface CurrentTouchInterface { get { return this[nameof(CurrentTouchInterface)].As<TouchInterface>(); } set { this["CurrentTouchInterface"] = value; } }
        public Object OverridePlayerInputClass { get { return this[nameof(OverridePlayerInputClass)]; } set { this[nameof(OverridePlayerInputClass)] = value; } }
        public SpectatorPawn SpectatorPawn { get { return this[nameof(SpectatorPawn)].As<SpectatorPawn>(); } set { this["SpectatorPawn"] = value; } }
        public bool bIsLocalPlayerController { get { return this[nameof(bIsLocalPlayerController)].Flag; } set { this[nameof(bIsLocalPlayerController)].Flag = value; } }
        public Vector SpawnLocation { get { return this[nameof(SpawnLocation)].As<Vector>(); } set { this["SpawnLocation"] = value; } }
        public bool WasInputKeyJustReleased(Key Key) { return Invoke<bool>(nameof(WasInputKeyJustReleased), Key); }
        public bool WasInputKeyJustPressed(Key Key) { return Invoke<bool>(nameof(WasInputKeyJustPressed), Key); }
        public void ToggleSpeaking(bool bInSpeaking) { Invoke(nameof(ToggleSpeaking), bInSpeaking); }
        public void TestServerLevelVisibilityChange(Object PackageName, Object Filename) { Invoke(nameof(TestServerLevelVisibilityChange), PackageName, Filename); }
        public void SwitchLevel(Object URL) { Invoke(nameof(SwitchLevel), URL); }
        public bool StreamingSourceShouldBlockOnSlowStreaming() { return Invoke<bool>(nameof(StreamingSourceShouldBlockOnSlowStreaming)); }
        public bool StreamingSourceShouldActivate() { return Invoke<bool>(nameof(StreamingSourceShouldActivate)); }
        public void StopHapticEffect(EControllerHand Hand) { Invoke(nameof(StopHapticEffect), Hand); }
        public void StartFire(byte FireModeNum) { Invoke(nameof(StartFire), FireModeNum); }
        public void SetVirtualJoystickVisibility(bool bVisible) { Invoke(nameof(SetVirtualJoystickVisibility), bVisible); }
        public void SetViewTargetWithBlend(Actor NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing) { Invoke(nameof(SetViewTargetWithBlend), NewViewTarget, BlendTime, BlendFunc, BlendExp, bLockOutgoing); }
        public void SetName(Object S) { Invoke(nameof(SetName), S); }
        public void SetMouseLocation(int X, int Y) { Invoke(nameof(SetMouseLocation), X, Y); }
        public void SetMouseCursorWidget(byte Cursor, UserWidget CursorWidget) { Invoke(nameof(SetMouseCursorWidget), Cursor, CursorWidget); }
        public void SetMotionControlsEnabled(bool bEnabled) { Invoke(nameof(SetMotionControlsEnabled), bEnabled); }
        public void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand) { Invoke(nameof(SetHapticsByValue), Frequency, Amplitude, Hand); }
        public void SetDisableHaptics(bool bNewDisabled) { Invoke(nameof(SetDisableHaptics), bNewDisabled); }
        public void SetDeprecatedInputYawScale(float NewValue) { Invoke(nameof(SetDeprecatedInputYawScale), NewValue); }
        public void SetDeprecatedInputRollScale(float NewValue) { Invoke(nameof(SetDeprecatedInputRollScale), NewValue); }
        public void SetDeprecatedInputPitchScale(float NewValue) { Invoke(nameof(SetDeprecatedInputPitchScale), NewValue); }
        public void SetControllerLightColor(Color Color) { Invoke(nameof(SetControllerLightColor), Color); }
        public void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) { Invoke(nameof(SetCinematicMode), bInCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning); }
        public void SetAudioListenerOverride(SceneComponent AttachToComponent, Vector Location, Rotator Rotation) { Invoke(nameof(SetAudioListenerOverride), AttachToComponent, Location, Rotation); }
        public void SetAudioListenerAttenuationOverride(SceneComponent AttachToComponent, Vector AttenuationLocationOVerride) { Invoke(nameof(SetAudioListenerAttenuationOverride), AttachToComponent, AttenuationLocationOVerride); }
        public void ServerViewSelf(ViewTargetTransitionParams TransitionParams) { Invoke(nameof(ServerViewSelf), TransitionParams); }
        public void ServerViewPrevPlayer() { Invoke(nameof(ServerViewPrevPlayer)); }
        public void ServerViewNextPlayer() { Invoke(nameof(ServerViewNextPlayer)); }
        public void ServerVerifyViewTarget() { Invoke(nameof(ServerVerifyViewTarget)); }
        public void ServerUpdateMultipleLevelsVisibility(Array<UpdateLevelVisibilityLevelInfo> LevelVisibilities) { Invoke(nameof(ServerUpdateMultipleLevelsVisibility), LevelVisibilities); }
        public void ServerUpdateLevelVisibility(UpdateLevelVisibilityLevelInfo LevelVisibility) { Invoke(nameof(ServerUpdateLevelVisibility), LevelVisibility); }
        public void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw) { Invoke(nameof(ServerUpdateCamera), CamLoc, CamPitchAndYaw); }
        public void ServerUnmutePlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ServerUnmutePlayer), PlayerId); }
        public void ServerUnblockPlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ServerUnblockPlayer), PlayerId); }
        public void ServerToggleAILogging() { Invoke(nameof(ServerToggleAILogging)); }
        public void ServerShortTimeout() { Invoke(nameof(ServerShortTimeout)); }
        public void ServerSetSpectatorWaiting(bool bWaiting) { Invoke(nameof(ServerSetSpectatorWaiting), bWaiting); }
        public void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot) { Invoke(nameof(ServerSetSpectatorLocation), NewLoc, NewRot); }
        public void ServerSendLatestAsyncPhysicsTimestamp(AsyncPhysicsTimestamp Timestamp) { Invoke(nameof(ServerSendLatestAsyncPhysicsTimestamp), Timestamp); }
        public void ServerRestartPlayer() { Invoke(nameof(ServerRestartPlayer)); }
        public void ServerRecvClientInputFrame(int RecvClientInputFrame, Array<byte> Data) { Invoke(nameof(ServerRecvClientInputFrame), RecvClientInputFrame, Data); }
        public void ServerPause() { Invoke(nameof(ServerPause)); }
        public void ServerNotifyLoadedWorld(Object WorldPackageName) { Invoke(nameof(ServerNotifyLoadedWorld), WorldPackageName); }
        public void ServerMutePlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ServerMutePlayer), PlayerId); }
        public void ServerExecRPC(Object Msg) { Invoke(nameof(ServerExecRPC), Msg); }
        public void ServerExec(Object Msg) { Invoke(nameof(ServerExec), Msg); }
        public void ServerCheckClientPossessionReliable() { Invoke(nameof(ServerCheckClientPossessionReliable)); }
        public void ServerCheckClientPossession() { Invoke(nameof(ServerCheckClientPossession)); }
        public void ServerChangeName(Object S) { Invoke(nameof(ServerChangeName), S); }
        public void ServerCamera(Object newMode) { Invoke(nameof(ServerCamera), newMode); }
        public void ServerBlockPlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ServerBlockPlayer), PlayerId); }
        public void ServerAcknowledgePossession(Pawn P) { Invoke(nameof(ServerAcknowledgePossession), P); }
        public void SendToConsole(Object Command) { Invoke(nameof(SendToConsole), Command); }
        public void RestartLevel() { Invoke(nameof(RestartLevel)); }
        public void ResetControllerLightColor() { Invoke(nameof(ResetControllerLightColor)); }
        public bool ProjectWorldLocationToScreen(Vector WorldLocation, Vector2D ScreenLocation, bool bPlayerViewportRelative) { return Invoke<bool>(nameof(ProjectWorldLocationToScreen), WorldLocation, ScreenLocation, bPlayerViewportRelative); }
        public void PlayHapticEffect(HapticFeedbackEffect_Base HapticEffect, EControllerHand Hand, float Scale, bool bLoop) { Invoke(nameof(PlayHapticEffect), HapticEffect, Hand, Scale, bLoop); }
        public void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte action, LatentActionInfo LatentInfo) { Invoke(nameof(PlayDynamicForceFeedback), Intensity, Duration, bAffectsLeftLarge, bAffectsLeftSmall, bAffectsRightLarge, bAffectsRightSmall, action, LatentInfo); }
        public void Pause() { Invoke(nameof(Pause)); }
        public void OnServerStartedVisualLogger(bool bIsLogging) { Invoke(nameof(OnServerStartedVisualLogger), bIsLogging); }
        public void OnRep_AsyncPhysicsDataComponent() { Invoke(nameof(OnRep_AsyncPhysicsDataComponent)); }
        public void LocalTravel(Object URL) { Invoke(nameof(LocalTravel), URL); }
        public void K2_ClientPlayForceFeedback(ForceFeedbackEffect ForceFeedbackEffect, Object Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused) { Invoke(nameof(K2_ClientPlayForceFeedback), ForceFeedbackEffect, Tag, bLooping, bIgnoreTimeDilation, bPlayWhilePaused); }
        public bool IsStreamingSourceEnabled() { return Invoke<bool>(nameof(IsStreamingSourceEnabled)); }
        public bool IsInputKeyDown(Key Key) { return Invoke<bool>(nameof(IsInputKeyDown), Key); }
        public void GetViewportSize(int SizeX, int SizeY) { Invoke(nameof(GetViewportSize), SizeX, SizeY); }
        public void GetStreamingSourceShapes(Array<StreamingSourceShape> OutShapes) { Invoke(nameof(GetStreamingSourceShapes), OutShapes); }
        public EStreamingSourcePriority GetStreamingSourcePriority() { return Invoke<EStreamingSourcePriority>(nameof(GetStreamingSourcePriority)); }
        public void GetStreamingSourceLocationAndRotation(Vector OutLocation, Rotator OutRotation) { Invoke(nameof(GetStreamingSourceLocationAndRotation), OutLocation, OutRotation); }
        public SpectatorPawn GetSpectatorPawn() { return Invoke<SpectatorPawn>(nameof(GetSpectatorPawn)); }
        public PlatformUserId GetPlatformUserId() { return Invoke<PlatformUserId>(nameof(GetPlatformUserId)); }
        public Object GetOverridePlayerInputClass() { return Invoke<Object>(nameof(GetOverridePlayerInputClass)); }
        public bool GetMousePosition(float LocationX, float LocationY) { return Invoke<bool>(nameof(GetMousePosition), LocationX, LocationY); }
        public Vector GetInputVectorKeyState(Key Key) { return Invoke<Vector>(nameof(GetInputVectorKeyState), Key); }
        public void GetInputTouchState(byte FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed) { Invoke(nameof(GetInputTouchState), FingerIndex, LocationX, LocationY, bIsCurrentlyPressed); }
        public void GetInputMouseDelta(float DeltaX, float DeltaY) { Invoke(nameof(GetInputMouseDelta), DeltaX, DeltaY); }
        public void GetInputMotionState(Vector Tilt, Vector RotationRate, Vector Gravity, Vector Acceleration) { Invoke(nameof(GetInputMotionState), Tilt, RotationRate, Gravity, Acceleration); }
        public float GetInputKeyTimeDown(Key Key) { return Invoke<float>(nameof(GetInputKeyTimeDown), Key); }
        public void GetInputAnalogStickState(byte WhichStick, float StickX, float StickY) { Invoke(nameof(GetInputAnalogStickState), WhichStick, StickX, StickY); }
        public float GetInputAnalogKeyState(Key Key) { return Invoke<float>(nameof(GetInputAnalogKeyState), Key); }
        public HUD GetHUD() { return Invoke<HUD>(nameof(GetHUD)); }
        public bool GetHitResultUnderFingerForObjects(byte FingerIndex, Array<byte> ObjectTypes, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderFingerForObjects), FingerIndex, ObjectTypes, bTraceComplex, HitResult); }
        public bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderFingerByChannel), FingerIndex, TraceChannel, bTraceComplex, HitResult); }
        public bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderFinger), FingerIndex, TraceChannel, bTraceComplex, HitResult); }
        public bool GetHitResultUnderCursorForObjects(Array<byte> ObjectTypes, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderCursorForObjects), ObjectTypes, bTraceComplex, HitResult); }
        public bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderCursorByChannel), TraceChannel, bTraceComplex, HitResult); }
        public bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, HitResult HitResult) { return Invoke<bool>(nameof(GetHitResultUnderCursor), TraceChannel, bTraceComplex, HitResult); }
        public Vector GetFocalLocation() { return Invoke<Vector>(nameof(GetFocalLocation)); }
        public float GetDeprecatedInputYawScale() { return Invoke<float>(nameof(GetDeprecatedInputYawScale)); }
        public float GetDeprecatedInputRollScale() { return Invoke<float>(nameof(GetDeprecatedInputRollScale)); }
        public float GetDeprecatedInputPitchScale() { return Invoke<float>(nameof(GetDeprecatedInputPitchScale)); }
        public AsyncPhysicsData GetAsyncPhysicsDataToWrite() { return Invoke<AsyncPhysicsData>(nameof(GetAsyncPhysicsDataToWrite)); }
        public AsyncPhysicsData GetAsyncPhysicsDataToConsume() { return Invoke<AsyncPhysicsData>(nameof(GetAsyncPhysicsDataToConsume)); }
        public void FOV(float NewFOV) { Invoke(nameof(FOV), NewFOV); }
        public void EnableCheats() { Invoke(nameof(EnableCheats)); }
        public bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, Vector WorldLocation, Vector WorldDirection) { return Invoke<bool>(nameof(DeprojectScreenPositionToWorld), ScreenX, ScreenY, WorldLocation, WorldDirection); }
        public bool DeprojectMousePositionToWorld(Vector WorldLocation, Vector WorldDirection) { return Invoke<bool>(nameof(DeprojectMousePositionToWorld), WorldLocation, WorldDirection); }
        public void ConsoleKey(Key Key) { Invoke(nameof(ConsoleKey), Key); }
        public void ClientWasKicked(nint KickReason) { Invoke(nameof(ClientWasKicked), KickReason); }
        public void ClientVoiceHandshakeComplete() { Invoke(nameof(ClientVoiceHandshakeComplete)); }
        public void ClientUpdateMultipleLevelsStreamingStatus(Array<UpdateLevelStreamingLevelStatus> LevelStatuses) { Invoke(nameof(ClientUpdateMultipleLevelsStreamingStatus), LevelStatuses); }
        public void ClientUpdateLevelStreamingStatus(Object PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex, NetLevelVisibilityTransactionId TransactionId) { Invoke(nameof(ClientUpdateLevelStreamingStatus), PackageName, bNewShouldBeLoaded, bNewShouldBeVisible, bNewShouldBlockOnLoad, LODIndex, TransactionId); }
        public void ClientUnmutePlayers(Array<UniqueNetIdRepl> PlayerIds) { Invoke(nameof(ClientUnmutePlayers), PlayerIds); }
        public void ClientUnmutePlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ClientUnmutePlayer), PlayerId); }
        public void ClientTravelInternal(Object URL, byte TravelType, bool bSeamless, Guid MapPackageGuid) { Invoke(nameof(ClientTravelInternal), URL, TravelType, bSeamless, MapPackageGuid); }
        public void ClientTravel(Object URL, byte TravelType, bool bSeamless, Guid MapPackageGuid) { Invoke(nameof(ClientTravel), URL, TravelType, bSeamless, MapPackageGuid); }
        public void ClientTeamMessage(PlayerState SenderPlayerState, Object S, Object Type, float MsgLifeTime) { Invoke(nameof(ClientTeamMessage), SenderPlayerState, S, Type, MsgLifeTime); }
        public void ClientStopForceFeedback(ForceFeedbackEffect ForceFeedbackEffect, Object Tag) { Invoke(nameof(ClientStopForceFeedback), ForceFeedbackEffect, Tag); }
        public void ClientStopCameraShakesFromSource(CameraShakeSourceComponent SourceComponent, bool bImmediately) { Invoke(nameof(ClientStopCameraShakesFromSource), SourceComponent, bImmediately); }
        public void ClientStopCameraShake(Object Shake, bool bImmediately) { Invoke(nameof(ClientStopCameraShake), Shake, bImmediately); }
        public void ClientStartOnlineSession() { Invoke(nameof(ClientStartOnlineSession)); }
        public void ClientStartCameraShakeFromSource(Object Shake, CameraShakeSourceComponent SourceComponent) { Invoke(nameof(ClientStartCameraShakeFromSource), Shake, SourceComponent); }
        public void ClientStartCameraShake(Object Shake, float Scale, ECameraShakePlaySpace PlaySpace, Rotator UserPlaySpaceRot) { Invoke(nameof(ClientStartCameraShake), Shake, Scale, PlaySpace, UserPlaySpaceRot); }
        public void ClientSpawnGenericCameraLensEffect(Object LensEffectEmitterClass) { Invoke(nameof(ClientSpawnGenericCameraLensEffect), LensEffectEmitterClass); }
        public void ClientSpawnCameraLensEffect(Object LensEffectEmitterClass) { Invoke(nameof(ClientSpawnCameraLensEffect), LensEffectEmitterClass); }
        public void ClientSetViewTarget(Actor A, ViewTargetTransitionParams TransitionParams) { Invoke(nameof(ClientSetViewTarget), A, TransitionParams); }
        public void ClientSetSpectatorWaiting(bool bWaiting) { Invoke(nameof(ClientSetSpectatorWaiting), bWaiting); }
        public void ClientSetHUD(Object NewHUDClass) { Invoke(nameof(ClientSetHUD), NewHUDClass); }
        public void ClientSetForceMipLevelsToBeResident(MaterialInterface Material, float ForceDuration, int CinematicTextureGroups) { Invoke(nameof(ClientSetForceMipLevelsToBeResident), Material, ForceDuration, CinematicTextureGroups); }
        public void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD) { Invoke(nameof(ClientSetCinematicMode), bInCinematicMode, bAffectsMovement, bAffectsTurning, bAffectsHUD); }
        public void ClientSetCameraMode(Object NewCamMode) { Invoke(nameof(ClientSetCameraMode), NewCamMode); }
        public void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished) { Invoke(nameof(ClientSetCameraFade), bEnableFading, FadeColor, FadeAlpha, FadeTime, bFadeAudio, bHoldWhenFinished); }
        public void ClientSetBlockOnAsyncLoading() { Invoke(nameof(ClientSetBlockOnAsyncLoading)); }
        public void ClientReturnToMainMenuWithTextReason(Object ReturnReason) { Invoke(nameof(ClientReturnToMainMenuWithTextReason), ReturnReason); }
        public void ClientReturnToMainMenu(Object ReturnReason) { Invoke(nameof(ClientReturnToMainMenu), ReturnReason); }
        public void ClientRetryClientRestart(Pawn NewPawn) { Invoke(nameof(ClientRetryClientRestart), NewPawn); }
        public void ClientRestart(Pawn NewPawn) { Invoke(nameof(ClientRestart), NewPawn); }
        public void ClientReset() { Invoke(nameof(ClientReset)); }
        public void ClientRepObjRef(Object Object) { Invoke(nameof(ClientRepObjRef), Object); }
        public void ClientRecvServerAckFrameDebug(byte NumBuffered, float TargetNumBufferedCmds) { Invoke(nameof(ClientRecvServerAckFrameDebug), NumBuffered, TargetNumBufferedCmds); }
        public void ClientRecvServerAckFrame(int LastProcessedInputFrame, int RecvServerFrameNumber, byte TimeDilation) { Invoke(nameof(ClientRecvServerAckFrame), LastProcessedInputFrame, RecvServerFrameNumber, TimeDilation); }
        public void ClientPrestreamTextures(Actor ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups) { Invoke(nameof(ClientPrestreamTextures), ForcedActor, ForceDuration, bEnableStreaming, CinematicTextureGroups); }
        public void ClientPrepareMapChange(Object LevelName, bool bFirst, bool bLast) { Invoke(nameof(ClientPrepareMapChange), LevelName, bFirst, bLast); }
        public void ClientPlaySoundAtLocation(SoundBase Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier) { Invoke(nameof(ClientPlaySoundAtLocation), Sound, Location, VolumeMultiplier, PitchMultiplier); }
        public void ClientPlaySound(SoundBase Sound, float VolumeMultiplier, float PitchMultiplier) { Invoke(nameof(ClientPlaySound), Sound, VolumeMultiplier, PitchMultiplier); }
        public void ClientPlayForceFeedback_Internal(ForceFeedbackEffect ForceFeedbackEffect, ForceFeedbackParameters Params) { Invoke(nameof(ClientPlayForceFeedback_Internal), ForceFeedbackEffect, Params); }
        public void ClientMutePlayer(UniqueNetIdRepl PlayerId) { Invoke(nameof(ClientMutePlayer), PlayerId); }
        public void ClientMessage(Object S, Object Type, float MsgLifeTime) { Invoke(nameof(ClientMessage), S, Type, MsgLifeTime); }
        public void ClientIgnoreMoveInput(bool bIgnore) { Invoke(nameof(ClientIgnoreMoveInput), bIgnore); }
        public void ClientIgnoreLookInput(bool bIgnore) { Invoke(nameof(ClientIgnoreLookInput), bIgnore); }
        public void ClientGotoState(Object NewState) { Invoke(nameof(ClientGotoState), NewState); }
        public void ClientGameEnded(Actor EndGameFocus, bool bIsWinner) { Invoke(nameof(ClientGameEnded), EndGameFocus, bIsWinner); }
        public void ClientForceGarbageCollection() { Invoke(nameof(ClientForceGarbageCollection)); }
        public void ClientFlushLevelStreaming() { Invoke(nameof(ClientFlushLevelStreaming)); }
        public void ClientEndOnlineSession() { Invoke(nameof(ClientEndOnlineSession)); }
        public void ClientEnableNetworkVoice(bool bEnable) { Invoke(nameof(ClientEnableNetworkVoice), bEnable); }
        public void ClientCorrectionAsyncPhysicsTimestamp(AsyncPhysicsTimestamp Timestamp) { Invoke(nameof(ClientCorrectionAsyncPhysicsTimestamp), Timestamp); }
        public void ClientCommitMapChange() { Invoke(nameof(ClientCommitMapChange)); }
        public void ClientClearCameraLensEffects() { Invoke(nameof(ClientClearCameraLensEffects)); }
        public void ClientCapBandwidth(int Cap) { Invoke(nameof(ClientCapBandwidth), Cap); }
        public void ClientCancelPendingMapChange() { Invoke(nameof(ClientCancelPendingMapChange)); }
        public void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation) { Invoke(nameof(ClientAddTextureStreamingLoc), InLoc, Duration, bOverrideLocation); }
        public void ClientAckUpdateLevelVisibility(Object PackageName, NetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisible) { Invoke(nameof(ClientAckUpdateLevelVisibility), PackageName, TransactionId, bClientAckCanMakeVisible); }
        public void ClientAckTimeDilation(float TimeDilation, int ServerStep) { Invoke(nameof(ClientAckTimeDilation), TimeDilation, ServerStep); }
        public void ClearAudioListenerOverride() { Invoke(nameof(ClearAudioListenerOverride)); }
        public void ClearAudioListenerAttenuationOverride() { Invoke(nameof(ClearAudioListenerAttenuationOverride)); }
        public bool CanRestartPlayer() { return Invoke<bool>(nameof(CanRestartPlayer)); }
        public void Camera(Object newMode) { Invoke(nameof(Camera), newMode); }
        public void AddYawInput(float Val) { Invoke(nameof(AddYawInput), Val); }
        public void AddRollInput(float Val) { Invoke(nameof(AddRollInput), Val); }
        public void AddPitchInput(float Val) { Invoke(nameof(AddPitchInput), Val); }
        public void ActivateTouchInterface(TouchInterface NewTouchInterface) { Invoke(nameof(ActivateTouchInterface), NewTouchInterface); }
    }
    public class PlayerState : Info
    {
        public PlayerState(nint addr) : base(addr) { }
        public float Score { get { return this[nameof(Score)].GetValue<float>(); } set { this[nameof(Score)].SetValue<float>(value); } }
        public int PlayerId { get { return this[nameof(PlayerId)].GetValue<int>(); } set { this[nameof(PlayerId)].SetValue<int>(value); } }
        public byte CompressedPing { get { return this[nameof(CompressedPing)].GetValue<byte>(); } set { this[nameof(CompressedPing)].SetValue<byte>(value); } }
        public bool bShouldUpdateReplicatedPing { get { return this[nameof(bShouldUpdateReplicatedPing)].Flag; } set { this[nameof(bShouldUpdateReplicatedPing)].Flag = value; } }
        public bool bIsSpectator { get { return this[nameof(bIsSpectator)].Flag; } set { this[nameof(bIsSpectator)].Flag = value; } }
        public bool bOnlySpectator { get { return this[nameof(bOnlySpectator)].Flag; } set { this[nameof(bOnlySpectator)].Flag = value; } }
        public bool bIsABot { get { return this[nameof(bIsABot)].Flag; } set { this[nameof(bIsABot)].Flag = value; } }
        public bool bIsInactive { get { return this[nameof(bIsInactive)].Flag; } set { this[nameof(bIsInactive)].Flag = value; } }
        public bool bFromPreviousLevel { get { return this[nameof(bFromPreviousLevel)].Flag; } set { this[nameof(bFromPreviousLevel)].Flag = value; } }
        public int StartTime { get { return this[nameof(StartTime)].GetValue<int>(); } set { this[nameof(StartTime)].SetValue<int>(value); } }
        public Object EngineMessageClass { get { return this[nameof(EngineMessageClass)]; } set { this[nameof(EngineMessageClass)] = value; } }
        public Object SavedNetworkAddress { get { return this[nameof(SavedNetworkAddress)]; } set { this[nameof(SavedNetworkAddress)] = value; } }
        public UniqueNetIdRepl UniqueId { get { return this[nameof(UniqueId)].As<UniqueNetIdRepl>(); } set { this["UniqueId"] = value; } }
        public Object OnPawnSet { get { return this[nameof(OnPawnSet)]; } set { this[nameof(OnPawnSet)] = value; } }
        public Pawn PawnPrivate { get { return this[nameof(PawnPrivate)].As<Pawn>(); } set { this["PawnPrivate"] = value; } }
        public Object PlayerNamePrivate { get { return this[nameof(PlayerNamePrivate)]; } set { this[nameof(PlayerNamePrivate)] = value; } }
        public void ReceiveOverrideWith(PlayerState OldPlayerState) { Invoke(nameof(ReceiveOverrideWith), OldPlayerState); }
        public void ReceiveCopyProperties(PlayerState NewPlayerState) { Invoke(nameof(ReceiveCopyProperties), NewPlayerState); }
        public void OnRep_UniqueId() { Invoke(nameof(OnRep_UniqueId)); }
        public void OnRep_Score() { Invoke(nameof(OnRep_Score)); }
        public void OnRep_PlayerName() { Invoke(nameof(OnRep_PlayerName)); }
        public void OnRep_PlayerId() { Invoke(nameof(OnRep_PlayerId)); }
        public void OnRep_bIsInactive() { Invoke(nameof(OnRep_bIsInactive)); }
        public void OnPawnPrivateDestroyed(Actor InActor) { Invoke(nameof(OnPawnPrivateDestroyed), InActor); }
        public bool IsSpectator() { return Invoke<bool>(nameof(IsSpectator)); }
        public bool IsOnlyASpectator() { return Invoke<bool>(nameof(IsOnlyASpectator)); }
        public bool IsABot() { return Invoke<bool>(nameof(IsABot)); }
        public float GetScore() { return Invoke<float>(nameof(GetScore)); }
        public Object GetPlayerName() { return Invoke<Object>(nameof(GetPlayerName)); }
        public int GetPlayerId() { return Invoke<int>(nameof(GetPlayerId)); }
        public PlayerController GetPlayerController() { return Invoke<PlayerController>(nameof(GetPlayerController)); }
        public float GetPingInMilliseconds() { return Invoke<float>(nameof(GetPingInMilliseconds)); }
        public Pawn GetPawn() { return Invoke<Pawn>(nameof(GetPawn)); }
        public byte GetCompressedPing() { return Invoke<byte>(nameof(GetCompressedPing)); }
        public UniqueNetIdRepl BP_GetUniqueId() { return Invoke<UniqueNetIdRepl>(nameof(BP_GetUniqueId)); }
    }
    public class Engine : Object
    {
        public Engine(nint addr) : base(addr) { }
        public Font TinyFont { get { return this[nameof(TinyFont)].As<Font>(); } set { this["TinyFont"] = value; } }
        public SoftObjectPath TinyFontName { get { return this[nameof(TinyFontName)].As<SoftObjectPath>(); } set { this["TinyFontName"] = value; } }
        public Font SmallFont { get { return this[nameof(SmallFont)].As<Font>(); } set { this["SmallFont"] = value; } }
        public SoftObjectPath SmallFontName { get { return this[nameof(SmallFontName)].As<SoftObjectPath>(); } set { this["SmallFontName"] = value; } }
        public Font MediumFont { get { return this[nameof(MediumFont)].As<Font>(); } set { this["MediumFont"] = value; } }
        public SoftObjectPath MediumFontName { get { return this[nameof(MediumFontName)].As<SoftObjectPath>(); } set { this["MediumFontName"] = value; } }
        public Font LargeFont { get { return this[nameof(LargeFont)].As<Font>(); } set { this["LargeFont"] = value; } }
        public SoftObjectPath LargeFontName { get { return this[nameof(LargeFontName)].As<SoftObjectPath>(); } set { this["LargeFontName"] = value; } }
        public Font SubtitleFont { get { return this[nameof(SubtitleFont)].As<Font>(); } set { this["SubtitleFont"] = value; } }
        public SoftObjectPath SubtitleFontName { get { return this[nameof(SubtitleFontName)].As<SoftObjectPath>(); } set { this["SubtitleFontName"] = value; } }
        public Array<Font> AdditionalFonts { get { return new Array<Font>(this[nameof(AdditionalFonts)].Address); } }
        public Array<Object> AdditionalFontNames { get { return new Array<Object>(this[nameof(AdditionalFontNames)].Address); } }
        public Object ConsoleClass { get { return this[nameof(ConsoleClass)]; } set { this[nameof(ConsoleClass)] = value; } }
        public SoftClassPath ConsoleClassName { get { return this[nameof(ConsoleClassName)].As<SoftClassPath>(); } set { this["ConsoleClassName"] = value; } }
        public Object GameViewportClientClass { get { return this[nameof(GameViewportClientClass)]; } set { this[nameof(GameViewportClientClass)] = value; } }
        public SoftClassPath GameViewportClientClassName { get { return this[nameof(GameViewportClientClassName)].As<SoftClassPath>(); } set { this["GameViewportClientClassName"] = value; } }
        public Object LocalPlayerClass { get { return this[nameof(LocalPlayerClass)]; } set { this[nameof(LocalPlayerClass)] = value; } }
        public SoftClassPath LocalPlayerClassName { get { return this[nameof(LocalPlayerClassName)].As<SoftClassPath>(); } set { this["LocalPlayerClassName"] = value; } }
        public Object WorldSettingsClass { get { return this[nameof(WorldSettingsClass)]; } set { this[nameof(WorldSettingsClass)] = value; } }
        public SoftClassPath WorldSettingsClassName { get { return this[nameof(WorldSettingsClassName)].As<SoftClassPath>(); } set { this["WorldSettingsClassName"] = value; } }
        public SoftClassPath NavigationSystemClassName { get { return this[nameof(NavigationSystemClassName)].As<SoftClassPath>(); } set { this["NavigationSystemClassName"] = value; } }
        public Object NavigationSystemClass { get { return this[nameof(NavigationSystemClass)]; } set { this[nameof(NavigationSystemClass)] = value; } }
        public SoftClassPath NavigationSystemConfigClassName { get { return this[nameof(NavigationSystemConfigClassName)].As<SoftClassPath>(); } set { this["NavigationSystemConfigClassName"] = value; } }
        public Object NavigationSystemConfigClass { get { return this[nameof(NavigationSystemConfigClass)]; } set { this[nameof(NavigationSystemConfigClass)] = value; } }
        public SoftClassPath AvoidanceManagerClassName { get { return this[nameof(AvoidanceManagerClassName)].As<SoftClassPath>(); } set { this["AvoidanceManagerClassName"] = value; } }
        public Object AvoidanceManagerClass { get { return this[nameof(AvoidanceManagerClass)]; } set { this[nameof(AvoidanceManagerClass)] = value; } }
        public SoftClassPath AIControllerClassName { get { return this[nameof(AIControllerClassName)].As<SoftClassPath>(); } set { this["AIControllerClassName"] = value; } }
        public Object PhysicsCollisionHandlerClass { get { return this[nameof(PhysicsCollisionHandlerClass)]; } set { this[nameof(PhysicsCollisionHandlerClass)] = value; } }
        public SoftClassPath PhysicsCollisionHandlerClassName { get { return this[nameof(PhysicsCollisionHandlerClassName)].As<SoftClassPath>(); } set { this["PhysicsCollisionHandlerClassName"] = value; } }
        public SoftClassPath GameUserSettingsClassName { get { return this[nameof(GameUserSettingsClassName)].As<SoftClassPath>(); } set { this["GameUserSettingsClassName"] = value; } }
        public Object GameUserSettingsClass { get { return this[nameof(GameUserSettingsClass)]; } set { this[nameof(GameUserSettingsClass)] = value; } }
        public GameUserSettings GameUserSettings { get { return this[nameof(GameUserSettings)].As<GameUserSettings>(); } set { this["GameUserSettings"] = value; } }
        public Object LevelScriptActorClass { get { return this[nameof(LevelScriptActorClass)]; } set { this[nameof(LevelScriptActorClass)] = value; } }
        public SoftClassPath LevelScriptActorClassName { get { return this[nameof(LevelScriptActorClassName)].As<SoftClassPath>(); } set { this["LevelScriptActorClassName"] = value; } }
        public SoftClassPath DefaultBlueprintBaseClassName { get { return this[nameof(DefaultBlueprintBaseClassName)].As<SoftClassPath>(); } set { this["DefaultBlueprintBaseClassName"] = value; } }
        public SoftClassPath GameSingletonClassName { get { return this[nameof(GameSingletonClassName)].As<SoftClassPath>(); } set { this["GameSingletonClassName"] = value; } }
        public Object GameSingleton { get { return this[nameof(GameSingleton)].As<Object>(); } set { this["GameSingleton"] = value; } }
        public SoftClassPath AssetManagerClassName { get { return this[nameof(AssetManagerClassName)].As<SoftClassPath>(); } set { this["AssetManagerClassName"] = value; } }
        public AssetManager AssetManager { get { return this[nameof(AssetManager)].As<AssetManager>(); } set { this["AssetManager"] = value; } }
        public Texture2D DefaultTexture { get { return this[nameof(DefaultTexture)].As<Texture2D>(); } set { this["DefaultTexture"] = value; } }
        public SoftObjectPath DefaultTextureName { get { return this[nameof(DefaultTextureName)].As<SoftObjectPath>(); } set { this["DefaultTextureName"] = value; } }
        public Texture DefaultDiffuseTexture { get { return this[nameof(DefaultDiffuseTexture)].As<Texture>(); } set { this["DefaultDiffuseTexture"] = value; } }
        public SoftObjectPath DefaultDiffuseTextureName { get { return this[nameof(DefaultDiffuseTextureName)].As<SoftObjectPath>(); } set { this["DefaultDiffuseTextureName"] = value; } }
        public Texture2D DefaultBSPVertexTexture { get { return this[nameof(DefaultBSPVertexTexture)].As<Texture2D>(); } set { this["DefaultBSPVertexTexture"] = value; } }
        public SoftObjectPath DefaultBSPVertexTextureName { get { return this[nameof(DefaultBSPVertexTextureName)].As<SoftObjectPath>(); } set { this["DefaultBSPVertexTextureName"] = value; } }
        public Texture2D HighFrequencyNoiseTexture { get { return this[nameof(HighFrequencyNoiseTexture)].As<Texture2D>(); } set { this["HighFrequencyNoiseTexture"] = value; } }
        public SoftObjectPath HighFrequencyNoiseTextureName { get { return this[nameof(HighFrequencyNoiseTextureName)].As<SoftObjectPath>(); } set { this["HighFrequencyNoiseTextureName"] = value; } }
        public Texture2D DefaultBokehTexture { get { return this[nameof(DefaultBokehTexture)].As<Texture2D>(); } set { this["DefaultBokehTexture"] = value; } }
        public SoftObjectPath DefaultBokehTextureName { get { return this[nameof(DefaultBokehTextureName)].As<SoftObjectPath>(); } set { this["DefaultBokehTextureName"] = value; } }
        public Texture2D DefaultBloomKernelTexture { get { return this[nameof(DefaultBloomKernelTexture)].As<Texture2D>(); } set { this["DefaultBloomKernelTexture"] = value; } }
        public SoftObjectPath DefaultBloomKernelTextureName { get { return this[nameof(DefaultBloomKernelTextureName)].As<SoftObjectPath>(); } set { this["DefaultBloomKernelTextureName"] = value; } }
        public Texture2D DefaultFilmGrainTexture { get { return this[nameof(DefaultFilmGrainTexture)].As<Texture2D>(); } set { this["DefaultFilmGrainTexture"] = value; } }
        public SoftObjectPath DefaultFilmGrainTextureName { get { return this[nameof(DefaultFilmGrainTextureName)].As<SoftObjectPath>(); } set { this["DefaultFilmGrainTextureName"] = value; } }
        public Material WireframeMaterial { get { return this[nameof(WireframeMaterial)].As<Material>(); } set { this["WireframeMaterial"] = value; } }
        public Object WireframeMaterialName { get { return this[nameof(WireframeMaterialName)]; } set { this[nameof(WireframeMaterialName)] = value; } }
        public Material DebugMeshMaterial { get { return this[nameof(DebugMeshMaterial)].As<Material>(); } set { this["DebugMeshMaterial"] = value; } }
        public SoftObjectPath DebugMeshMaterialName { get { return this[nameof(DebugMeshMaterialName)].As<SoftObjectPath>(); } set { this["DebugMeshMaterialName"] = value; } }
        public Material EmissiveMeshMaterial { get { return this[nameof(EmissiveMeshMaterial)].As<Material>(); } set { this["EmissiveMeshMaterial"] = value; } }
        public SoftObjectPath EmissiveMeshMaterialName { get { return this[nameof(EmissiveMeshMaterialName)].As<SoftObjectPath>(); } set { this["EmissiveMeshMaterialName"] = value; } }
        public Material LevelColorationLitMaterial { get { return this[nameof(LevelColorationLitMaterial)].As<Material>(); } set { this["LevelColorationLitMaterial"] = value; } }
        public Object LevelColorationLitMaterialName { get { return this[nameof(LevelColorationLitMaterialName)]; } set { this[nameof(LevelColorationLitMaterialName)] = value; } }
        public Material LevelColorationUnlitMaterial { get { return this[nameof(LevelColorationUnlitMaterial)].As<Material>(); } set { this["LevelColorationUnlitMaterial"] = value; } }
        public Object LevelColorationUnlitMaterialName { get { return this[nameof(LevelColorationUnlitMaterialName)]; } set { this[nameof(LevelColorationUnlitMaterialName)] = value; } }
        public Material LightingTexelDensityMaterial { get { return this[nameof(LightingTexelDensityMaterial)].As<Material>(); } set { this["LightingTexelDensityMaterial"] = value; } }
        public Object LightingTexelDensityName { get { return this[nameof(LightingTexelDensityName)]; } set { this[nameof(LightingTexelDensityName)] = value; } }
        public Material ShadedLevelColorationLitMaterial { get { return this[nameof(ShadedLevelColorationLitMaterial)].As<Material>(); } set { this["ShadedLevelColorationLitMaterial"] = value; } }
        public Object ShadedLevelColorationLitMaterialName { get { return this[nameof(ShadedLevelColorationLitMaterialName)]; } set { this[nameof(ShadedLevelColorationLitMaterialName)] = value; } }
        public Material ShadedLevelColorationUnlitMaterial { get { return this[nameof(ShadedLevelColorationUnlitMaterial)].As<Material>(); } set { this["ShadedLevelColorationUnlitMaterial"] = value; } }
        public Object ShadedLevelColorationUnlitMaterialName { get { return this[nameof(ShadedLevelColorationUnlitMaterialName)]; } set { this[nameof(ShadedLevelColorationUnlitMaterialName)] = value; } }
        public Material RemoveSurfaceMaterial { get { return this[nameof(RemoveSurfaceMaterial)].As<Material>(); } set { this["RemoveSurfaceMaterial"] = value; } }
        public SoftObjectPath RemoveSurfaceMaterialName { get { return this[nameof(RemoveSurfaceMaterialName)].As<SoftObjectPath>(); } set { this["RemoveSurfaceMaterialName"] = value; } }
        public Material VertexColorMaterial { get { return this[nameof(VertexColorMaterial)].As<Material>(); } set { this["VertexColorMaterial"] = value; } }
        public Object VertexColorMaterialName { get { return this[nameof(VertexColorMaterialName)]; } set { this[nameof(VertexColorMaterialName)] = value; } }
        public Material VertexColorViewModeMaterial_ColorOnly { get { return this[nameof(VertexColorViewModeMaterial_ColorOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_ColorOnly"] = value; } }
        public Object VertexColorViewModeMaterialName_ColorOnly { get { return this[nameof(VertexColorViewModeMaterialName_ColorOnly)]; } set { this[nameof(VertexColorViewModeMaterialName_ColorOnly)] = value; } }
        public Material VertexColorViewModeMaterial_AlphaAsColor { get { return this[nameof(VertexColorViewModeMaterial_AlphaAsColor)].As<Material>(); } set { this["VertexColorViewModeMaterial_AlphaAsColor"] = value; } }
        public Object VertexColorViewModeMaterialName_AlphaAsColor { get { return this[nameof(VertexColorViewModeMaterialName_AlphaAsColor)]; } set { this[nameof(VertexColorViewModeMaterialName_AlphaAsColor)] = value; } }
        public Material VertexColorViewModeMaterial_RedOnly { get { return this[nameof(VertexColorViewModeMaterial_RedOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_RedOnly"] = value; } }
        public Object VertexColorViewModeMaterialName_RedOnly { get { return this[nameof(VertexColorViewModeMaterialName_RedOnly)]; } set { this[nameof(VertexColorViewModeMaterialName_RedOnly)] = value; } }
        public Material VertexColorViewModeMaterial_GreenOnly { get { return this[nameof(VertexColorViewModeMaterial_GreenOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_GreenOnly"] = value; } }
        public Object VertexColorViewModeMaterialName_GreenOnly { get { return this[nameof(VertexColorViewModeMaterialName_GreenOnly)]; } set { this[nameof(VertexColorViewModeMaterialName_GreenOnly)] = value; } }
        public Material VertexColorViewModeMaterial_BlueOnly { get { return this[nameof(VertexColorViewModeMaterial_BlueOnly)].As<Material>(); } set { this["VertexColorViewModeMaterial_BlueOnly"] = value; } }
        public Object VertexColorViewModeMaterialName_BlueOnly { get { return this[nameof(VertexColorViewModeMaterialName_BlueOnly)]; } set { this[nameof(VertexColorViewModeMaterialName_BlueOnly)] = value; } }
        public SoftObjectPath DebugEditorMaterialName { get { return this[nameof(DebugEditorMaterialName)].As<SoftObjectPath>(); } set { this["DebugEditorMaterialName"] = value; } }
        public Material ConstraintLimitMaterial { get { return this[nameof(ConstraintLimitMaterial)].As<Material>(); } set { this["ConstraintLimitMaterial"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialX { get { return this[nameof(ConstraintLimitMaterialX)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialX"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialXAxis { get { return this[nameof(ConstraintLimitMaterialXAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialXAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialY { get { return this[nameof(ConstraintLimitMaterialY)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialY"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialYAxis { get { return this[nameof(ConstraintLimitMaterialYAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialYAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialZ { get { return this[nameof(ConstraintLimitMaterialZ)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialZ"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialZAxis { get { return this[nameof(ConstraintLimitMaterialZAxis)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialZAxis"] = value; } }
        public MaterialInstanceDynamic ConstraintLimitMaterialPrismatic { get { return this[nameof(ConstraintLimitMaterialPrismatic)].As<MaterialInstanceDynamic>(); } set { this["ConstraintLimitMaterialPrismatic"] = value; } }
        public Material InvalidLightmapSettingsMaterial { get { return this[nameof(InvalidLightmapSettingsMaterial)].As<Material>(); } set { this["InvalidLightmapSettingsMaterial"] = value; } }
        public SoftObjectPath InvalidLightmapSettingsMaterialName { get { return this[nameof(InvalidLightmapSettingsMaterialName)].As<SoftObjectPath>(); } set { this["InvalidLightmapSettingsMaterialName"] = value; } }
        public Material PreviewShadowsIndicatorMaterial { get { return this[nameof(PreviewShadowsIndicatorMaterial)].As<Material>(); } set { this["PreviewShadowsIndicatorMaterial"] = value; } }
        public SoftObjectPath PreviewShadowsIndicatorMaterialName { get { return this[nameof(PreviewShadowsIndicatorMaterialName)].As<SoftObjectPath>(); } set { this["PreviewShadowsIndicatorMaterialName"] = value; } }
        public Material ArrowMaterial { get { return this[nameof(ArrowMaterial)].As<Material>(); } set { this["ArrowMaterial"] = value; } }
        public MaterialInstanceDynamic ArrowMaterialYellow { get { return this[nameof(ArrowMaterialYellow)].As<MaterialInstanceDynamic>(); } set { this["ArrowMaterialYellow"] = value; } }
        public SoftObjectPath ArrowMaterialName { get { return this[nameof(ArrowMaterialName)].As<SoftObjectPath>(); } set { this["ArrowMaterialName"] = value; } }
        public LinearColor LightingOnlyBrightness { get { return this[nameof(LightingOnlyBrightness)].As<LinearColor>(); } set { this["LightingOnlyBrightness"] = value; } }
        public Array<LinearColor> ShaderComplexityColors { get { return new Array<LinearColor>(this[nameof(ShaderComplexityColors)].Address); } }
        public Array<LinearColor> QuadComplexityColors { get { return new Array<LinearColor>(this[nameof(QuadComplexityColors)].Address); } }
        public Array<LinearColor> LightComplexityColors { get { return new Array<LinearColor>(this[nameof(LightComplexityColors)].Address); } }
        public Array<LinearColor> StationaryLightOverlapColors { get { return new Array<LinearColor>(this[nameof(StationaryLightOverlapColors)].Address); } }
        public Array<LinearColor> LODColorationColors { get { return new Array<LinearColor>(this[nameof(LODColorationColors)].Address); } }
        public Array<LinearColor> HLODColorationColors { get { return new Array<LinearColor>(this[nameof(HLODColorationColors)].Address); } }
        public Array<LinearColor> StreamingAccuracyColors { get { return new Array<LinearColor>(this[nameof(StreamingAccuracyColors)].Address); } }
        public LinearColor GPUSkinCacheVisualizationExcludedColor { get { return this[nameof(GPUSkinCacheVisualizationExcludedColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationExcludedColor"] = value; } }
        public LinearColor GPUSkinCacheVisualizationIncludedColor { get { return this[nameof(GPUSkinCacheVisualizationIncludedColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationIncludedColor"] = value; } }
        public LinearColor GPUSkinCacheVisualizationRecomputeTangentsColor { get { return this[nameof(GPUSkinCacheVisualizationRecomputeTangentsColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationRecomputeTangentsColor"] = value; } }
        public float GPUSkinCacheVisualizationLowMemoryThresholdInMB { get { return this[nameof(GPUSkinCacheVisualizationLowMemoryThresholdInMB)].GetValue<float>(); } set { this[nameof(GPUSkinCacheVisualizationLowMemoryThresholdInMB)].SetValue<float>(value); } }
        public float GPUSkinCacheVisualizationHighMemoryThresholdInMB { get { return this[nameof(GPUSkinCacheVisualizationHighMemoryThresholdInMB)].GetValue<float>(); } set { this[nameof(GPUSkinCacheVisualizationHighMemoryThresholdInMB)].SetValue<float>(value); } }
        public LinearColor GPUSkinCacheVisualizationLowMemoryColor { get { return this[nameof(GPUSkinCacheVisualizationLowMemoryColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationLowMemoryColor"] = value; } }
        public LinearColor GPUSkinCacheVisualizationMidMemoryColor { get { return this[nameof(GPUSkinCacheVisualizationMidMemoryColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationMidMemoryColor"] = value; } }
        public LinearColor GPUSkinCacheVisualizationHighMemoryColor { get { return this[nameof(GPUSkinCacheVisualizationHighMemoryColor)].As<LinearColor>(); } set { this["GPUSkinCacheVisualizationHighMemoryColor"] = value; } }
        public Array<LinearColor> GPUSkinCacheVisualizationRayTracingLODOffsetColors { get { return new Array<LinearColor>(this[nameof(GPUSkinCacheVisualizationRayTracingLODOffsetColors)].Address); } }
        public float MaxPixelShaderAdditiveComplexityCount { get { return this[nameof(MaxPixelShaderAdditiveComplexityCount)].GetValue<float>(); } set { this[nameof(MaxPixelShaderAdditiveComplexityCount)].SetValue<float>(value); } }
        public float MaxES3PixelShaderAdditiveComplexityCount { get { return this[nameof(MaxES3PixelShaderAdditiveComplexityCount)].GetValue<float>(); } set { this[nameof(MaxES3PixelShaderAdditiveComplexityCount)].SetValue<float>(value); } }
        public float MinLightMapDensity { get { return this[nameof(MinLightMapDensity)].GetValue<float>(); } set { this[nameof(MinLightMapDensity)].SetValue<float>(value); } }
        public float IdealLightMapDensity { get { return this[nameof(IdealLightMapDensity)].GetValue<float>(); } set { this[nameof(IdealLightMapDensity)].SetValue<float>(value); } }
        public float MaxLightMapDensity { get { return this[nameof(MaxLightMapDensity)].GetValue<float>(); } set { this[nameof(MaxLightMapDensity)].SetValue<float>(value); } }
        public bool bRenderLightMapDensityGrayscale { get { return this[nameof(bRenderLightMapDensityGrayscale)].Flag; } set { this[nameof(bRenderLightMapDensityGrayscale)].Flag = value; } }
        public float RenderLightMapDensityGrayscaleScale { get { return this[nameof(RenderLightMapDensityGrayscaleScale)].GetValue<float>(); } set { this[nameof(RenderLightMapDensityGrayscaleScale)].SetValue<float>(value); } }
        public float RenderLightMapDensityColorScale { get { return this[nameof(RenderLightMapDensityColorScale)].GetValue<float>(); } set { this[nameof(RenderLightMapDensityColorScale)].SetValue<float>(value); } }
        public LinearColor LightMapDensityVertexMappedColor { get { return this[nameof(LightMapDensityVertexMappedColor)].As<LinearColor>(); } set { this["LightMapDensityVertexMappedColor"] = value; } }
        public LinearColor LightMapDensitySelectedColor { get { return this[nameof(LightMapDensitySelectedColor)].As<LinearColor>(); } set { this["LightMapDensitySelectedColor"] = value; } }
        public Array<StatColorMapping> StatColorMappings { get { return new Array<StatColorMapping>(this[nameof(StatColorMappings)].Address); } }
        public PhysicalMaterial DefaultPhysMaterial { get { return this[nameof(DefaultPhysMaterial)].As<PhysicalMaterial>(); } set { this["DefaultPhysMaterial"] = value; } }
        public SoftObjectPath DefaultPhysMaterialName { get { return this[nameof(DefaultPhysMaterialName)].As<SoftObjectPath>(); } set { this["DefaultPhysMaterialName"] = value; } }
        public PhysicalMaterial DefaultDestructiblePhysMaterial { get { return this[nameof(DefaultDestructiblePhysMaterial)].As<PhysicalMaterial>(); } set { this["DefaultDestructiblePhysMaterial"] = value; } }
        public SoftObjectPath DefaultDestructiblePhysMaterialName { get { return this[nameof(DefaultDestructiblePhysMaterialName)].As<SoftObjectPath>(); } set { this["DefaultDestructiblePhysMaterialName"] = value; } }
        public Array<GameNameRedirect> ActiveGameNameRedirects { get { return new Array<GameNameRedirect>(this[nameof(ActiveGameNameRedirects)].Address); } }
        public Array<ClassRedirect> ActiveClassRedirects { get { return new Array<ClassRedirect>(this[nameof(ActiveClassRedirects)].Address); } }
        public Array<PluginRedirect> ActivePluginRedirects { get { return new Array<PluginRedirect>(this[nameof(ActivePluginRedirects)].Address); } }
        public Array<StructRedirect> ActiveStructRedirects { get { return new Array<StructRedirect>(this[nameof(ActiveStructRedirects)].Address); } }
        public Texture2D PreIntegratedSkinBRDFTexture { get { return this[nameof(PreIntegratedSkinBRDFTexture)].As<Texture2D>(); } set { this["PreIntegratedSkinBRDFTexture"] = value; } }
        public SoftObjectPath PreIntegratedSkinBRDFTextureName { get { return this[nameof(PreIntegratedSkinBRDFTextureName)].As<SoftObjectPath>(); } set { this["PreIntegratedSkinBRDFTextureName"] = value; } }
        public Texture2D BlueNoiseScalarTexture { get { return this[nameof(BlueNoiseScalarTexture)].As<Texture2D>(); } set { this["BlueNoiseScalarTexture"] = value; } }
        public Texture2D BlueNoiseVec2Texture { get { return this[nameof(BlueNoiseVec2Texture)].As<Texture2D>(); } set { this["BlueNoiseVec2Texture"] = value; } }
        public SoftObjectPath BlueNoiseScalarTextureName { get { return this[nameof(BlueNoiseScalarTextureName)].As<SoftObjectPath>(); } set { this["BlueNoiseScalarTextureName"] = value; } }
        public SoftObjectPath BlueNoiseVec2TextureName { get { return this[nameof(BlueNoiseVec2TextureName)].As<SoftObjectPath>(); } set { this["BlueNoiseVec2TextureName"] = value; } }
        public Texture2D MiniFontTexture { get { return this[nameof(MiniFontTexture)].As<Texture2D>(); } set { this["MiniFontTexture"] = value; } }
        public SoftObjectPath MiniFontTextureName { get { return this[nameof(MiniFontTextureName)].As<SoftObjectPath>(); } set { this["MiniFontTextureName"] = value; } }
        public Texture WeightMapPlaceholderTexture { get { return this[nameof(WeightMapPlaceholderTexture)].As<Texture>(); } set { this["WeightMapPlaceholderTexture"] = value; } }
        public SoftObjectPath WeightMapPlaceholderTextureName { get { return this[nameof(WeightMapPlaceholderTextureName)].As<SoftObjectPath>(); } set { this["WeightMapPlaceholderTextureName"] = value; } }
        public Texture2D LightMapDensityTexture { get { return this[nameof(LightMapDensityTexture)].As<Texture2D>(); } set { this["LightMapDensityTexture"] = value; } }
        public SoftObjectPath LightMapDensityTextureName { get { return this[nameof(LightMapDensityTextureName)].As<SoftObjectPath>(); } set { this["LightMapDensityTextureName"] = value; } }
        public GameViewportClient GameViewport { get { return this[nameof(GameViewport)].As<GameViewportClient>(); } set { this["GameViewport"] = value; } }
        public Array<Object> DeferredCommands { get { return new Array<Object>(this[nameof(DeferredCommands)].Address); } }
        public float NearClipPlane { get { return this[nameof(NearClipPlane)].GetValue<float>(); } set { this[nameof(NearClipPlane)].SetValue<float>(value); } }
        public bool bSubtitlesEnabled { get { return this[nameof(bSubtitlesEnabled)].Flag; } set { this[nameof(bSubtitlesEnabled)].Flag = value; } }
        public bool bSubtitlesForcedOff { get { return this[nameof(bSubtitlesForcedOff)].Flag; } set { this[nameof(bSubtitlesForcedOff)].Flag = value; } }
        public int MaximumLoopIterationCount { get { return this[nameof(MaximumLoopIterationCount)].GetValue<int>(); } set { this[nameof(MaximumLoopIterationCount)].SetValue<int>(value); } }
        public bool bCanBlueprintsTickByDefault { get { return this[nameof(bCanBlueprintsTickByDefault)].Flag; } set { this[nameof(bCanBlueprintsTickByDefault)].Flag = value; } }
        public bool bOptimizeAnimBlueprintMemberVariableAccess { get { return this[nameof(bOptimizeAnimBlueprintMemberVariableAccess)].Flag; } set { this[nameof(bOptimizeAnimBlueprintMemberVariableAccess)].Flag = value; } }
        public bool bAllowMultiThreadedAnimationUpdate { get { return this[nameof(bAllowMultiThreadedAnimationUpdate)].Flag; } set { this[nameof(bAllowMultiThreadedAnimationUpdate)].Flag = value; } }
        public bool bEnableEditorPSysRealtimeLOD { get { return this[nameof(bEnableEditorPSysRealtimeLOD)].Flag; } set { this[nameof(bEnableEditorPSysRealtimeLOD)].Flag = value; } }
        public bool bSmoothFrameRate { get { return this[nameof(bSmoothFrameRate)].Flag; } set { this[nameof(bSmoothFrameRate)].Flag = value; } }
        public bool bUseFixedFrameRate { get { return this[nameof(bUseFixedFrameRate)].Flag; } set { this[nameof(bUseFixedFrameRate)].Flag = value; } }
        public float FixedFrameRate { get { return this[nameof(FixedFrameRate)].GetValue<float>(); } set { this[nameof(FixedFrameRate)].SetValue<float>(value); } }
        public FloatRange SmoothedFrameRateRange { get { return this[nameof(SmoothedFrameRateRange)].As<FloatRange>(); } set { this["SmoothedFrameRateRange"] = value; } }
        public EngineCustomTimeStep CustomTimeStep { get { return this[nameof(CustomTimeStep)].As<EngineCustomTimeStep>(); } set { this["CustomTimeStep"] = value; } }
        public SoftClassPath CustomTimeStepClassName { get { return this[nameof(CustomTimeStepClassName)].As<SoftClassPath>(); } set { this["CustomTimeStepClassName"] = value; } }
        public TimecodeProvider TimecodeProvider { get { return this[nameof(TimecodeProvider)].As<TimecodeProvider>(); } set { this["TimecodeProvider"] = value; } }
        public SoftClassPath TimecodeProviderClassName { get { return this[nameof(TimecodeProviderClassName)].As<SoftClassPath>(); } set { this["TimecodeProviderClassName"] = value; } }
        public bool bGenerateDefaultTimecode { get { return this[nameof(bGenerateDefaultTimecode)].Flag; } set { this[nameof(bGenerateDefaultTimecode)].Flag = value; } }
        public FrameRate GenerateDefaultTimecodeFrameRate { get { return this[nameof(GenerateDefaultTimecodeFrameRate)].As<FrameRate>(); } set { this["GenerateDefaultTimecodeFrameRate"] = value; } }
        public float GenerateDefaultTimecodeFrameDelay { get { return this[nameof(GenerateDefaultTimecodeFrameDelay)].GetValue<float>(); } set { this[nameof(GenerateDefaultTimecodeFrameDelay)].SetValue<float>(value); } }
        public bool bCheckForMultiplePawnsSpawnedInAFrame { get { return this[nameof(bCheckForMultiplePawnsSpawnedInAFrame)].Flag; } set { this[nameof(bCheckForMultiplePawnsSpawnedInAFrame)].Flag = value; } }
        public int NumPawnsAllowedToBeSpawnedInAFrame { get { return this[nameof(NumPawnsAllowedToBeSpawnedInAFrame)].GetValue<int>(); } set { this[nameof(NumPawnsAllowedToBeSpawnedInAFrame)].SetValue<int>(value); } }
        public bool bShouldGenerateLowQualityLightmaps { get { return this[nameof(bShouldGenerateLowQualityLightmaps)].Flag; } set { this[nameof(bShouldGenerateLowQualityLightmaps)].Flag = value; } }
        public Color C_WorldBox { get { return this[nameof(C_WorldBox)].As<Color>(); } set { this["C_WorldBox"] = value; } }
        public Color C_BrushWire { get { return this[nameof(C_BrushWire)].As<Color>(); } set { this["C_BrushWire"] = value; } }
        public Color C_AddWire { get { return this[nameof(C_AddWire)].As<Color>(); } set { this["C_AddWire"] = value; } }
        public Color C_SubtractWire { get { return this[nameof(C_SubtractWire)].As<Color>(); } set { this["C_SubtractWire"] = value; } }
        public Color C_SemiSolidWire { get { return this[nameof(C_SemiSolidWire)].As<Color>(); } set { this["C_SemiSolidWire"] = value; } }
        public Color C_NonSolidWire { get { return this[nameof(C_NonSolidWire)].As<Color>(); } set { this["C_NonSolidWire"] = value; } }
        public Color C_WireBackground { get { return this[nameof(C_WireBackground)].As<Color>(); } set { this["C_WireBackground"] = value; } }
        public Color C_ScaleBoxHi { get { return this[nameof(C_ScaleBoxHi)].As<Color>(); } set { this["C_ScaleBoxHi"] = value; } }
        public Color C_VolumeCollision { get { return this[nameof(C_VolumeCollision)].As<Color>(); } set { this["C_VolumeCollision"] = value; } }
        public Color C_BSPCollision { get { return this[nameof(C_BSPCollision)].As<Color>(); } set { this["C_BSPCollision"] = value; } }
        public Color C_OrthoBackground { get { return this[nameof(C_OrthoBackground)].As<Color>(); } set { this["C_OrthoBackground"] = value; } }
        public Color C_Volume { get { return this[nameof(C_Volume)].As<Color>(); } set { this["C_Volume"] = value; } }
        public Color C_BrushShape { get { return this[nameof(C_BrushShape)].As<Color>(); } set { this["C_BrushShape"] = value; } }
        public float StreamingDistanceFactor { get { return this[nameof(StreamingDistanceFactor)].GetValue<float>(); } set { this[nameof(StreamingDistanceFactor)].SetValue<float>(value); } }
        public DirectoryPath GameScreenshotSaveDirectory { get { return this[nameof(GameScreenshotSaveDirectory)].As<DirectoryPath>(); } set { this["GameScreenshotSaveDirectory"] = value; } }
        public bool UseStaticMeshMinLODPerQualityLevels { get { return this[nameof(UseStaticMeshMinLODPerQualityLevels)].Flag; } set { this[nameof(UseStaticMeshMinLODPerQualityLevels)].Flag = value; } }
        public bool UseSkeletalMeshMinLODPerQualityLevels { get { return this[nameof(UseSkeletalMeshMinLODPerQualityLevels)].Flag; } set { this[nameof(UseSkeletalMeshMinLODPerQualityLevels)].Flag = value; } }
        public ETransitionType TransitionType { get { return (ETransitionType)this[nameof(TransitionType)].GetValue<int>(); } set { this[nameof(TransitionType)].SetValue<int>((int)value); } }
        public Object TransitionDescription { get { return this[nameof(TransitionDescription)]; } set { this[nameof(TransitionDescription)] = value; } }
        public Object TransitionGameMode { get { return this[nameof(TransitionGameMode)]; } set { this[nameof(TransitionGameMode)] = value; } }
        public bool bAllowMatureLanguage { get { return this[nameof(bAllowMatureLanguage)].Flag; } set { this[nameof(bAllowMatureLanguage)].Flag = value; } }
        public float CameraRotationThreshold { get { return this[nameof(CameraRotationThreshold)].GetValue<float>(); } set { this[nameof(CameraRotationThreshold)].SetValue<float>(value); } }
        public float CameraTranslationThreshold { get { return this[nameof(CameraTranslationThreshold)].GetValue<float>(); } set { this[nameof(CameraTranslationThreshold)].SetValue<float>(value); } }
        public float PrimitiveProbablyVisibleTime { get { return this[nameof(PrimitiveProbablyVisibleTime)].GetValue<float>(); } set { this[nameof(PrimitiveProbablyVisibleTime)].SetValue<float>(value); } }
        public float MaxOcclusionPixelsFraction { get { return this[nameof(MaxOcclusionPixelsFraction)].GetValue<float>(); } set { this[nameof(MaxOcclusionPixelsFraction)].SetValue<float>(value); } }
        public bool bPauseOnLossOfFocus { get { return this[nameof(bPauseOnLossOfFocus)].Flag; } set { this[nameof(bPauseOnLossOfFocus)].Flag = value; } }
        public int MaxParticleResize { get { return this[nameof(MaxParticleResize)].GetValue<int>(); } set { this[nameof(MaxParticleResize)].SetValue<int>(value); } }
        public int MaxParticleResizeWarn { get { return this[nameof(MaxParticleResizeWarn)].GetValue<int>(); } set { this[nameof(MaxParticleResizeWarn)].SetValue<int>(value); } }
        public Array<DropNoteInfo> PendingDroppedNotes { get { return new Array<DropNoteInfo>(this[nameof(PendingDroppedNotes)].Address); } }
        public float NetClientTicksPerSecond { get { return this[nameof(NetClientTicksPerSecond)].GetValue<float>(); } set { this[nameof(NetClientTicksPerSecond)].SetValue<float>(value); } }
        public float DisplayGamma { get { return this[nameof(DisplayGamma)].GetValue<float>(); } set { this[nameof(DisplayGamma)].SetValue<float>(value); } }
        public float MinDesiredFrameRate { get { return this[nameof(MinDesiredFrameRate)].GetValue<float>(); } set { this[nameof(MinDesiredFrameRate)].SetValue<float>(value); } }
        public LinearColor DefaultSelectedMaterialColor { get { return this[nameof(DefaultSelectedMaterialColor)].As<LinearColor>(); } set { this["DefaultSelectedMaterialColor"] = value; } }
        public LinearColor SelectedMaterialColor { get { return this[nameof(SelectedMaterialColor)].As<LinearColor>(); } set { this["SelectedMaterialColor"] = value; } }
        public LinearColor SelectionOutlineColor { get { return this[nameof(SelectionOutlineColor)].As<LinearColor>(); } set { this["SelectionOutlineColor"] = value; } }
        public LinearColor SubduedSelectionOutlineColor { get { return this[nameof(SubduedSelectionOutlineColor)].As<LinearColor>(); } set { this["SubduedSelectionOutlineColor"] = value; } }
        public LinearColor SelectedMaterialColorOverride { get { return this[nameof(SelectedMaterialColorOverride)].As<LinearColor>(); } set { this["SelectedMaterialColorOverride"] = value; } }
        public bool bIsOverridingSelectedColor { get { return this[nameof(bIsOverridingSelectedColor)].Flag; } set { this[nameof(bIsOverridingSelectedColor)].Flag = value; } }
        public bool bEnableOnScreenDebugMessages { get { return this[nameof(bEnableOnScreenDebugMessages)].Flag; } set { this[nameof(bEnableOnScreenDebugMessages)].Flag = value; } }
        public bool bEnableOnScreenDebugMessagesDisplay { get { return this[nameof(bEnableOnScreenDebugMessagesDisplay)].Flag; } set { this[nameof(bEnableOnScreenDebugMessagesDisplay)].Flag = value; } }
        public bool bSuppressMapWarnings { get { return this[nameof(bSuppressMapWarnings)].Flag; } set { this[nameof(bSuppressMapWarnings)].Flag = value; } }
        public bool bDisableAILogging { get { return this[nameof(bDisableAILogging)].Flag; } set { this[nameof(bDisableAILogging)].Flag = value; } }
        public uint bEnableVisualLogRecordingOnStart { get { return this[nameof(bEnableVisualLogRecordingOnStart)].GetValue<uint>(); } set { this[nameof(bEnableVisualLogRecordingOnStart)].SetValue<uint>(value); } }
        public int ScreenSaverInhibitorSemaphore { get { return this[nameof(ScreenSaverInhibitorSemaphore)].GetValue<int>(); } set { this[nameof(ScreenSaverInhibitorSemaphore)].SetValue<int>(value); } }
        public bool bLockReadOnlyLevels { get { return this[nameof(bLockReadOnlyLevels)].Flag; } set { this[nameof(bLockReadOnlyLevels)].Flag = value; } }
        public Object ParticleEventManagerClassPath { get { return this[nameof(ParticleEventManagerClassPath)]; } set { this[nameof(ParticleEventManagerClassPath)] = value; } }
        public float SelectionHighlightIntensity { get { return this[nameof(SelectionHighlightIntensity)].GetValue<float>(); } set { this[nameof(SelectionHighlightIntensity)].SetValue<float>(value); } }
        public float BSPSelectionHighlightIntensity { get { return this[nameof(BSPSelectionHighlightIntensity)].GetValue<float>(); } set { this[nameof(BSPSelectionHighlightIntensity)].SetValue<float>(value); } }
        public float SelectionHighlightIntensityBillboards { get { return this[nameof(SelectionHighlightIntensityBillboards)].GetValue<float>(); } set { this[nameof(SelectionHighlightIntensityBillboards)].SetValue<float>(value); } }
        public uint GlobalNetTravelCount { get { return this[nameof(GlobalNetTravelCount)].GetValue<uint>(); } set { this[nameof(GlobalNetTravelCount)].SetValue<uint>(value); } }
        public Array<NetDriverDefinition> NetDriverDefinitions { get { return new Array<NetDriverDefinition>(this[nameof(NetDriverDefinitions)].Address); } }
        public Array<IrisNetDriverConfig> IrisNetDriverConfigs { get { return new Array<IrisNetDriverConfig>(this[nameof(IrisNetDriverConfigs)].Address); } }
        public Array<Object> ServerActors { get { return new Array<Object>(this[nameof(ServerActors)].Address); } }
        public Array<Object> RuntimeServerActors { get { return new Array<Object>(this[nameof(RuntimeServerActors)].Address); } }
        public float NetErrorLogInterval { get { return this[nameof(NetErrorLogInterval)].GetValue<float>(); } set { this[nameof(NetErrorLogInterval)].SetValue<float>(value); } }
        public bool bStartedLoadMapMovie { get { return this[nameof(bStartedLoadMapMovie)].Flag; } set { this[nameof(bStartedLoadMapMovie)].Flag = value; } }
        public int NextWorldContextHandle { get { return this[nameof(NextWorldContextHandle)].GetValue<int>(); } set { this[nameof(NextWorldContextHandle)].SetValue<int>(value); } }
    }
    public class ScriptViewportClient : Object
    {
        public ScriptViewportClient(nint addr) : base(addr) { }
    }
    public class GameViewportClient : ScriptViewportClient
    {
        public GameViewportClient(nint addr) : base(addr) { }
        public Console ViewportConsole { get { return this[nameof(ViewportConsole)].As<Console>(); } set { this["ViewportConsole"] = value; } }
        public Array<DebugDisplayProperty> DebugProperties { get { return new Array<DebugDisplayProperty>(this[nameof(DebugProperties)].Address); } }
        public int MaxSplitscreenPlayers { get { return this[nameof(MaxSplitscreenPlayers)].GetValue<int>(); } set { this[nameof(MaxSplitscreenPlayers)].SetValue<int>(value); } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public GameInstance GameInstance { get { return this[nameof(GameInstance)].As<GameInstance>(); } set { this["GameInstance"] = value; } }
        public void SSSwapControllers() { Invoke(nameof(SSSwapControllers)); }
        public void ShowTitleSafeArea() { Invoke(nameof(ShowTitleSafeArea)); }
        public void SetConsoleTarget(int PlayerIndex) { Invoke(nameof(SetConsoleTarget), PlayerIndex); }
    }
    public class Player : Object
    {
        public Player(nint addr) : base(addr) { }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public int CurrentNetSpeed { get { return this[nameof(CurrentNetSpeed)].GetValue<int>(); } set { this[nameof(CurrentNetSpeed)].SetValue<int>(value); } }
        public int ConfiguredInternetSpeed { get { return this[nameof(ConfiguredInternetSpeed)].GetValue<int>(); } set { this[nameof(ConfiguredInternetSpeed)].SetValue<int>(value); } }
        public int ConfiguredLanSpeed { get { return this[nameof(ConfiguredLanSpeed)].GetValue<int>(); } set { this[nameof(ConfiguredLanSpeed)].SetValue<int>(value); } }
    }
    public class LocalPlayer : Player
    {
        public LocalPlayer(nint addr) : base(addr) { }
        public GameViewportClient ViewportClient { get { return this[nameof(ViewportClient)].As<GameViewportClient>(); } set { this["ViewportClient"] = value; } }
        public byte AspectRatioAxisConstraint { get { return this[nameof(AspectRatioAxisConstraint)].GetValue<byte>(); } set { this[nameof(AspectRatioAxisConstraint)].SetValue<byte>(value); } }
        public Object PendingLevelPlayerControllerClass { get { return this[nameof(PendingLevelPlayerControllerClass)]; } set { this[nameof(PendingLevelPlayerControllerClass)] = value; } }
        public bool bSentSplitJoin { get { return this[nameof(bSentSplitJoin)].Flag; } set { this[nameof(bSentSplitJoin)].Flag = value; } }
        public int ControllerId { get { return this[nameof(ControllerId)].GetValue<int>(); } set { this[nameof(ControllerId)].SetValue<int>(value); } }
    }
    public class LocalPlayerSubsystem : Subsystem
    {
        public LocalPlayerSubsystem(nint addr) : base(addr) { }
    }
    public class DataTable : Object
    {
        public DataTable(nint addr) : base(addr) { }
        public ScriptStruct RowStruct { get { return this[nameof(RowStruct)].As<ScriptStruct>(); } set { this["RowStruct"] = value; } }
        public bool bStripFromClientBuilds { get { return this[nameof(bStripFromClientBuilds)].Flag; } set { this[nameof(bStripFromClientBuilds)].Flag = value; } }
        public bool bIgnoreExtraFields { get { return this[nameof(bIgnoreExtraFields)].Flag; } set { this[nameof(bIgnoreExtraFields)].Flag = value; } }
        public bool bIgnoreMissingFields { get { return this[nameof(bIgnoreMissingFields)].Flag; } set { this[nameof(bIgnoreMissingFields)].Flag = value; } }
        public Object ImportKeyField { get { return this[nameof(ImportKeyField)]; } set { this[nameof(ImportKeyField)] = value; } }
    }
    public class CancellableAsyncAction : BlueprintAsyncActionBase
    {
        public CancellableAsyncAction(nint addr) : base(addr) { }
        public bool IsActive() { return Invoke<bool>(nameof(IsActive)); }
        public void Cancel() { Invoke(nameof(Cancel)); }
    }
    public class OnlineBlueprintCallProxyBase : BlueprintAsyncActionBase
    {
        public OnlineBlueprintCallProxyBase(nint addr) : base(addr) { }
    }
    public class NetConnection : Player
    {
        public NetConnection(nint addr) : base(addr) { }
        public Array<ChildConnection> Children { get { return new Array<ChildConnection>(this[nameof(Children)].Address); } }
        public NetDriver Driver { get { return this[nameof(Driver)].As<NetDriver>(); } set { this["Driver"] = value; } }
        public Object PackageMapClass { get { return this[nameof(PackageMapClass)]; } set { this[nameof(PackageMapClass)] = value; } }
        public PackageMap PackageMap { get { return this[nameof(PackageMap)].As<PackageMap>(); } set { this["PackageMap"] = value; } }
        public Array<Channel> OpenChannels { get { return new Array<Channel>(this[nameof(OpenChannels)].Address); } }
        public Array<Actor> SentTemporaries { get { return new Array<Actor>(this[nameof(SentTemporaries)].Address); } }
        public Actor ViewTarget { get { return this[nameof(ViewTarget)].As<Actor>(); } set { this["ViewTarget"] = value; } }
        public Actor OwningActor { get { return this[nameof(OwningActor)].As<Actor>(); } set { this["OwningActor"] = value; } }
        public int MaxPacket { get { return this[nameof(MaxPacket)].GetValue<int>(); } set { this[nameof(MaxPacket)].SetValue<int>(value); } }
        public bool InternalAck { get { return this[nameof(InternalAck)].Flag; } set { this[nameof(InternalAck)].Flag = value; } }
        public UniqueNetIdRepl PlayerId { get { return this[nameof(PlayerId)].As<UniqueNetIdRepl>(); } set { this["PlayerId"] = value; } }
        public double LastReceiveTime { get { return this[nameof(LastReceiveTime)].GetValue<double>(); } set { this[nameof(LastReceiveTime)].SetValue<double>(value); } }
        public int DefaultMaxChannelSize { get { return this[nameof(DefaultMaxChannelSize)].GetValue<int>(); } set { this[nameof(DefaultMaxChannelSize)].SetValue<int>(value); } }
        public Array<Channel> ChannelsToTick { get { return new Array<Channel>(this[nameof(ChannelsToTick)].Address); } }
    }
    public class NetDriver : Object
    {
        public NetDriver(nint addr) : base(addr) { }
        public Object NetConnectionClassName { get { return this[nameof(NetConnectionClassName)]; } set { this[nameof(NetConnectionClassName)] = value; } }
        public Object ReplicationDriverClassName { get { return this[nameof(ReplicationDriverClassName)]; } set { this[nameof(ReplicationDriverClassName)] = value; } }
        public Object ReplicationBridgeClassName { get { return this[nameof(ReplicationBridgeClassName)]; } set { this[nameof(ReplicationBridgeClassName)] = value; } }
        public int MaxDownloadSize { get { return this[nameof(MaxDownloadSize)].GetValue<int>(); } set { this[nameof(MaxDownloadSize)].SetValue<int>(value); } }
        public bool bClampListenServerTickRate { get { return this[nameof(bClampListenServerTickRate)].Flag; } set { this[nameof(bClampListenServerTickRate)].Flag = value; } }
        public int NetServerMaxTickRate { get { return this[nameof(NetServerMaxTickRate)].GetValue<int>(); } set { this[nameof(NetServerMaxTickRate)].SetValue<int>(value); } }
        public int MaxNetTickRate { get { return this[nameof(MaxNetTickRate)].GetValue<int>(); } set { this[nameof(MaxNetTickRate)].SetValue<int>(value); } }
        public int MaxInternetClientRate { get { return this[nameof(MaxInternetClientRate)].GetValue<int>(); } set { this[nameof(MaxInternetClientRate)].SetValue<int>(value); } }
        public int MaxClientRate { get { return this[nameof(MaxClientRate)].GetValue<int>(); } set { this[nameof(MaxClientRate)].SetValue<int>(value); } }
        public float ServerTravelPause { get { return this[nameof(ServerTravelPause)].GetValue<float>(); } set { this[nameof(ServerTravelPause)].SetValue<float>(value); } }
        public float SpawnPrioritySeconds { get { return this[nameof(SpawnPrioritySeconds)].GetValue<float>(); } set { this[nameof(SpawnPrioritySeconds)].SetValue<float>(value); } }
        public float RelevantTimeout { get { return this[nameof(RelevantTimeout)].GetValue<float>(); } set { this[nameof(RelevantTimeout)].SetValue<float>(value); } }
        public float KeepAliveTime { get { return this[nameof(KeepAliveTime)].GetValue<float>(); } set { this[nameof(KeepAliveTime)].SetValue<float>(value); } }
        public float InitialConnectTimeout { get { return this[nameof(InitialConnectTimeout)].GetValue<float>(); } set { this[nameof(InitialConnectTimeout)].SetValue<float>(value); } }
        public float ConnectionTimeout { get { return this[nameof(ConnectionTimeout)].GetValue<float>(); } set { this[nameof(ConnectionTimeout)].SetValue<float>(value); } }
        public float TimeoutMultiplierForUnoptimizedBuilds { get { return this[nameof(TimeoutMultiplierForUnoptimizedBuilds)].GetValue<float>(); } set { this[nameof(TimeoutMultiplierForUnoptimizedBuilds)].SetValue<float>(value); } }
        public NetConnection ServerConnection { get { return this[nameof(ServerConnection)].As<NetConnection>(); } set { this["ServerConnection"] = value; } }
        public Array<NetConnection> ClientConnections { get { return new Array<NetConnection>(this[nameof(ClientConnections)].Address); } }
        public int RecentlyDisconnectedTrackingTime { get { return this[nameof(RecentlyDisconnectedTrackingTime)].GetValue<int>(); } set { this[nameof(RecentlyDisconnectedTrackingTime)].SetValue<int>(value); } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public Package WorldPackage { get { return this[nameof(WorldPackage)].As<Package>(); } set { this["WorldPackage"] = value; } }
        public Object NetConnectionClass { get { return this[nameof(NetConnectionClass)].As<Object>(); } set { this["NetConnectionClass"] = value; } } // ClassPtrProperty
        public Object ReplicationDriverClass { get { return this[nameof(ReplicationDriverClass)].As<Object>(); } set { this["ReplicationDriverClass"] = value; } } // ClassPtrProperty
        public Object ReplicationBridgeClass { get { return this[nameof(ReplicationBridgeClass)].As<Object>(); } set { this["ReplicationBridgeClass"] = value; } } // ClassPtrProperty
        public Object NetDriverName { get { return this[nameof(NetDriverName)]; } set { this[nameof(NetDriverName)] = value; } }
        public Array<ChannelDefinition> ChannelDefinitions { get { return new Array<ChannelDefinition>(this[nameof(ChannelDefinitions)].Address); } }
        public Object ChannelDefinitionMap { get { return this[nameof(ChannelDefinitionMap)]; } set { this[nameof(ChannelDefinitionMap)] = value; } }
        public Array<Channel> ActorChannelPool { get { return new Array<Channel>(this[nameof(ActorChannelPool)].Address); } }
        public bool bNoTimeouts { get { return this[nameof(bNoTimeouts)].Flag; } set { this[nameof(bNoTimeouts)].Flag = value; } }
        public bool bNeverApplyNetworkEmulationSettings { get { return this[nameof(bNeverApplyNetworkEmulationSettings)].Flag; } set { this[nameof(bNeverApplyNetworkEmulationSettings)].Flag = value; } }
        public ReplicationDriver ReplicationDriver { get { return this[nameof(ReplicationDriver)].As<ReplicationDriver>(); } set { this["ReplicationDriver"] = value; } }
    }
    public class OnlineEngineInterface : Object
    {
        public OnlineEngineInterface(nint addr) : base(addr) { }
    }
    public class OnlineSession : Object
    {
        public OnlineSession(nint addr) : base(addr) { }
    }
    public class RuntimeOptionsBase : Object
    {
        public RuntimeOptionsBase(nint addr) : base(addr) { }
    }
    public class CameraModifier : Object
    {
        public CameraModifier(nint addr) : base(addr) { }
        public bool bDebug { get { return this[nameof(bDebug)].Flag; } set { this[nameof(bDebug)].Flag = value; } }
        public bool bExclusive { get { return this[nameof(bExclusive)].Flag; } set { this[nameof(bExclusive)].Flag = value; } }
        public byte Priority { get { return this[nameof(Priority)].GetValue<byte>(); } set { this[nameof(Priority)].SetValue<byte>(value); } }
        public PlayerCameraManager CameraOwner { get { return this[nameof(CameraOwner)].As<PlayerCameraManager>(); } set { this["CameraOwner"] = value; } }
        public float AlphaInTime { get { return this[nameof(AlphaInTime)].GetValue<float>(); } set { this[nameof(AlphaInTime)].SetValue<float>(value); } }
        public float AlphaOutTime { get { return this[nameof(AlphaOutTime)].GetValue<float>(); } set { this[nameof(AlphaOutTime)].SetValue<float>(value); } }
        public float Alpha { get { return this[nameof(Alpha)].GetValue<float>(); } set { this[nameof(Alpha)].SetValue<float>(value); } }
        public void OnCameraOwnerDestroyed(Actor InOwner) { Invoke(nameof(OnCameraOwnerDestroyed), InOwner); }
        public bool IsDisabled() { return Invoke<bool>(nameof(IsDisabled)); }
        public Actor GetViewTarget() { return Invoke<Actor>(nameof(GetViewTarget)); }
        public void EnableModifier() { Invoke(nameof(EnableModifier)); }
        public void DisableModifier(bool bImmediate) { Invoke(nameof(DisableModifier), bImmediate); }
        public void BlueprintModifyPostProcess(float DeltaTime, float PostProcessBlendWeight, PostProcessSettings PostProcessSettings) { Invoke(nameof(BlueprintModifyPostProcess), DeltaTime, PostProcessBlendWeight, PostProcessSettings); }
        public void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, Vector NewViewLocation, Rotator NewViewRotation, float NewFOV) { Invoke(nameof(BlueprintModifyCamera), DeltaTime, ViewLocation, ViewRotation, FOV, NewViewLocation, NewViewRotation, NewFOV); }
    }
    public class EngineCustomTimeStep : Object
    {
        public EngineCustomTimeStep(nint addr) : base(addr) { }
    }
    public class ReplicationDriver : Object
    {
        public ReplicationDriver(nint addr) : base(addr) { }
    }
    public class ReplicationConnectionDriver : Object
    {
        public ReplicationConnectionDriver(nint addr) : base(addr) { }
    }
    public class World : Object
    {
        public World(nint addr) : base(addr) { }
        public Level PersistentLevel { get { return this[nameof(PersistentLevel)].As<Level>(); } set { this["PersistentLevel"] = value; } }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public LineBatchComponent LineBatcher { get { return this[nameof(LineBatcher)].As<LineBatchComponent>(); } set { this["LineBatcher"] = value; } }
        public LineBatchComponent PersistentLineBatcher { get { return this[nameof(PersistentLineBatcher)].As<LineBatchComponent>(); } set { this["PersistentLineBatcher"] = value; } }
        public LineBatchComponent ForegroundLineBatcher { get { return this[nameof(ForegroundLineBatcher)].As<LineBatchComponent>(); } set { this["ForegroundLineBatcher"] = value; } }
        public GameNetworkManager NetworkManager { get { return this[nameof(NetworkManager)].As<GameNetworkManager>(); } set { this["NetworkManager"] = value; } }
        public PhysicsCollisionHandler PhysicsCollisionHandler { get { return this[nameof(PhysicsCollisionHandler)].As<PhysicsCollisionHandler>(); } set { this["PhysicsCollisionHandler"] = value; } }
        public Array<Object> ExtraReferencedObjects { get { return new Array<Object>(this[nameof(ExtraReferencedObjects)].Address); } }
        public Array<Object> PerModuleDataObjects { get { return new Array<Object>(this[nameof(PerModuleDataObjects)].Address); } }
        public Array<LevelStreaming> StreamingLevels { get { return new Array<LevelStreaming>(this[nameof(StreamingLevels)].Address); } }
        public StreamingLevelsToConsider StreamingLevelsToConsider { get { return this[nameof(StreamingLevelsToConsider)].As<StreamingLevelsToConsider>(); } set { this["StreamingLevelsToConsider"] = value; } }
        public ServerStreamingLevelsVisibility ServerStreamingLevelsVisibility { get { return this[nameof(ServerStreamingLevelsVisibility)].As<ServerStreamingLevelsVisibility>(); } set { this["ServerStreamingLevelsVisibility"] = value; } }
        public Object StreamingLevelsPrefix { get { return this[nameof(StreamingLevelsPrefix)]; } set { this[nameof(StreamingLevelsPrefix)] = value; } }
        public Level CurrentLevelPendingVisibility { get { return this[nameof(CurrentLevelPendingVisibility)].As<Level>(); } set { this["CurrentLevelPendingVisibility"] = value; } }
        public Level CurrentLevelPendingInvisibility { get { return this[nameof(CurrentLevelPendingInvisibility)].As<Level>(); } set { this["CurrentLevelPendingInvisibility"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
        public ParticleEventManager MyParticleEventManager { get { return this[nameof(MyParticleEventManager)].As<ParticleEventManager>(); } set { this["MyParticleEventManager"] = value; } }
        public PhysicsVolume DefaultPhysicsVolume { get { return this[nameof(DefaultPhysicsVolume)].As<PhysicsVolume>(); } set { this["DefaultPhysicsVolume"] = value; } }
        public bool bAreConstraintsDirty { get { return this[nameof(bAreConstraintsDirty)].Flag; } set { this[nameof(bAreConstraintsDirty)].Flag = value; } }
        public NavigationSystemBase NavigationSystem { get { return this[nameof(NavigationSystem)].As<NavigationSystemBase>(); } set { this["NavigationSystem"] = value; } }
        public GameModeBase AuthorityGameMode { get { return this[nameof(AuthorityGameMode)].As<GameModeBase>(); } set { this["AuthorityGameMode"] = value; } }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public AISystemBase AISystem { get { return this[nameof(AISystem)].As<AISystemBase>(); } set { this["AISystem"] = value; } }
        public AvoidanceManager AvoidanceManager { get { return this[nameof(AvoidanceManager)].As<AvoidanceManager>(); } set { this["AvoidanceManager"] = value; } }
        public Array<Level> Levels { get { return new Array<Level>(this[nameof(Levels)].Address); } }
        public Array<LevelCollection> LevelCollections { get { return new Array<LevelCollection>(this[nameof(LevelCollections)].Address); } }
        public GameInstance OwningGameInstance { get { return this[nameof(OwningGameInstance)].As<GameInstance>(); } set { this["OwningGameInstance"] = value; } }
        public Array<MaterialParameterCollectionInstance> ParameterCollectionInstances { get { return new Array<MaterialParameterCollectionInstance>(this[nameof(ParameterCollectionInstances)].Address); } }
        public Canvas CanvasForRenderingToTarget { get { return this[nameof(CanvasForRenderingToTarget)].As<Canvas>(); } set { this["CanvasForRenderingToTarget"] = value; } }
        public Canvas CanvasForDrawMaterialToRenderTarget { get { return this[nameof(CanvasForDrawMaterialToRenderTarget)].As<Canvas>(); } set { this["CanvasForDrawMaterialToRenderTarget"] = value; } }
        public PhysicsFieldComponent PhysicsField { get { return this[nameof(PhysicsField)].As<PhysicsFieldComponent>(); } set { this["PhysicsField"] = value; } }
        public uint LWILastAssignedUID { get { return this[nameof(LWILastAssignedUID)].GetValue<uint>(); } set { this[nameof(LWILastAssignedUID)].SetValue<uint>(value); } }
        public Object ComponentsThatNeedPreEndOfFrameSync { get { return this[nameof(ComponentsThatNeedPreEndOfFrameSync)]; } set { this[nameof(ComponentsThatNeedPreEndOfFrameSync)] = value; } }
        public Array<ActorComponent> ComponentsThatNeedEndOfFrameUpdate { get { return new Array<ActorComponent>(this[nameof(ComponentsThatNeedEndOfFrameUpdate)].Address); } }
        public Array<ActorComponent> ComponentsThatNeedEndOfFrameUpdate_OnGameThread { get { return new Array<ActorComponent>(this[nameof(ComponentsThatNeedEndOfFrameUpdate_OnGameThread)].Address); } }
        public WorldComposition WorldComposition { get { return this[nameof(WorldComposition)].As<WorldComposition>(); } set { this["WorldComposition"] = value; } }
        public ContentBundleManager ContentBundleManager { get { return this[nameof(ContentBundleManager)].As<ContentBundleManager>(); } set { this["ContentBundleManager"] = value; } }
        public WorldPSCPool PSCPool { get { return this[nameof(PSCPool)].As<WorldPSCPool>(); } set { this["PSCPool"] = value; } }
        public WorldSettings K2_GetWorldSettings() { return Invoke<WorldSettings>(nameof(K2_GetWorldSettings)); }
        public void HandleTimelineScrubbed() { Invoke(nameof(HandleTimelineScrubbed)); }
    }
    public class MaterialExpression : Object
    {
        public MaterialExpression(nint addr) : base(addr) { }
        public int MaterialExpressionEditorX { get { return this[nameof(MaterialExpressionEditorX)].GetValue<int>(); } set { this[nameof(MaterialExpressionEditorX)].SetValue<int>(value); } }
        public int MaterialExpressionEditorY { get { return this[nameof(MaterialExpressionEditorY)].GetValue<int>(); } set { this[nameof(MaterialExpressionEditorY)].SetValue<int>(value); } }
        public EdGraphNode GraphNode { get { return this[nameof(GraphNode)].As<EdGraphNode>(); } set { this["GraphNode"] = value; } }
        public MaterialExpression SubgraphExpression { get { return this[nameof(SubgraphExpression)].As<MaterialExpression>(); } set { this["SubgraphExpression"] = value; } }
        public Guid MaterialExpressionGuid { get { return this[nameof(MaterialExpressionGuid)].As<Guid>(); } set { this["MaterialExpressionGuid"] = value; } }
        public Material Material { get { return this[nameof(Material)].As<Material>(); } set { this["Material"] = value; } }
        public MaterialFunction Function { get { return this[nameof(Function)].As<MaterialFunction>(); } set { this["Function"] = value; } }
        public Object Desc { get { return this[nameof(Desc)]; } set { this[nameof(Desc)] = value; } }
        public bool bRealtimePreview { get { return this[nameof(bRealtimePreview)].Flag; } set { this[nameof(bRealtimePreview)].Flag = value; } }
        public bool bNeedToUpdatePreview { get { return this[nameof(bNeedToUpdatePreview)].Flag; } set { this[nameof(bNeedToUpdatePreview)].Flag = value; } }
        public bool bIsParameterExpression { get { return this[nameof(bIsParameterExpression)].Flag; } set { this[nameof(bIsParameterExpression)].Flag = value; } }
        public bool bCommentBubbleVisible { get { return this[nameof(bCommentBubbleVisible)].Flag; } set { this[nameof(bCommentBubbleVisible)].Flag = value; } }
        public bool bShowOutputNameOnPin { get { return this[nameof(bShowOutputNameOnPin)].Flag; } set { this[nameof(bShowOutputNameOnPin)].Flag = value; } }
        public bool bShowMaskColorsOnPin { get { return this[nameof(bShowMaskColorsOnPin)].Flag; } set { this[nameof(bShowMaskColorsOnPin)].Flag = value; } }
        public bool bHidePreviewWindow { get { return this[nameof(bHidePreviewWindow)].Flag; } set { this[nameof(bHidePreviewWindow)].Flag = value; } }
        public bool bCollapsed { get { return this[nameof(bCollapsed)].Flag; } set { this[nameof(bCollapsed)].Flag = value; } }
        public bool bShaderInputData { get { return this[nameof(bShaderInputData)].Flag; } set { this[nameof(bShaderInputData)].Flag = value; } }
        public bool bShowInputs { get { return this[nameof(bShowInputs)].Flag; } set { this[nameof(bShowInputs)].Flag = value; } }
        public bool bShowOutputs { get { return this[nameof(bShowOutputs)].Flag; } set { this[nameof(bShowOutputs)].Flag = value; } }
        public Array<Object> MenuCategories { get { return new Array<Object>(this[nameof(MenuCategories)].Address); } }
        public Array<ExpressionOutput> Outputs { get { return new Array<ExpressionOutput>(this[nameof(Outputs)].Address); } }
    }
    public class MaterialExpressionTextureBase : MaterialExpression
    {
        public MaterialExpressionTextureBase(nint addr) : base(addr) { }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
        public byte SamplerType { get { return this[nameof(SamplerType)].GetValue<byte>(); } set { this[nameof(SamplerType)].SetValue<byte>(value); } }
        public bool IsDefaultMeshpaintTexture { get { return this[nameof(IsDefaultMeshpaintTexture)].Flag; } set { this[nameof(IsDefaultMeshpaintTexture)].Flag = value; } }
    }
    public class MaterialExpressionTextureSample : MaterialExpressionTextureBase
    {
        public MaterialExpressionTextureSample(nint addr) : base(addr) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public ExpressionInput TextureObject { get { return this[nameof(TextureObject)].As<ExpressionInput>(); } set { this["TextureObject"] = value; } }
        public ExpressionInput MipValue { get { return this[nameof(MipValue)].As<ExpressionInput>(); } set { this["MipValue"] = value; } }
        public ExpressionInput CoordinatesDX { get { return this[nameof(CoordinatesDX)].As<ExpressionInput>(); } set { this["CoordinatesDX"] = value; } }
        public ExpressionInput CoordinatesDY { get { return this[nameof(CoordinatesDY)].As<ExpressionInput>(); } set { this["CoordinatesDY"] = value; } }
        public ExpressionInput AutomaticViewMipBiasValue { get { return this[nameof(AutomaticViewMipBiasValue)].As<ExpressionInput>(); } set { this["AutomaticViewMipBiasValue"] = value; } }
        public byte MipValueMode { get { return this[nameof(MipValueMode)].GetValue<byte>(); } set { this[nameof(MipValueMode)].SetValue<byte>(value); } }
        public byte SamplerSource { get { return this[nameof(SamplerSource)].GetValue<byte>(); } set { this[nameof(SamplerSource)].SetValue<byte>(value); } }
        public bool AutomaticViewMipBias { get { return this[nameof(AutomaticViewMipBias)].Flag; } set { this[nameof(AutomaticViewMipBias)].Flag = value; } }
        public byte ConstCoordinate { get { return this[nameof(ConstCoordinate)].GetValue<byte>(); } set { this[nameof(ConstCoordinate)].SetValue<byte>(value); } }
        public int ConstMipValue { get { return this[nameof(ConstMipValue)].GetValue<int>(); } set { this[nameof(ConstMipValue)].SetValue<int>(value); } }
    }
    public class MaterialExpressionTextureSampleParameter : MaterialExpressionTextureSample
    {
        public MaterialExpressionTextureSampleParameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
        public ParameterChannelNames ChannelNames { get { return this[nameof(ChannelNames)].As<ParameterChannelNames>(); } set { this["ChannelNames"] = value; } }
    }
    public class MaterialExpressionTextureSampleParameter2D : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameter2D(nint addr) : base(addr) { }
    }
    public class SkeletalMeshComponent : SkinnedMeshComponent
    {
        public SkeletalMeshComponent(nint addr) : base(addr) { }
        public Object AnimBlueprintGeneratedClass { get { return this[nameof(AnimBlueprintGeneratedClass)].As<Object>(); } set { this["AnimBlueprintGeneratedClass"] = value; } } // ClassPtrProperty
        public Object AnimClass { get { return this[nameof(AnimClass)]; } set { this[nameof(AnimClass)] = value; } }
        public AnimInstance AnimScriptInstance { get { return this[nameof(AnimScriptInstance)].As<AnimInstance>(); } set { this["AnimScriptInstance"] = value; } }
        public AnimInstance PostProcessAnimInstance { get { return this[nameof(PostProcessAnimInstance)].As<AnimInstance>(); } set { this["PostProcessAnimInstance"] = value; } }
        public SingleAnimationPlayData AnimationData { get { return this[nameof(AnimationData)].As<SingleAnimationPlayData>(); } set { this["AnimationData"] = value; } }
        public Vector RootBoneTranslation { get { return this[nameof(RootBoneTranslation)].As<Vector>(); } set { this["RootBoneTranslation"] = value; } }
        public Vector LineCheckBoundsScale { get { return this[nameof(LineCheckBoundsScale)].As<Vector>(); } set { this["LineCheckBoundsScale"] = value; } }
        public Array<AnimInstance> LinkedInstances { get { return new Array<AnimInstance>(this[nameof(LinkedInstances)].Address); } }
        public Array<Transform> CachedBoneSpaceTransforms { get { return new Array<Transform>(this[nameof(CachedBoneSpaceTransforms)].Address); } }
        public Array<Transform> CachedComponentSpaceTransforms { get { return new Array<Transform>(this[nameof(CachedComponentSpaceTransforms)].Address); } }
        public float GlobalAnimRateScale { get { return this[nameof(GlobalAnimRateScale)].GetValue<float>(); } set { this[nameof(GlobalAnimRateScale)].SetValue<float>(value); } }
        public byte KinematicBonesUpdateType { get { return this[nameof(KinematicBonesUpdateType)].GetValue<byte>(); } set { this[nameof(KinematicBonesUpdateType)].SetValue<byte>(value); } }
        public byte PhysicsTransformUpdateMode { get { return this[nameof(PhysicsTransformUpdateMode)].GetValue<byte>(); } set { this[nameof(PhysicsTransformUpdateMode)].SetValue<byte>(value); } }
        public byte AnimationMode { get { return this[nameof(AnimationMode)].GetValue<byte>(); } set { this[nameof(AnimationMode)].SetValue<byte>(value); } }
        public bool bDisablePostProcessBlueprint { get { return this[nameof(bDisablePostProcessBlueprint)].Flag; } set { this[nameof(bDisablePostProcessBlueprint)].Flag = value; } }
        public bool bUpdateOverlapsOnAnimationFinalize { get { return this[nameof(bUpdateOverlapsOnAnimationFinalize)].Flag; } set { this[nameof(bUpdateOverlapsOnAnimationFinalize)].Flag = value; } }
        public bool bHasValidBodies { get { return this[nameof(bHasValidBodies)].Flag; } set { this[nameof(bHasValidBodies)].Flag = value; } }
        public bool bBlendPhysics { get { return this[nameof(bBlendPhysics)].Flag; } set { this[nameof(bBlendPhysics)].Flag = value; } }
        public bool bEnablePhysicsOnDedicatedServer { get { return this[nameof(bEnablePhysicsOnDedicatedServer)].Flag; } set { this[nameof(bEnablePhysicsOnDedicatedServer)].Flag = value; } }
        public bool bUpdateMeshWhenKinematic { get { return this[nameof(bUpdateMeshWhenKinematic)].Flag; } set { this[nameof(bUpdateMeshWhenKinematic)].Flag = value; } }
        public bool bUpdateJointsFromAnimation { get { return this[nameof(bUpdateJointsFromAnimation)].Flag; } set { this[nameof(bUpdateJointsFromAnimation)].Flag = value; } }
        public bool bAllowClothActors { get { return this[nameof(bAllowClothActors)].Flag; } set { this[nameof(bAllowClothActors)].Flag = value; } }
        public bool bDisableClothSimulation { get { return this[nameof(bDisableClothSimulation)].Flag; } set { this[nameof(bDisableClothSimulation)].Flag = value; } }
        public bool bDisableRigidBodyAnimNode { get { return this[nameof(bDisableRigidBodyAnimNode)].Flag; } set { this[nameof(bDisableRigidBodyAnimNode)].Flag = value; } }
        public bool bAllowAnimCurveEvaluation { get { return this[nameof(bAllowAnimCurveEvaluation)].Flag; } set { this[nameof(bAllowAnimCurveEvaluation)].Flag = value; } }
        public bool bDisableAnimCurves { get { return this[nameof(bDisableAnimCurves)].Flag; } set { this[nameof(bDisableAnimCurves)].Flag = value; } }
        public bool bCollideWithEnvironment { get { return this[nameof(bCollideWithEnvironment)].Flag; } set { this[nameof(bCollideWithEnvironment)].Flag = value; } }
        public bool bCollideWithAttachedChildren { get { return this[nameof(bCollideWithAttachedChildren)].Flag; } set { this[nameof(bCollideWithAttachedChildren)].Flag = value; } }
        public bool bForceCollisionUpdate { get { return this[nameof(bForceCollisionUpdate)].Flag; } set { this[nameof(bForceCollisionUpdate)].Flag = value; } }
        public bool bLocalSpaceSimulation { get { return this[nameof(bLocalSpaceSimulation)].Flag; } set { this[nameof(bLocalSpaceSimulation)].Flag = value; } }
        public bool bResetAfterTeleport { get { return this[nameof(bResetAfterTeleport)].Flag; } set { this[nameof(bResetAfterTeleport)].Flag = value; } }
        public bool bDeferKinematicBoneUpdate { get { return this[nameof(bDeferKinematicBoneUpdate)].Flag; } set { this[nameof(bDeferKinematicBoneUpdate)].Flag = value; } }
        public bool bNoSkeletonUpdate { get { return this[nameof(bNoSkeletonUpdate)].Flag; } set { this[nameof(bNoSkeletonUpdate)].Flag = value; } }
        public bool bPauseAnims { get { return this[nameof(bPauseAnims)].Flag; } set { this[nameof(bPauseAnims)].Flag = value; } }
        public bool bUseRefPoseOnInitAnim { get { return this[nameof(bUseRefPoseOnInitAnim)].Flag; } set { this[nameof(bUseRefPoseOnInitAnim)].Flag = value; } }
        public bool bEnablePerPolyCollision { get { return this[nameof(bEnablePerPolyCollision)].Flag; } set { this[nameof(bEnablePerPolyCollision)].Flag = value; } }
        public bool bForceRefpose { get { return this[nameof(bForceRefpose)].Flag; } set { this[nameof(bForceRefpose)].Flag = value; } }
        public bool bOnlyAllowAutonomousTickPose { get { return this[nameof(bOnlyAllowAutonomousTickPose)].Flag; } set { this[nameof(bOnlyAllowAutonomousTickPose)].Flag = value; } }
        public bool bIsAutonomousTickPose { get { return this[nameof(bIsAutonomousTickPose)].Flag; } set { this[nameof(bIsAutonomousTickPose)].Flag = value; } }
        public bool bOldForceRefPose { get { return this[nameof(bOldForceRefPose)].Flag; } set { this[nameof(bOldForceRefPose)].Flag = value; } }
        public bool bShowPrePhysBones { get { return this[nameof(bShowPrePhysBones)].Flag; } set { this[nameof(bShowPrePhysBones)].Flag = value; } }
        public bool bRequiredBonesUpToDate { get { return this[nameof(bRequiredBonesUpToDate)].Flag; } set { this[nameof(bRequiredBonesUpToDate)].Flag = value; } }
        public bool bAnimTreeInitialised { get { return this[nameof(bAnimTreeInitialised)].Flag; } set { this[nameof(bAnimTreeInitialised)].Flag = value; } }
        public bool bIncludeComponentLocationIntoBounds { get { return this[nameof(bIncludeComponentLocationIntoBounds)].Flag; } set { this[nameof(bIncludeComponentLocationIntoBounds)].Flag = value; } }
        public bool bEnableLineCheckWithBounds { get { return this[nameof(bEnableLineCheckWithBounds)].Flag; } set { this[nameof(bEnableLineCheckWithBounds)].Flag = value; } }
        public bool bPropagateCurvesToFollowers { get { return this[nameof(bPropagateCurvesToFollowers)].Flag; } set { this[nameof(bPropagateCurvesToFollowers)].Flag = value; } }
        public bool bSkipKinematicUpdateWhenInterpolating { get { return this[nameof(bSkipKinematicUpdateWhenInterpolating)].Flag; } set { this[nameof(bSkipKinematicUpdateWhenInterpolating)].Flag = value; } }
        public bool bSkipBoundsUpdateWhenInterpolating { get { return this[nameof(bSkipBoundsUpdateWhenInterpolating)].Flag; } set { this[nameof(bSkipBoundsUpdateWhenInterpolating)].Flag = value; } }
        public bool bNeedsQueuedAnimEventsDispatched { get { return this[nameof(bNeedsQueuedAnimEventsDispatched)].Flag; } set { this[nameof(bNeedsQueuedAnimEventsDispatched)].Flag = value; } }
        public ushort CachedAnimCurveUidVersion { get { return this[nameof(CachedAnimCurveUidVersion)].GetValue<ushort>(); } set { this[nameof(CachedAnimCurveUidVersion)].SetValue<ushort>(value); } }
        public float ClothBlendWeight { get { return this[nameof(ClothBlendWeight)].GetValue<float>(); } set { this[nameof(ClothBlendWeight)].SetValue<float>(value); } }
        public bool bWaitForParallelClothTask { get { return this[nameof(bWaitForParallelClothTask)].Flag; } set { this[nameof(bWaitForParallelClothTask)].Flag = value; } }
        public Array<Object> DisallowedAnimCurves { get { return new Array<Object>(this[nameof(DisallowedAnimCurves)].Address); } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public float ClothMaxDistanceScale { get { return this[nameof(ClothMaxDistanceScale)].GetValue<float>(); } set { this[nameof(ClothMaxDistanceScale)].SetValue<float>(value); } }
        public Object OnConstraintBroken { get { return this[nameof(OnConstraintBroken)]; } set { this[nameof(OnConstraintBroken)] = value; } }
        public Object OnPlasticDeformation { get { return this[nameof(OnPlasticDeformation)]; } set { this[nameof(OnPlasticDeformation)] = value; } }
        public Object ClothingSimulationFactory { get { return this[nameof(ClothingSimulationFactory)]; } set { this[nameof(ClothingSimulationFactory)] = value; } }
        public float TeleportDistanceThreshold { get { return this[nameof(TeleportDistanceThreshold)].GetValue<float>(); } set { this[nameof(TeleportDistanceThreshold)].SetValue<float>(value); } }
        public float TeleportRotationThreshold { get { return this[nameof(TeleportRotationThreshold)].GetValue<float>(); } set { this[nameof(TeleportRotationThreshold)].SetValue<float>(value); } }
        public uint LastPoseTickFrame { get { return this[nameof(LastPoseTickFrame)].GetValue<uint>(); } set { this[nameof(LastPoseTickFrame)].SetValue<uint>(value); } }
        public ClothingSimulationInteractor ClothingInteractor { get { return this[nameof(ClothingInteractor)].As<ClothingSimulationInteractor>(); } set { this["ClothingInteractor"] = value; } }
        public Object OnAnimInitialized { get { return this[nameof(OnAnimInitialized)]; } set { this[nameof(OnAnimInitialized)] = value; } }
        public void UnlinkAnimClassLayers(Object InClass) { Invoke(nameof(UnlinkAnimClassLayers), InClass); }
        public void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace) { Invoke(nameof(UnbindClothFromLeaderPoseComponent), bRestoreSimulationSpace); }
        public void ToggleDisablePostProcessBlueprint() { Invoke(nameof(ToggleDisablePostProcessBlueprint)); }
        public void TermBodiesBelow(Object ParentBoneName) { Invoke(nameof(TermBodiesBelow), ParentBoneName); }
        public void SuspendClothingSimulation() { Invoke(nameof(SuspendClothingSimulation)); }
        public void Stop() { Invoke(nameof(Stop)); }
        public void SnapshotPose(PoseSnapshot Snapshot) { Invoke(nameof(SnapshotPose), Snapshot); }
        public void SetUpdateClothInEditor(bool NewUpdateState) { Invoke(nameof(SetUpdateClothInEditor), NewUpdateState); }
        public void SetUpdateAnimationInEditor(bool NewUpdateState) { Invoke(nameof(SetUpdateAnimationInEditor), NewUpdateState); }
        public void SetTeleportRotationThreshold(float Threshold) { Invoke(nameof(SetTeleportRotationThreshold), Threshold); }
        public void SetTeleportDistanceThreshold(float Threshold) { Invoke(nameof(SetTeleportDistanceThreshold), Threshold); }
        public void SetSkeletalMeshAsset(SkeletalMesh NewMesh) { Invoke(nameof(SetSkeletalMeshAsset), NewMesh); }
        public void SetPosition(float InPos, bool bFireNotifies) { Invoke(nameof(SetPosition), InPos, bFireNotifies); }
        public void SetPlayRate(float Rate) { Invoke(nameof(SetPlayRate), Rate); }
        public void SetPhysicsBlendWeight(float PhysicsBlendWeight) { Invoke(nameof(SetPhysicsBlendWeight), PhysicsBlendWeight); }
        public void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, Object BoneName, bool bIncludeSelf) { Invoke(nameof(SetNotifyRigidBodyCollisionBelow), bNewNotifyRigidBodyCollision, BoneName, bIncludeSelf); }
        public void SetMorphTarget(Object MorphTargetName, float Value, bool bRemoveZeroWeight) { Invoke(nameof(SetMorphTarget), MorphTargetName, Value, bRemoveZeroWeight); }
        public void SetEnablePhysicsBlending(bool bNewBlendPhysics) { Invoke(nameof(SetEnablePhysicsBlending), bNewBlendPhysics); }
        public void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, Object BoneName, bool bIncludeSelf) { Invoke(nameof(SetEnableGravityOnAllBodiesBelow), bEnableGravity, BoneName, bIncludeSelf); }
        public void SetEnableBodyGravity(bool bEnableGravity, Object BoneName) { Invoke(nameof(SetEnableBodyGravity), bEnableGravity, BoneName); }
        public void SetDisablePostProcessBlueprint(bool bInDisablePostProcess) { Invoke(nameof(SetDisablePostProcessBlueprint), bInDisablePostProcess); }
        public void SetDisableAnimCurves(bool bInDisableAnimCurves) { Invoke(nameof(SetDisableAnimCurves), bInDisableAnimCurves); }
        public void SetConstraintProfileForAll(Object ProfileName, bool bDefaultIfNotFound) { Invoke(nameof(SetConstraintProfileForAll), ProfileName, bDefaultIfNotFound); }
        public void SetConstraintProfile(Object JointName, Object ProfileName, bool bDefaultIfNotFound) { Invoke(nameof(SetConstraintProfile), JointName, ProfileName, bDefaultIfNotFound); }
        public void SetClothMaxDistanceScale(float Scale) { Invoke(nameof(SetClothMaxDistanceScale), Scale); }
        public void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, Object BoneName) { Invoke(nameof(SetBodyNotifyRigidBodyCollision), bNewNotifyRigidBodyCollision, BoneName); }
        public void SetAnimClass(Object NewClass) { Invoke(nameof(SetAnimClass), NewClass); }
        public void SetAnimationMode(byte InAnimationMode) { Invoke(nameof(SetAnimationMode), InAnimationMode); }
        public void SetAnimation(AnimationAsset NewAnimToPlay) { Invoke(nameof(SetAnimation), NewAnimToPlay); }
        public void SetAngularLimits(Object InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle) { Invoke(nameof(SetAngularLimits), InBoneName, Swing1LimitAngle, TwistLimitAngle, Swing2LimitAngle); }
        public void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim) { Invoke(nameof(SetAllowRigidBodyAnimNode), bInAllow, bReinitAnim); }
        public void SetAllowedAnimCurvesEvaluation(Array<Object> List, bool bAllow) { Invoke(nameof(SetAllowedAnimCurvesEvaluation), List, bAllow); }
        public void SetAllowClothActors(bool bInAllow) { Invoke(nameof(SetAllowClothActors), bInAllow); }
        public void SetAllowAnimCurveEvaluation(bool bInAllow) { Invoke(nameof(SetAllowAnimCurveEvaluation), bInAllow); }
        public void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) { Invoke(nameof(SetAllMotorsAngularVelocityDrive), bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType); }
        public void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType) { Invoke(nameof(SetAllMotorsAngularPositionDrive), bEnableSwingDrive, bEnableTwistDrive, bSkipCustomPhysicsType); }
        public void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType) { Invoke(nameof(SetAllMotorsAngularDriveParams), InSpring, InDamping, InForceLimit, bSkipCustomPhysicsType); }
        public void SetAllBodiesSimulatePhysics(bool bNewSimulate) { Invoke(nameof(SetAllBodiesSimulatePhysics), bNewSimulate); }
        public void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType) { Invoke(nameof(SetAllBodiesPhysicsBlendWeight), PhysicsBlendWeight, bSkipCustomPhysicsType); }
        public void SetAllBodiesBelowSimulatePhysics(Object InBoneName, bool bNewSimulate, bool bIncludeSelf) { Invoke(nameof(SetAllBodiesBelowSimulatePhysics), InBoneName, bNewSimulate, bIncludeSelf); }
        public void SetAllBodiesBelowPhysicsDisabled(Object InBoneName, bool bDisabled, bool bIncludeSelf) { Invoke(nameof(SetAllBodiesBelowPhysicsDisabled), InBoneName, bDisabled, bIncludeSelf); }
        public void SetAllBodiesBelowPhysicsBlendWeight(Object InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf) { Invoke(nameof(SetAllBodiesBelowPhysicsBlendWeight), InBoneName, PhysicsBlendWeight, bSkipCustomPhysicsType, bIncludeSelf); }
        public void SetAllBodiesBelowLinearVelocity(Object InBoneName, Vector LinearVelocity, bool bIncludeSelf) { Invoke(nameof(SetAllBodiesBelowLinearVelocity), InBoneName, LinearVelocity, bIncludeSelf); }
        public void ResumeClothingSimulation() { Invoke(nameof(ResumeClothingSimulation)); }
        public void ResetClothTeleportMode() { Invoke(nameof(ResetClothTeleportMode)); }
        public void ResetAnimInstanceDynamics(ETeleportType InTeleportType) { Invoke(nameof(ResetAnimInstanceDynamics), InTeleportType); }
        public void ResetAllowedAnimCurveEvaluation() { Invoke(nameof(ResetAllowedAnimCurveEvaluation)); }
        public void ResetAllBodiesSimulatePhysics() { Invoke(nameof(ResetAllBodiesSimulatePhysics)); }
        public void PlayAnimation(AnimationAsset NewAnimToPlay, bool bLooping) { Invoke(nameof(PlayAnimation), NewAnimToPlay, bLooping); }
        public void Play(bool bLooping) { Invoke(nameof(Play), bLooping); }
        public void OverrideAnimationData(AnimationAsset InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate) { Invoke(nameof(OverrideAnimationData), InAnimToPlay, bIsLooping, bIsPlaying, Position, PlayRate); }
        public void LinkAnimGraphByTag(Object InTag, Object InClass) { Invoke(nameof(LinkAnimGraphByTag), InTag, InClass); }
        public void LinkAnimClassLayers(Object InClass) { Invoke(nameof(LinkAnimClassLayers), InClass); }
        public bool K2_GetClosestPointOnPhysicsAsset(Vector WorldPosition, Vector ClosestWorldPosition, Vector Normal, Object BoneName, float Distance) { return Invoke<bool>(nameof(K2_GetClosestPointOnPhysicsAsset), WorldPosition, ClosestWorldPosition, Normal, BoneName, Distance); }
        public bool IsPlaying() { return Invoke<bool>(nameof(IsPlaying)); }
        public bool IsClothingSimulationSuspended() { return Invoke<bool>(nameof(IsClothingSimulationSuspended)); }
        public bool IsBodyGravityEnabled(Object BoneName) { return Invoke<bool>(nameof(IsBodyGravityEnabled), BoneName); }
        public bool HasValidAnimationInstance() { return Invoke<bool>(nameof(HasValidAnimationInstance)); }
        public bool GetTransformAttribute_Ref(Object BoneName, Object AttributeName, Transform OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetTransformAttribute_Ref), BoneName, AttributeName, OutValue, LookupType); }
        public bool GetTransformAttribute(Object BoneName, Object AttributeName, Transform DefaultValue, Transform OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetTransformAttribute), BoneName, AttributeName, DefaultValue, OutValue, LookupType); }
        public float GetTeleportRotationThreshold() { return Invoke<float>(nameof(GetTeleportRotationThreshold)); }
        public float GetTeleportDistanceThreshold() { return Invoke<float>(nameof(GetTeleportDistanceThreshold)); }
        public bool GetStringAttribute_Ref(Object BoneName, Object AttributeName, Object OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetStringAttribute_Ref), BoneName, AttributeName, OutValue, LookupType); }
        public bool GetStringAttribute(Object BoneName, Object AttributeName, Object DefaultValue, Object OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetStringAttribute), BoneName, AttributeName, DefaultValue, OutValue, LookupType); }
        public SkeletalMesh GetSkeletalMeshAsset() { return Invoke<SkeletalMesh>(nameof(GetSkeletalMeshAsset)); }
        public Vector GetSkeletalCenterOfMass() { return Invoke<Vector>(nameof(GetSkeletalCenterOfMass)); }
        public AnimInstance GetPostProcessInstance() { return Invoke<AnimInstance>(nameof(GetPostProcessInstance)); }
        public float GetPosition() { return Invoke<float>(nameof(GetPosition)); }
        public float GetPlayRate() { return Invoke<float>(nameof(GetPlayRate)); }
        public float GetMorphTarget(Object MorphTargetName) { return Invoke<float>(nameof(GetMorphTarget), MorphTargetName); }
        public AnimInstance GetLinkedAnimLayerInstanceByGroup(Object InGroup) { return Invoke<AnimInstance>(nameof(GetLinkedAnimLayerInstanceByGroup), InGroup); }
        public AnimInstance GetLinkedAnimLayerInstanceByClass(Object InClass) { return Invoke<AnimInstance>(nameof(GetLinkedAnimLayerInstanceByClass), InClass); }
        public void GetLinkedAnimGraphInstancesByTag(Object InTag, Array<AnimInstance> OutLinkedInstances) { Invoke(nameof(GetLinkedAnimGraphInstancesByTag), InTag, OutLinkedInstances); }
        public AnimInstance GetLinkedAnimGraphInstanceByTag(Object InTag) { return Invoke<AnimInstance>(nameof(GetLinkedAnimGraphInstanceByTag), InTag); }
        public bool GetIntegerAttribute_Ref(Object BoneName, Object AttributeName, int OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetIntegerAttribute_Ref), BoneName, AttributeName, OutValue, LookupType); }
        public bool GetIntegerAttribute(Object BoneName, Object AttributeName, int DefaultValue, int OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetIntegerAttribute), BoneName, AttributeName, DefaultValue, OutValue, LookupType); }
        public bool GetFloatAttribute_Ref(Object BoneName, Object AttributeName, float OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetFloatAttribute_Ref), BoneName, AttributeName, OutValue, LookupType); }
        public bool GetFloatAttribute(Object BoneName, Object AttributeName, float DefaultValue, float OutValue, ECustomBoneAttributeLookup LookupType) { return Invoke<bool>(nameof(GetFloatAttribute), BoneName, AttributeName, DefaultValue, OutValue, LookupType); }
        public bool GetDisablePostProcessBlueprint() { return Invoke<bool>(nameof(GetDisablePostProcessBlueprint)); }
        public bool GetDisableAnimCurves() { return Invoke<bool>(nameof(GetDisableAnimCurves)); }
        public void GetCurrentJointAngles(Object InBoneName, float Swing1Angle, float TwistAngle, float Swing2Angle) { Invoke(nameof(GetCurrentJointAngles), InBoneName, Swing1Angle, TwistAngle, Swing2Angle); }
        public void GetConstraintsFromBody(Object BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, Array<ConstraintInstanceAccessor> OutConstraints) { Invoke(nameof(GetConstraintsFromBody), BodyName, bParentConstraints, bChildConstraints, bIncludesTerminated, OutConstraints); }
        public void GetConstraints(bool bIncludesTerminated, Array<ConstraintInstanceAccessor> OutConstraints) { Invoke(nameof(GetConstraints), bIncludesTerminated, OutConstraints); }
        public ConstraintInstanceAccessor GetConstraintByName(Object ConstraintName, bool bIncludesTerminated) { return Invoke<ConstraintInstanceAccessor>(nameof(GetConstraintByName), ConstraintName, bIncludesTerminated); }
        public float GetClothMaxDistanceScale() { return Invoke<float>(nameof(GetClothMaxDistanceScale)); }
        public ClothingSimulationInteractor GetClothingSimulationInteractor() { return Invoke<ClothingSimulationInteractor>(nameof(GetClothingSimulationInteractor)); }
        public float GetBoneMass(Object BoneName, bool bScaleMass) { return Invoke<float>(nameof(GetBoneMass), BoneName, bScaleMass); }
        public Vector GetBoneLinearVelocity(Object InBoneName) { return Invoke<Vector>(nameof(GetBoneLinearVelocity), InBoneName); }
        public AnimInstance GetAnimInstance() { return Invoke<AnimInstance>(nameof(GetAnimInstance)); }
        public Object GetAnimClass() { return Invoke<Object>(nameof(GetAnimClass)); }
        public byte GetAnimationMode() { return Invoke<byte>(nameof(GetAnimationMode)); }
        public bool GetAllowRigidBodyAnimNode() { return Invoke<bool>(nameof(GetAllowRigidBodyAnimNode)); }
        public bool GetAllowedAnimCurveEvaluate() { return Invoke<bool>(nameof(GetAllowedAnimCurveEvaluate)); }
        public bool GetAllowClothActors() { return Invoke<bool>(nameof(GetAllowClothActors)); }
        public void ForceClothNextUpdateTeleportAndReset() { Invoke(nameof(ForceClothNextUpdateTeleportAndReset)); }
        public void ForceClothNextUpdateTeleport() { Invoke(nameof(ForceClothNextUpdateTeleport)); }
        public Object FindConstraintBoneName(int ConstraintIndex) { return Invoke<Object>(nameof(FindConstraintBoneName), ConstraintIndex); }
        public void ClearMorphTargets() { Invoke(nameof(ClearMorphTargets)); }
        public void BreakConstraint(Vector Impulse, Vector HitLocation, Object InBoneName) { Invoke(nameof(BreakConstraint), Impulse, HitLocation, InBoneName); }
        public void BindClothToLeaderPoseComponent() { Invoke(nameof(BindClothToLeaderPoseComponent)); }
        public void AllowAnimCurveEvaluation(Object NameOfCurve, bool bAllow) { Invoke(nameof(AllowAnimCurveEvaluation), NameOfCurve, bAllow); }
        public void AddImpulseToAllBodiesBelow(Vector Impulse, Object BoneName, bool bVelChange, bool bIncludeSelf) { Invoke(nameof(AddImpulseToAllBodiesBelow), Impulse, BoneName, bVelChange, bIncludeSelf); }
        public void AddForceToAllBodiesBelow(Vector Force, Object BoneName, bool bAccelChange, bool bIncludeSelf) { Invoke(nameof(AddForceToAllBodiesBelow), Force, BoneName, bAccelChange, bIncludeSelf); }
        public void AccumulateAllBodiesBelowPhysicsBlendWeight(Object InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType) { Invoke(nameof(AccumulateAllBodiesBelowPhysicsBlendWeight), InBoneName, AddPhysicsBlendWeight, bSkipCustomPhysicsType); }
    }
    public class AnimInstance : Object
    {
        public AnimInstance(nint addr) : base(addr) { }
        public Skeleton CurrentSkeleton { get { return this[nameof(CurrentSkeleton)].As<Skeleton>(); } set { this["CurrentSkeleton"] = value; } }
        public byte RootMotionMode { get { return this[nameof(RootMotionMode)].GetValue<byte>(); } set { this[nameof(RootMotionMode)].SetValue<byte>(value); } }
        public bool bUseMultiThreadedAnimationUpdate { get { return this[nameof(bUseMultiThreadedAnimationUpdate)].Flag; } set { this[nameof(bUseMultiThreadedAnimationUpdate)].Flag = value; } }
        public bool bUsingCopyPoseFromMesh { get { return this[nameof(bUsingCopyPoseFromMesh)].Flag; } set { this[nameof(bUsingCopyPoseFromMesh)].Flag = value; } }
        public bool bReceiveNotifiesFromLinkedInstances { get { return this[nameof(bReceiveNotifiesFromLinkedInstances)].Flag; } set { this[nameof(bReceiveNotifiesFromLinkedInstances)].Flag = value; } }
        public bool bPropagateNotifiesToLinkedInstances { get { return this[nameof(bPropagateNotifiesToLinkedInstances)].Flag; } set { this[nameof(bPropagateNotifiesToLinkedInstances)].Flag = value; } }
        public bool bUseMainInstanceMontageEvaluationData { get { return this[nameof(bUseMainInstanceMontageEvaluationData)].Flag; } set { this[nameof(bUseMainInstanceMontageEvaluationData)].Flag = value; } }
        public bool bQueueMontageEvents { get { return this[nameof(bQueueMontageEvents)].Flag; } set { this[nameof(bQueueMontageEvents)].Flag = value; } }
        public Object OnMontageBlendingOut { get { return this[nameof(OnMontageBlendingOut)]; } set { this[nameof(OnMontageBlendingOut)] = value; } }
        public Object OnMontageStarted { get { return this[nameof(OnMontageStarted)]; } set { this[nameof(OnMontageStarted)] = value; } }
        public Object OnMontageEnded { get { return this[nameof(OnMontageEnded)]; } set { this[nameof(OnMontageEnded)] = value; } }
        public Object OnAllMontageInstancesEnded { get { return this[nameof(OnAllMontageInstancesEnded)]; } set { this[nameof(OnAllMontageInstancesEnded)] = value; } }
        public AnimNotifyQueue NotifyQueue { get { return this[nameof(NotifyQueue)].As<AnimNotifyQueue>(); } set { this["NotifyQueue"] = value; } }
        public Array<AnimNotifyEvent> ActiveAnimNotifyState { get { return new Array<AnimNotifyEvent>(this[nameof(ActiveAnimNotifyState)].Address); } }
        public Array<AnimNotifyEventReference> ActiveAnimNotifyEventReference { get { return new Array<AnimNotifyEventReference>(this[nameof(ActiveAnimNotifyEventReference)].Address); } }
        public bool WasAnimNotifyTriggeredInStateMachine(int MachineIndex, Object AnimNotifyType) { return Invoke<bool>(nameof(WasAnimNotifyTriggeredInStateMachine), MachineIndex, AnimNotifyType); }
        public bool WasAnimNotifyTriggeredInSourceState(int MachineIndex, int StateIndex, Object AnimNotifyType) { return Invoke<bool>(nameof(WasAnimNotifyTriggeredInSourceState), MachineIndex, StateIndex, AnimNotifyType); }
        public bool WasAnimNotifyTriggeredInAnyState(Object AnimNotifyType) { return Invoke<bool>(nameof(WasAnimNotifyTriggeredInAnyState), AnimNotifyType); }
        public bool WasAnimNotifyStateActiveInStateMachine(int MachineIndex, Object AnimNotifyStateType) { return Invoke<bool>(nameof(WasAnimNotifyStateActiveInStateMachine), MachineIndex, AnimNotifyStateType); }
        public bool WasAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, Object AnimNotifyStateType) { return Invoke<bool>(nameof(WasAnimNotifyStateActiveInSourceState), MachineIndex, StateIndex, AnimNotifyStateType); }
        public bool WasAnimNotifyStateActiveInAnyState(Object AnimNotifyStateType) { return Invoke<bool>(nameof(WasAnimNotifyStateActiveInAnyState), AnimNotifyStateType); }
        public bool WasAnimNotifyNameTriggeredInStateMachine(int MachineIndex, Object NotifyName) { return Invoke<bool>(nameof(WasAnimNotifyNameTriggeredInStateMachine), MachineIndex, NotifyName); }
        public bool WasAnimNotifyNameTriggeredInSourceState(int MachineIndex, int StateIndex, Object NotifyName) { return Invoke<bool>(nameof(WasAnimNotifyNameTriggeredInSourceState), MachineIndex, StateIndex, NotifyName); }
        public bool WasAnimNotifyNameTriggeredInAnyState(Object NotifyName) { return Invoke<bool>(nameof(WasAnimNotifyNameTriggeredInAnyState), NotifyName); }
        public void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic) { Invoke(nameof(UnlockAIResources), bUnlockMovement, UnlockAILogic); }
        public void UnlinkAnimClassLayers(Object InClass) { Invoke(nameof(UnlinkAnimClassLayers), InClass); }
        public Pawn TryGetPawnOwner() { return Invoke<Pawn>(nameof(TryGetPawnOwner)); }
        public void StopSlotAnimation(float InBlendOutTime, Object SlotNodeName) { Invoke(nameof(StopSlotAnimation), InBlendOutTime, SlotNodeName); }
        public void SnapshotPose(PoseSnapshot Snapshot) { Invoke(nameof(SnapshotPose), Snapshot); }
        public void SetUseMainInstanceMontageEvaluationData(bool bSet) { Invoke(nameof(SetUseMainInstanceMontageEvaluationData), bSet); }
        public void SetRootMotionMode(byte Value) { Invoke(nameof(SetRootMotionMode), Value); }
        public void SetReceiveNotifiesFromLinkedInstances(bool bSet) { Invoke(nameof(SetReceiveNotifiesFromLinkedInstances), bSet); }
        public void SetPropagateNotifiesToLinkedInstances(bool bSet) { Invoke(nameof(SetPropagateNotifiesToLinkedInstances), bSet); }
        public void SetMorphTarget(Object MorphTargetName, float Value) { Invoke(nameof(SetMorphTarget), MorphTargetName, Value); }
        public void SavePoseSnapshot(Object SnapshotName) { Invoke(nameof(SavePoseSnapshot), SnapshotName); }
        public void ResetDynamics(ETeleportType InTeleportType) { Invoke(nameof(ResetDynamics), InTeleportType); }
        public bool RequestTransitionEvent(Object EventName, double RequestTimeout, ETransitionRequestQueueMode QueueMode, ETransitionRequestOverwriteMode OverwriteMode) { return Invoke<bool>(nameof(RequestTransitionEvent), EventName, RequestTimeout, QueueMode, OverwriteMode); }
        public void RequestSlotGroupInertialization(Object InSlotGroupName, float Duration, BlendProfile BlendProfile) { Invoke(nameof(RequestSlotGroupInertialization), InSlotGroupName, Duration, BlendProfile); }
        public void RemovePoseSnapshot(Object SnapshotName) { Invoke(nameof(RemovePoseSnapshot), SnapshotName); }
        public bool QueryTransitionEvent(int MachineIndex, int TransitionIndex, Object EventName) { return Invoke<bool>(nameof(QueryTransitionEvent), MachineIndex, TransitionIndex, EventName); }
        public bool QueryAndMarkTransitionEvent(int MachineIndex, int TransitionIndex, Object EventName) { return Invoke<bool>(nameof(QueryAndMarkTransitionEvent), MachineIndex, TransitionIndex, EventName); }
        public AnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase Asset, Object SlotNodeName, MontageBlendSettings BlendInSettings, MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) { return Invoke<AnimMontage>(nameof(PlaySlotAnimationAsDynamicMontage_WithBlendSettings), Asset, SlotNodeName, BlendInSettings, BlendOutSettings, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt); }
        public AnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendArgs(AnimSequenceBase Asset, Object SlotNodeName, AlphaBlendArgs BlendIn, AlphaBlendArgs BlendOut, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) { return Invoke<AnimMontage>(nameof(PlaySlotAnimationAsDynamicMontage_WithBlendArgs), Asset, SlotNodeName, BlendIn, BlendOut, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt); }
        public AnimMontage PlaySlotAnimationAsDynamicMontage(AnimSequenceBase Asset, Object SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) { return Invoke<AnimMontage>(nameof(PlaySlotAnimationAsDynamicMontage), Asset, SlotNodeName, BlendInTime, BlendOutTime, InPlayRate, LoopCount, BlendOutTriggerTime, InTimeToStartMontageAt); }
        public void MontageSync_StopFollowing(AnimMontage MontageFollower) { Invoke(nameof(MontageSync_StopFollowing), MontageFollower); }
        public void MontageSync_Follow(AnimMontage MontageFollower, AnimInstance OtherAnimInstance, AnimMontage MontageLeader) { Invoke(nameof(MontageSync_Follow), MontageFollower, OtherAnimInstance, MontageLeader); }
        public void Montage_StopWithBlendSettings(MontageBlendSettings BlendOutSettings, AnimMontage Montage) { Invoke(nameof(Montage_StopWithBlendSettings), BlendOutSettings, Montage); }
        public void Montage_StopWithBlendOut(AlphaBlendArgs BlendOut, AnimMontage Montage) { Invoke(nameof(Montage_StopWithBlendOut), BlendOut, Montage); }
        public void Montage_StopGroupByName(float InBlendOutTime, Object GroupName) { Invoke(nameof(Montage_StopGroupByName), InBlendOutTime, GroupName); }
        public void Montage_Stop(float InBlendOutTime, AnimMontage Montage) { Invoke(nameof(Montage_Stop), InBlendOutTime, Montage); }
        public void Montage_SetPosition(AnimMontage Montage, float NewPosition) { Invoke(nameof(Montage_SetPosition), Montage, NewPosition); }
        public void Montage_SetPlayRate(AnimMontage Montage, float NewPlayRate) { Invoke(nameof(Montage_SetPlayRate), Montage, NewPlayRate); }
        public void Montage_SetNextSection(Object SectionNameToChange, Object NextSection, AnimMontage Montage) { Invoke(nameof(Montage_SetNextSection), SectionNameToChange, NextSection, Montage); }
        public void Montage_Resume(AnimMontage Montage) { Invoke(nameof(Montage_Resume), Montage); }
        public float Montage_PlayWithBlendSettings(AnimMontage MontageToPlay, MontageBlendSettings BlendInSettings, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages) { return Invoke<float>(nameof(Montage_PlayWithBlendSettings), MontageToPlay, BlendInSettings, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages); }
        public float Montage_PlayWithBlendIn(AnimMontage MontageToPlay, AlphaBlendArgs BlendIn, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages) { return Invoke<float>(nameof(Montage_PlayWithBlendIn), MontageToPlay, BlendIn, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages); }
        public float Montage_Play(AnimMontage MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages) { return Invoke<float>(nameof(Montage_Play), MontageToPlay, InPlayRate, ReturnValueType, InTimeToStartMontageAt, bStopAllMontages); }
        public void Montage_Pause(AnimMontage Montage) { Invoke(nameof(Montage_Pause), Montage); }
        public void Montage_JumpToSectionsEnd(Object SectionName, AnimMontage Montage) { Invoke(nameof(Montage_JumpToSectionsEnd), SectionName, Montage); }
        public void Montage_JumpToSection(Object SectionName, AnimMontage Montage) { Invoke(nameof(Montage_JumpToSection), SectionName, Montage); }
        public bool Montage_IsPlaying(AnimMontage Montage) { return Invoke<bool>(nameof(Montage_IsPlaying), Montage); }
        public bool Montage_IsActive(AnimMontage Montage) { return Invoke<bool>(nameof(Montage_IsActive), Montage); }
        public float Montage_GetPosition(AnimMontage Montage) { return Invoke<float>(nameof(Montage_GetPosition), Montage); }
        public float Montage_GetPlayRate(AnimMontage Montage) { return Invoke<float>(nameof(Montage_GetPlayRate), Montage); }
        public bool Montage_GetIsStopped(AnimMontage Montage) { return Invoke<bool>(nameof(Montage_GetIsStopped), Montage); }
        public Object Montage_GetCurrentSection(AnimMontage Montage) { return Invoke<Object>(nameof(Montage_GetCurrentSection), Montage); }
        public float Montage_GetBlendTime(AnimMontage Montage) { return Invoke<float>(nameof(Montage_GetBlendTime), Montage); }
        public void LockAIResources(bool bLockMovement, bool LockAILogic) { Invoke(nameof(LockAIResources), bLockMovement, LockAILogic); }
        public void LinkAnimGraphByTag(Object InTag, Object InClass) { Invoke(nameof(LinkAnimGraphByTag), InTag, InClass); }
        public void LinkAnimClassLayers(Object InClass) { Invoke(nameof(LinkAnimClassLayers), InClass); }
        public bool IsUsingMainInstanceMontageEvaluationData() { return Invoke<bool>(nameof(IsUsingMainInstanceMontageEvaluationData)); }
        public bool IsSyncGroupBetweenMarkers(Object InSyncGroupName, Object PreviousMarker, Object NextMarker, bool bRespectMarkerOrder) { return Invoke<bool>(nameof(IsSyncGroupBetweenMarkers), InSyncGroupName, PreviousMarker, NextMarker, bRespectMarkerOrder); }
        public bool IsPlayingSlotAnimation(AnimSequenceBase Asset, Object SlotNodeName) { return Invoke<bool>(nameof(IsPlayingSlotAnimation), Asset, SlotNodeName); }
        public bool IsAnyMontagePlaying() { return Invoke<bool>(nameof(IsAnyMontagePlaying)); }
        public bool HasMarkerBeenHitThisFrame(Object SyncGroup, Object MarkerName) { return Invoke<bool>(nameof(HasMarkerBeenHitThisFrame), SyncGroup, MarkerName); }
        public bool GetTimeToClosestMarker(Object SyncGroup, Object MarkerName, float OutMarkerTime) { return Invoke<bool>(nameof(GetTimeToClosestMarker), SyncGroup, MarkerName, OutMarkerTime); }
        public MarkerSyncAnimPosition GetSyncGroupPosition(Object InSyncGroupName) { return Invoke<MarkerSyncAnimPosition>(nameof(GetSyncGroupPosition), InSyncGroupName); }
        public float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetRelevantAnimTimeRemainingFraction), MachineIndex, StateIndex); }
        public float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetRelevantAnimTimeRemaining), MachineIndex, StateIndex); }
        public float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetRelevantAnimTimeFraction), MachineIndex, StateIndex); }
        public float GetRelevantAnimTime(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetRelevantAnimTime), MachineIndex, StateIndex); }
        public float GetRelevantAnimLength(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetRelevantAnimLength), MachineIndex, StateIndex); }
        public bool GetReceiveNotifiesFromLinkedInstances() { return Invoke<bool>(nameof(GetReceiveNotifiesFromLinkedInstances)); }
        public bool GetPropagateNotifiesToLinkedInstances() { return Invoke<bool>(nameof(GetPropagateNotifiesToLinkedInstances)); }
        public SkeletalMeshComponent GetOwningComponent() { return Invoke<SkeletalMeshComponent>(nameof(GetOwningComponent)); }
        public Actor GetOwningActor() { return Invoke<Actor>(nameof(GetOwningActor)); }
        public void GetLinkedAnimLayerInstancesByGroup(Object InGroup, Array<AnimInstance> OutLinkedInstances) { Invoke(nameof(GetLinkedAnimLayerInstancesByGroup), InGroup, OutLinkedInstances); }
        public AnimInstance GetLinkedAnimLayerInstanceByGroupAndClass(Object InGroup, Object InClass) { return Invoke<AnimInstance>(nameof(GetLinkedAnimLayerInstanceByGroupAndClass), InGroup, InClass); }
        public AnimInstance GetLinkedAnimLayerInstanceByGroup(Object InGroup) { return Invoke<AnimInstance>(nameof(GetLinkedAnimLayerInstanceByGroup), InGroup); }
        public AnimInstance GetLinkedAnimLayerInstanceByClass(Object InClass) { return Invoke<AnimInstance>(nameof(GetLinkedAnimLayerInstanceByClass), InClass); }
        public void GetLinkedAnimGraphInstancesByTag(Object InTag, Array<AnimInstance> OutLinkedInstances) { Invoke(nameof(GetLinkedAnimGraphInstancesByTag), InTag, OutLinkedInstances); }
        public AnimInstance GetLinkedAnimGraphInstanceByTag(Object InTag) { return Invoke<AnimInstance>(nameof(GetLinkedAnimGraphInstanceByTag), InTag); }
        public float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex) { return Invoke<float>(nameof(GetInstanceTransitionTimeElapsedFraction), MachineIndex, TransitionIndex); }
        public float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex) { return Invoke<float>(nameof(GetInstanceTransitionTimeElapsed), MachineIndex, TransitionIndex); }
        public float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex) { return Invoke<float>(nameof(GetInstanceTransitionCrossfadeDuration), MachineIndex, TransitionIndex); }
        public float GetInstanceStateWeight(int MachineIndex, int StateIndex) { return Invoke<float>(nameof(GetInstanceStateWeight), MachineIndex, StateIndex); }
        public float GetInstanceMachineWeight(int MachineIndex) { return Invoke<float>(nameof(GetInstanceMachineWeight), MachineIndex); }
        public float GetInstanceCurrentStateElapsedTime(int MachineIndex) { return Invoke<float>(nameof(GetInstanceCurrentStateElapsedTime), MachineIndex); }
        public float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex) { return Invoke<float>(nameof(GetInstanceAssetPlayerTimeFromEndFraction), AssetPlayerIndex); }
        public float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex) { return Invoke<float>(nameof(GetInstanceAssetPlayerTimeFromEnd), AssetPlayerIndex); }
        public float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex) { return Invoke<float>(nameof(GetInstanceAssetPlayerTimeFraction), AssetPlayerIndex); }
        public float GetInstanceAssetPlayerTime(int AssetPlayerIndex) { return Invoke<float>(nameof(GetInstanceAssetPlayerTime), AssetPlayerIndex); }
        public float GetInstanceAssetPlayerLength(int AssetPlayerIndex) { return Invoke<float>(nameof(GetInstanceAssetPlayerLength), AssetPlayerIndex); }
        public float GetDeltaSeconds() { return Invoke<float>(nameof(GetDeltaSeconds)); }
        public bool GetCurveValueWithDefault(Object CurveName, float DefaultValue, float OutValue) { return Invoke<bool>(nameof(GetCurveValueWithDefault), CurveName, DefaultValue, OutValue); }
        public float GetCurveValue(Object CurveName) { return Invoke<float>(nameof(GetCurveValue), CurveName); }
        public Object GetCurrentStateName(int MachineIndex) { return Invoke<Object>(nameof(GetCurrentStateName), MachineIndex); }
        public AnimMontage GetCurrentActiveMontage() { return Invoke<AnimMontage>(nameof(GetCurrentActiveMontage)); }
        public void GetAllCurveNames(Array<Object> OutNames) { Invoke(nameof(GetAllCurveNames), OutNames); }
        public void GetActiveCurveNames(EAnimCurveType CurveType, Array<Object> OutNames) { Invoke(nameof(GetActiveCurveNames), CurveType, OutNames); }
        public void ClearTransitionEvents(Object EventName) { Invoke(nameof(ClearTransitionEvents), EventName); }
        public void ClearMorphTargets() { Invoke(nameof(ClearMorphTargets)); }
        public void ClearAllTransitionEvents() { Invoke(nameof(ClearAllTransitionEvents)); }
        public float CalculateDirection(Vector Velocity, Rotator BaseRotation) { return Invoke<float>(nameof(CalculateDirection), Velocity, BaseRotation); }
        public void BlueprintUpdateAnimation(float DeltaTimeX) { Invoke(nameof(BlueprintUpdateAnimation), DeltaTimeX); }
        public void BlueprintThreadSafeUpdateAnimation(float DeltaTime) { Invoke(nameof(BlueprintThreadSafeUpdateAnimation), DeltaTime); }
        public void BlueprintPostEvaluateAnimation() { Invoke(nameof(BlueprintPostEvaluateAnimation)); }
        public void BlueprintLinkedAnimationLayersInitialized() { Invoke(nameof(BlueprintLinkedAnimationLayersInitialized)); }
        public void BlueprintInitializeAnimation() { Invoke(nameof(BlueprintInitializeAnimation)); }
        public void BlueprintBeginPlay() { Invoke(nameof(BlueprintBeginPlay)); }
    }
    public class BlueprintGeneratedClass : Class
    {
        public BlueprintGeneratedClass(nint addr) : base(addr) { }
        public int NumReplicatedProperties { get { return this[nameof(NumReplicatedProperties)].GetValue<int>(); } set { this[nameof(NumReplicatedProperties)].SetValue<int>(value); } }
        public bool bHasNativizedParent { get { return this[nameof(bHasNativizedParent)].Flag; } set { this[nameof(bHasNativizedParent)].Flag = value; } }
        public bool bHasCookedComponentInstancingData { get { return this[nameof(bHasCookedComponentInstancingData)].Flag; } set { this[nameof(bHasCookedComponentInstancingData)].Flag = value; } }
        public Array<DynamicBlueprintBinding> DynamicBindingObjects { get { return new Array<DynamicBlueprintBinding>(this[nameof(DynamicBindingObjects)].Address); } }
        public Array<ActorComponent> ComponentTemplates { get { return new Array<ActorComponent>(this[nameof(ComponentTemplates)].Address); } }
        public Array<TimelineTemplate> Timelines { get { return new Array<TimelineTemplate>(this[nameof(Timelines)].Address); } }
        public Array<BPComponentClassOverride> ComponentClassOverrides { get { return new Array<BPComponentClassOverride>(this[nameof(ComponentClassOverrides)].Address); } }
        public SimpleConstructionScript SimpleConstructionScript { get { return this[nameof(SimpleConstructionScript)].As<SimpleConstructionScript>(); } set { this["SimpleConstructionScript"] = value; } }
        public InheritableComponentHandler InheritableComponentHandler { get { return this[nameof(InheritableComponentHandler)].As<InheritableComponentHandler>(); } set { this["InheritableComponentHandler"] = value; } }
        public StructProperty UberGraphFramePointerProperty { get { return this[nameof(UberGraphFramePointerProperty)].As<StructProperty>(); } set { this["UberGraphFramePointerProperty"] = value; } }
        public Function UberGraphFunction { get { return this[nameof(UberGraphFunction)].As<Function>(); } set { this["UberGraphFunction"] = value; } }
        public Object CookedPropertyGuids { get { return this[nameof(CookedPropertyGuids)]; } set { this[nameof(CookedPropertyGuids)] = value; } }
        public Object CookedComponentInstancingData { get { return this[nameof(CookedComponentInstancingData)]; } set { this[nameof(CookedComponentInstancingData)] = value; } }
    }
    public class CameraShakeBase : Object
    {
        public CameraShakeBase(nint addr) : base(addr) { }
        public bool bSingleInstance { get { return this[nameof(bSingleInstance)].Flag; } set { this[nameof(bSingleInstance)].Flag = value; } }
        public float ShakeScale { get { return this[nameof(ShakeScale)].GetValue<float>(); } set { this[nameof(ShakeScale)].SetValue<float>(value); } }
        public CameraShakePattern RootShakePattern { get { return this[nameof(RootShakePattern)].As<CameraShakePattern>(); } set { this["RootShakePattern"] = value; } }
        public PlayerCameraManager CameraManager { get { return this[nameof(CameraManager)].As<PlayerCameraManager>(); } set { this["CameraManager"] = value; } }
        public void SetRootShakePattern(CameraShakePattern InPattern) { Invoke(nameof(SetRootShakePattern), InPattern); }
        public CameraShakePattern GetRootShakePattern() { return Invoke<CameraShakePattern>(nameof(GetRootShakePattern)); }
    }
    public class CameraShakePattern : Object
    {
        public CameraShakePattern(nint addr) : base(addr) { }
    }
    public class Commandlet : Object
    {
        public Commandlet(nint addr) : base(addr) { }
        public Object HelpDescription { get { return this[nameof(HelpDescription)]; } set { this[nameof(HelpDescription)] = value; } }
        public Object HelpUsage { get { return this[nameof(HelpUsage)]; } set { this[nameof(HelpUsage)] = value; } }
        public Object HelpWebLink { get { return this[nameof(HelpWebLink)]; } set { this[nameof(HelpWebLink)] = value; } }
        public Array<Object> HelpParamNames { get { return new Array<Object>(this[nameof(HelpParamNames)].Address); } }
        public Array<Object> HelpParamDescriptions { get { return new Array<Object>(this[nameof(HelpParamDescriptions)].Address); } }
        public bool IsServer { get { return this[nameof(IsServer)].Flag; } set { this[nameof(IsServer)].Flag = value; } }
        public bool IsClient { get { return this[nameof(IsClient)].Flag; } set { this[nameof(IsClient)].Flag = value; } }
        public bool IsEditor { get { return this[nameof(IsEditor)].Flag; } set { this[nameof(IsEditor)].Flag = value; } }
        public bool LogToConsole { get { return this[nameof(LogToConsole)].Flag; } set { this[nameof(LogToConsole)].Flag = value; } }
        public bool ShowErrorCount { get { return this[nameof(ShowErrorCount)].Flag; } set { this[nameof(ShowErrorCount)].Flag = value; } }
        public bool ShowProgress { get { return this[nameof(ShowProgress)].Flag; } set { this[nameof(ShowProgress)].Flag = value; } }
    }
    public class AudioComponent : SceneComponent
    {
        public AudioComponent(nint addr) : base(addr) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public Array<AudioParameter> DefaultParameters { get { return new Array<AudioParameter>(this[nameof(DefaultParameters)].Address); } }
        public Array<AudioParameter> InstanceParameters { get { return new Array<AudioParameter>(this[nameof(InstanceParameters)].Address); } }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
        public bool bAutoDestroy { get { return this[nameof(bAutoDestroy)].Flag; } set { this[nameof(bAutoDestroy)].Flag = value; } }
        public bool bStopWhenOwnerDestroyed { get { return this[nameof(bStopWhenOwnerDestroyed)].Flag; } set { this[nameof(bStopWhenOwnerDestroyed)].Flag = value; } }
        public bool bShouldRemainActiveIfDropped { get { return this[nameof(bShouldRemainActiveIfDropped)].Flag; } set { this[nameof(bShouldRemainActiveIfDropped)].Flag = value; } }
        public bool bAllowSpatialization { get { return this[nameof(bAllowSpatialization)].Flag; } set { this[nameof(bAllowSpatialization)].Flag = value; } }
        public bool bOverrideAttenuation { get { return this[nameof(bOverrideAttenuation)].Flag; } set { this[nameof(bOverrideAttenuation)].Flag = value; } }
        public bool bOverrideSubtitlePriority { get { return this[nameof(bOverrideSubtitlePriority)].Flag; } set { this[nameof(bOverrideSubtitlePriority)].Flag = value; } }
        public bool bIsUISound { get { return this[nameof(bIsUISound)].Flag; } set { this[nameof(bIsUISound)].Flag = value; } }
        public bool bEnableLowPassFilter { get { return this[nameof(bEnableLowPassFilter)].Flag; } set { this[nameof(bEnableLowPassFilter)].Flag = value; } }
        public bool bOverridePriority { get { return this[nameof(bOverridePriority)].Flag; } set { this[nameof(bOverridePriority)].Flag = value; } }
        public bool bSuppressSubtitles { get { return this[nameof(bSuppressSubtitles)].Flag; } set { this[nameof(bSuppressSubtitles)].Flag = value; } }
        public bool bCanPlayMultipleInstances { get { return this[nameof(bCanPlayMultipleInstances)].Flag; } set { this[nameof(bCanPlayMultipleInstances)].Flag = value; } }
        public bool bDisableParameterUpdatesWhilePlaying { get { return this[nameof(bDisableParameterUpdatesWhilePlaying)].Flag; } set { this[nameof(bDisableParameterUpdatesWhilePlaying)].Flag = value; } }
        public bool bAutoManageAttachment { get { return this[nameof(bAutoManageAttachment)].Flag; } set { this[nameof(bAutoManageAttachment)].Flag = value; } }
        public Object AudioComponentUserID { get { return this[nameof(AudioComponentUserID)]; } set { this[nameof(AudioComponentUserID)] = value; } }
        public float PitchModulationMin { get { return this[nameof(PitchModulationMin)].GetValue<float>(); } set { this[nameof(PitchModulationMin)].SetValue<float>(value); } }
        public float PitchModulationMax { get { return this[nameof(PitchModulationMax)].GetValue<float>(); } set { this[nameof(PitchModulationMax)].SetValue<float>(value); } }
        public float VolumeModulationMin { get { return this[nameof(VolumeModulationMin)].GetValue<float>(); } set { this[nameof(VolumeModulationMin)].SetValue<float>(value); } }
        public float VolumeModulationMax { get { return this[nameof(VolumeModulationMax)].GetValue<float>(); } set { this[nameof(VolumeModulationMax)].SetValue<float>(value); } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public int EnvelopeFollowerAttackTime { get { return this[nameof(EnvelopeFollowerAttackTime)].GetValue<int>(); } set { this[nameof(EnvelopeFollowerAttackTime)].SetValue<int>(value); } }
        public int EnvelopeFollowerReleaseTime { get { return this[nameof(EnvelopeFollowerReleaseTime)].GetValue<int>(); } set { this[nameof(EnvelopeFollowerReleaseTime)].SetValue<int>(value); } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public float SubtitlePriority { get { return this[nameof(SubtitlePriority)].GetValue<float>(); } set { this[nameof(SubtitlePriority)].SetValue<float>(value); } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this[nameof(LowPassFilterFrequency)].GetValue<float>(); } set { this[nameof(LowPassFilterFrequency)].SetValue<float>(value); } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public SoundConcurrency ConcurrencySettings { get { return this[nameof(ConcurrencySettings)].As<SoundConcurrency>(); } set { this["ConcurrencySettings"] = value; } }
        public Object ConcurrencySet { get { return this[nameof(ConcurrencySet)]; } set { this[nameof(ConcurrencySet)] = value; } }
        public EAttachmentRule AutoAttachLocationRule { get { return (EAttachmentRule)this[nameof(AutoAttachLocationRule)].GetValue<int>(); } set { this[nameof(AutoAttachLocationRule)].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachRotationRule { get { return (EAttachmentRule)this[nameof(AutoAttachRotationRule)].GetValue<int>(); } set { this[nameof(AutoAttachRotationRule)].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachScaleRule { get { return (EAttachmentRule)this[nameof(AutoAttachScaleRule)].GetValue<int>(); } set { this[nameof(AutoAttachScaleRule)].SetValue<int>((int)value); } }
        public SoundModulationDefaultRoutingSettings ModulationRouting { get { return this[nameof(ModulationRouting)].As<SoundModulationDefaultRoutingSettings>(); } set { this["ModulationRouting"] = value; } }
        public Object OnAudioPlayStateChanged { get { return this[nameof(OnAudioPlayStateChanged)]; } set { this[nameof(OnAudioPlayStateChanged)] = value; } }
        public Object OnAudioVirtualizationChanged { get { return this[nameof(OnAudioVirtualizationChanged)]; } set { this[nameof(OnAudioVirtualizationChanged)] = value; } }
        public Object OnAudioFinished { get { return this[nameof(OnAudioFinished)]; } set { this[nameof(OnAudioFinished)] = value; } }
        public Object OnAudioPlaybackPercent { get { return this[nameof(OnAudioPlaybackPercent)]; } set { this[nameof(OnAudioPlaybackPercent)] = value; } }
        public Object OnAudioSingleEnvelopeValue { get { return this[nameof(OnAudioSingleEnvelopeValue)]; } set { this[nameof(OnAudioSingleEnvelopeValue)] = value; } }
        public Object OnAudioMultiEnvelopeValue { get { return this[nameof(OnAudioMultiEnvelopeValue)]; } set { this[nameof(OnAudioMultiEnvelopeValue)] = value; } }
        public Object OnQueueSubtitles { get { return this[nameof(OnQueueSubtitles)]; } set { this[nameof(OnQueueSubtitles)] = value; } }
        public Object AutoAttachParent { get { return this[nameof(AutoAttachParent)]; } set { this[nameof(AutoAttachParent)] = value; } }
        public Object AutoAttachSocketName { get { return this[nameof(AutoAttachSocketName)]; } set { this[nameof(AutoAttachSocketName)] = value; } }
        public void StopDelayed(float DelayTime) { Invoke(nameof(StopDelayed), DelayTime); }
        public void Stop() { Invoke(nameof(Stop)); }
        public void SetWaveParameter(Object InName, SoundWave InWave) { Invoke(nameof(SetWaveParameter), InName, InWave); }
        public void SetVolumeMultiplier(float NewVolumeMultiplier) { Invoke(nameof(SetVolumeMultiplier), NewVolumeMultiplier); }
        public void SetUISound(bool bInUISound) { Invoke(nameof(SetUISound), bInUISound); }
        public void SetSubmixSend(SoundSubmixBase Submix, float SendLevel) { Invoke(nameof(SetSubmixSend), Submix, SendLevel); }
        public void SetSourceBusSendPreEffect(SoundSourceBus SoundSourceBus, float SourceBusSendLevel) { Invoke(nameof(SetSourceBusSendPreEffect), SoundSourceBus, SourceBusSendLevel); }
        public void SetSourceBusSendPostEffect(SoundSourceBus SoundSourceBus, float SourceBusSendLevel) { Invoke(nameof(SetSourceBusSendPostEffect), SoundSourceBus, SourceBusSendLevel); }
        public void SetSound(SoundBase NewSound) { Invoke(nameof(SetSound), NewSound); }
        public void SetPitchMultiplier(float NewPitchMultiplier) { Invoke(nameof(SetPitchMultiplier), NewPitchMultiplier); }
        public void SetPaused(bool bPause) { Invoke(nameof(SetPaused), bPause); }
        public void SetOutputToBusOnly(bool bInOutputToBusOnly) { Invoke(nameof(SetOutputToBusOnly), bInOutputToBusOnly); }
        public void SetLowPassFilterFrequency(float InLowPassFilterFrequency) { Invoke(nameof(SetLowPassFilterFrequency), InLowPassFilterFrequency); }
        public void SetLowPassFilterEnabled(bool InLowPassFilterEnabled) { Invoke(nameof(SetLowPassFilterEnabled), InLowPassFilterEnabled); }
        public void SetIntParameter(Object InName, int inInt) { Invoke(nameof(SetIntParameter), InName, inInt); }
        public void SetFloatParameter(Object InName, float InFloat) { Invoke(nameof(SetFloatParameter), InName, InFloat); }
        public void SetBoolParameter(Object InName, bool InBool) { Invoke(nameof(SetBoolParameter), InName, InBool); }
        public void SetAudioBusSendPreEffect(AudioBus AudioBus, float AudioBusSendLevel) { Invoke(nameof(SetAudioBusSendPreEffect), AudioBus, AudioBusSendLevel); }
        public void SetAudioBusSendPostEffect(AudioBus AudioBus, float AudioBusSendLevel) { Invoke(nameof(SetAudioBusSendPostEffect), AudioBus, AudioBusSendLevel); }
        public void PlayQuantized(Object WorldContextObject, QuartzClockHandle InClockHandle, QuartzQuantizationBoundary InQuantizationBoundary, Object InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve) { Invoke(nameof(PlayQuantized), WorldContextObject, InClockHandle, InQuantizationBoundary, InDelegate, InStartTime, InFadeInDuration, InFadeVolumeLevel, InFadeCurve); }
        public void Play(float StartTime) { Invoke(nameof(Play), StartTime); }
        public bool IsVirtualized() { return Invoke<bool>(nameof(IsVirtualized)); }
        public bool IsPlaying() { return Invoke<bool>(nameof(IsPlaying)); }
        public bool HasCookedFFTData() { return Invoke<bool>(nameof(HasCookedFFTData)); }
        public bool HasCookedAmplitudeEnvelopeData() { return Invoke<bool>(nameof(HasCookedAmplitudeEnvelopeData)); }
        public EAudioComponentPlayState GetPlayState() { return Invoke<EAudioComponentPlayState>(nameof(GetPlayState)); }
        public bool GetCookedFFTDataForAllPlayingSounds(Array<SoundWaveSpectralDataPerSound> OutSoundWaveSpectralData) { return Invoke<bool>(nameof(GetCookedFFTDataForAllPlayingSounds), OutSoundWaveSpectralData); }
        public bool GetCookedFFTData(Array<float> FrequenciesToGet, Array<SoundWaveSpectralData> OutSoundWaveSpectralData) { return Invoke<bool>(nameof(GetCookedFFTData), FrequenciesToGet, OutSoundWaveSpectralData); }
        public bool GetCookedEnvelopeDataForAllPlayingSounds(Array<SoundWaveEnvelopeDataPerSound> OutEnvelopeData) { return Invoke<bool>(nameof(GetCookedEnvelopeDataForAllPlayingSounds), OutEnvelopeData); }
        public bool GetCookedEnvelopeData(float OutEnvelopeData) { return Invoke<bool>(nameof(GetCookedEnvelopeData), OutEnvelopeData); }
        public void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve) { Invoke(nameof(FadeOut), FadeOutDuration, FadeVolumeLevel, FadeCurve); }
        public void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve) { Invoke(nameof(FadeIn), FadeInDuration, FadeVolumeLevel, StartTime, FadeCurve); }
        public bool BP_GetAttenuationSettingsToApply(SoundAttenuationSettings OutAttenuationSettings) { return Invoke<bool>(nameof(BP_GetAttenuationSettingsToApply), OutAttenuationSettings); }
        public void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve) { Invoke(nameof(AdjustVolume), AdjustVolumeDuration, AdjustVolumeLevel, FadeCurve); }
        public void AdjustAttenuation(SoundAttenuationSettings InAttenuationSettings) { Invoke(nameof(AdjustAttenuation), InAttenuationSettings); }
    }
    public class DynamicBlueprintBinding : Object
    {
        public DynamicBlueprintBinding(nint addr) : base(addr) { }
    }
    public class InputDelegateBinding : DynamicBlueprintBinding
    {
        public InputDelegateBinding(nint addr) : base(addr) { }
    }
    public class InputComponent : ActorComponent
    {
        public InputComponent(nint addr) : base(addr) { }
        public Array<CachedKeyToActionInfo> CachedKeyToActionInfo { get { return new Array<CachedKeyToActionInfo>(this[nameof(CachedKeyToActionInfo)].Address); } }
        public bool WasControllerKeyJustReleased(Key Key) { return Invoke<bool>(nameof(WasControllerKeyJustReleased), Key); }
        public bool WasControllerKeyJustPressed(Key Key) { return Invoke<bool>(nameof(WasControllerKeyJustPressed), Key); }
        public void OnInputOwnerEndPlayed(Actor InOwner, byte EndPlayReason) { Invoke(nameof(OnInputOwnerEndPlayed), InOwner, EndPlayReason); }
        public bool IsControllerKeyDown(Key Key) { return Invoke<bool>(nameof(IsControllerKeyDown), Key); }
        public void GetTouchState(int FingerIndex, float LocationX, float LocationY, bool bIsCurrentlyPressed) { Invoke(nameof(GetTouchState), FingerIndex, LocationX, LocationY, bIsCurrentlyPressed); }
        public Vector GetControllerVectorKeyState(Key Key) { return Invoke<Vector>(nameof(GetControllerVectorKeyState), Key); }
        public void GetControllerMouseDelta(float DeltaX, float DeltaY) { Invoke(nameof(GetControllerMouseDelta), DeltaX, DeltaY); }
        public float GetControllerKeyTimeDown(Key Key) { return Invoke<float>(nameof(GetControllerKeyTimeDown), Key); }
        public void GetControllerAnalogStickState(byte WhichStick, float StickX, float StickY) { Invoke(nameof(GetControllerAnalogStickState), WhichStick, StickX, StickY); }
        public float GetControllerAnalogKeyState(Key Key) { return Invoke<float>(nameof(GetControllerAnalogKeyState), Key); }
    }
    public class PlayerInput : Object
    {
        public PlayerInput(nint addr) : base(addr) { }
        public Array<KeyBind> DebugExecBindings { get { return new Array<KeyBind>(this[nameof(DebugExecBindings)].Address); } }
        public Array<Object> InvertedAxis { get { return new Array<Object>(this[nameof(InvertedAxis)].Address); } }
        public void SetMouseSensitivity(float Sensitivity) { Invoke(nameof(SetMouseSensitivity), Sensitivity); }
        public void SetBind(Object BindName, Object Command) { Invoke(nameof(SetBind), BindName, Command); }
        public void InvertAxisKey(Key AxisKey) { Invoke(nameof(InvertAxisKey), AxisKey); }
        public void InvertAxis(Object AxisName) { Invoke(nameof(InvertAxis), AxisName); }
        public PlayerController GetOuterAPlayerController() { return Invoke<PlayerController>(nameof(GetOuterAPlayerController)); }
        public void ClearSmoothing() { Invoke(nameof(ClearSmoothing)); }
    }
    public class AssetImportData : Object
    {
        public AssetImportData(nint addr) : base(addr) { }
    }
    public class AssetUserData : Object
    {
        public AssetUserData(nint addr) : base(addr) { }
    }
    public class Exporter : Object
    {
        public Exporter(nint addr) : base(addr) { }
        public Object SupportedClass { get { return this[nameof(SupportedClass)]; } set { this[nameof(SupportedClass)] = value; } }
        public Object ExportRootScope { get { return this[nameof(ExportRootScope)].As<Object>(); } set { this["ExportRootScope"] = value; } }
        public Array<Object> FormatExtension { get { return new Array<Object>(this[nameof(FormatExtension)].Address); } }
        public Array<Object> FormatDescription { get { return new Array<Object>(this[nameof(FormatDescription)].Address); } }
        public int PreferredFormatIndex { get { return this[nameof(PreferredFormatIndex)].GetValue<int>(); } set { this[nameof(PreferredFormatIndex)].SetValue<int>(value); } }
        public int TextIndent { get { return this[nameof(TextIndent)].GetValue<int>(); } set { this[nameof(TextIndent)].SetValue<int>(value); } }
        public bool bText { get { return this[nameof(bText)].Flag; } set { this[nameof(bText)].Flag = value; } }
        public bool bSelectedOnly { get { return this[nameof(bSelectedOnly)].Flag; } set { this[nameof(bSelectedOnly)].Flag = value; } }
        public bool bForceFileOperations { get { return this[nameof(bForceFileOperations)].Flag; } set { this[nameof(bForceFileOperations)].Flag = value; } }
        public AssetExportTask ExportTask { get { return this[nameof(ExportTask)].As<AssetExportTask>(); } set { this["ExportTask"] = value; } }
        public bool ScriptRunAssetExportTask(AssetExportTask Task) { return Invoke<bool>(nameof(ScriptRunAssetExportTask), Task); }
        public bool RunAssetExportTasks(Array<AssetExportTask> ExportTasks) { return Invoke<bool>(nameof(RunAssetExportTasks), ExportTasks); }
        public bool RunAssetExportTask(AssetExportTask Task) { return Invoke<bool>(nameof(RunAssetExportTask), Task); }
    }
    public class MovementComponent : ActorComponent
    {
        public MovementComponent(nint addr) : base(addr) { }
        public SceneComponent UpdatedComponent { get { return this[nameof(UpdatedComponent)].As<SceneComponent>(); } set { this["UpdatedComponent"] = value; } }
        public PrimitiveComponent UpdatedPrimitive { get { return this[nameof(UpdatedPrimitive)].As<PrimitiveComponent>(); } set { this["UpdatedPrimitive"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public Vector PlaneConstraintNormal { get { return this[nameof(PlaneConstraintNormal)].As<Vector>(); } set { this["PlaneConstraintNormal"] = value; } }
        public Vector PlaneConstraintOrigin { get { return this[nameof(PlaneConstraintOrigin)].As<Vector>(); } set { this["PlaneConstraintOrigin"] = value; } }
        public bool bUpdateOnlyIfRendered { get { return this[nameof(bUpdateOnlyIfRendered)].Flag; } set { this[nameof(bUpdateOnlyIfRendered)].Flag = value; } }
        public bool bAutoUpdateTickRegistration { get { return this[nameof(bAutoUpdateTickRegistration)].Flag; } set { this[nameof(bAutoUpdateTickRegistration)].Flag = value; } }
        public bool bTickBeforeOwner { get { return this[nameof(bTickBeforeOwner)].Flag; } set { this[nameof(bTickBeforeOwner)].Flag = value; } }
        public bool bAutoRegisterUpdatedComponent { get { return this[nameof(bAutoRegisterUpdatedComponent)].Flag; } set { this[nameof(bAutoRegisterUpdatedComponent)].Flag = value; } }
        public bool bConstrainToPlane { get { return this[nameof(bConstrainToPlane)].Flag; } set { this[nameof(bConstrainToPlane)].Flag = value; } }
        public bool bSnapToPlaneAtStart { get { return this[nameof(bSnapToPlaneAtStart)].Flag; } set { this[nameof(bSnapToPlaneAtStart)].Flag = value; } }
        public bool bAutoRegisterPhysicsVolumeUpdates { get { return this[nameof(bAutoRegisterPhysicsVolumeUpdates)].Flag; } set { this[nameof(bAutoRegisterPhysicsVolumeUpdates)].Flag = value; } }
        public bool bComponentShouldUpdatePhysicsVolume { get { return this[nameof(bComponentShouldUpdatePhysicsVolume)].Flag; } set { this[nameof(bComponentShouldUpdatePhysicsVolume)].Flag = value; } }
        public EPlaneConstraintAxisSetting PlaneConstraintAxisSetting { get { return (EPlaneConstraintAxisSetting)this[nameof(PlaneConstraintAxisSetting)].GetValue<int>(); } set { this[nameof(PlaneConstraintAxisSetting)].SetValue<int>((int)value); } }
        public void StopMovementImmediately() { Invoke(nameof(StopMovementImmediately)); }
        public void SnapUpdatedComponentToPlane() { Invoke(nameof(SnapUpdatedComponentToPlane)); }
        public void SetUpdatedComponent(SceneComponent NewUpdatedComponent) { Invoke(nameof(SetUpdatedComponent), NewUpdatedComponent); }
        public void SetPlaneConstraintOrigin(Vector PlaneOrigin) { Invoke(nameof(SetPlaneConstraintOrigin), PlaneOrigin); }
        public void SetPlaneConstraintNormal(Vector PlaneNormal) { Invoke(nameof(SetPlaneConstraintNormal), PlaneNormal); }
        public void SetPlaneConstraintFromVectors(Vector Forward, Vector Up) { Invoke(nameof(SetPlaneConstraintFromVectors), Forward, Up); }
        public void SetPlaneConstraintEnabled(bool bEnabled) { Invoke(nameof(SetPlaneConstraintEnabled), bEnabled); }
        public void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting) { Invoke(nameof(SetPlaneConstraintAxisSetting), NewAxisSetting); }
        public void PhysicsVolumeChanged(PhysicsVolume NewVolume) { Invoke(nameof(PhysicsVolumeChanged), NewVolume); }
        public bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, HitResult OutHit, bool bSweep, bool bTeleport) { return Invoke<bool>(nameof(K2_MoveUpdatedComponent), Delta, NewRotation, OutHit, bSweep, bTeleport); }
        public bool IsExceedingMaxSpeed(float MaxSpeed) { return Invoke<bool>(nameof(IsExceedingMaxSpeed), MaxSpeed); }
        public Vector GetPlaneConstraintOrigin() { return Invoke<Vector>(nameof(GetPlaneConstraintOrigin)); }
        public Vector GetPlaneConstraintNormal() { return Invoke<Vector>(nameof(GetPlaneConstraintNormal)); }
        public EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting() { return Invoke<EPlaneConstraintAxisSetting>(nameof(GetPlaneConstraintAxisSetting)); }
        public PhysicsVolume GetPhysicsVolume() { return Invoke<PhysicsVolume>(nameof(GetPhysicsVolume)); }
        public float GetMaxSpeed() { return Invoke<float>(nameof(GetMaxSpeed)); }
        public float GetGravityZ() { return Invoke<float>(nameof(GetGravityZ)); }
        public Vector ConstrainNormalToPlane(Vector Normal) { return Invoke<Vector>(nameof(ConstrainNormalToPlane), Normal); }
        public Vector ConstrainLocationToPlane(Vector Location) { return Invoke<Vector>(nameof(ConstrainLocationToPlane), Location); }
        public Vector ConstrainDirectionToPlane(Vector Direction) { return Invoke<Vector>(nameof(ConstrainDirectionToPlane), Direction); }
    }
    public class NavMovementComponent : MovementComponent
    {
        public NavMovementComponent(nint addr) : base(addr) { }
        public NavAgentProperties NavAgentProps { get { return this[nameof(NavAgentProps)].As<NavAgentProperties>(); } set { this["NavAgentProps"] = value; } }
        public float FixedPathBrakingDistance { get { return this[nameof(FixedPathBrakingDistance)].GetValue<float>(); } set { this[nameof(FixedPathBrakingDistance)].SetValue<float>(value); } }
        public bool bUpdateNavAgentWithOwnersCollision { get { return this[nameof(bUpdateNavAgentWithOwnersCollision)].Flag; } set { this[nameof(bUpdateNavAgentWithOwnersCollision)].Flag = value; } }
        public bool bUseAccelerationForPaths { get { return this[nameof(bUseAccelerationForPaths)].Flag; } set { this[nameof(bUseAccelerationForPaths)].Flag = value; } }
        public bool bUseFixedBrakingDistanceForPaths { get { return this[nameof(bUseFixedBrakingDistanceForPaths)].Flag; } set { this[nameof(bUseFixedBrakingDistanceForPaths)].Flag = value; } }
        public MovementProperties MovementState { get { return this[nameof(MovementState)].As<MovementProperties>(); } set { this["MovementState"] = value; } }
        public Object PathFollowingComp { get { return this[nameof(PathFollowingComp)].As<Object>(); } set { this["PathFollowingComp"] = value; } }
        public void StopMovementKeepPathing() { Invoke(nameof(StopMovementKeepPathing)); }
        public void StopActiveMovement() { Invoke(nameof(StopActiveMovement)); }
        public bool IsSwimming() { return Invoke<bool>(nameof(IsSwimming)); }
        public bool IsMovingOnGround() { return Invoke<bool>(nameof(IsMovingOnGround)); }
        public bool IsFlying() { return Invoke<bool>(nameof(IsFlying)); }
        public bool IsFalling() { return Invoke<bool>(nameof(IsFalling)); }
        public bool IsCrouching() { return Invoke<bool>(nameof(IsCrouching)); }
    }
    public class PawnMovementComponent : NavMovementComponent
    {
        public PawnMovementComponent(nint addr) : base(addr) { }
        public Pawn PawnOwner { get { return this[nameof(PawnOwner)].As<Pawn>(); } set { this["PawnOwner"] = value; } }
        public bool IsMoveInputIgnored() { return Invoke<bool>(nameof(IsMoveInputIgnored)); }
        public Vector GetPendingInputVector() { return Invoke<Vector>(nameof(GetPendingInputVector)); }
        public Pawn GetPawnOwner() { return Invoke<Pawn>(nameof(GetPawnOwner)); }
        public Vector GetLastInputVector() { return Invoke<Vector>(nameof(GetLastInputVector)); }
        public Vector ConsumeInputVector() { return Invoke<Vector>(nameof(ConsumeInputVector)); }
        public void AddInputVector(Vector WorldVector, bool bForce) { Invoke(nameof(AddInputVector), WorldVector, bForce); }
    }
    public class CharacterMovementComponent : PawnMovementComponent
    {
        public CharacterMovementComponent(nint addr) : base(addr) { }
        public Character CharacterOwner { get { return this[nameof(CharacterOwner)].As<Character>(); } set { this["CharacterOwner"] = value; } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float MaxStepHeight { get { return this[nameof(MaxStepHeight)].GetValue<float>(); } set { this[nameof(MaxStepHeight)].SetValue<float>(value); } }
        public float JumpZVelocity { get { return this[nameof(JumpZVelocity)].GetValue<float>(); } set { this[nameof(JumpZVelocity)].SetValue<float>(value); } }
        public float JumpOffJumpZFactor { get { return this[nameof(JumpOffJumpZFactor)].GetValue<float>(); } set { this[nameof(JumpOffJumpZFactor)].SetValue<float>(value); } }
        public float WalkableFloorAngle { get { return this[nameof(WalkableFloorAngle)].GetValue<float>(); } set { this[nameof(WalkableFloorAngle)].SetValue<float>(value); } }
        public float WalkableFloorZ { get { return this[nameof(WalkableFloorZ)].GetValue<float>(); } set { this[nameof(WalkableFloorZ)].SetValue<float>(value); } }
        public byte MovementMode { get { return this[nameof(MovementMode)].GetValue<byte>(); } set { this[nameof(MovementMode)].SetValue<byte>(value); } }
        public byte CustomMovementMode { get { return this[nameof(CustomMovementMode)].GetValue<byte>(); } set { this[nameof(CustomMovementMode)].SetValue<byte>(value); } }
        public ENetworkSmoothingMode NetworkSmoothingMode { get { return (ENetworkSmoothingMode)this[nameof(NetworkSmoothingMode)].GetValue<int>(); } set { this[nameof(NetworkSmoothingMode)].SetValue<int>((int)value); } }
        public float GroundFriction { get { return this[nameof(GroundFriction)].GetValue<float>(); } set { this[nameof(GroundFriction)].SetValue<float>(value); } }
        public float MaxWalkSpeed { get { return this[nameof(MaxWalkSpeed)].GetValue<float>(); } set { this[nameof(MaxWalkSpeed)].SetValue<float>(value); } }
        public float MaxWalkSpeedCrouched { get { return this[nameof(MaxWalkSpeedCrouched)].GetValue<float>(); } set { this[nameof(MaxWalkSpeedCrouched)].SetValue<float>(value); } }
        public float MaxSwimSpeed { get { return this[nameof(MaxSwimSpeed)].GetValue<float>(); } set { this[nameof(MaxSwimSpeed)].SetValue<float>(value); } }
        public float MaxFlySpeed { get { return this[nameof(MaxFlySpeed)].GetValue<float>(); } set { this[nameof(MaxFlySpeed)].SetValue<float>(value); } }
        public float MaxCustomMovementSpeed { get { return this[nameof(MaxCustomMovementSpeed)].GetValue<float>(); } set { this[nameof(MaxCustomMovementSpeed)].SetValue<float>(value); } }
        public float MaxAcceleration { get { return this[nameof(MaxAcceleration)].GetValue<float>(); } set { this[nameof(MaxAcceleration)].SetValue<float>(value); } }
        public float MinAnalogWalkSpeed { get { return this[nameof(MinAnalogWalkSpeed)].GetValue<float>(); } set { this[nameof(MinAnalogWalkSpeed)].SetValue<float>(value); } }
        public float BrakingFrictionFactor { get { return this[nameof(BrakingFrictionFactor)].GetValue<float>(); } set { this[nameof(BrakingFrictionFactor)].SetValue<float>(value); } }
        public float BrakingFriction { get { return this[nameof(BrakingFriction)].GetValue<float>(); } set { this[nameof(BrakingFriction)].SetValue<float>(value); } }
        public float BrakingSubStepTime { get { return this[nameof(BrakingSubStepTime)].GetValue<float>(); } set { this[nameof(BrakingSubStepTime)].SetValue<float>(value); } }
        public float BrakingDecelerationWalking { get { return this[nameof(BrakingDecelerationWalking)].GetValue<float>(); } set { this[nameof(BrakingDecelerationWalking)].SetValue<float>(value); } }
        public float BrakingDecelerationFalling { get { return this[nameof(BrakingDecelerationFalling)].GetValue<float>(); } set { this[nameof(BrakingDecelerationFalling)].SetValue<float>(value); } }
        public float BrakingDecelerationSwimming { get { return this[nameof(BrakingDecelerationSwimming)].GetValue<float>(); } set { this[nameof(BrakingDecelerationSwimming)].SetValue<float>(value); } }
        public float BrakingDecelerationFlying { get { return this[nameof(BrakingDecelerationFlying)].GetValue<float>(); } set { this[nameof(BrakingDecelerationFlying)].SetValue<float>(value); } }
        public float AirControl { get { return this[nameof(AirControl)].GetValue<float>(); } set { this[nameof(AirControl)].SetValue<float>(value); } }
        public float AirControlBoostMultiplier { get { return this[nameof(AirControlBoostMultiplier)].GetValue<float>(); } set { this[nameof(AirControlBoostMultiplier)].SetValue<float>(value); } }
        public float AirControlBoostVelocityThreshold { get { return this[nameof(AirControlBoostVelocityThreshold)].GetValue<float>(); } set { this[nameof(AirControlBoostVelocityThreshold)].SetValue<float>(value); } }
        public float FallingLateralFriction { get { return this[nameof(FallingLateralFriction)].GetValue<float>(); } set { this[nameof(FallingLateralFriction)].SetValue<float>(value); } }
        public float CrouchedHalfHeight { get { return this[nameof(CrouchedHalfHeight)].GetValue<float>(); } set { this[nameof(CrouchedHalfHeight)].SetValue<float>(value); } }
        public float Buoyancy { get { return this[nameof(Buoyancy)].GetValue<float>(); } set { this[nameof(Buoyancy)].SetValue<float>(value); } }
        public float PerchRadiusThreshold { get { return this[nameof(PerchRadiusThreshold)].GetValue<float>(); } set { this[nameof(PerchRadiusThreshold)].SetValue<float>(value); } }
        public float PerchAdditionalHeight { get { return this[nameof(PerchAdditionalHeight)].GetValue<float>(); } set { this[nameof(PerchAdditionalHeight)].SetValue<float>(value); } }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public bool bUseSeparateBrakingFriction { get { return this[nameof(bUseSeparateBrakingFriction)].Flag; } set { this[nameof(bUseSeparateBrakingFriction)].Flag = value; } }
        public bool bApplyGravityWhileJumping { get { return this[nameof(bApplyGravityWhileJumping)].Flag; } set { this[nameof(bApplyGravityWhileJumping)].Flag = value; } }
        public bool bUseControllerDesiredRotation { get { return this[nameof(bUseControllerDesiredRotation)].Flag; } set { this[nameof(bUseControllerDesiredRotation)].Flag = value; } }
        public bool bOrientRotationToMovement { get { return this[nameof(bOrientRotationToMovement)].Flag; } set { this[nameof(bOrientRotationToMovement)].Flag = value; } }
        public bool bSweepWhileNavWalking { get { return this[nameof(bSweepWhileNavWalking)].Flag; } set { this[nameof(bSweepWhileNavWalking)].Flag = value; } }
        public bool bMovementInProgress { get { return this[nameof(bMovementInProgress)].Flag; } set { this[nameof(bMovementInProgress)].Flag = value; } }
        public bool bEnableScopedMovementUpdates { get { return this[nameof(bEnableScopedMovementUpdates)].Flag; } set { this[nameof(bEnableScopedMovementUpdates)].Flag = value; } }
        public bool bEnableServerDualMoveScopedMovementUpdates { get { return this[nameof(bEnableServerDualMoveScopedMovementUpdates)].Flag; } set { this[nameof(bEnableServerDualMoveScopedMovementUpdates)].Flag = value; } }
        public bool bForceMaxAccel { get { return this[nameof(bForceMaxAccel)].Flag; } set { this[nameof(bForceMaxAccel)].Flag = value; } }
        public bool bRunPhysicsWithNoController { get { return this[nameof(bRunPhysicsWithNoController)].Flag; } set { this[nameof(bRunPhysicsWithNoController)].Flag = value; } }
        public bool bForceNextFloorCheck { get { return this[nameof(bForceNextFloorCheck)].Flag; } set { this[nameof(bForceNextFloorCheck)].Flag = value; } }
        public bool bShrinkProxyCapsule { get { return this[nameof(bShrinkProxyCapsule)].Flag; } set { this[nameof(bShrinkProxyCapsule)].Flag = value; } }
        public bool bCanWalkOffLedges { get { return this[nameof(bCanWalkOffLedges)].Flag; } set { this[nameof(bCanWalkOffLedges)].Flag = value; } }
        public bool bCanWalkOffLedgesWhenCrouching { get { return this[nameof(bCanWalkOffLedgesWhenCrouching)].Flag; } set { this[nameof(bCanWalkOffLedgesWhenCrouching)].Flag = value; } }
        public bool bNetworkSkipProxyPredictionOnNetUpdate { get { return this[nameof(bNetworkSkipProxyPredictionOnNetUpdate)].Flag; } set { this[nameof(bNetworkSkipProxyPredictionOnNetUpdate)].Flag = value; } }
        public bool bNetworkAlwaysReplicateTransformUpdateTimestamp { get { return this[nameof(bNetworkAlwaysReplicateTransformUpdateTimestamp)].Flag; } set { this[nameof(bNetworkAlwaysReplicateTransformUpdateTimestamp)].Flag = value; } }
        public bool bDeferUpdateMoveComponent { get { return this[nameof(bDeferUpdateMoveComponent)].Flag; } set { this[nameof(bDeferUpdateMoveComponent)].Flag = value; } }
        public bool bEnablePhysicsInteraction { get { return this[nameof(bEnablePhysicsInteraction)].Flag; } set { this[nameof(bEnablePhysicsInteraction)].Flag = value; } }
        public bool bTouchForceScaledToMass { get { return this[nameof(bTouchForceScaledToMass)].Flag; } set { this[nameof(bTouchForceScaledToMass)].Flag = value; } }
        public bool bPushForceScaledToMass { get { return this[nameof(bPushForceScaledToMass)].Flag; } set { this[nameof(bPushForceScaledToMass)].Flag = value; } }
        public bool bPushForceUsingZOffset { get { return this[nameof(bPushForceUsingZOffset)].Flag; } set { this[nameof(bPushForceUsingZOffset)].Flag = value; } }
        public bool bScalePushForceToVelocity { get { return this[nameof(bScalePushForceToVelocity)].Flag; } set { this[nameof(bScalePushForceToVelocity)].Flag = value; } }
        public SceneComponent DeferredUpdatedMoveComponent { get { return this[nameof(DeferredUpdatedMoveComponent)].As<SceneComponent>(); } set { this["DeferredUpdatedMoveComponent"] = value; } }
        public float MaxOutOfWaterStepHeight { get { return this[nameof(MaxOutOfWaterStepHeight)].GetValue<float>(); } set { this[nameof(MaxOutOfWaterStepHeight)].SetValue<float>(value); } }
        public float OutofWaterZ { get { return this[nameof(OutofWaterZ)].GetValue<float>(); } set { this[nameof(OutofWaterZ)].SetValue<float>(value); } }
        public float Mass { get { return this[nameof(Mass)].GetValue<float>(); } set { this[nameof(Mass)].SetValue<float>(value); } }
        public float StandingDownwardForceScale { get { return this[nameof(StandingDownwardForceScale)].GetValue<float>(); } set { this[nameof(StandingDownwardForceScale)].SetValue<float>(value); } }
        public float InitialPushForceFactor { get { return this[nameof(InitialPushForceFactor)].GetValue<float>(); } set { this[nameof(InitialPushForceFactor)].SetValue<float>(value); } }
        public float PushForceFactor { get { return this[nameof(PushForceFactor)].GetValue<float>(); } set { this[nameof(PushForceFactor)].SetValue<float>(value); } }
        public float PushForcePointZOffsetFactor { get { return this[nameof(PushForcePointZOffsetFactor)].GetValue<float>(); } set { this[nameof(PushForcePointZOffsetFactor)].SetValue<float>(value); } }
        public float TouchForceFactor { get { return this[nameof(TouchForceFactor)].GetValue<float>(); } set { this[nameof(TouchForceFactor)].SetValue<float>(value); } }
        public float MinTouchForce { get { return this[nameof(MinTouchForce)].GetValue<float>(); } set { this[nameof(MinTouchForce)].SetValue<float>(value); } }
        public float MaxTouchForce { get { return this[nameof(MaxTouchForce)].GetValue<float>(); } set { this[nameof(MaxTouchForce)].SetValue<float>(value); } }
        public float RepulsionForce { get { return this[nameof(RepulsionForce)].GetValue<float>(); } set { this[nameof(RepulsionForce)].SetValue<float>(value); } }
        public Vector Acceleration { get { return this[nameof(Acceleration)].As<Vector>(); } set { this["Acceleration"] = value; } }
        public Quat LastUpdateRotation { get { return this[nameof(LastUpdateRotation)].As<Quat>(); } set { this["LastUpdateRotation"] = value; } }
        public Vector LastUpdateLocation { get { return this[nameof(LastUpdateLocation)].As<Vector>(); } set { this["LastUpdateLocation"] = value; } }
        public Vector LastUpdateVelocity { get { return this[nameof(LastUpdateVelocity)].As<Vector>(); } set { this["LastUpdateVelocity"] = value; } }
        public float ServerLastTransformUpdateTimeStamp { get { return this[nameof(ServerLastTransformUpdateTimeStamp)].GetValue<float>(); } set { this[nameof(ServerLastTransformUpdateTimeStamp)].SetValue<float>(value); } }
        public float ServerLastClientGoodMoveAckTime { get { return this[nameof(ServerLastClientGoodMoveAckTime)].GetValue<float>(); } set { this[nameof(ServerLastClientGoodMoveAckTime)].SetValue<float>(value); } }
        public float ServerLastClientAdjustmentTime { get { return this[nameof(ServerLastClientAdjustmentTime)].GetValue<float>(); } set { this[nameof(ServerLastClientAdjustmentTime)].SetValue<float>(value); } }
        public Vector PendingImpulseToApply { get { return this[nameof(PendingImpulseToApply)].As<Vector>(); } set { this["PendingImpulseToApply"] = value; } }
        public Vector PendingForceToApply { get { return this[nameof(PendingForceToApply)].As<Vector>(); } set { this["PendingForceToApply"] = value; } }
        public float AnalogInputModifier { get { return this[nameof(AnalogInputModifier)].GetValue<float>(); } set { this[nameof(AnalogInputModifier)].SetValue<float>(value); } }
        public float MaxSimulationTimeStep { get { return this[nameof(MaxSimulationTimeStep)].GetValue<float>(); } set { this[nameof(MaxSimulationTimeStep)].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this[nameof(MaxSimulationIterations)].GetValue<int>(); } set { this[nameof(MaxSimulationIterations)].SetValue<int>(value); } }
        public int MaxJumpApexAttemptsPerSimulation { get { return this[nameof(MaxJumpApexAttemptsPerSimulation)].GetValue<int>(); } set { this[nameof(MaxJumpApexAttemptsPerSimulation)].SetValue<int>(value); } }
        public float MaxDepenetrationWithGeometry { get { return this[nameof(MaxDepenetrationWithGeometry)].GetValue<float>(); } set { this[nameof(MaxDepenetrationWithGeometry)].SetValue<float>(value); } }
        public float MaxDepenetrationWithGeometryAsProxy { get { return this[nameof(MaxDepenetrationWithGeometryAsProxy)].GetValue<float>(); } set { this[nameof(MaxDepenetrationWithGeometryAsProxy)].SetValue<float>(value); } }
        public float MaxDepenetrationWithPawn { get { return this[nameof(MaxDepenetrationWithPawn)].GetValue<float>(); } set { this[nameof(MaxDepenetrationWithPawn)].SetValue<float>(value); } }
        public float MaxDepenetrationWithPawnAsProxy { get { return this[nameof(MaxDepenetrationWithPawnAsProxy)].GetValue<float>(); } set { this[nameof(MaxDepenetrationWithPawnAsProxy)].SetValue<float>(value); } }
        public float NetworkSimulatedSmoothLocationTime { get { return this[nameof(NetworkSimulatedSmoothLocationTime)].GetValue<float>(); } set { this[nameof(NetworkSimulatedSmoothLocationTime)].SetValue<float>(value); } }
        public float NetworkSimulatedSmoothRotationTime { get { return this[nameof(NetworkSimulatedSmoothRotationTime)].GetValue<float>(); } set { this[nameof(NetworkSimulatedSmoothRotationTime)].SetValue<float>(value); } }
        public float ListenServerNetworkSimulatedSmoothLocationTime { get { return this[nameof(ListenServerNetworkSimulatedSmoothLocationTime)].GetValue<float>(); } set { this[nameof(ListenServerNetworkSimulatedSmoothLocationTime)].SetValue<float>(value); } }
        public float ListenServerNetworkSimulatedSmoothRotationTime { get { return this[nameof(ListenServerNetworkSimulatedSmoothRotationTime)].GetValue<float>(); } set { this[nameof(ListenServerNetworkSimulatedSmoothRotationTime)].SetValue<float>(value); } }
        public float NetProxyShrinkRadius { get { return this[nameof(NetProxyShrinkRadius)].GetValue<float>(); } set { this[nameof(NetProxyShrinkRadius)].SetValue<float>(value); } }
        public float NetProxyShrinkHalfHeight { get { return this[nameof(NetProxyShrinkHalfHeight)].GetValue<float>(); } set { this[nameof(NetProxyShrinkHalfHeight)].SetValue<float>(value); } }
        public float NetworkMaxSmoothUpdateDistance { get { return this[nameof(NetworkMaxSmoothUpdateDistance)].GetValue<float>(); } set { this[nameof(NetworkMaxSmoothUpdateDistance)].SetValue<float>(value); } }
        public float NetworkNoSmoothUpdateDistance { get { return this[nameof(NetworkNoSmoothUpdateDistance)].GetValue<float>(); } set { this[nameof(NetworkNoSmoothUpdateDistance)].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAckGoodMoves { get { return this[nameof(NetworkMinTimeBetweenClientAckGoodMoves)].GetValue<float>(); } set { this[nameof(NetworkMinTimeBetweenClientAckGoodMoves)].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAdjustments { get { return this[nameof(NetworkMinTimeBetweenClientAdjustments)].GetValue<float>(); } set { this[nameof(NetworkMinTimeBetweenClientAdjustments)].SetValue<float>(value); } }
        public float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection { get { return this[nameof(NetworkMinTimeBetweenClientAdjustmentsLargeCorrection)].GetValue<float>(); } set { this[nameof(NetworkMinTimeBetweenClientAdjustmentsLargeCorrection)].SetValue<float>(value); } }
        public float NetworkLargeClientCorrectionDistance { get { return this[nameof(NetworkLargeClientCorrectionDistance)].GetValue<float>(); } set { this[nameof(NetworkLargeClientCorrectionDistance)].SetValue<float>(value); } }
        public float LedgeCheckThreshold { get { return this[nameof(LedgeCheckThreshold)].GetValue<float>(); } set { this[nameof(LedgeCheckThreshold)].SetValue<float>(value); } }
        public float JumpOutOfWaterPitch { get { return this[nameof(JumpOutOfWaterPitch)].GetValue<float>(); } set { this[nameof(JumpOutOfWaterPitch)].SetValue<float>(value); } }
        public FindFloorResult CurrentFloor { get { return this[nameof(CurrentFloor)].As<FindFloorResult>(); } set { this["CurrentFloor"] = value; } }
        public byte DefaultLandMovementMode { get { return this[nameof(DefaultLandMovementMode)].GetValue<byte>(); } set { this[nameof(DefaultLandMovementMode)].SetValue<byte>(value); } }
        public byte DefaultWaterMovementMode { get { return this[nameof(DefaultWaterMovementMode)].GetValue<byte>(); } set { this[nameof(DefaultWaterMovementMode)].SetValue<byte>(value); } }
        public byte GroundMovementMode { get { return this[nameof(GroundMovementMode)].GetValue<byte>(); } set { this[nameof(GroundMovementMode)].SetValue<byte>(value); } }
        public bool bMaintainHorizontalGroundVelocity { get { return this[nameof(bMaintainHorizontalGroundVelocity)].Flag; } set { this[nameof(bMaintainHorizontalGroundVelocity)].Flag = value; } }
        public bool bImpartBaseVelocityX { get { return this[nameof(bImpartBaseVelocityX)].Flag; } set { this[nameof(bImpartBaseVelocityX)].Flag = value; } }
        public bool bImpartBaseVelocityY { get { return this[nameof(bImpartBaseVelocityY)].Flag; } set { this[nameof(bImpartBaseVelocityY)].Flag = value; } }
        public bool bImpartBaseVelocityZ { get { return this[nameof(bImpartBaseVelocityZ)].Flag; } set { this[nameof(bImpartBaseVelocityZ)].Flag = value; } }
        public bool bImpartBaseAngularVelocity { get { return this[nameof(bImpartBaseAngularVelocity)].Flag; } set { this[nameof(bImpartBaseAngularVelocity)].Flag = value; } }
        public bool bJustTeleported { get { return this[nameof(bJustTeleported)].Flag; } set { this[nameof(bJustTeleported)].Flag = value; } }
        public bool bNetworkUpdateReceived { get { return this[nameof(bNetworkUpdateReceived)].Flag; } set { this[nameof(bNetworkUpdateReceived)].Flag = value; } }
        public bool bNetworkMovementModeChanged { get { return this[nameof(bNetworkMovementModeChanged)].Flag; } set { this[nameof(bNetworkMovementModeChanged)].Flag = value; } }
        public bool bIgnoreClientMovementErrorChecksAndCorrection { get { return this[nameof(bIgnoreClientMovementErrorChecksAndCorrection)].Flag; } set { this[nameof(bIgnoreClientMovementErrorChecksAndCorrection)].Flag = value; } }
        public bool bServerAcceptClientAuthoritativePosition { get { return this[nameof(bServerAcceptClientAuthoritativePosition)].Flag; } set { this[nameof(bServerAcceptClientAuthoritativePosition)].Flag = value; } }
        public bool bNotifyApex { get { return this[nameof(bNotifyApex)].Flag; } set { this[nameof(bNotifyApex)].Flag = value; } }
        public bool bCheatFlying { get { return this[nameof(bCheatFlying)].Flag; } set { this[nameof(bCheatFlying)].Flag = value; } }
        public bool bWantsToCrouch { get { return this[nameof(bWantsToCrouch)].Flag; } set { this[nameof(bWantsToCrouch)].Flag = value; } }
        public bool bCrouchMaintainsBaseLocation { get { return this[nameof(bCrouchMaintainsBaseLocation)].Flag; } set { this[nameof(bCrouchMaintainsBaseLocation)].Flag = value; } }
        public bool bIgnoreBaseRotation { get { return this[nameof(bIgnoreBaseRotation)].Flag; } set { this[nameof(bIgnoreBaseRotation)].Flag = value; } }
        public bool bFastAttachedMove { get { return this[nameof(bFastAttachedMove)].Flag; } set { this[nameof(bFastAttachedMove)].Flag = value; } }
        public bool bAlwaysCheckFloor { get { return this[nameof(bAlwaysCheckFloor)].Flag; } set { this[nameof(bAlwaysCheckFloor)].Flag = value; } }
        public bool bUseFlatBaseForFloorChecks { get { return this[nameof(bUseFlatBaseForFloorChecks)].Flag; } set { this[nameof(bUseFlatBaseForFloorChecks)].Flag = value; } }
        public bool bPerformingJumpOff { get { return this[nameof(bPerformingJumpOff)].Flag; } set { this[nameof(bPerformingJumpOff)].Flag = value; } }
        public bool bWantsToLeaveNavWalking { get { return this[nameof(bWantsToLeaveNavWalking)].Flag; } set { this[nameof(bWantsToLeaveNavWalking)].Flag = value; } }
        public bool bUseRVOAvoidance { get { return this[nameof(bUseRVOAvoidance)].Flag; } set { this[nameof(bUseRVOAvoidance)].Flag = value; } }
        public bool bRequestedMoveUseAcceleration { get { return this[nameof(bRequestedMoveUseAcceleration)].Flag; } set { this[nameof(bRequestedMoveUseAcceleration)].Flag = value; } }
        public bool bWasSimulatingRootMotion { get { return this[nameof(bWasSimulatingRootMotion)].Flag; } set { this[nameof(bWasSimulatingRootMotion)].Flag = value; } }
        public bool bAllowPhysicsRotationDuringAnimRootMotion { get { return this[nameof(bAllowPhysicsRotationDuringAnimRootMotion)].Flag; } set { this[nameof(bAllowPhysicsRotationDuringAnimRootMotion)].Flag = value; } }
        public float FormerBaseVelocityDecayHalfLife { get { return this[nameof(FormerBaseVelocityDecayHalfLife)].GetValue<float>(); } set { this[nameof(FormerBaseVelocityDecayHalfLife)].SetValue<float>(value); } }
        public bool bHasRequestedVelocity { get { return this[nameof(bHasRequestedVelocity)].Flag; } set { this[nameof(bHasRequestedVelocity)].Flag = value; } }
        public bool bRequestedMoveWithMaxSpeed { get { return this[nameof(bRequestedMoveWithMaxSpeed)].Flag; } set { this[nameof(bRequestedMoveWithMaxSpeed)].Flag = value; } }
        public bool bWasAvoidanceUpdated { get { return this[nameof(bWasAvoidanceUpdated)].Flag; } set { this[nameof(bWasAvoidanceUpdated)].Flag = value; } }
        public bool bProjectNavMeshWalking { get { return this[nameof(bProjectNavMeshWalking)].Flag; } set { this[nameof(bProjectNavMeshWalking)].Flag = value; } }
        public bool bProjectNavMeshOnBothWorldChannels { get { return this[nameof(bProjectNavMeshOnBothWorldChannels)].Flag; } set { this[nameof(bProjectNavMeshOnBothWorldChannels)].Flag = value; } }
        public float AvoidanceConsiderationRadius { get { return this[nameof(AvoidanceConsiderationRadius)].GetValue<float>(); } set { this[nameof(AvoidanceConsiderationRadius)].SetValue<float>(value); } }
        public Vector RequestedVelocity { get { return this[nameof(RequestedVelocity)].As<Vector>(); } set { this["RequestedVelocity"] = value; } }
        public Vector LastUpdateRequestedVelocity { get { return this[nameof(LastUpdateRequestedVelocity)].As<Vector>(); } set { this["LastUpdateRequestedVelocity"] = value; } }
        public int AvoidanceUID { get { return this[nameof(AvoidanceUID)].GetValue<int>(); } set { this[nameof(AvoidanceUID)].SetValue<int>(value); } }
        public NavAvoidanceMask AvoidanceGroup { get { return this[nameof(AvoidanceGroup)].As<NavAvoidanceMask>(); } set { this["AvoidanceGroup"] = value; } }
        public NavAvoidanceMask GroupsToAvoid { get { return this[nameof(GroupsToAvoid)].As<NavAvoidanceMask>(); } set { this["GroupsToAvoid"] = value; } }
        public NavAvoidanceMask GroupsToIgnore { get { return this[nameof(GroupsToIgnore)].As<NavAvoidanceMask>(); } set { this["GroupsToIgnore"] = value; } }
        public float AvoidanceWeight { get { return this[nameof(AvoidanceWeight)].GetValue<float>(); } set { this[nameof(AvoidanceWeight)].SetValue<float>(value); } }
        public Vector PendingLaunchVelocity { get { return this[nameof(PendingLaunchVelocity)].As<Vector>(); } set { this["PendingLaunchVelocity"] = value; } }
        public float NavMeshProjectionInterval { get { return this[nameof(NavMeshProjectionInterval)].GetValue<float>(); } set { this[nameof(NavMeshProjectionInterval)].SetValue<float>(value); } }
        public float NavMeshProjectionTimer { get { return this[nameof(NavMeshProjectionTimer)].GetValue<float>(); } set { this[nameof(NavMeshProjectionTimer)].SetValue<float>(value); } }
        public float NavMeshProjectionInterpSpeed { get { return this[nameof(NavMeshProjectionInterpSpeed)].GetValue<float>(); } set { this[nameof(NavMeshProjectionInterpSpeed)].SetValue<float>(value); } }
        public float NavMeshProjectionHeightScaleUp { get { return this[nameof(NavMeshProjectionHeightScaleUp)].GetValue<float>(); } set { this[nameof(NavMeshProjectionHeightScaleUp)].SetValue<float>(value); } }
        public float NavMeshProjectionHeightScaleDown { get { return this[nameof(NavMeshProjectionHeightScaleDown)].GetValue<float>(); } set { this[nameof(NavMeshProjectionHeightScaleDown)].SetValue<float>(value); } }
        public float NavWalkingFloorDistTolerance { get { return this[nameof(NavWalkingFloorDistTolerance)].GetValue<float>(); } set { this[nameof(NavWalkingFloorDistTolerance)].SetValue<float>(value); } }
        public CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction { get { return this[nameof(PostPhysicsTickFunction)].As<CharacterMovementComponentPostPhysicsTickFunction>(); } set { this["PostPhysicsTickFunction"] = value; } }
        public float MinTimeBetweenTimeStampResets { get { return this[nameof(MinTimeBetweenTimeStampResets)].GetValue<float>(); } set { this[nameof(MinTimeBetweenTimeStampResets)].SetValue<float>(value); } }
        public RootMotionSourceGroup CurrentRootMotion { get { return this[nameof(CurrentRootMotion)].As<RootMotionSourceGroup>(); } set { this["CurrentRootMotion"] = value; } }
        public RootMotionSourceGroup ServerCorrectionRootMotion { get { return this[nameof(ServerCorrectionRootMotion)].As<RootMotionSourceGroup>(); } set { this["ServerCorrectionRootMotion"] = value; } }
        public RootMotionMovementParams RootMotionParams { get { return this[nameof(RootMotionParams)].As<RootMotionMovementParams>(); } set { this["RootMotionParams"] = value; } }
        public Vector AnimRootMotionVelocity { get { return this[nameof(AnimRootMotionVelocity)].As<Vector>(); } set { this["AnimRootMotionVelocity"] = value; } }
        public void SetWalkableFloorZ(float InWalkableFloorZ) { Invoke(nameof(SetWalkableFloorZ), InWalkableFloorZ); }
        public void SetWalkableFloorAngle(float InWalkableFloorAngle) { Invoke(nameof(SetWalkableFloorAngle), InWalkableFloorAngle); }
        public void SetMovementMode(byte NewMovementMode, byte NewCustomMode) { Invoke(nameof(SetMovementMode), NewMovementMode, NewCustomMode); }
        public void SetGroupsToIgnoreMask(NavAvoidanceMask GroupMask) { Invoke(nameof(SetGroupsToIgnoreMask), GroupMask); }
        public void SetGroupsToIgnore(int GroupFlags) { Invoke(nameof(SetGroupsToIgnore), GroupFlags); }
        public void SetGroupsToAvoidMask(NavAvoidanceMask GroupMask) { Invoke(nameof(SetGroupsToAvoidMask), GroupMask); }
        public void SetGroupsToAvoid(int GroupFlags) { Invoke(nameof(SetGroupsToAvoid), GroupFlags); }
        public void SetCrouchedHalfHeight(float NewValue) { Invoke(nameof(SetCrouchedHalfHeight), NewValue); }
        public void SetAvoidanceGroupMask(NavAvoidanceMask GroupMask) { Invoke(nameof(SetAvoidanceGroupMask), GroupMask); }
        public void SetAvoidanceGroup(int GroupFlags) { Invoke(nameof(SetAvoidanceGroup), GroupFlags); }
        public void SetAvoidanceEnabled(bool bEnable) { Invoke(nameof(SetAvoidanceEnabled), bEnable); }
        public float K2_GetWalkableFloorZ() { return Invoke<float>(nameof(K2_GetWalkableFloorZ)); }
        public float K2_GetWalkableFloorAngle() { return Invoke<float>(nameof(K2_GetWalkableFloorAngle)); }
        public void K2_FindFloor(Vector CapsuleLocation, FindFloorResult FloorResult) { Invoke(nameof(K2_FindFloor), CapsuleLocation, FloorResult); }
        public void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FindFloorResult FloorResult) { Invoke(nameof(K2_ComputeFloorDist), CapsuleLocation, LineDistance, SweepDistance, SweepRadius, FloorResult); }
        public bool IsWalking() { return Invoke<bool>(nameof(IsWalking)); }
        public bool IsWalkable(HitResult Hit) { return Invoke<bool>(nameof(IsWalkable), Hit); }
        public float GetValidPerchRadius() { return Invoke<float>(nameof(GetValidPerchRadius)); }
        public float GetPerchRadiusThreshold() { return Invoke<float>(nameof(GetPerchRadiusThreshold)); }
        public PrimitiveComponent GetMovementBase() { return Invoke<PrimitiveComponent>(nameof(GetMovementBase)); }
        public float GetMinAnalogSpeed() { return Invoke<float>(nameof(GetMinAnalogSpeed)); }
        public float GetMaxJumpHeightWithJumpTime() { return Invoke<float>(nameof(GetMaxJumpHeightWithJumpTime)); }
        public float GetMaxJumpHeight() { return Invoke<float>(nameof(GetMaxJumpHeight)); }
        public float GetMaxBrakingDeceleration() { return Invoke<float>(nameof(GetMaxBrakingDeceleration)); }
        public float GetMaxAcceleration() { return Invoke<float>(nameof(GetMaxAcceleration)); }
        public Vector GetLastUpdateVelocity() { return Invoke<Vector>(nameof(GetLastUpdateVelocity)); }
        public Rotator GetLastUpdateRotation() { return Invoke<Rotator>(nameof(GetLastUpdateRotation)); }
        public Vector GetLastUpdateRequestedVelocity() { return Invoke<Vector>(nameof(GetLastUpdateRequestedVelocity)); }
        public Vector GetLastUpdateLocation() { return Invoke<Vector>(nameof(GetLastUpdateLocation)); }
        public Vector GetImpartedMovementBaseVelocity() { return Invoke<Vector>(nameof(GetImpartedMovementBaseVelocity)); }
        public Vector GetCurrentAcceleration() { return Invoke<Vector>(nameof(GetCurrentAcceleration)); }
        public float GetCrouchedHalfHeight() { return Invoke<float>(nameof(GetCrouchedHalfHeight)); }
        public Character GetCharacterOwner() { return Invoke<Character>(nameof(GetCharacterOwner)); }
        public float GetAnalogInputModifier() { return Invoke<float>(nameof(GetAnalogInputModifier)); }
        public void DisableMovement() { Invoke(nameof(DisableMovement)); }
        public void ClearAccumulatedForces() { Invoke(nameof(ClearAccumulatedForces)); }
        public void CapsuleTouched(PrimitiveComponent OverlappedComp, Actor Other, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(CapsuleTouched), OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration) { Invoke(nameof(CalcVelocity), DeltaTime, Friction, bFluid, BrakingDeceleration); }
        public void AddImpulse(Vector Impulse, bool bVelocityChange) { Invoke(nameof(AddImpulse), Impulse, bVelocityChange); }
        public void AddForce(Vector Force) { Invoke(nameof(AddForce), Force); }
    }
    public class EdGraph : Object
    {
        public EdGraph(nint addr) : base(addr) { }
        public Object Schema { get { return this[nameof(Schema)]; } set { this[nameof(Schema)] = value; } }
        public Array<EdGraphNode> Nodes { get { return new Array<EdGraphNode>(this[nameof(Nodes)].Address); } }
        public bool bEditable { get { return this[nameof(bEditable)].Flag; } set { this[nameof(bEditable)].Flag = value; } }
        public bool bAllowDeletion { get { return this[nameof(bAllowDeletion)].Flag; } set { this[nameof(bAllowDeletion)].Flag = value; } }
        public bool bAllowRenaming { get { return this[nameof(bAllowRenaming)].Flag; } set { this[nameof(bAllowRenaming)].Flag = value; } }
    }
    public class SoundBase : Object
    {
        public SoundBase(nint addr) : base(addr) { }
        public SoundClass SoundClassObject { get { return this[nameof(SoundClassObject)].As<SoundClass>(); } set { this["SoundClassObject"] = value; } }
        public bool bDebug { get { return this[nameof(bDebug)].Flag; } set { this[nameof(bDebug)].Flag = value; } }
        public bool bOverrideConcurrency { get { return this[nameof(bOverrideConcurrency)].Flag; } set { this[nameof(bOverrideConcurrency)].Flag = value; } }
        public bool bEnableBusSends { get { return this[nameof(bEnableBusSends)].Flag; } set { this[nameof(bEnableBusSends)].Flag = value; } }
        public bool bEnableBaseSubmix { get { return this[nameof(bEnableBaseSubmix)].Flag; } set { this[nameof(bEnableBaseSubmix)].Flag = value; } }
        public bool bEnableSubmixSends { get { return this[nameof(bEnableSubmixSends)].Flag; } set { this[nameof(bEnableSubmixSends)].Flag = value; } }
        public bool bHasDelayNode { get { return this[nameof(bHasDelayNode)].Flag; } set { this[nameof(bHasDelayNode)].Flag = value; } }
        public bool bHasConcatenatorNode { get { return this[nameof(bHasConcatenatorNode)].Flag; } set { this[nameof(bHasConcatenatorNode)].Flag = value; } }
        public bool bBypassVolumeScaleForPriority { get { return this[nameof(bBypassVolumeScaleForPriority)].Flag; } set { this[nameof(bBypassVolumeScaleForPriority)].Flag = value; } }
        public EVirtualizationMode VirtualizationMode { get { return (EVirtualizationMode)this[nameof(VirtualizationMode)].GetValue<int>(); } set { this[nameof(VirtualizationMode)].SetValue<int>((int)value); } }
        public Object ConcurrencySet { get { return this[nameof(ConcurrencySet)]; } set { this[nameof(ConcurrencySet)] = value; } }
        public SoundConcurrencySettings ConcurrencyOverrides { get { return this[nameof(ConcurrencyOverrides)].As<SoundConcurrencySettings>(); } set { this["ConcurrencyOverrides"] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float TotalSamples { get { return this[nameof(TotalSamples)].GetValue<float>(); } set { this[nameof(TotalSamples)].SetValue<float>(value); } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundSubmixBase SoundSubmixObject { get { return this[nameof(SoundSubmixObject)].As<SoundSubmixBase>(); } set { this["SoundSubmixObject"] = value; } }
        public Array<SoundSubmixSendInfo> SoundSubmixSends { get { return new Array<SoundSubmixSendInfo>(this[nameof(SoundSubmixSends)].Address); } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
        public Array<SoundSourceBusSendInfo> BusSends { get { return new Array<SoundSourceBusSendInfo>(this[nameof(BusSends)].Address); } }
        public Array<SoundSourceBusSendInfo> PreEffectBusSends { get { return new Array<SoundSourceBusSendInfo>(this[nameof(PreEffectBusSends)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
    }
    public class SoundWave : SoundBase
    {
        public SoundWave(nint addr) : base(addr) { }
        public int CompressionQuality { get { return this[nameof(CompressionQuality)].GetValue<int>(); } set { this[nameof(CompressionQuality)].SetValue<int>(value); } }
        public int StreamingPriority { get { return this[nameof(StreamingPriority)].GetValue<int>(); } set { this[nameof(StreamingPriority)].SetValue<int>(value); } }
        public ESoundwaveSampleRateSettings SampleRateQuality { get { return (ESoundwaveSampleRateSettings)this[nameof(SampleRateQuality)].GetValue<int>(); } set { this[nameof(SampleRateQuality)].SetValue<int>((int)value); } }
        public byte SoundGroup { get { return this[nameof(SoundGroup)].GetValue<byte>(); } set { this[nameof(SoundGroup)].SetValue<byte>(value); } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
        public bool bStreaming { get { return this[nameof(bStreaming)].Flag; } set { this[nameof(bStreaming)].Flag = value; } }
        public ESoundAssetCompressionType SoundAssetCompressionType { get { return (ESoundAssetCompressionType)this[nameof(SoundAssetCompressionType)].GetValue<int>(); } set { this[nameof(SoundAssetCompressionType)].SetValue<int>((int)value); } }
        public bool bSeekableStreaming { get { return this[nameof(bSeekableStreaming)].Flag; } set { this[nameof(bSeekableStreaming)].Flag = value; } }
        public bool bUseBinkAudio { get { return this[nameof(bUseBinkAudio)].Flag; } set { this[nameof(bUseBinkAudio)].Flag = value; } }
        public SoundModulationDefaultRoutingSettings ModulationSettings { get { return this[nameof(ModulationSettings)].As<SoundModulationDefaultRoutingSettings>(); } set { this["ModulationSettings"] = value; } }
        public Array<float> FrequenciesToAnalyze { get { return new Array<float>(this[nameof(FrequenciesToAnalyze)].Address); } }
        public Array<SoundWaveSpectralTimeData> CookedSpectralTimeData { get { return new Array<SoundWaveSpectralTimeData>(this[nameof(CookedSpectralTimeData)].Address); } }
        public Array<SoundWaveEnvelopeTimeData> CookedEnvelopeTimeData { get { return new Array<SoundWaveEnvelopeTimeData>(this[nameof(CookedEnvelopeTimeData)].Address); } }
        public int InitialChunkSize { get { return this[nameof(InitialChunkSize)].GetValue<int>(); } set { this[nameof(InitialChunkSize)].SetValue<int>(value); } }
        public bool bMature { get { return this[nameof(bMature)].Flag; } set { this[nameof(bMature)].Flag = value; } }
        public bool bManualWordWrap { get { return this[nameof(bManualWordWrap)].Flag; } set { this[nameof(bManualWordWrap)].Flag = value; } }
        public bool bSingleLine { get { return this[nameof(bSingleLine)].Flag; } set { this[nameof(bSingleLine)].Flag = value; } }
        public bool bIsAmbisonics { get { return this[nameof(bIsAmbisonics)].Flag; } set { this[nameof(bIsAmbisonics)].Flag = value; } }
        public ESoundWaveLoadingBehavior LoadingBehavior { get { return (ESoundWaveLoadingBehavior)this[nameof(LoadingBehavior)].GetValue<int>(); } set { this[nameof(LoadingBehavior)].SetValue<int>((int)value); } }
        public Object SpokenText { get { return this[nameof(SpokenText)]; } set { this[nameof(SpokenText)] = value; } }
        public float SubtitlePriority { get { return this[nameof(SubtitlePriority)].GetValue<float>(); } set { this[nameof(SubtitlePriority)].SetValue<float>(value); } }
        public float Volume { get { return this[nameof(Volume)].GetValue<float>(); } set { this[nameof(Volume)].SetValue<float>(value); } }
        public float Pitch { get { return this[nameof(Pitch)].GetValue<float>(); } set { this[nameof(Pitch)].SetValue<float>(value); } }
        public int NumChannels { get { return this[nameof(NumChannels)].GetValue<int>(); } set { this[nameof(NumChannels)].SetValue<int>(value); } }
        public Array<SoundWaveCuePoint> CuePoints { get { return new Array<SoundWaveCuePoint>(this[nameof(CuePoints)].Address); } }
        public int SampleRate { get { return this[nameof(SampleRate)].GetValue<int>(); } set { this[nameof(SampleRate)].SetValue<int>(value); } }
        public Array<SubtitleCue> Subtitles { get { return new Array<SubtitleCue>(this[nameof(Subtitles)].Address); } }
        public CurveTable Curves { get { return this[nameof(Curves)].As<CurveTable>(); } set { this["Curves"] = value; } }
        public CurveTable InternalCurves { get { return this[nameof(InternalCurves)].As<CurveTable>(); } set { this["InternalCurves"] = value; } }
        public void SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty) { Invoke(nameof(SetSoundAssetCompressionType), InSoundAssetCompressionType, bMarkDirty); }
        public ESoundAssetCompressionType GetSoundAssetCompressionType() { return Invoke<ESoundAssetCompressionType>(nameof(GetSoundAssetCompressionType)); }
    }
    public class SoundWaveProcedural : SoundWave
    {
        public SoundWaveProcedural(nint addr) : base(addr) { }
    }
    public class SoundEffectPreset : Object
    {
        public SoundEffectPreset(nint addr) : base(addr) { }
    }
    public class SoundEffectSubmixPreset : SoundEffectPreset
    {
        public SoundEffectSubmixPreset(nint addr) : base(addr) { }
    }
    public class SoundEffectSourcePreset : SoundEffectPreset
    {
        public SoundEffectSourcePreset(nint addr) : base(addr) { }
    }
    public class Channel : Object
    {
        public Channel(nint addr) : base(addr) { }
        public NetConnection Connection { get { return this[nameof(Connection)].As<NetConnection>(); } set { this["Connection"] = value; } }
    }
    public class ActorChannel : Channel
    {
        public ActorChannel(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Array<Object> CreateSubObjects { get { return new Array<Object>(this[nameof(CreateSubObjects)].Address); } }
    }
    public class CapsuleComponent : ShapeComponent
    {
        public CapsuleComponent(nint addr) : base(addr) { }
        public float CapsuleHalfHeight { get { return this[nameof(CapsuleHalfHeight)].GetValue<float>(); } set { this[nameof(CapsuleHalfHeight)].SetValue<float>(value); } }
        public float CapsuleRadius { get { return this[nameof(CapsuleRadius)].GetValue<float>(); } set { this[nameof(CapsuleRadius)].SetValue<float>(value); } }
        public void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps) { Invoke(nameof(SetCapsuleSize), InRadius, InHalfHeight, bUpdateOverlaps); }
        public void SetCapsuleRadius(float Radius, bool bUpdateOverlaps) { Invoke(nameof(SetCapsuleRadius), Radius, bUpdateOverlaps); }
        public void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps) { Invoke(nameof(SetCapsuleHalfHeight), HalfHeight, bUpdateOverlaps); }
        public void GetUnscaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere) { Invoke(nameof(GetUnscaledCapsuleSize_WithoutHemisphere), OutRadius, OutHalfHeightWithoutHemisphere); }
        public void GetUnscaledCapsuleSize(float OutRadius, float OutHalfHeight) { Invoke(nameof(GetUnscaledCapsuleSize), OutRadius, OutHalfHeight); }
        public float GetUnscaledCapsuleRadius() { return Invoke<float>(nameof(GetUnscaledCapsuleRadius)); }
        public float GetUnscaledCapsuleHalfHeight_WithoutHemisphere() { return Invoke<float>(nameof(GetUnscaledCapsuleHalfHeight_WithoutHemisphere)); }
        public float GetUnscaledCapsuleHalfHeight() { return Invoke<float>(nameof(GetUnscaledCapsuleHalfHeight)); }
        public float GetShapeScale() { return Invoke<float>(nameof(GetShapeScale)); }
        public void GetScaledCapsuleSize_WithoutHemisphere(float OutRadius, float OutHalfHeightWithoutHemisphere) { Invoke(nameof(GetScaledCapsuleSize_WithoutHemisphere), OutRadius, OutHalfHeightWithoutHemisphere); }
        public void GetScaledCapsuleSize(float OutRadius, float OutHalfHeight) { Invoke(nameof(GetScaledCapsuleSize), OutRadius, OutHalfHeight); }
        public float GetScaledCapsuleRadius() { return Invoke<float>(nameof(GetScaledCapsuleRadius)); }
        public float GetScaledCapsuleHalfHeight_WithoutHemisphere() { return Invoke<float>(nameof(GetScaledCapsuleHalfHeight_WithoutHemisphere)); }
        public float GetScaledCapsuleHalfHeight() { return Invoke<float>(nameof(GetScaledCapsuleHalfHeight)); }
    }
    public class SphereComponent : ShapeComponent
    {
        public SphereComponent(nint addr) : base(addr) { }
        public float SphereRadius { get { return this[nameof(SphereRadius)].GetValue<float>(); } set { this[nameof(SphereRadius)].SetValue<float>(value); } }
        public void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps) { Invoke(nameof(SetSphereRadius), InSphereRadius, bUpdateOverlaps); }
        public float GetUnscaledSphereRadius() { return Invoke<float>(nameof(GetUnscaledSphereRadius)); }
        public float GetShapeScale() { return Invoke<float>(nameof(GetShapeScale)); }
        public float GetScaledSphereRadius() { return Invoke<float>(nameof(GetScaledSphereRadius)); }
    }
    public class LevelInstance : Actor
    {
        public LevelInstance(nint addr) : base(addr) { }
        public Object CookedWorldAsset { get { return this[nameof(CookedWorldAsset)]; } set { this[nameof(CookedWorldAsset)] = value; } }
        public Guid LevelInstanceSpawnGuid { get { return this[nameof(LevelInstanceSpawnGuid)].As<Guid>(); } set { this["LevelInstanceSpawnGuid"] = value; } }
        public void OnRep_LevelInstanceSpawnGuid() { Invoke(nameof(OnRep_LevelInstanceSpawnGuid)); }
    }
    public class CameraComponent : SceneComponent
    {
        public CameraComponent(nint addr) : base(addr) { }
        public float FieldOfView { get { return this[nameof(FieldOfView)].GetValue<float>(); } set { this[nameof(FieldOfView)].SetValue<float>(value); } }
        public float OrthoWidth { get { return this[nameof(OrthoWidth)].GetValue<float>(); } set { this[nameof(OrthoWidth)].SetValue<float>(value); } }
        public float OrthoNearClipPlane { get { return this[nameof(OrthoNearClipPlane)].GetValue<float>(); } set { this[nameof(OrthoNearClipPlane)].SetValue<float>(value); } }
        public float OrthoFarClipPlane { get { return this[nameof(OrthoFarClipPlane)].GetValue<float>(); } set { this[nameof(OrthoFarClipPlane)].SetValue<float>(value); } }
        public float AspectRatio { get { return this[nameof(AspectRatio)].GetValue<float>(); } set { this[nameof(AspectRatio)].SetValue<float>(value); } }
        public bool bConstrainAspectRatio { get { return this[nameof(bConstrainAspectRatio)].Flag; } set { this[nameof(bConstrainAspectRatio)].Flag = value; } }
        public bool bUseFieldOfViewForLOD { get { return this[nameof(bUseFieldOfViewForLOD)].Flag; } set { this[nameof(bUseFieldOfViewForLOD)].Flag = value; } }
        public bool bLockToHmd { get { return this[nameof(bLockToHmd)].Flag; } set { this[nameof(bLockToHmd)].Flag = value; } }
        public bool bUsePawnControlRotation { get { return this[nameof(bUsePawnControlRotation)].Flag; } set { this[nameof(bUsePawnControlRotation)].Flag = value; } }
        public byte ProjectionMode { get { return this[nameof(ProjectionMode)].GetValue<byte>(); } set { this[nameof(ProjectionMode)].SetValue<byte>(value); } }
        public float PostProcessBlendWeight { get { return this[nameof(PostProcessBlendWeight)].GetValue<float>(); } set { this[nameof(PostProcessBlendWeight)].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD) { Invoke(nameof(SetUseFieldOfViewForLOD), bInUseFieldOfViewForLOD); }
        public void SetProjectionMode(byte InProjectionMode) { Invoke(nameof(SetProjectionMode), InProjectionMode); }
        public void SetPostProcessBlendWeight(float InPostProcessBlendWeight) { Invoke(nameof(SetPostProcessBlendWeight), InPostProcessBlendWeight); }
        public void SetOrthoWidth(float InOrthoWidth) { Invoke(nameof(SetOrthoWidth), InOrthoWidth); }
        public void SetOrthoNearClipPlane(float InOrthoNearClipPlane) { Invoke(nameof(SetOrthoNearClipPlane), InOrthoNearClipPlane); }
        public void SetOrthoFarClipPlane(float InOrthoFarClipPlane) { Invoke(nameof(SetOrthoFarClipPlane), InOrthoFarClipPlane); }
        public void SetFieldOfView(float InFieldOfView) { Invoke(nameof(SetFieldOfView), InFieldOfView); }
        public void SetConstraintAspectRatio(bool bInConstrainAspectRatio) { Invoke(nameof(SetConstraintAspectRatio), bInConstrainAspectRatio); }
        public void SetAspectRatio(float InAspectRatio) { Invoke(nameof(SetAspectRatio), InAspectRatio); }
        public void RemoveBlendable(Object InBlendableObject) { Invoke(nameof(RemoveBlendable), InBlendableObject); }
        public void OnCameraMeshHiddenChanged() { Invoke(nameof(OnCameraMeshHiddenChanged)); }
        public void GetCameraView(float DeltaTime, MinimalViewInfo DesiredView) { Invoke(nameof(GetCameraView), DeltaTime, DesiredView); }
        public void AddOrUpdateBlendable(Object InBlendableObject, float InWeight) { Invoke(nameof(AddOrUpdateBlendable), InBlendableObject, InWeight); }
    }
    public class CheatManager : Object
    {
        public CheatManager(nint addr) : base(addr) { }
        public DebugCameraController DebugCameraControllerRef { get { return this[nameof(DebugCameraControllerRef)].As<DebugCameraController>(); } set { this["DebugCameraControllerRef"] = value; } }
        public Object DebugCameraControllerClass { get { return this[nameof(DebugCameraControllerClass)]; } set { this[nameof(DebugCameraControllerClass)] = value; } }
        public Array<CheatManagerExtension> CheatManagerExtensions { get { return new Array<CheatManagerExtension>(this[nameof(CheatManagerExtensions)].Address); } }
        public void Walk() { Invoke(nameof(Walk)); }
        public void ViewSelf() { Invoke(nameof(ViewSelf)); }
        public void ViewPlayer(Object S) { Invoke(nameof(ViewPlayer), S); }
        public void ViewClass(Object DesiredClass) { Invoke(nameof(ViewClass), DesiredClass); }
        public void ViewActor(Object ActorName) { Invoke(nameof(ViewActor), ActorName); }
        public void UpdateSafeArea() { Invoke(nameof(UpdateSafeArea)); }
        public void ToggleServerStatReplicatorUpdateStatNet() { Invoke(nameof(ToggleServerStatReplicatorUpdateStatNet)); }
        public void ToggleServerStatReplicatorClientOverwrite() { Invoke(nameof(ToggleServerStatReplicatorClientOverwrite)); }
        public void ToggleDebugCamera() { Invoke(nameof(ToggleDebugCamera)); }
        public void ToggleAILogging() { Invoke(nameof(ToggleAILogging)); }
        public void TestCollisionDistance() { Invoke(nameof(TestCollisionDistance)); }
        public void Teleport() { Invoke(nameof(Teleport)); }
        public void Summon(Object ClassName) { Invoke(nameof(Summon), ClassName); }
        public void StreamLevelOut(Object PackageName) { Invoke(nameof(StreamLevelOut), PackageName); }
        public void StreamLevelIn(Object PackageName) { Invoke(nameof(StreamLevelIn), PackageName); }
        public void SpawnServerStatReplicator() { Invoke(nameof(SpawnServerStatReplicator)); }
        public void Slomo(float NewTimeDilation) { Invoke(nameof(Slomo), NewTimeDilation); }
        public void SetWorldOrigin() { Invoke(nameof(SetWorldOrigin)); }
        public void SetMouseSensitivityToDefault() { Invoke(nameof(SetMouseSensitivityToDefault)); }
        public void ServerToggleAILogging() { Invoke(nameof(ServerToggleAILogging)); }
        public void ReceiveInitCheatManager() { Invoke(nameof(ReceiveInitCheatManager)); }
        public void ReceiveEndPlay() { Invoke(nameof(ReceiveEndPlay)); }
        public void PlayersOnly() { Invoke(nameof(PlayersOnly)); }
        public void OnPlayerEndPlayed(Actor Player, byte EndPlayReason) { Invoke(nameof(OnPlayerEndPlayed), Player, EndPlayReason); }
        public void OnlyLoadLevel(Object PackageName) { Invoke(nameof(OnlyLoadLevel), PackageName); }
        public void LogLoc() { Invoke(nameof(LogLoc)); }
        public void InvertMouse() { Invoke(nameof(InvertMouse)); }
        public void God() { Invoke(nameof(God)); }
        public void Ghost() { Invoke(nameof(Ghost)); }
        public PlayerController GetPlayerController() { return Invoke<PlayerController>(nameof(GetPlayerController)); }
        public void FreezeFrame(float Delay) { Invoke(nameof(FreezeFrame), Delay); }
        public void Fly() { Invoke(nameof(Fly)); }
        public void FlushLog() { Invoke(nameof(FlushLog)); }
        public void EnableDebugCamera() { Invoke(nameof(EnableDebugCamera)); }
        public void DumpVoiceMutingState() { Invoke(nameof(DumpVoiceMutingState)); }
        public void DumpPartyState() { Invoke(nameof(DumpPartyState)); }
        public void DumpOnlineSessionState() { Invoke(nameof(DumpOnlineSessionState)); }
        public void DumpChatState() { Invoke(nameof(DumpChatState)); }
        public void DisableDebugCamera() { Invoke(nameof(DisableDebugCamera)); }
        public void DestroyTarget() { Invoke(nameof(DestroyTarget)); }
        public void DestroyServerStatReplicator() { Invoke(nameof(DestroyServerStatReplicator)); }
        public void DestroyPawns(Object aClass) { Invoke(nameof(DestroyPawns), aClass); }
        public void DestroyAllPawnsExceptTarget() { Invoke(nameof(DestroyAllPawnsExceptTarget)); }
        public void DestroyAll(Object aClass) { Invoke(nameof(DestroyAll), aClass); }
        public void DebugCapsuleSweepSize(float HalfHeight, float Radius) { Invoke(nameof(DebugCapsuleSweepSize), HalfHeight, Radius); }
        public void DebugCapsuleSweepPawn() { Invoke(nameof(DebugCapsuleSweepPawn)); }
        public void DebugCapsuleSweepComplex(bool bTraceComplex) { Invoke(nameof(DebugCapsuleSweepComplex), bTraceComplex); }
        public void DebugCapsuleSweepClear() { Invoke(nameof(DebugCapsuleSweepClear)); }
        public void DebugCapsuleSweepChannel(byte Channel) { Invoke(nameof(DebugCapsuleSweepChannel), Channel); }
        public void DebugCapsuleSweepCapture() { Invoke(nameof(DebugCapsuleSweepCapture)); }
        public void DebugCapsuleSweep() { Invoke(nameof(DebugCapsuleSweep)); }
        public void DamageTarget(float DamageAmount) { Invoke(nameof(DamageTarget), DamageAmount); }
        public void CheatScript(Object ScriptName) { Invoke(nameof(CheatScript), ScriptName); }
        public void ChangeSize(float F) { Invoke(nameof(ChangeSize), F); }
        public void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, Object GoString, Object LocString) { Invoke(nameof(BugItStringCreator), ViewLocation, ViewRotation, GoString, LocString); }
        public void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll) { Invoke(nameof(BugItGo), X, Y, Z, Pitch, Yaw, Roll); }
        public void BugIt(Object ScreenShotDescription) { Invoke(nameof(BugIt), ScreenShotDescription); }
    }
    public class LightComponentBase : SceneComponent
    {
        public LightComponentBase(nint addr) : base(addr) { }
        public Guid LightGuid { get { return this[nameof(LightGuid)].As<Guid>(); } set { this["LightGuid"] = value; } }
        public float Brightness { get { return this[nameof(Brightness)].GetValue<float>(); } set { this[nameof(Brightness)].SetValue<float>(value); } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public Color LightColor { get { return this[nameof(LightColor)].As<Color>(); } set { this["LightColor"] = value; } }
        public bool bAffectsWorld { get { return this[nameof(bAffectsWorld)].Flag; } set { this[nameof(bAffectsWorld)].Flag = value; } }
        public bool CastShadows { get { return this[nameof(CastShadows)].Flag; } set { this[nameof(CastShadows)].Flag = value; } }
        public bool CastStaticShadows { get { return this[nameof(CastStaticShadows)].Flag; } set { this[nameof(CastStaticShadows)].Flag = value; } }
        public bool CastDynamicShadows { get { return this[nameof(CastDynamicShadows)].Flag; } set { this[nameof(CastDynamicShadows)].Flag = value; } }
        public bool bAffectTranslucentLighting { get { return this[nameof(bAffectTranslucentLighting)].Flag; } set { this[nameof(bAffectTranslucentLighting)].Flag = value; } }
        public bool bTransmission { get { return this[nameof(bTransmission)].Flag; } set { this[nameof(bTransmission)].Flag = value; } }
        public bool bCastVolumetricShadow { get { return this[nameof(bCastVolumetricShadow)].Flag; } set { this[nameof(bCastVolumetricShadow)].Flag = value; } }
        public bool bCastDeepShadow { get { return this[nameof(bCastDeepShadow)].Flag; } set { this[nameof(bCastDeepShadow)].Flag = value; } }
        public bool bCastRaytracedShadow { get { return this[nameof(bCastRaytracedShadow)].Flag; } set { this[nameof(bCastRaytracedShadow)].Flag = value; } }
        public byte CastRaytracedShadow { get { return this[nameof(CastRaytracedShadow)].GetValue<byte>(); } set { this[nameof(CastRaytracedShadow)].SetValue<byte>(value); } }
        public bool bAffectReflection { get { return this[nameof(bAffectReflection)].Flag; } set { this[nameof(bAffectReflection)].Flag = value; } }
        public bool bAffectGlobalIllumination { get { return this[nameof(bAffectGlobalIllumination)].Flag; } set { this[nameof(bAffectGlobalIllumination)].Flag = value; } }
        public float DeepShadowLayerDistribution { get { return this[nameof(DeepShadowLayerDistribution)].GetValue<float>(); } set { this[nameof(DeepShadowLayerDistribution)].SetValue<float>(value); } }
        public float IndirectLightingIntensity { get { return this[nameof(IndirectLightingIntensity)].GetValue<float>(); } set { this[nameof(IndirectLightingIntensity)].SetValue<float>(value); } }
        public float VolumetricScatteringIntensity { get { return this[nameof(VolumetricScatteringIntensity)].GetValue<float>(); } set { this[nameof(VolumetricScatteringIntensity)].SetValue<float>(value); } }
        public int SamplesPerPixel { get { return this[nameof(SamplesPerPixel)].GetValue<int>(); } set { this[nameof(SamplesPerPixel)].SetValue<int>(value); } }
        public void SetSamplesPerPixel(int NewValue) { Invoke(nameof(SetSamplesPerPixel), NewValue); }
        public void SetCastVolumetricShadow(bool bNewValue) { Invoke(nameof(SetCastVolumetricShadow), bNewValue); }
        public void SetCastShadows(bool bNewValue) { Invoke(nameof(SetCastShadows), bNewValue); }
        public void SetCastRaytracedShadows(byte bNewValue) { Invoke(nameof(SetCastRaytracedShadows), bNewValue); }
        public void SetCastRaytracedShadow(bool bNewValue) { Invoke(nameof(SetCastRaytracedShadow), bNewValue); }
        public void SetCastDeepShadow(bool bNewValue) { Invoke(nameof(SetCastDeepShadow), bNewValue); }
        public void SetAffectReflection(bool bNewValue) { Invoke(nameof(SetAffectReflection), bNewValue); }
        public void SetAffectGlobalIllumination(bool bNewValue) { Invoke(nameof(SetAffectGlobalIllumination), bNewValue); }
        public LinearColor GetLightColor() { return Invoke<LinearColor>(nameof(GetLightColor)); }
    }
    public class LightComponent : LightComponentBase
    {
        public LightComponent(nint addr) : base(addr) { }
        public float Temperature { get { return this[nameof(Temperature)].GetValue<float>(); } set { this[nameof(Temperature)].SetValue<float>(value); } }
        public float MaxDrawDistance { get { return this[nameof(MaxDrawDistance)].GetValue<float>(); } set { this[nameof(MaxDrawDistance)].SetValue<float>(value); } }
        public float MaxDistanceFadeRange { get { return this[nameof(MaxDistanceFadeRange)].GetValue<float>(); } set { this[nameof(MaxDistanceFadeRange)].SetValue<float>(value); } }
        public bool bUseTemperature { get { return this[nameof(bUseTemperature)].Flag; } set { this[nameof(bUseTemperature)].Flag = value; } }
        public int ShadowMapChannel { get { return this[nameof(ShadowMapChannel)].GetValue<int>(); } set { this[nameof(ShadowMapChannel)].SetValue<int>(value); } }
        public float MinRoughness { get { return this[nameof(MinRoughness)].GetValue<float>(); } set { this[nameof(MinRoughness)].SetValue<float>(value); } }
        public float SpecularScale { get { return this[nameof(SpecularScale)].GetValue<float>(); } set { this[nameof(SpecularScale)].SetValue<float>(value); } }
        public float ShadowResolutionScale { get { return this[nameof(ShadowResolutionScale)].GetValue<float>(); } set { this[nameof(ShadowResolutionScale)].SetValue<float>(value); } }
        public float ShadowBias { get { return this[nameof(ShadowBias)].GetValue<float>(); } set { this[nameof(ShadowBias)].SetValue<float>(value); } }
        public float ShadowSlopeBias { get { return this[nameof(ShadowSlopeBias)].GetValue<float>(); } set { this[nameof(ShadowSlopeBias)].SetValue<float>(value); } }
        public float ShadowSharpen { get { return this[nameof(ShadowSharpen)].GetValue<float>(); } set { this[nameof(ShadowSharpen)].SetValue<float>(value); } }
        public float ContactShadowLength { get { return this[nameof(ContactShadowLength)].GetValue<float>(); } set { this[nameof(ContactShadowLength)].SetValue<float>(value); } }
        public bool ContactShadowLengthInWS { get { return this[nameof(ContactShadowLengthInWS)].Flag; } set { this[nameof(ContactShadowLengthInWS)].Flag = value; } }
        public bool InverseSquaredFalloff { get { return this[nameof(InverseSquaredFalloff)].Flag; } set { this[nameof(InverseSquaredFalloff)].Flag = value; } }
        public bool CastTranslucentShadows { get { return this[nameof(CastTranslucentShadows)].Flag; } set { this[nameof(CastTranslucentShadows)].Flag = value; } }
        public bool bCastShadowsFromCinematicObjectsOnly { get { return this[nameof(bCastShadowsFromCinematicObjectsOnly)].Flag; } set { this[nameof(bCastShadowsFromCinematicObjectsOnly)].Flag = value; } }
        public bool bAffectDynamicIndirectLighting { get { return this[nameof(bAffectDynamicIndirectLighting)].Flag; } set { this[nameof(bAffectDynamicIndirectLighting)].Flag = value; } }
        public bool bForceCachedShadowsForMovablePrimitives { get { return this[nameof(bForceCachedShadowsForMovablePrimitives)].Flag; } set { this[nameof(bForceCachedShadowsForMovablePrimitives)].Flag = value; } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public MaterialInterface LightFunctionMaterial { get { return this[nameof(LightFunctionMaterial)].As<MaterialInterface>(); } set { this["LightFunctionMaterial"] = value; } }
        public Vector LightFunctionScale { get { return this[nameof(LightFunctionScale)].As<Vector>(); } set { this["LightFunctionScale"] = value; } }
        public TextureLightProfile IESTexture { get { return this[nameof(IESTexture)].As<TextureLightProfile>(); } set { this["IESTexture"] = value; } }
        public bool bUseIESBrightness { get { return this[nameof(bUseIESBrightness)].Flag; } set { this[nameof(bUseIESBrightness)].Flag = value; } }
        public float IESBrightnessScale { get { return this[nameof(IESBrightnessScale)].GetValue<float>(); } set { this[nameof(IESBrightnessScale)].SetValue<float>(value); } }
        public float LightFunctionFadeDistance { get { return this[nameof(LightFunctionFadeDistance)].GetValue<float>(); } set { this[nameof(LightFunctionFadeDistance)].SetValue<float>(value); } }
        public float DisabledBrightness { get { return this[nameof(DisabledBrightness)].GetValue<float>(); } set { this[nameof(DisabledBrightness)].SetValue<float>(value); } }
        public bool bEnableLightShaftBloom { get { return this[nameof(bEnableLightShaftBloom)].Flag; } set { this[nameof(bEnableLightShaftBloom)].Flag = value; } }
        public float BloomScale { get { return this[nameof(BloomScale)].GetValue<float>(); } set { this[nameof(BloomScale)].SetValue<float>(value); } }
        public float BloomThreshold { get { return this[nameof(BloomThreshold)].GetValue<float>(); } set { this[nameof(BloomThreshold)].SetValue<float>(value); } }
        public float BloomMaxBrightness { get { return this[nameof(BloomMaxBrightness)].GetValue<float>(); } set { this[nameof(BloomMaxBrightness)].SetValue<float>(value); } }
        public Color BloomTint { get { return this[nameof(BloomTint)].As<Color>(); } set { this["BloomTint"] = value; } }
        public bool bUseRayTracedDistanceFieldShadows { get { return this[nameof(bUseRayTracedDistanceFieldShadows)].Flag; } set { this[nameof(bUseRayTracedDistanceFieldShadows)].Flag = value; } }
        public float RayStartOffsetDepthScale { get { return this[nameof(RayStartOffsetDepthScale)].GetValue<float>(); } set { this[nameof(RayStartOffsetDepthScale)].SetValue<float>(value); } }
        public void SetVolumetricScatteringIntensity(float NewIntensity) { Invoke(nameof(SetVolumetricScatteringIntensity), NewIntensity); }
        public void SetUseTemperature(bool bNewValue) { Invoke(nameof(SetUseTemperature), bNewValue); }
        public void SetUseIESBrightness(bool bNewValue) { Invoke(nameof(SetUseIESBrightness), bNewValue); }
        public void SetTransmission(bool bNewValue) { Invoke(nameof(SetTransmission), bNewValue); }
        public void SetTemperature(float NewTemperature) { Invoke(nameof(SetTemperature), NewTemperature); }
        public void SetSpecularScale(float NewValue) { Invoke(nameof(SetSpecularScale), NewValue); }
        public void SetShadowSlopeBias(float NewValue) { Invoke(nameof(SetShadowSlopeBias), NewValue); }
        public void SetShadowBias(float NewValue) { Invoke(nameof(SetShadowBias), NewValue); }
        public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2) { Invoke(nameof(SetLightingChannels), bChannel0, bChannel1, bChannel2); }
        public void SetLightFunctionScale(Vector NewLightFunctionScale) { Invoke(nameof(SetLightFunctionScale), NewLightFunctionScale); }
        public void SetLightFunctionMaterial(MaterialInterface NewLightFunctionMaterial) { Invoke(nameof(SetLightFunctionMaterial), NewLightFunctionMaterial); }
        public void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) { Invoke(nameof(SetLightFunctionFadeDistance), NewLightFunctionFadeDistance); }
        public void SetLightFunctionDisabledBrightness(float NewValue) { Invoke(nameof(SetLightFunctionDisabledBrightness), NewValue); }
        public void SetLightFColor(Color NewLightColor) { Invoke(nameof(SetLightFColor), NewLightColor); }
        public void SetLightColor(LinearColor NewLightColor, bool bSRGB) { Invoke(nameof(SetLightColor), NewLightColor, bSRGB); }
        public void SetIntensity(float NewIntensity) { Invoke(nameof(SetIntensity), NewIntensity); }
        public void SetIndirectLightingIntensity(float NewIntensity) { Invoke(nameof(SetIndirectLightingIntensity), NewIntensity); }
        public void SetIESTexture(TextureLightProfile NewValue) { Invoke(nameof(SetIESTexture), NewValue); }
        public void SetIESBrightnessScale(float NewValue) { Invoke(nameof(SetIESBrightnessScale), NewValue); }
        public void SetForceCachedShadowsForMovablePrimitives(bool bNewValue) { Invoke(nameof(SetForceCachedShadowsForMovablePrimitives), bNewValue); }
        public void SetEnableLightShaftBloom(bool bNewValue) { Invoke(nameof(SetEnableLightShaftBloom), bNewValue); }
        public void SetBloomTint(Color NewValue) { Invoke(nameof(SetBloomTint), NewValue); }
        public void SetBloomThreshold(float NewValue) { Invoke(nameof(SetBloomThreshold), NewValue); }
        public void SetBloomScale(float NewValue) { Invoke(nameof(SetBloomScale), NewValue); }
        public void SetBloomMaxBrightness(float NewValue) { Invoke(nameof(SetBloomMaxBrightness), NewValue); }
        public void SetAffectTranslucentLighting(bool bNewValue) { Invoke(nameof(SetAffectTranslucentLighting), bNewValue); }
        public void SetAffectDynamicIndirectLighting(bool bNewValue) { Invoke(nameof(SetAffectDynamicIndirectLighting), bNewValue); }
    }
    public class LocalLightComponent : LightComponent
    {
        public LocalLightComponent(nint addr) : base(addr) { }
        public ELightUnits IntensityUnits { get { return (ELightUnits)this[nameof(IntensityUnits)].GetValue<int>(); } set { this[nameof(IntensityUnits)].SetValue<int>((int)value); } }
        public float InverseExposureBlend { get { return this[nameof(InverseExposureBlend)].GetValue<float>(); } set { this[nameof(InverseExposureBlend)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float AttenuationRadius { get { return this[nameof(AttenuationRadius)].GetValue<float>(); } set { this[nameof(AttenuationRadius)].SetValue<float>(value); } }
        public LightmassPointLightSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPointLightSettings>(); } set { this["LightmassSettings"] = value; } }
        public void SetIntensityUnits(ELightUnits NewIntensityUnits) { Invoke(nameof(SetIntensityUnits), NewIntensityUnits); }
        public void SetAttenuationRadius(float NewRadius) { Invoke(nameof(SetAttenuationRadius), NewRadius); }
        public float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle) { return Invoke<float>(nameof(GetUnitsConversionFactor), SrcUnits, TargetUnits, CosHalfConeAngle); }
    }
    public class PointLightComponent : LocalLightComponent
    {
        public PointLightComponent(nint addr) : base(addr) { }
        public bool bUseInverseSquaredFalloff { get { return this[nameof(bUseInverseSquaredFalloff)].Flag; } set { this[nameof(bUseInverseSquaredFalloff)].Flag = value; } }
        public float LightFalloffExponent { get { return this[nameof(LightFalloffExponent)].GetValue<float>(); } set { this[nameof(LightFalloffExponent)].SetValue<float>(value); } }
        public float SourceRadius { get { return this[nameof(SourceRadius)].GetValue<float>(); } set { this[nameof(SourceRadius)].SetValue<float>(value); } }
        public float SoftSourceRadius { get { return this[nameof(SoftSourceRadius)].GetValue<float>(); } set { this[nameof(SoftSourceRadius)].SetValue<float>(value); } }
        public float SourceLength { get { return this[nameof(SourceLength)].GetValue<float>(); } set { this[nameof(SourceLength)].SetValue<float>(value); } }
        public void SetUseInverseSquaredFalloff(bool bNewValue) { Invoke(nameof(SetUseInverseSquaredFalloff), bNewValue); }
        public void SetSourceRadius(float bNewValue) { Invoke(nameof(SetSourceRadius), bNewValue); }
        public void SetSourceLength(float NewValue) { Invoke(nameof(SetSourceLength), NewValue); }
        public void SetSoftSourceRadius(float bNewValue) { Invoke(nameof(SetSoftSourceRadius), bNewValue); }
        public void SetLightFalloffExponent(float NewLightFalloffExponent) { Invoke(nameof(SetLightFalloffExponent), NewLightFalloffExponent); }
        public void SetInverseExposureBlend(float NewInverseExposureBlend) { Invoke(nameof(SetInverseExposureBlend), NewInverseExposureBlend); }
    }
    public class StaticMeshComponent : MeshComponent
    {
        public StaticMeshComponent(nint addr) : base(addr) { }
        public int ForcedLodModel { get { return this[nameof(ForcedLodModel)].GetValue<int>(); } set { this[nameof(ForcedLodModel)].SetValue<int>(value); } }
        public int PreviousLODLevel { get { return this[nameof(PreviousLODLevel)].GetValue<int>(); } set { this[nameof(PreviousLODLevel)].SetValue<int>(value); } }
        public int MinLOD { get { return this[nameof(MinLOD)].GetValue<int>(); } set { this[nameof(MinLOD)].SetValue<int>(value); } }
        public int SubDivisionStepSize { get { return this[nameof(SubDivisionStepSize)].GetValue<int>(); } set { this[nameof(SubDivisionStepSize)].SetValue<int>(value); } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public Color WireframeColorOverride { get { return this[nameof(WireframeColorOverride)].As<Color>(); } set { this["WireframeColorOverride"] = value; } }
        public bool bDisallowNanite { get { return this[nameof(bDisallowNanite)].Flag; } set { this[nameof(bDisallowNanite)].Flag = value; } }
        public bool bEvaluateWorldPositionOffset { get { return this[nameof(bEvaluateWorldPositionOffset)].Flag; } set { this[nameof(bEvaluateWorldPositionOffset)].Flag = value; } }
        public bool bEvaluateWorldPositionOffsetInRayTracing { get { return this[nameof(bEvaluateWorldPositionOffsetInRayTracing)].Flag; } set { this[nameof(bEvaluateWorldPositionOffsetInRayTracing)].Flag = value; } }
        public int WorldPositionOffsetDisableDistance { get { return this[nameof(WorldPositionOffsetDisableDistance)].GetValue<int>(); } set { this[nameof(WorldPositionOffsetDisableDistance)].SetValue<int>(value); } }
        public bool bOverrideWireframeColor { get { return this[nameof(bOverrideWireframeColor)].Flag; } set { this[nameof(bOverrideWireframeColor)].Flag = value; } }
        public bool bOverrideMinLOD { get { return this[nameof(bOverrideMinLOD)].Flag; } set { this[nameof(bOverrideMinLOD)].Flag = value; } }
        public bool bOverrideNavigationExport { get { return this[nameof(bOverrideNavigationExport)].Flag; } set { this[nameof(bOverrideNavigationExport)].Flag = value; } }
        public bool bForceNavigationObstacle { get { return this[nameof(bForceNavigationObstacle)].Flag; } set { this[nameof(bForceNavigationObstacle)].Flag = value; } }
        public bool bDisallowMeshPaintPerInstance { get { return this[nameof(bDisallowMeshPaintPerInstance)].Flag; } set { this[nameof(bDisallowMeshPaintPerInstance)].Flag = value; } }
        public bool bIgnoreInstanceForTextureStreaming { get { return this[nameof(bIgnoreInstanceForTextureStreaming)].Flag; } set { this[nameof(bIgnoreInstanceForTextureStreaming)].Flag = value; } }
        public bool bOverrideLightMapRes { get { return this[nameof(bOverrideLightMapRes)].Flag; } set { this[nameof(bOverrideLightMapRes)].Flag = value; } }
        public bool bCastDistanceFieldIndirectShadow { get { return this[nameof(bCastDistanceFieldIndirectShadow)].Flag; } set { this[nameof(bCastDistanceFieldIndirectShadow)].Flag = value; } }
        public bool bOverrideDistanceFieldSelfShadowBias { get { return this[nameof(bOverrideDistanceFieldSelfShadowBias)].Flag; } set { this[nameof(bOverrideDistanceFieldSelfShadowBias)].Flag = value; } }
        public bool bUseSubDivisions { get { return this[nameof(bUseSubDivisions)].Flag; } set { this[nameof(bUseSubDivisions)].Flag = value; } }
        public bool bUseDefaultCollision { get { return this[nameof(bUseDefaultCollision)].Flag; } set { this[nameof(bUseDefaultCollision)].Flag = value; } }
        public bool bSortTriangles { get { return this[nameof(bSortTriangles)].Flag; } set { this[nameof(bSortTriangles)].Flag = value; } }
        public bool bReverseCulling { get { return this[nameof(bReverseCulling)].Flag; } set { this[nameof(bReverseCulling)].Flag = value; } }
        public int OverriddenLightMapRes { get { return this[nameof(OverriddenLightMapRes)].GetValue<int>(); } set { this[nameof(OverriddenLightMapRes)].SetValue<int>(value); } }
        public float DistanceFieldIndirectShadowMinVisibility { get { return this[nameof(DistanceFieldIndirectShadowMinVisibility)].GetValue<float>(); } set { this[nameof(DistanceFieldIndirectShadowMinVisibility)].SetValue<float>(value); } }
        public float DistanceFieldSelfShadowBias { get { return this[nameof(DistanceFieldSelfShadowBias)].GetValue<float>(); } set { this[nameof(DistanceFieldSelfShadowBias)].SetValue<float>(value); } }
        public float StreamingDistanceMultiplier { get { return this[nameof(StreamingDistanceMultiplier)].GetValue<float>(); } set { this[nameof(StreamingDistanceMultiplier)].SetValue<float>(value); } }
        public Array<StaticMeshComponentLODInfo> LODData { get { return new Array<StaticMeshComponentLODInfo>(this[nameof(LODData)].Address); } }
        public Array<StreamingTextureBuildInfo> StreamingTextureData { get { return new Array<StreamingTextureBuildInfo>(this[nameof(StreamingTextureData)].Address); } }
        public LightmassPrimitiveSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPrimitiveSettings>(); } set { this["LightmassSettings"] = value; } }
        public bool SetStaticMesh(StaticMesh NewMesh) { return Invoke<bool>(nameof(SetStaticMesh), NewMesh); }
        public void SetReverseCulling(bool ReverseCulling) { Invoke(nameof(SetReverseCulling), ReverseCulling); }
        public void SetForcedLodModel(int NewForcedLodModel) { Invoke(nameof(SetForcedLodModel), NewForcedLodModel); }
        public void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue) { Invoke(nameof(SetEvaluateWorldPositionOffsetInRayTracing), NewValue); }
        public void SetEvaluateWorldPositionOffset(bool NewValue) { Invoke(nameof(SetEvaluateWorldPositionOffset), NewValue); }
        public void SetDistanceFieldSelfShadowBias(float NewValue) { Invoke(nameof(SetDistanceFieldSelfShadowBias), NewValue); }
        public void OnRep_StaticMesh(StaticMesh OldStaticMesh) { Invoke(nameof(OnRep_StaticMesh), OldStaticMesh); }
        public void GetLocalBounds(Vector Min, Vector Max) { Invoke(nameof(GetLocalBounds), Min, Max); }
        public bool GetInitialEvaluateWorldPositionOffset() { return Invoke<bool>(nameof(GetInitialEvaluateWorldPositionOffset)); }
    }
    public class InstancedStaticMeshComponent : StaticMeshComponent
    {
        public InstancedStaticMeshComponent(nint addr) : base(addr) { }
        public Array<InstancedStaticMeshInstanceData> PerInstanceSMData { get { return new Array<InstancedStaticMeshInstanceData>(this[nameof(PerInstanceSMData)].Address); } }
        public Array<Matrix> PerInstancePrevTransform { get { return new Array<Matrix>(this[nameof(PerInstancePrevTransform)].Address); } }
        public int NumCustomDataFloats { get { return this[nameof(NumCustomDataFloats)].GetValue<int>(); } set { this[nameof(NumCustomDataFloats)].SetValue<int>(value); } }
        public Array<float> PerInstanceSMCustomData { get { return new Array<float>(this[nameof(PerInstanceSMCustomData)].Address); } }
        public int InstancingRandomSeed { get { return this[nameof(InstancingRandomSeed)].GetValue<int>(); } set { this[nameof(InstancingRandomSeed)].SetValue<int>(value); } }
        public Array<InstancedStaticMeshRandomSeed> AdditionalRandomSeeds { get { return new Array<InstancedStaticMeshRandomSeed>(this[nameof(AdditionalRandomSeeds)].Address); } }
        public int InstanceStartCullDistance { get { return this[nameof(InstanceStartCullDistance)].GetValue<int>(); } set { this[nameof(InstanceStartCullDistance)].SetValue<int>(value); } }
        public int InstanceEndCullDistance { get { return this[nameof(InstanceEndCullDistance)].GetValue<int>(); } set { this[nameof(InstanceEndCullDistance)].SetValue<int>(value); } }
        public Array<int> InstanceReorderTable { get { return new Array<int>(this[nameof(InstanceReorderTable)].Address); } }
        public int NumPendingLightmaps { get { return this[nameof(NumPendingLightmaps)].GetValue<int>(); } set { this[nameof(NumPendingLightmaps)].SetValue<int>(value); } }
        public Array<InstancedStaticMeshMappingInfo> CachedMappings { get { return new Array<InstancedStaticMeshMappingInfo>(this[nameof(CachedMappings)].Address); } }
        public bool UpdateInstanceTransform(int InstanceIndex, Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) { return Invoke<bool>(nameof(UpdateInstanceTransform), InstanceIndex, NewInstanceTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport); }
        public bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty) { return Invoke<bool>(nameof(SetCustomDataValue), InstanceIndex, CustomDataIndex, CustomDataValue, bMarkRenderStateDirty); }
        public void SetCullDistances(int StartCullDistance, int EndCullDistance) { Invoke(nameof(SetCullDistances), StartCullDistance, EndCullDistance); }
        public bool RemoveInstances(Array<int> InstancesToRemove) { return Invoke<bool>(nameof(RemoveInstances), InstancesToRemove); }
        public bool RemoveInstance(int InstanceIndex) { return Invoke<bool>(nameof(RemoveInstance), InstanceIndex); }
        public bool IsValidInstance(int InstanceIndex) { return Invoke<bool>(nameof(IsValidInstance), InstanceIndex); }
        public bool GetInstanceTransform(int InstanceIndex, Transform OutInstanceTransform, bool bWorldSpace) { return Invoke<bool>(nameof(GetInstanceTransform), InstanceIndex, OutInstanceTransform, bWorldSpace); }
        public Array<int> GetInstancesOverlappingSphere(Vector Center, float Radius, bool bSphereInWorldSpace) { return Invoke<Array<int>>(nameof(GetInstancesOverlappingSphere), Center, Radius, bSphereInWorldSpace); }
        public Array<int> GetInstancesOverlappingBox(Box Box, bool bBoxInWorldSpace) { return Invoke<Array<int>>(nameof(GetInstancesOverlappingBox), Box, bBoxInWorldSpace); }
        public int GetInstanceCount() { return Invoke<int>(nameof(GetInstanceCount)); }
        public void ClearInstances() { Invoke(nameof(ClearInstances)); }
        public bool BatchUpdateInstancesTransforms(int StartInstanceIndex, Array<Transform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) { return Invoke<bool>(nameof(BatchUpdateInstancesTransforms), StartInstanceIndex, NewInstancesTransforms, bWorldSpace, bMarkRenderStateDirty, bTeleport); }
        public bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport) { return Invoke<bool>(nameof(BatchUpdateInstancesTransform), StartInstanceIndex, NumInstances, NewInstancesTransform, bWorldSpace, bMarkRenderStateDirty, bTeleport); }
        public int AddInstanceWorldSpace(Transform WorldTransform) { return Invoke<int>(nameof(AddInstanceWorldSpace), WorldTransform); }
        public Array<int> AddInstances(Array<Transform> InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace) { return Invoke<Array<int>>(nameof(AddInstances), InstanceTransforms, bShouldReturnIndices, bWorldSpace); }
        public int AddInstance(Transform InstanceTransform, bool bWorldSpace) { return Invoke<int>(nameof(AddInstance), InstanceTransform, bWorldSpace); }
    }
    public class HierarchicalInstancedStaticMeshComponent : InstancedStaticMeshComponent
    {
        public HierarchicalInstancedStaticMeshComponent(nint addr) : base(addr) { }
        public bool bUseTranslatedInstanceSpace { get { return this[nameof(bUseTranslatedInstanceSpace)].Flag; } set { this[nameof(bUseTranslatedInstanceSpace)].Flag = value; } }
        public Vector TranslatedInstanceSpaceOrigin { get { return this[nameof(TranslatedInstanceSpaceOrigin)].As<Vector>(); } set { this["TranslatedInstanceSpaceOrigin"] = value; } }
        public Array<int> SortedInstances { get { return new Array<int>(this[nameof(SortedInstances)].Address); } }
        public int NumBuiltInstances { get { return this[nameof(NumBuiltInstances)].GetValue<int>(); } set { this[nameof(NumBuiltInstances)].SetValue<int>(value); } }
        public Box BuiltInstanceBounds { get { return this[nameof(BuiltInstanceBounds)].As<Box>(); } set { this["BuiltInstanceBounds"] = value; } }
        public Box UnbuiltInstanceBounds { get { return this[nameof(UnbuiltInstanceBounds)].As<Box>(); } set { this["UnbuiltInstanceBounds"] = value; } }
        public Array<Box> UnbuiltInstanceBoundsList { get { return new Array<Box>(this[nameof(UnbuiltInstanceBoundsList)].Address); } }
        public bool bEnableDensityScaling { get { return this[nameof(bEnableDensityScaling)].Flag; } set { this[nameof(bEnableDensityScaling)].Flag = value; } }
        public int OcclusionLayerNumNodes { get { return this[nameof(OcclusionLayerNumNodes)].GetValue<int>(); } set { this[nameof(OcclusionLayerNumNodes)].SetValue<int>(value); } }
        public BoxSphereBounds CacheMeshExtendedBounds { get { return this[nameof(CacheMeshExtendedBounds)].As<BoxSphereBounds>(); } set { this["CacheMeshExtendedBounds"] = value; } }
        public bool bDisableCollision { get { return this[nameof(bDisableCollision)].Flag; } set { this[nameof(bDisableCollision)].Flag = value; } }
        public int InstanceCountToRender { get { return this[nameof(InstanceCountToRender)].GetValue<int>(); } set { this[nameof(InstanceCountToRender)].SetValue<int>(value); } }
    }
    public class HUD : Actor
    {
        public HUD(nint addr) : base(addr) { }
        public PlayerController PlayerOwner { get { return this[nameof(PlayerOwner)].As<PlayerController>(); } set { this["PlayerOwner"] = value; } }
        public bool bLostFocusPaused { get { return this[nameof(bLostFocusPaused)].Flag; } set { this[nameof(bLostFocusPaused)].Flag = value; } }
        public bool bShowHUD { get { return this[nameof(bShowHUD)].Flag; } set { this[nameof(bShowHUD)].Flag = value; } }
        public bool bShowDebugInfo { get { return this[nameof(bShowDebugInfo)].Flag; } set { this[nameof(bShowDebugInfo)].Flag = value; } }
        public int CurrentTargetIndex { get { return this[nameof(CurrentTargetIndex)].GetValue<int>(); } set { this[nameof(CurrentTargetIndex)].SetValue<int>(value); } }
        public bool bShowHitBoxDebugInfo { get { return this[nameof(bShowHitBoxDebugInfo)].Flag; } set { this[nameof(bShowHitBoxDebugInfo)].Flag = value; } }
        public bool bShowOverlays { get { return this[nameof(bShowOverlays)].Flag; } set { this[nameof(bShowOverlays)].Flag = value; } }
        public bool bEnableDebugTextShadow { get { return this[nameof(bEnableDebugTextShadow)].Flag; } set { this[nameof(bEnableDebugTextShadow)].Flag = value; } }
        public Array<Actor> PostRenderedActors { get { return new Array<Actor>(this[nameof(PostRenderedActors)].Address); } }
        public Array<Object> DebugDisplay { get { return new Array<Object>(this[nameof(DebugDisplay)].Address); } }
        public Array<Object> ToggledDebugCategories { get { return new Array<Object>(this[nameof(ToggledDebugCategories)].Address); } }
        public Canvas Canvas { get { return this[nameof(Canvas)].As<Canvas>(); } set { this["Canvas"] = value; } }
        public Canvas DebugCanvas { get { return this[nameof(DebugCanvas)].As<Canvas>(); } set { this["DebugCanvas"] = value; } }
        public Array<DebugTextInfo> DebugTextList { get { return new Array<DebugTextInfo>(this[nameof(DebugTextList)].Address); } }
        public Object ShowDebugTargetDesiredClass { get { return this[nameof(ShowDebugTargetDesiredClass)]; } set { this[nameof(ShowDebugTargetDesiredClass)] = value; } }
        public Actor ShowDebugTargetActor { get { return this[nameof(ShowDebugTargetActor)].As<Actor>(); } set { this["ShowDebugTargetActor"] = value; } }
        public void ShowHUD() { Invoke(nameof(ShowHUD)); }
        public void ShowDebugToggleSubCategory(Object Category) { Invoke(nameof(ShowDebugToggleSubCategory), Category); }
        public void ShowDebugForReticleTargetToggle(Object DesiredClass) { Invoke(nameof(ShowDebugForReticleTargetToggle), DesiredClass); }
        public void ShowDebug(Object DebugType) { Invoke(nameof(ShowDebug), DebugType); }
        public void RemoveDebugText(Actor SrcActor, bool bLeaveDurationText) { Invoke(nameof(RemoveDebugText), SrcActor, bLeaveDurationText); }
        public void RemoveAllDebugStrings() { Invoke(nameof(RemoveAllDebugStrings)); }
        public void ReceiveHitBoxRelease(Object BoxName) { Invoke(nameof(ReceiveHitBoxRelease), BoxName); }
        public void ReceiveHitBoxEndCursorOver(Object BoxName) { Invoke(nameof(ReceiveHitBoxEndCursorOver), BoxName); }
        public void ReceiveHitBoxClick(Object BoxName) { Invoke(nameof(ReceiveHitBoxClick), BoxName); }
        public void ReceiveHitBoxBeginCursorOver(Object BoxName) { Invoke(nameof(ReceiveHitBoxBeginCursorOver), BoxName); }
        public void ReceiveDrawHUD(int SizeX, int SizeY) { Invoke(nameof(ReceiveDrawHUD), SizeX, SizeY); }
        public Vector Project(Vector Location, bool bClampToZeroPlane) { return Invoke<Vector>(nameof(Project), Location, bClampToZeroPlane); }
        public void PreviousDebugTarget() { Invoke(nameof(PreviousDebugTarget)); }
        public void NextDebugTarget() { Invoke(nameof(NextDebugTarget)); }
        public void GetTextSize(Object Text, float OutWidth, float OutHeight, Font Font, float Scale) { Invoke(nameof(GetTextSize), Text, OutWidth, OutHeight, Font, Scale); }
        public PlayerController GetOwningPlayerController() { return Invoke<PlayerController>(nameof(GetOwningPlayerController)); }
        public Pawn GetOwningPawn() { return Invoke<Pawn>(nameof(GetOwningPawn)); }
        public void GetActorsInSelectionRectangle(Object ClassFilter, Vector2D FirstPoint, Vector2D SecondPoint, Array<Actor> OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed) { Invoke(nameof(GetActorsInSelectionRectangle), ClassFilter, FirstPoint, SecondPoint, OutActors, bIncludeNonCollidingComponents, bActorMustBeFullyEnclosed); }
        public void DrawTextureSimple(Texture Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition) { Invoke(nameof(DrawTextureSimple), Texture, ScreenX, ScreenY, Scale, bScalePosition); }
        public void DrawTexture(Texture Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot) { Invoke(nameof(DrawTexture), Texture, ScreenX, ScreenY, ScreenW, ScreenH, TextureU, TextureV, TextureUWidth, TextureVHeight, TintColor, BlendMode, Scale, bScalePosition, Rotation, RotPivot); }
        public void DrawText(Object Text, LinearColor TextColor, float ScreenX, float ScreenY, Font Font, float Scale, bool bScalePosition) { Invoke(nameof(DrawText), Text, TextColor, ScreenX, ScreenY, Font, Scale, bScalePosition); }
        public void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH) { Invoke(nameof(DrawRect), RectColor, ScreenX, ScreenY, ScreenW, ScreenH); }
        public void DrawMaterialTriangle(MaterialInterface Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color) { Invoke(nameof(DrawMaterialTriangle), Material, V0_Pos, V1_Pos, V2_Pos, V0_UV, V1_UV, V2_UV, V0_Color, V1_Color, V2_Color); }
        public void DrawMaterialSimple(MaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition) { Invoke(nameof(DrawMaterialSimple), Material, ScreenX, ScreenY, ScreenW, ScreenH, Scale, bScalePosition); }
        public void DrawMaterial(MaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot) { Invoke(nameof(DrawMaterial), Material, ScreenX, ScreenY, ScreenW, ScreenH, MaterialU, MaterialV, MaterialUWidth, MaterialVHeight, Scale, bScalePosition, Rotation, RotPivot); }
        public void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness) { Invoke(nameof(DrawLine), StartScreenX, StartScreenY, EndScreenX, EndScreenY, LineColor, LineThickness); }
        public void Deproject(float ScreenX, float ScreenY, Vector WorldPosition, Vector WorldDirection) { Invoke(nameof(Deproject), ScreenX, ScreenY, WorldPosition, WorldDirection); }
        public void AddHitBox(Vector2D Position, Vector2D Size, Object InName, bool bConsumesInput, int Priority) { Invoke(nameof(AddHitBox), Position, Size, InName, bConsumesInput, Priority); }
        public void AddDebugText(Object DebugText, Actor SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font InFont, float FontScale, bool bDrawShadow) { Invoke(nameof(AddDebugText), DebugText, SrcActor, Duration, Offset, DesiredOffset, TextColor, bSkipOverwriteCheck, bAbsoluteLocation, bKeepAttachedToActor, InFont, FontScale, bDrawShadow); }
    }
    public class NavAreaBase : Object
    {
        public NavAreaBase(nint addr) : base(addr) { }
    }
    public class NavigationSystemBase : Object
    {
        public NavigationSystemBase(nint addr) : base(addr) { }
    }
    public class SaveGame : Object
    {
        public SaveGame(nint addr) : base(addr) { }
    }
    public class SpringArmComponent : SceneComponent
    {
        public SpringArmComponent(nint addr) : base(addr) { }
        public float TargetArmLength { get { return this[nameof(TargetArmLength)].GetValue<float>(); } set { this[nameof(TargetArmLength)].SetValue<float>(value); } }
        public Vector SocketOffset { get { return this[nameof(SocketOffset)].As<Vector>(); } set { this["SocketOffset"] = value; } }
        public Vector TargetOffset { get { return this[nameof(TargetOffset)].As<Vector>(); } set { this["TargetOffset"] = value; } }
        public float ProbeSize { get { return this[nameof(ProbeSize)].GetValue<float>(); } set { this[nameof(ProbeSize)].SetValue<float>(value); } }
        public byte ProbeChannel { get { return this[nameof(ProbeChannel)].GetValue<byte>(); } set { this[nameof(ProbeChannel)].SetValue<byte>(value); } }
        public bool bDoCollisionTest { get { return this[nameof(bDoCollisionTest)].Flag; } set { this[nameof(bDoCollisionTest)].Flag = value; } }
        public bool bUsePawnControlRotation { get { return this[nameof(bUsePawnControlRotation)].Flag; } set { this[nameof(bUsePawnControlRotation)].Flag = value; } }
        public bool bInheritPitch { get { return this[nameof(bInheritPitch)].Flag; } set { this[nameof(bInheritPitch)].Flag = value; } }
        public bool bInheritYaw { get { return this[nameof(bInheritYaw)].Flag; } set { this[nameof(bInheritYaw)].Flag = value; } }
        public bool bInheritRoll { get { return this[nameof(bInheritRoll)].Flag; } set { this[nameof(bInheritRoll)].Flag = value; } }
        public bool bEnableCameraLag { get { return this[nameof(bEnableCameraLag)].Flag; } set { this[nameof(bEnableCameraLag)].Flag = value; } }
        public bool bEnableCameraRotationLag { get { return this[nameof(bEnableCameraRotationLag)].Flag; } set { this[nameof(bEnableCameraRotationLag)].Flag = value; } }
        public bool bUseCameraLagSubstepping { get { return this[nameof(bUseCameraLagSubstepping)].Flag; } set { this[nameof(bUseCameraLagSubstepping)].Flag = value; } }
        public bool bDrawDebugLagMarkers { get { return this[nameof(bDrawDebugLagMarkers)].Flag; } set { this[nameof(bDrawDebugLagMarkers)].Flag = value; } }
        public float CameraLagSpeed { get { return this[nameof(CameraLagSpeed)].GetValue<float>(); } set { this[nameof(CameraLagSpeed)].SetValue<float>(value); } }
        public float CameraRotationLagSpeed { get { return this[nameof(CameraRotationLagSpeed)].GetValue<float>(); } set { this[nameof(CameraRotationLagSpeed)].SetValue<float>(value); } }
        public float CameraLagMaxTimeStep { get { return this[nameof(CameraLagMaxTimeStep)].GetValue<float>(); } set { this[nameof(CameraLagMaxTimeStep)].SetValue<float>(value); } }
        public float CameraLagMaxDistance { get { return this[nameof(CameraLagMaxDistance)].GetValue<float>(); } set { this[nameof(CameraLagMaxDistance)].SetValue<float>(value); } }
        public bool bClampToMaxPhysicsDeltaTime { get { return this[nameof(bClampToMaxPhysicsDeltaTime)].Flag; } set { this[nameof(bClampToMaxPhysicsDeltaTime)].Flag = value; } }
        public bool IsCollisionFixApplied() { return Invoke<bool>(nameof(IsCollisionFixApplied)); }
        public Vector GetUnfixedCameraPosition() { return Invoke<Vector>(nameof(GetUnfixedCameraPosition)); }
        public Rotator GetTargetRotation() { return Invoke<Rotator>(nameof(GetTargetRotation)); }
    }
    public class ArrowComponent : PrimitiveComponent
    {
        public ArrowComponent(nint addr) : base(addr) { }
        public Color ArrowColor { get { return this[nameof(ArrowColor)].As<Color>(); } set { this["ArrowColor"] = value; } }
        public float ArrowSize { get { return this[nameof(ArrowSize)].GetValue<float>(); } set { this[nameof(ArrowSize)].SetValue<float>(value); } }
        public float ArrowLength { get { return this[nameof(ArrowLength)].GetValue<float>(); } set { this[nameof(ArrowLength)].SetValue<float>(value); } }
        public float ScreenSize { get { return this[nameof(ScreenSize)].GetValue<float>(); } set { this[nameof(ScreenSize)].SetValue<float>(value); } }
        public bool bIsScreenSizeScaled { get { return this[nameof(bIsScreenSizeScaled)].Flag; } set { this[nameof(bIsScreenSizeScaled)].Flag = value; } }
        public bool bTreatAsASprite { get { return this[nameof(bTreatAsASprite)].Flag; } set { this[nameof(bTreatAsASprite)].Flag = value; } }
        public bool bReverseDirection { get { return this[nameof(bReverseDirection)].Flag; } set { this[nameof(bReverseDirection)].Flag = value; } }
        public void SetArrowColor(LinearColor NewColor) { Invoke(nameof(SetArrowColor), NewColor); }
    }
    public class WorldSettings : Info
    {
        public WorldSettings(nint addr) : base(addr) { }
        public int VisibilityCellSize { get { return this[nameof(VisibilityCellSize)].GetValue<int>(); } set { this[nameof(VisibilityCellSize)].SetValue<int>(value); } }
        public byte VisibilityAggressiveness { get { return this[nameof(VisibilityAggressiveness)].GetValue<byte>(); } set { this[nameof(VisibilityAggressiveness)].SetValue<byte>(value); } }
        public bool bPrecomputeVisibility { get { return this[nameof(bPrecomputeVisibility)].Flag; } set { this[nameof(bPrecomputeVisibility)].Flag = value; } }
        public bool bPlaceCellsOnlyAlongCameraTracks { get { return this[nameof(bPlaceCellsOnlyAlongCameraTracks)].Flag; } set { this[nameof(bPlaceCellsOnlyAlongCameraTracks)].Flag = value; } }
        public bool bEnableWorldBoundsChecks { get { return this[nameof(bEnableWorldBoundsChecks)].Flag; } set { this[nameof(bEnableWorldBoundsChecks)].Flag = value; } }
        public bool bEnableNavigationSystem { get { return this[nameof(bEnableNavigationSystem)].Flag; } set { this[nameof(bEnableNavigationSystem)].Flag = value; } }
        public bool bEnableAISystem { get { return this[nameof(bEnableAISystem)].Flag; } set { this[nameof(bEnableAISystem)].Flag = value; } }
        public bool bEnableWorldComposition { get { return this[nameof(bEnableWorldComposition)].Flag; } set { this[nameof(bEnableWorldComposition)].Flag = value; } }
        public bool bUseClientSideLevelStreamingVolumes { get { return this[nameof(bUseClientSideLevelStreamingVolumes)].Flag; } set { this[nameof(bUseClientSideLevelStreamingVolumes)].Flag = value; } }
        public bool bEnableWorldOriginRebasing { get { return this[nameof(bEnableWorldOriginRebasing)].Flag; } set { this[nameof(bEnableWorldOriginRebasing)].Flag = value; } }
        public bool bWorldGravitySet { get { return this[nameof(bWorldGravitySet)].Flag; } set { this[nameof(bWorldGravitySet)].Flag = value; } }
        public bool bGlobalGravitySet { get { return this[nameof(bGlobalGravitySet)].Flag; } set { this[nameof(bGlobalGravitySet)].Flag = value; } }
        public bool bMinimizeBSPSections { get { return this[nameof(bMinimizeBSPSections)].Flag; } set { this[nameof(bMinimizeBSPSections)].Flag = value; } }
        public bool bForceNoPrecomputedLighting { get { return this[nameof(bForceNoPrecomputedLighting)].Flag; } set { this[nameof(bForceNoPrecomputedLighting)].Flag = value; } }
        public bool bHighPriorityLoading { get { return this[nameof(bHighPriorityLoading)].Flag; } set { this[nameof(bHighPriorityLoading)].Flag = value; } }
        public bool bHighPriorityLoadingLocal { get { return this[nameof(bHighPriorityLoadingLocal)].Flag; } set { this[nameof(bHighPriorityLoadingLocal)].Flag = value; } }
        public bool bOverrideDefaultBroadphaseSettings { get { return this[nameof(bOverrideDefaultBroadphaseSettings)].Flag; } set { this[nameof(bOverrideDefaultBroadphaseSettings)].Flag = value; } }
        public bool bGenerateSingleClusterForLevel { get { return this[nameof(bGenerateSingleClusterForLevel)].Flag; } set { this[nameof(bGenerateSingleClusterForLevel)].Flag = value; } }
        public Object AISystemClass { get { return this[nameof(AISystemClass)]; } set { this[nameof(AISystemClass)] = value; } }
        public Vector LevelInstancePivotOffset { get { return this[nameof(LevelInstancePivotOffset)].As<Vector>(); } set { this["LevelInstancePivotOffset"] = value; } }
        public NavigationSystemConfig NavigationSystemConfig { get { return this[nameof(NavigationSystemConfig)].As<NavigationSystemConfig>(); } set { this["NavigationSystemConfig"] = value; } }
        public NavigationSystemConfig NavigationSystemConfigOverride { get { return this[nameof(NavigationSystemConfigOverride)].As<NavigationSystemConfig>(); } set { this["NavigationSystemConfigOverride"] = value; } }
        public WorldPartition WorldPartition { get { return this[nameof(WorldPartition)].As<WorldPartition>(); } set { this["WorldPartition"] = value; } }
        public Array<DataLayerAsset> BaseNavmeshDataLayers { get { return new Array<DataLayerAsset>(this[nameof(BaseNavmeshDataLayers)].Address); } }
        public float WorldToMeters { get { return this[nameof(WorldToMeters)].GetValue<float>(); } set { this[nameof(WorldToMeters)].SetValue<float>(value); } }
        public float KillZ { get { return this[nameof(KillZ)].GetValue<float>(); } set { this[nameof(KillZ)].SetValue<float>(value); } }
        public Object KillZDamageType { get { return this[nameof(KillZDamageType)]; } set { this[nameof(KillZDamageType)] = value; } }
        public float WorldGravityZ { get { return this[nameof(WorldGravityZ)].GetValue<float>(); } set { this[nameof(WorldGravityZ)].SetValue<float>(value); } }
        public float GlobalGravityZ { get { return this[nameof(GlobalGravityZ)].GetValue<float>(); } set { this[nameof(GlobalGravityZ)].SetValue<float>(value); } }
        public Object DefaultPhysicsVolumeClass { get { return this[nameof(DefaultPhysicsVolumeClass)]; } set { this[nameof(DefaultPhysicsVolumeClass)] = value; } }
        public Object PhysicsCollisionHandlerClass { get { return this[nameof(PhysicsCollisionHandlerClass)]; } set { this[nameof(PhysicsCollisionHandlerClass)] = value; } }
        public Object DefaultGameMode { get { return this[nameof(DefaultGameMode)]; } set { this[nameof(DefaultGameMode)] = value; } }
        public Object GameNetworkManagerClass { get { return this[nameof(GameNetworkManagerClass)]; } set { this[nameof(GameNetworkManagerClass)] = value; } }
        public int PackedLightAndShadowMapTextureSize { get { return this[nameof(PackedLightAndShadowMapTextureSize)].GetValue<int>(); } set { this[nameof(PackedLightAndShadowMapTextureSize)].SetValue<int>(value); } }
        public Vector DefaultColorScale { get { return this[nameof(DefaultColorScale)].As<Vector>(); } set { this["DefaultColorScale"] = value; } }
        public float DefaultMaxDistanceFieldOcclusionDistance { get { return this[nameof(DefaultMaxDistanceFieldOcclusionDistance)].GetValue<float>(); } set { this[nameof(DefaultMaxDistanceFieldOcclusionDistance)].SetValue<float>(value); } }
        public float GlobalDistanceFieldViewDistance { get { return this[nameof(GlobalDistanceFieldViewDistance)].GetValue<float>(); } set { this[nameof(GlobalDistanceFieldViewDistance)].SetValue<float>(value); } }
        public float DynamicIndirectShadowsSelfShadowingIntensity { get { return this[nameof(DynamicIndirectShadowsSelfShadowingIntensity)].GetValue<float>(); } set { this[nameof(DynamicIndirectShadowsSelfShadowingIntensity)].SetValue<float>(value); } }
        public ReverbSettings DefaultReverbSettings { get { return this[nameof(DefaultReverbSettings)].As<ReverbSettings>(); } set { this["DefaultReverbSettings"] = value; } }
        public InteriorSettings DefaultAmbientZoneSettings { get { return this[nameof(DefaultAmbientZoneSettings)].As<InteriorSettings>(); } set { this["DefaultAmbientZoneSettings"] = value; } }
        public SoundMix DefaultBaseSoundMix { get { return this[nameof(DefaultBaseSoundMix)].As<SoundMix>(); } set { this["DefaultBaseSoundMix"] = value; } }
        public float TimeDilation { get { return this[nameof(TimeDilation)].GetValue<float>(); } set { this[nameof(TimeDilation)].SetValue<float>(value); } }
        public float CinematicTimeDilation { get { return this[nameof(CinematicTimeDilation)].GetValue<float>(); } set { this[nameof(CinematicTimeDilation)].SetValue<float>(value); } }
        public float DemoPlayTimeDilation { get { return this[nameof(DemoPlayTimeDilation)].GetValue<float>(); } set { this[nameof(DemoPlayTimeDilation)].SetValue<float>(value); } }
        public float MinGlobalTimeDilation { get { return this[nameof(MinGlobalTimeDilation)].GetValue<float>(); } set { this[nameof(MinGlobalTimeDilation)].SetValue<float>(value); } }
        public float MaxGlobalTimeDilation { get { return this[nameof(MaxGlobalTimeDilation)].GetValue<float>(); } set { this[nameof(MaxGlobalTimeDilation)].SetValue<float>(value); } }
        public float MinUndilatedFrameTime { get { return this[nameof(MinUndilatedFrameTime)].GetValue<float>(); } set { this[nameof(MinUndilatedFrameTime)].SetValue<float>(value); } }
        public float MaxUndilatedFrameTime { get { return this[nameof(MaxUndilatedFrameTime)].GetValue<float>(); } set { this[nameof(MaxUndilatedFrameTime)].SetValue<float>(value); } }
        public BroadphaseSettings BroadphaseSettings { get { return this[nameof(BroadphaseSettings)].As<BroadphaseSettings>(); } set { this["BroadphaseSettings"] = value; } }
        public Array<NetViewer> ReplicationViewers { get { return new Array<NetViewer>(this[nameof(ReplicationViewers)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public PlayerState PauserPlayerState { get { return this[nameof(PauserPlayerState)].As<PlayerState>(); } set { this["PauserPlayerState"] = value; } }
        public int MaxNumberOfBookmarks { get { return this[nameof(MaxNumberOfBookmarks)].GetValue<int>(); } set { this[nameof(MaxNumberOfBookmarks)].SetValue<int>(value); } }
        public Object DefaultBookmarkClass { get { return this[nameof(DefaultBookmarkClass)]; } set { this[nameof(DefaultBookmarkClass)] = value; } }
        public Array<BookmarkBase> BookmarkArray { get { return new Array<BookmarkBase>(this[nameof(BookmarkArray)].Address); } }
        public Object LastBookmarkClass { get { return this[nameof(LastBookmarkClass)]; } set { this[nameof(LastBookmarkClass)] = value; } }
        public void OnRep_WorldGravityZ() { Invoke(nameof(OnRep_WorldGravityZ)); }
    }
    public class SkyLight : Info
    {
        public SkyLight(nint addr) : base(addr) { }
        public SkyLightComponent LightComponent { get { return this[nameof(LightComponent)].As<SkyLightComponent>(); } set { this["LightComponent"] = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public void OnRep_bEnabled() { Invoke(nameof(OnRep_bEnabled)); }
    }
    public class Texture : StreamableRenderAsset
    {
        public Texture(nint addr) : base(addr) { }
        public Guid LightingGuid { get { return this[nameof(LightingGuid)].As<Guid>(); } set { this["LightingGuid"] = value; } }
        public int LevelIndex { get { return this[nameof(LevelIndex)].GetValue<int>(); } set { this[nameof(LevelIndex)].SetValue<int>(value); } }
        public int LODBias { get { return this[nameof(LODBias)].GetValue<int>(); } set { this[nameof(LODBias)].SetValue<int>(value); } }
        public byte CompressionSettings { get { return this[nameof(CompressionSettings)].GetValue<byte>(); } set { this[nameof(CompressionSettings)].SetValue<byte>(value); } }
        public byte Filter { get { return this[nameof(Filter)].GetValue<byte>(); } set { this[nameof(Filter)].SetValue<byte>(value); } }
        public ETextureMipLoadOptions MipLoadOptions { get { return (ETextureMipLoadOptions)this[nameof(MipLoadOptions)].GetValue<int>(); } set { this[nameof(MipLoadOptions)].SetValue<int>((int)value); } }
        public byte LODGroup { get { return this[nameof(LODGroup)].GetValue<byte>(); } set { this[nameof(LODGroup)].SetValue<byte>(value); } }
        public PerPlatformFloat Downscale { get { return this[nameof(Downscale)].As<PerPlatformFloat>(); } set { this["Downscale"] = value; } }
        public ETextureDownscaleOptions DownscaleOptions { get { return (ETextureDownscaleOptions)this[nameof(DownscaleOptions)].GetValue<int>(); } set { this[nameof(DownscaleOptions)].SetValue<int>((int)value); } }
        public bool SRGB { get { return this[nameof(SRGB)].Flag; } set { this[nameof(SRGB)].Flag = value; } }
        public bool bNoTiling { get { return this[nameof(bNoTiling)].Flag; } set { this[nameof(bNoTiling)].Flag = value; } }
        public bool VirtualTextureStreaming { get { return this[nameof(VirtualTextureStreaming)].Flag; } set { this[nameof(VirtualTextureStreaming)].Flag = value; } }
        public bool CompressionYCoCg { get { return this[nameof(CompressionYCoCg)].Flag; } set { this[nameof(CompressionYCoCg)].Flag = value; } }
        public bool bNotOfflineProcessed { get { return this[nameof(bNotOfflineProcessed)].Flag; } set { this[nameof(bNotOfflineProcessed)].Flag = value; } }
        public bool bAsyncResourceReleaseHasBeenStarted { get { return this[nameof(bAsyncResourceReleaseHasBeenStarted)].Flag; } set { this[nameof(bAsyncResourceReleaseHasBeenStarted)].Flag = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public long Blueprint_GetMemorySize() { return Invoke<long>(nameof(Blueprint_GetMemorySize)); }
    }
    public class TextureCube : Texture
    {
        public TextureCube(nint addr) : base(addr) { }
    }
    public class PartitionActor : Actor
    {
        public PartitionActor(nint addr) : base(addr) { }
    }
    public class ISMPartitionActor : PartitionActor
    {
        public ISMPartitionActor(nint addr) : base(addr) { }
    }
    public class StaticMeshActor : Actor
    {
        public StaticMeshActor(nint addr) : base(addr) { }
        public StaticMeshComponent StaticMeshComponent { get { return this[nameof(StaticMeshComponent)].As<StaticMeshComponent>(); } set { this["StaticMeshComponent"] = value; } }
        public bool bStaticMeshReplicateMovement { get { return this[nameof(bStaticMeshReplicateMovement)].Flag; } set { this[nameof(bStaticMeshReplicateMovement)].Flag = value; } }
        public ENavDataGatheringMode NavigationGeometryGatheringMode { get { return (ENavDataGatheringMode)this[nameof(NavigationGeometryGatheringMode)].GetValue<int>(); } set { this[nameof(NavigationGeometryGatheringMode)].SetValue<int>((int)value); } }
        public void SetMobility(byte InMobility) { Invoke(nameof(SetMobility), InMobility); }
    }
    public class MaterialInterface : Object
    {
        public MaterialInterface(nint addr) : base(addr) { }
        public SubsurfaceProfile SubsurfaceProfile { get { return this[nameof(SubsurfaceProfile)].As<SubsurfaceProfile>(); } set { this["SubsurfaceProfile"] = value; } }
        public LightmassMaterialInterfaceSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassMaterialInterfaceSettings>(); } set { this["LightmassSettings"] = value; } }
        public Array<MaterialTextureInfo> TextureStreamingData { get { return new Array<MaterialTextureInfo>(this[nameof(TextureStreamingData)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse) { Invoke(nameof(SetForceMipLevelsToBeResident), OverrideForceMiplevelsToBeResident, bForceMiplevelsToBeResidentValue, ForceDuration, CinematicTextureGroups, bFastResponse); }
        public PhysicalMaterialMask GetPhysicalMaterialMask() { return Invoke<PhysicalMaterialMask>(nameof(GetPhysicalMaterialMask)); }
        public PhysicalMaterial GetPhysicalMaterialFromMap(int Index) { return Invoke<PhysicalMaterial>(nameof(GetPhysicalMaterialFromMap), Index); }
        public PhysicalMaterial GetPhysicalMaterial() { return Invoke<PhysicalMaterial>(nameof(GetPhysicalMaterial)); }
        public MaterialParameterInfo GetParameterInfo(byte Association, Object ParameterName, MaterialFunctionInterface LayerFunction) { return Invoke<MaterialParameterInfo>(nameof(GetParameterInfo), Association, ParameterName, LayerFunction); }
        public byte GetBlendMode() { return Invoke<byte>(nameof(GetBlendMode)); }
        public Material GetBaseMaterial() { return Invoke<Material>(nameof(GetBaseMaterial)); }
    }
    public class MaterialInstance : MaterialInterface
    {
        public MaterialInstance(nint addr) : base(addr) { }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public PhysicalMaterial PhysicalMaterialMap { get { return this[nameof(PhysicalMaterialMap)].As<PhysicalMaterial>(); } set { this["PhysicalMaterialMap"] = value; } }
        public MaterialInterface Parent { get { return this[nameof(Parent)].As<MaterialInterface>(); } set { this["Parent"] = value; } }
        public MaterialOverrideNanite NaniteOverrideMaterial { get { return this[nameof(NaniteOverrideMaterial)].As<MaterialOverrideNanite>(); } set { this["NaniteOverrideMaterial"] = value; } }
        public bool bHasStaticPermutationResource { get { return this[nameof(bHasStaticPermutationResource)].Flag; } set { this[nameof(bHasStaticPermutationResource)].Flag = value; } }
        public bool bOverrideSubsurfaceProfile { get { return this[nameof(bOverrideSubsurfaceProfile)].Flag; } set { this[nameof(bOverrideSubsurfaceProfile)].Flag = value; } }
        public Array<ScalarParameterValue> ScalarParameterValues { get { return new Array<ScalarParameterValue>(this[nameof(ScalarParameterValues)].Address); } }
        public Array<VectorParameterValue> VectorParameterValues { get { return new Array<VectorParameterValue>(this[nameof(VectorParameterValues)].Address); } }
        public Array<DoubleVectorParameterValue> DoubleVectorParameterValues { get { return new Array<DoubleVectorParameterValue>(this[nameof(DoubleVectorParameterValues)].Address); } }
        public Array<TextureParameterValue> TextureParameterValues { get { return new Array<TextureParameterValue>(this[nameof(TextureParameterValues)].Address); } }
        public Array<RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues { get { return new Array<RuntimeVirtualTextureParameterValue>(this[nameof(RuntimeVirtualTextureParameterValues)].Address); } }
        public Array<FontParameterValue> FontParameterValues { get { return new Array<FontParameterValue>(this[nameof(FontParameterValues)].Address); } }
        public MaterialInstanceBasePropertyOverrides BasePropertyOverrides { get { return this[nameof(BasePropertyOverrides)].As<MaterialInstanceBasePropertyOverrides>(); } set { this["BasePropertyOverrides"] = value; } }
        public StaticParameterSetRuntimeData StaticParametersRuntime { get { return this[nameof(StaticParametersRuntime)].As<StaticParameterSetRuntimeData>(); } set { this["StaticParametersRuntime"] = value; } }
    }
    public class MaterialInstanceConstant : MaterialInstance
    {
        public MaterialInstanceConstant(nint addr) : base(addr) { }
        public PhysicalMaterialMask PhysMaterialMask { get { return this[nameof(PhysMaterialMask)].As<PhysicalMaterialMask>(); } set { this["PhysMaterialMask"] = value; } }
        public LinearColor K2_GetVectorParameterValue(Object ParameterName) { return Invoke<LinearColor>(nameof(K2_GetVectorParameterValue), ParameterName); }
        public Texture K2_GetTextureParameterValue(Object ParameterName) { return Invoke<Texture>(nameof(K2_GetTextureParameterValue), ParameterName); }
        public float K2_GetScalarParameterValue(Object ParameterName) { return Invoke<float>(nameof(K2_GetScalarParameterValue), ParameterName); }
    }
    public class MaterialExpressionCustomOutput : MaterialExpression
    {
        public MaterialExpressionCustomOutput(nint addr) : base(addr) { }
    }
    public class EdGraphNode : Object
    {
        public EdGraphNode(nint addr) : base(addr) { }
        public Array<EdGraphPin_Deprecated> DeprecatedPins { get { return new Array<EdGraphPin_Deprecated>(this[nameof(DeprecatedPins)].Address); } }
        public int NodePosX { get { return this[nameof(NodePosX)].GetValue<int>(); } set { this[nameof(NodePosX)].SetValue<int>(value); } }
        public int NodePosY { get { return this[nameof(NodePosY)].GetValue<int>(); } set { this[nameof(NodePosY)].SetValue<int>(value); } }
        public int NodeWidth { get { return this[nameof(NodeWidth)].GetValue<int>(); } set { this[nameof(NodeWidth)].SetValue<int>(value); } }
        public int NodeHeight { get { return this[nameof(NodeHeight)].GetValue<int>(); } set { this[nameof(NodeHeight)].SetValue<int>(value); } }
        public byte AdvancedPinDisplay { get { return this[nameof(AdvancedPinDisplay)].GetValue<byte>(); } set { this[nameof(AdvancedPinDisplay)].SetValue<byte>(value); } }
        public ENodeEnabledState EnabledState { get { return (ENodeEnabledState)this[nameof(EnabledState)].GetValue<int>(); } set { this[nameof(EnabledState)].SetValue<int>((int)value); } }
        public bool bDisplayAsDisabled { get { return this[nameof(bDisplayAsDisabled)].Flag; } set { this[nameof(bDisplayAsDisabled)].Flag = value; } }
        public bool bUserSetEnabledState { get { return this[nameof(bUserSetEnabledState)].Flag; } set { this[nameof(bUserSetEnabledState)].Flag = value; } }
        public bool bIsIntermediateNode { get { return this[nameof(bIsIntermediateNode)].Flag; } set { this[nameof(bIsIntermediateNode)].Flag = value; } }
        public bool bHasCompilerMessage { get { return this[nameof(bHasCompilerMessage)].Flag; } set { this[nameof(bHasCompilerMessage)].Flag = value; } }
        public Object NodeComment { get { return this[nameof(NodeComment)]; } set { this[nameof(NodeComment)] = value; } }
        public int ErrorType { get { return this[nameof(ErrorType)].GetValue<int>(); } set { this[nameof(ErrorType)].SetValue<int>(value); } }
        public Object ErrorMsg { get { return this[nameof(ErrorMsg)]; } set { this[nameof(ErrorMsg)] = value; } }
        public Guid NodeGuid { get { return this[nameof(NodeGuid)].As<Guid>(); } set { this["NodeGuid"] = value; } }
    }
    public class BlueprintCore : Object
    {
        public BlueprintCore(nint addr) : base(addr) { }
        public Object SkeletonGeneratedClass { get { return this[nameof(SkeletonGeneratedClass)]; } set { this[nameof(SkeletonGeneratedClass)] = value; } }
        public Object GeneratedClass { get { return this[nameof(GeneratedClass)]; } set { this[nameof(GeneratedClass)] = value; } }
        public bool bLegacyNeedToPurgeSkelRefs { get { return this[nameof(bLegacyNeedToPurgeSkelRefs)].Flag; } set { this[nameof(bLegacyNeedToPurgeSkelRefs)].Flag = value; } }
        public Guid BlueprintGuid { get { return this[nameof(BlueprintGuid)].As<Guid>(); } set { this["BlueprintGuid"] = value; } }
    }
    public class Blueprint : BlueprintCore
    {
        public Blueprint(nint addr) : base(addr) { }
        public Object ParentClass { get { return this[nameof(ParentClass)]; } set { this[nameof(ParentClass)] = value; } }
        public byte BlueprintType { get { return this[nameof(BlueprintType)].GetValue<byte>(); } set { this[nameof(BlueprintType)].SetValue<byte>(value); } }
        public bool bRecompileOnLoad { get { return this[nameof(bRecompileOnLoad)].Flag; } set { this[nameof(bRecompileOnLoad)].Flag = value; } }
        public bool bHasBeenRegenerated { get { return this[nameof(bHasBeenRegenerated)].Flag; } set { this[nameof(bHasBeenRegenerated)].Flag = value; } }
        public bool bIsRegeneratingOnLoad { get { return this[nameof(bIsRegeneratingOnLoad)].Flag; } set { this[nameof(bIsRegeneratingOnLoad)].Flag = value; } }
        public int BlueprintSystemVersion { get { return this[nameof(BlueprintSystemVersion)].GetValue<int>(); } set { this[nameof(BlueprintSystemVersion)].SetValue<int>(value); } }
        public SimpleConstructionScript SimpleConstructionScript { get { return this[nameof(SimpleConstructionScript)].As<SimpleConstructionScript>(); } set { this["SimpleConstructionScript"] = value; } }
        public Array<ActorComponent> ComponentTemplates { get { return new Array<ActorComponent>(this[nameof(ComponentTemplates)].Address); } }
        public Array<TimelineTemplate> Timelines { get { return new Array<TimelineTemplate>(this[nameof(Timelines)].Address); } }
        public Array<BPComponentClassOverride> ComponentClassOverrides { get { return new Array<BPComponentClassOverride>(this[nameof(ComponentClassOverrides)].Address); } }
        public InheritableComponentHandler InheritableComponentHandler { get { return this[nameof(InheritableComponentHandler)].As<InheritableComponentHandler>(); } set { this["InheritableComponentHandler"] = value; } }
    }
    public class CameraActor : Actor
    {
        public CameraActor(nint addr) : base(addr) { }
        public byte AutoActivateForPlayer { get { return this[nameof(AutoActivateForPlayer)].GetValue<byte>(); } set { this[nameof(AutoActivateForPlayer)].SetValue<byte>(value); } }
        public CameraComponent CameraComponent { get { return this[nameof(CameraComponent)].As<CameraComponent>(); } set { this["CameraComponent"] = value; } }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
        public bool bConstrainAspectRatio { get { return this[nameof(bConstrainAspectRatio)].Flag; } set { this[nameof(bConstrainAspectRatio)].Flag = value; } }
        public float AspectRatio { get { return this[nameof(AspectRatio)].GetValue<float>(); } set { this[nameof(AspectRatio)].SetValue<float>(value); } }
        public float FOVAngle { get { return this[nameof(FOVAngle)].GetValue<float>(); } set { this[nameof(FOVAngle)].SetValue<float>(value); } }
        public float PostProcessBlendWeight { get { return this[nameof(PostProcessBlendWeight)].GetValue<float>(); } set { this[nameof(PostProcessBlendWeight)].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public int GetAutoActivatePlayerIndex() { return Invoke<int>(nameof(GetAutoActivatePlayerIndex)); }
    }
    public class ActiveSoundUpdateInterface : Interface
    {
        public ActiveSoundUpdateInterface(nint addr) : base(addr) { }
    }
    public class AnimationAssetExtensions : BlueprintFunctionLibrary
    {
        public AnimationAssetExtensions(nint addr) : base(addr) { }
    }
    public class AnimBlueprintClassSubsystem_PropertyAccess : Object
    {
        public AnimBlueprintClassSubsystem_PropertyAccess(nint addr) : base(addr) { }
    }
    public class AnimationDataModelNotifiesExtensions : BlueprintFunctionLibrary
    {
        public AnimationDataModelNotifiesExtensions(nint addr) : base(addr) { }
    }
    public class AnimLayerInterface : Interface
    {
        public AnimLayerInterface(nint addr) : base(addr) { }
    }
    public class AnimationAsset : Object
    {
        public AnimationAsset(nint addr) : base(addr) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public Array<AnimMetaData> MetaData { get { return new Array<AnimMetaData>(this[nameof(MetaData)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public float GetPlayLength() { return Invoke<float>(nameof(GetPlayLength)); }
    }
    public class AnimSequenceBase : AnimationAsset
    {
        public AnimSequenceBase(nint addr) : base(addr) { }
        public Array<AnimNotifyEvent> Notifies { get { return new Array<AnimNotifyEvent>(this[nameof(Notifies)].Address); } }
        public float SequenceLength { get { return this[nameof(SequenceLength)].GetValue<float>(); } set { this[nameof(SequenceLength)].SetValue<float>(value); } }
        public float RateScale { get { return this[nameof(RateScale)].GetValue<float>(); } set { this[nameof(RateScale)].SetValue<float>(value); } }
        public bool bLoop { get { return this[nameof(bLoop)].Flag; } set { this[nameof(bLoop)].Flag = value; } }
        public RawCurveTracks RawCurveData { get { return this[nameof(RawCurveData)].As<RawCurveTracks>(); } set { this["RawCurveData"] = value; } }
    }
    public class RawAnimSequenceTrackExtensions : BlueprintFunctionLibrary
    {
        public RawAnimSequenceTrackExtensions(nint addr) : base(addr) { }
        public Array<Vector> GetScaleKeys(RawAnimSequenceTrack Track) { return Invoke<Array<Vector>>(nameof(GetScaleKeys), Track); }
        public Array<Quat> GetRotationalKeys(RawAnimSequenceTrack Track) { return Invoke<Array<Quat>>(nameof(GetRotationalKeys), Track); }
        public Array<Vector> GetPositionalKeys(RawAnimSequenceTrack Track) { return Invoke<Array<Vector>>(nameof(GetPositionalKeys), Track); }
    }
    public class AssetExportTask : Object
    {
        public AssetExportTask(nint addr) : base(addr) { }
        public Object Object { get { return this[nameof(Object)].As<Object>(); } set { this["Object"] = value; } }
        public Exporter Exporter { get { return this[nameof(Exporter)].As<Exporter>(); } set { this["Exporter"] = value; } }
        public Object Filename { get { return this[nameof(Filename)]; } set { this[nameof(Filename)] = value; } }
        public bool bSelected { get { return this[nameof(bSelected)].Flag; } set { this[nameof(bSelected)].Flag = value; } }
        public bool bReplaceIdentical { get { return this[nameof(bReplaceIdentical)].Flag; } set { this[nameof(bReplaceIdentical)].Flag = value; } }
        public bool bPrompt { get { return this[nameof(bPrompt)].Flag; } set { this[nameof(bPrompt)].Flag = value; } }
        public bool bAutomated { get { return this[nameof(bAutomated)].Flag; } set { this[nameof(bAutomated)].Flag = value; } }
        public bool bUseFileArchive { get { return this[nameof(bUseFileArchive)].Flag; } set { this[nameof(bUseFileArchive)].Flag = value; } }
        public bool bWriteEmptyFiles { get { return this[nameof(bWriteEmptyFiles)].Flag; } set { this[nameof(bWriteEmptyFiles)].Flag = value; } }
        public Array<Object> IgnoreObjectList { get { return new Array<Object>(this[nameof(IgnoreObjectList)].Address); } }
        public Object Options { get { return this[nameof(Options)].As<Object>(); } set { this["Options"] = value; } }
        public Array<Object> Errors { get { return new Array<Object>(this[nameof(Errors)].Address); } }
    }
    public class AssetManagerSettings : DeveloperSettings
    {
        public AssetManagerSettings(nint addr) : base(addr) { }
        public Array<PrimaryAssetTypeInfo> PrimaryAssetTypesToScan { get { return new Array<PrimaryAssetTypeInfo>(this[nameof(PrimaryAssetTypesToScan)].Address); } }
        public Array<DirectoryPath> DirectoriesToExclude { get { return new Array<DirectoryPath>(this[nameof(DirectoriesToExclude)].Address); } }
        public Array<PrimaryAssetRulesOverride> PrimaryAssetRules { get { return new Array<PrimaryAssetRulesOverride>(this[nameof(PrimaryAssetRules)].Address); } }
        public Array<PrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules { get { return new Array<PrimaryAssetRulesCustomOverride>(this[nameof(CustomPrimaryAssetRules)].Address); } }
        public bool bOnlyCookProductionAssets { get { return this[nameof(bOnlyCookProductionAssets)].Flag; } set { this[nameof(bOnlyCookProductionAssets)].Flag = value; } }
        public bool bShouldManagerDetermineTypeAndName { get { return this[nameof(bShouldManagerDetermineTypeAndName)].Flag; } set { this[nameof(bShouldManagerDetermineTypeAndName)].Flag = value; } }
        public bool bShouldGuessTypeAndNameInEditor { get { return this[nameof(bShouldGuessTypeAndNameInEditor)].Flag; } set { this[nameof(bShouldGuessTypeAndNameInEditor)].Flag = value; } }
        public bool bShouldAcquireMissingChunksOnLoad { get { return this[nameof(bShouldAcquireMissingChunksOnLoad)].Flag; } set { this[nameof(bShouldAcquireMissingChunksOnLoad)].Flag = value; } }
        public bool bShouldWarnAboutInvalidAssets { get { return this[nameof(bShouldWarnAboutInvalidAssets)].Flag; } set { this[nameof(bShouldWarnAboutInvalidAssets)].Flag = value; } }
        public Array<AssetManagerRedirect> PrimaryAssetIdRedirects { get { return new Array<AssetManagerRedirect>(this[nameof(PrimaryAssetIdRedirects)].Address); } }
        public Array<AssetManagerRedirect> PrimaryAssetTypeRedirects { get { return new Array<AssetManagerRedirect>(this[nameof(PrimaryAssetTypeRedirects)].Address); } }
        public Array<AssetManagerRedirect> AssetPathRedirects { get { return new Array<AssetManagerRedirect>(this[nameof(AssetPathRedirects)].Address); } }
        public Object MetaDataTagsForAssetRegistry { get { return this[nameof(MetaDataTagsForAssetRegistry)]; } set { this[nameof(MetaDataTagsForAssetRegistry)] = value; } }
    }
    public class AsyncPhysicsData : Object
    {
        public AsyncPhysicsData(nint addr) : base(addr) { }
        public int ServerFrame { get { return this[nameof(ServerFrame)].GetValue<int>(); } set { this[nameof(ServerFrame)].SetValue<int>(value); } }
        public int ReplicationRedundancy { get { return this[nameof(ReplicationRedundancy)].GetValue<int>(); } set { this[nameof(ReplicationRedundancy)].SetValue<int>(value); } }
    }
    public class AudioPanelWidgetInterface : Interface
    {
        public AudioPanelWidgetInterface(nint addr) : base(addr) { }
        public Object GetIconBrushName() { return Invoke<Object>(nameof(GetIconBrushName)); }
        public Object GetEditorName() { return Invoke<Object>(nameof(GetEditorName)); }
    }
    public class BlendableInterface : Interface
    {
        public BlendableInterface(nint addr) : base(addr) { }
    }
    public class AnalysisProperties : Object
    {
        public AnalysisProperties(nint addr) : base(addr) { }
        public Object Function { get { return this[nameof(Function)]; } set { this[nameof(Function)] = value; } }
    }
    public class BlendSpace : AnimationAsset
    {
        public BlendSpace(nint addr) : base(addr) { }
        public bool bContainsRotationOffsetMeshSpaceSamples { get { return this[nameof(bContainsRotationOffsetMeshSpaceSamples)].Flag; } set { this[nameof(bContainsRotationOffsetMeshSpaceSamples)].Flag = value; } }
        public InterpolationParameter InterpolationParam { get { return this[nameof(InterpolationParam)].As<InterpolationParameter>(); } set { this["InterpolationParam"] = value; } }
        public float TargetWeightInterpolationSpeedPerSec { get { return this[nameof(TargetWeightInterpolationSpeedPerSec)].GetValue<float>(); } set { this[nameof(TargetWeightInterpolationSpeedPerSec)].SetValue<float>(value); } }
        public bool bTargetWeightInterpolationEaseInOut { get { return this[nameof(bTargetWeightInterpolationEaseInOut)].Flag; } set { this[nameof(bTargetWeightInterpolationEaseInOut)].Flag = value; } }
        public bool bAllowMeshSpaceBlending { get { return this[nameof(bAllowMeshSpaceBlending)].Flag; } set { this[nameof(bAllowMeshSpaceBlending)].Flag = value; } }
        public bool bLoop { get { return this[nameof(bLoop)].Flag; } set { this[nameof(bLoop)].Flag = value; } }
        public float AnimLength { get { return this[nameof(AnimLength)].GetValue<float>(); } set { this[nameof(AnimLength)].SetValue<float>(value); } }
        public byte NotifyTriggerMode { get { return this[nameof(NotifyTriggerMode)].GetValue<byte>(); } set { this[nameof(NotifyTriggerMode)].SetValue<byte>(value); } }
        public bool bInterpolateUsingGrid { get { return this[nameof(bInterpolateUsingGrid)].Flag; } set { this[nameof(bInterpolateUsingGrid)].Flag = value; } }
        public EPreferredTriangulationDirection PreferredTriangulationDirection { get { return (EPreferredTriangulationDirection)this[nameof(PreferredTriangulationDirection)].GetValue<int>(); } set { this[nameof(PreferredTriangulationDirection)].SetValue<int>((int)value); } }
        public Array<PerBoneInterpolation> PerBoneBlend { get { return new Array<PerBoneInterpolation>(this[nameof(PerBoneBlend)].Address); } }
        public int SampleIndexWithMarkers { get { return this[nameof(SampleIndexWithMarkers)].GetValue<int>(); } set { this[nameof(SampleIndexWithMarkers)].SetValue<int>(value); } }
        public Array<BlendSample> SampleData { get { return new Array<BlendSample>(this[nameof(SampleData)].Address); } }
        public Array<EditorElement> GridSamples { get { return new Array<EditorElement>(this[nameof(GridSamples)].Address); } }
        public BlendSpaceData BlendSpaceData { get { return this[nameof(BlendSpaceData)].As<BlendSpaceData>(); } set { this["BlendSpaceData"] = value; } }
        public BlendParameter BlendParameters { get { return this[nameof(BlendParameters)].As<BlendParameter>(); } set { this["BlendParameters"] = value; } }
        public byte AxisToScaleAnimation { get { return this[nameof(AxisToScaleAnimation)].GetValue<byte>(); } set { this[nameof(AxisToScaleAnimation)].SetValue<byte>(value); } }
        public Array<int> DimensionIndices { get { return new Array<int>(this[nameof(DimensionIndices)].Address); } }
    }
    public class Breakpoint : Object
    {
        public Breakpoint(nint addr) : base(addr) { }
    }
    public class BlueprintExtension : Object
    {
        public BlueprintExtension(nint addr) : base(addr) { }
    }
    public class BookmarkBase : Object
    {
        public BookmarkBase(nint addr) : base(addr) { }
    }
    public class BookMark2D : BookmarkBase
    {
        public BookMark2D(nint addr) : base(addr) { }
        public float Zoom2D { get { return this[nameof(Zoom2D)].GetValue<float>(); } set { this[nameof(Zoom2D)].SetValue<float>(value); } }
        public IntPoint Location { get { return this[nameof(Location)].As<IntPoint>(); } set { this["Location"] = value; } }
    }
    public class ReflectionCapture : Actor
    {
        public ReflectionCapture(nint addr) : base(addr) { }
        public ReflectionCaptureComponent CaptureComponent { get { return this[nameof(CaptureComponent)].As<ReflectionCaptureComponent>(); } set { this["CaptureComponent"] = value; } }
    }
    public class BoxReflectionCapture : ReflectionCapture
    {
        public BoxReflectionCapture(nint addr) : base(addr) { }
    }
    public class ReflectionCaptureComponent : SceneComponent
    {
        public ReflectionCaptureComponent(nint addr) : base(addr) { }
        public BillboardComponent CaptureOffsetComponent { get { return this[nameof(CaptureOffsetComponent)].As<BillboardComponent>(); } set { this["CaptureOffsetComponent"] = value; } }
        public EReflectionSourceType ReflectionSourceType { get { return (EReflectionSourceType)this[nameof(ReflectionSourceType)].GetValue<int>(); } set { this[nameof(ReflectionSourceType)].SetValue<int>((int)value); } }
        public TextureCube Cubemap { get { return this[nameof(Cubemap)].As<TextureCube>(); } set { this["Cubemap"] = value; } }
        public float SourceCubemapAngle { get { return this[nameof(SourceCubemapAngle)].GetValue<float>(); } set { this[nameof(SourceCubemapAngle)].SetValue<float>(value); } }
        public float Brightness { get { return this[nameof(Brightness)].GetValue<float>(); } set { this[nameof(Brightness)].SetValue<float>(value); } }
        public Vector CaptureOffset { get { return this[nameof(CaptureOffset)].As<Vector>(); } set { this["CaptureOffset"] = value; } }
        public Guid MapBuildDataId { get { return this[nameof(MapBuildDataId)].As<Guid>(); } set { this["MapBuildDataId"] = value; } }
    }
    public class BoxReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public BoxReflectionCaptureComponent(nint addr) : base(addr) { }
        public float BoxTransitionDistance { get { return this[nameof(BoxTransitionDistance)].GetValue<float>(); } set { this[nameof(BoxTransitionDistance)].SetValue<float>(value); } }
        public BoxComponent PreviewInfluenceBox { get { return this[nameof(PreviewInfluenceBox)].As<BoxComponent>(); } set { this["PreviewInfluenceBox"] = value; } }
        public BoxComponent PreviewCaptureBox { get { return this[nameof(PreviewCaptureBox)].As<BoxComponent>(); } set { this["PreviewCaptureBox"] = value; } }
    }
    public class BuiltInAttributesExtensions : BlueprintFunctionLibrary
    {
        public BuiltInAttributesExtensions(nint addr) : base(addr) { }
    }
    public class ChildConnection : NetConnection
    {
        public ChildConnection(nint addr) : base(addr) { }
        public NetConnection Parent { get { return this[nameof(Parent)].As<NetConnection>(); } set { this["Parent"] = value; } }
    }
    public class PlatformInterfaceBase : Object
    {
        public PlatformInterfaceBase(nint addr) : base(addr) { }
        public Array<DelegateArray> AllDelegates { get { return new Array<DelegateArray>(this[nameof(AllDelegates)].Address); } }
    }
    public class CloudStorageBase : PlatformInterfaceBase
    {
        public CloudStorageBase(nint addr) : base(addr) { }
        public Array<Object> LocalCloudFiles { get { return new Array<Object>(this[nameof(LocalCloudFiles)].Address); } }
        public bool bSuppressDelegateCalls { get { return this[nameof(bSuppressDelegateCalls)].Flag; } set { this[nameof(bSuppressDelegateCalls)].Flag = value; } }
    }
    public class ControlChannel : Channel
    {
        public ControlChannel(nint addr) : base(addr) { }
    }
    public class DataStreamChannel : Channel
    {
        public DataStreamChannel(nint addr) : base(addr) { }
    }
    public class DemoNetConnection : NetConnection
    {
        public DemoNetConnection(nint addr) : base(addr) { }
    }
    public class PendingNetGame : Object
    {
        public PendingNetGame(nint addr) : base(addr) { }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
    }
    public class DemoPendingNetGame : PendingNetGame
    {
        public DemoPendingNetGame(nint addr) : base(addr) { }
    }
    public class DeviceProfileFragment : Object
    {
        public DeviceProfileFragment(nint addr) : base(addr) { }
        public Array<Object> CVars { get { return new Array<Object>(this[nameof(CVars)].Address); } }
    }
    public class DialogueSoundWaveProxy : SoundBase
    {
        public DialogueSoundWaveProxy(nint addr) : base(addr) { }
    }
    public class Light : Actor
    {
        public Light(nint addr) : base(addr) { }
        public LightComponent LightComponent { get { return this[nameof(LightComponent)].As<LightComponent>(); } set { this["LightComponent"] = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public void ToggleEnabled() { Invoke(nameof(ToggleEnabled)); }
        public void SetLightFunctionScale(Vector NewLightFunctionScale) { Invoke(nameof(SetLightFunctionScale), NewLightFunctionScale); }
        public void SetLightFunctionMaterial(MaterialInterface NewLightFunctionMaterial) { Invoke(nameof(SetLightFunctionMaterial), NewLightFunctionMaterial); }
        public void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) { Invoke(nameof(SetLightFunctionFadeDistance), NewLightFunctionFadeDistance); }
        public void SetLightColor(LinearColor NewLightColor) { Invoke(nameof(SetLightColor), NewLightColor); }
        public void SetEnabled(bool bSetEnabled) { Invoke(nameof(SetEnabled), bSetEnabled); }
        public void SetCastShadows(bool bNewValue) { Invoke(nameof(SetCastShadows), bNewValue); }
        public void SetBrightness(float NewBrightness) { Invoke(nameof(SetBrightness), NewBrightness); }
        public void SetAffectTranslucentLighting(bool bNewValue) { Invoke(nameof(SetAffectTranslucentLighting), bNewValue); }
        public void OnRep_bEnabled() { Invoke(nameof(OnRep_bEnabled)); }
        public bool IsEnabled() { return Invoke<bool>(nameof(IsEnabled)); }
        public LinearColor GetLightColor() { return Invoke<LinearColor>(nameof(GetLightColor)); }
        public float GetBrightness() { return Invoke<float>(nameof(GetBrightness)); }
    }
    public class DirectionalLight : Light
    {
        public DirectionalLight(nint addr) : base(addr) { }
    }
    public class Distribution : Object
    {
        public Distribution(nint addr) : base(addr) { }
    }
    public class DistributionFloat : Distribution
    {
        public DistributionFloat(nint addr) : base(addr) { }
        public bool bCanBeBaked { get { return this[nameof(bCanBeBaked)].Flag; } set { this[nameof(bCanBeBaked)].Flag = value; } }
        public bool bBakedDataSuccesfully { get { return this[nameof(bBakedDataSuccesfully)].Flag; } set { this[nameof(bBakedDataSuccesfully)].Flag = value; } }
    }
    public class DistributionFloatConstant : DistributionFloat
    {
        public DistributionFloatConstant(nint addr) : base(addr) { }
        public float Constant { get { return this[nameof(Constant)].GetValue<float>(); } set { this[nameof(Constant)].SetValue<float>(value); } }
    }
    public class DistributionFloatConstantCurve : DistributionFloat
    {
        public DistributionFloatConstantCurve(nint addr) : base(addr) { }
        public InterpCurveFloat ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveFloat>(); } set { this["ConstantCurve"] = value; } }
    }
    public class DistributionFloatParameterBase : DistributionFloatConstant
    {
        public DistributionFloatParameterBase(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public float MinInput { get { return this[nameof(MinInput)].GetValue<float>(); } set { this[nameof(MinInput)].SetValue<float>(value); } }
        public float MaxInput { get { return this[nameof(MaxInput)].GetValue<float>(); } set { this[nameof(MaxInput)].SetValue<float>(value); } }
        public float MinOutput { get { return this[nameof(MinOutput)].GetValue<float>(); } set { this[nameof(MinOutput)].SetValue<float>(value); } }
        public float MaxOutput { get { return this[nameof(MaxOutput)].GetValue<float>(); } set { this[nameof(MaxOutput)].SetValue<float>(value); } }
        public byte ParamMode { get { return this[nameof(ParamMode)].GetValue<byte>(); } set { this[nameof(ParamMode)].SetValue<byte>(value); } }
    }
    public class DistributionFloatParticleParameter : DistributionFloatParameterBase
    {
        public DistributionFloatParticleParameter(nint addr) : base(addr) { }
    }
    public class DistributionFloatUniform : DistributionFloat
    {
        public DistributionFloatUniform(nint addr) : base(addr) { }
        public float Min { get { return this[nameof(Min)].GetValue<float>(); } set { this[nameof(Min)].SetValue<float>(value); } }
        public float Max { get { return this[nameof(Max)].GetValue<float>(); } set { this[nameof(Max)].SetValue<float>(value); } }
    }
    public class DistributionFloatUniformCurve : DistributionFloat
    {
        public DistributionFloatUniformCurve(nint addr) : base(addr) { }
        public InterpCurveVector2D ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveVector2D>(); } set { this["ConstantCurve"] = value; } }
    }
    public class DistributionVector : Distribution
    {
        public DistributionVector(nint addr) : base(addr) { }
        public bool bCanBeBaked { get { return this[nameof(bCanBeBaked)].Flag; } set { this[nameof(bCanBeBaked)].Flag = value; } }
        public bool bIsDirty { get { return this[nameof(bIsDirty)].Flag; } set { this[nameof(bIsDirty)].Flag = value; } }
        public bool bBakedDataSuccesfully { get { return this[nameof(bBakedDataSuccesfully)].Flag; } set { this[nameof(bBakedDataSuccesfully)].Flag = value; } }
    }
    public class DistributionVectorConstant : DistributionVector
    {
        public DistributionVectorConstant(nint addr) : base(addr) { }
        public Vector Constant { get { return this[nameof(Constant)].As<Vector>(); } set { this["Constant"] = value; } }
        public bool bLockAxes { get { return this[nameof(bLockAxes)].Flag; } set { this[nameof(bLockAxes)].Flag = value; } }
        public byte LockedAxes { get { return this[nameof(LockedAxes)].GetValue<byte>(); } set { this[nameof(LockedAxes)].SetValue<byte>(value); } }
    }
    public class DistributionVectorConstantCurve : DistributionVector
    {
        public DistributionVectorConstantCurve(nint addr) : base(addr) { }
        public InterpCurveVector ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveVector>(); } set { this["ConstantCurve"] = value; } }
        public bool bLockAxes { get { return this[nameof(bLockAxes)].Flag; } set { this[nameof(bLockAxes)].Flag = value; } }
        public byte LockedAxes { get { return this[nameof(LockedAxes)].GetValue<byte>(); } set { this[nameof(LockedAxes)].SetValue<byte>(value); } }
    }
    public class DistributionVectorParameterBase : DistributionVectorConstant
    {
        public DistributionVectorParameterBase(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Vector MinInput { get { return this[nameof(MinInput)].As<Vector>(); } set { this["MinInput"] = value; } }
        public Vector MaxInput { get { return this[nameof(MaxInput)].As<Vector>(); } set { this["MaxInput"] = value; } }
        public Vector MinOutput { get { return this[nameof(MinOutput)].As<Vector>(); } set { this["MinOutput"] = value; } }
        public Vector MaxOutput { get { return this[nameof(MaxOutput)].As<Vector>(); } set { this["MaxOutput"] = value; } }
        public byte ParamModes { get { return this[nameof(ParamModes)].GetValue<byte>(); } set { this[nameof(ParamModes)].SetValue<byte>(value); } }
    }
    public class DistributionVectorParticleParameter : DistributionVectorParameterBase
    {
        public DistributionVectorParticleParameter(nint addr) : base(addr) { }
    }
    public class DistributionVectorUniform : DistributionVector
    {
        public DistributionVectorUniform(nint addr) : base(addr) { }
        public Vector Max { get { return this[nameof(Max)].As<Vector>(); } set { this["Max"] = value; } }
        public Vector Min { get { return this[nameof(Min)].As<Vector>(); } set { this["Min"] = value; } }
        public bool bLockAxes { get { return this[nameof(bLockAxes)].Flag; } set { this[nameof(bLockAxes)].Flag = value; } }
        public byte LockedAxes { get { return this[nameof(LockedAxes)].GetValue<byte>(); } set { this[nameof(LockedAxes)].SetValue<byte>(value); } }
        public byte MirrorFlags { get { return this[nameof(MirrorFlags)].GetValue<byte>(); } set { this[nameof(MirrorFlags)].SetValue<byte>(value); } }
        public bool bUseExtremes { get { return this[nameof(bUseExtremes)].Flag; } set { this[nameof(bUseExtremes)].Flag = value; } }
    }
    public class DistributionVectorUniformCurve : DistributionVector
    {
        public DistributionVectorUniformCurve(nint addr) : base(addr) { }
        public InterpCurveTwoVectors ConstantCurve { get { return this[nameof(ConstantCurve)].As<InterpCurveTwoVectors>(); } set { this["ConstantCurve"] = value; } }
        public bool bLockAxes1 { get { return this[nameof(bLockAxes1)].Flag; } set { this[nameof(bLockAxes1)].Flag = value; } }
        public bool bLockAxes2 { get { return this[nameof(bLockAxes2)].Flag; } set { this[nameof(bLockAxes2)].Flag = value; } }
        public byte LockedAxes { get { return this[nameof(LockedAxes)].GetValue<byte>(); } set { this[nameof(LockedAxes)].SetValue<byte>(value); } }
        public byte MirrorFlags { get { return this[nameof(MirrorFlags)].GetValue<byte>(); } set { this[nameof(MirrorFlags)].SetValue<byte>(value); } }
        public bool bUseExtremes { get { return this[nameof(bUseExtremes)].Flag; } set { this[nameof(bUseExtremes)].Flag = value; } }
    }
    public class GraphNodeContextMenuContext : Object
    {
        public GraphNodeContextMenuContext(nint addr) : base(addr) { }
        public Blueprint Blueprint { get { return this[nameof(Blueprint)].As<Blueprint>(); } set { this["Blueprint"] = value; } }
        public EdGraph Graph { get { return this[nameof(Graph)].As<EdGraph>(); } set { this["Graph"] = value; } }
        public EdGraphNode Node { get { return this[nameof(Node)].As<EdGraphNode>(); } set { this["Node"] = value; } }
        public bool bIsDebugging { get { return this[nameof(bIsDebugging)].Flag; } set { this[nameof(bIsDebugging)].Flag = value; } }
    }
    public class EdGraphPin_Deprecated : Object
    {
        public EdGraphPin_Deprecated(nint addr) : base(addr) { }
        public Object PinName { get { return this[nameof(PinName)]; } set { this[nameof(PinName)] = value; } }
        public Object PinToolTip { get { return this[nameof(PinToolTip)]; } set { this[nameof(PinToolTip)] = value; } }
        public byte Direction { get { return this[nameof(Direction)].GetValue<byte>(); } set { this[nameof(Direction)].SetValue<byte>(value); } }
        public EdGraphPinType PinType { get { return this[nameof(PinType)].As<EdGraphPinType>(); } set { this["PinType"] = value; } }
        public Object DefaultValue { get { return this[nameof(DefaultValue)]; } set { this[nameof(DefaultValue)] = value; } }
        public Object AutogeneratedDefaultValue { get { return this[nameof(AutogeneratedDefaultValue)]; } set { this[nameof(AutogeneratedDefaultValue)] = value; } }
        public Object DefaultObject { get { return this[nameof(DefaultObject)].As<Object>(); } set { this["DefaultObject"] = value; } }
        public Object DefaultTextValue { get { return this[nameof(DefaultTextValue)]; } set { this[nameof(DefaultTextValue)] = value; } }
        public Array<EdGraphPin_Deprecated> LinkedTo { get { return new Array<EdGraphPin_Deprecated>(this[nameof(LinkedTo)].Address); } }
        public Array<EdGraphPin_Deprecated> SubPins { get { return new Array<EdGraphPin_Deprecated>(this[nameof(SubPins)].Address); } }
        public EdGraphPin_Deprecated ParentPin { get { return this[nameof(ParentPin)].As<EdGraphPin_Deprecated>(); } set { this["ParentPin"] = value; } }
        public EdGraphPin_Deprecated ReferencePassThroughConnection { get { return this[nameof(ReferencePassThroughConnection)].As<EdGraphPin_Deprecated>(); } set { this["ReferencePassThroughConnection"] = value; } }
    }
    public class EdGraphSchema : Object
    {
        public EdGraphSchema(nint addr) : base(addr) { }
    }
    public class Emitter : Actor
    {
        public Emitter(nint addr) : base(addr) { }
        public ParticleSystemComponent ParticleSystemComponent { get { return this[nameof(ParticleSystemComponent)].As<ParticleSystemComponent>(); } set { this["ParticleSystemComponent"] = value; } }
        public bool bDestroyOnSystemFinish { get { return this[nameof(bDestroyOnSystemFinish)].Flag; } set { this[nameof(bDestroyOnSystemFinish)].Flag = value; } }
        public bool bPostUpdateTickGroup { get { return this[nameof(bPostUpdateTickGroup)].Flag; } set { this[nameof(bPostUpdateTickGroup)].Flag = value; } }
        public bool bCurrentlyActive { get { return this[nameof(bCurrentlyActive)].Flag; } set { this[nameof(bCurrentlyActive)].Flag = value; } }
        public Object OnParticleSpawn { get { return this[nameof(OnParticleSpawn)]; } set { this[nameof(OnParticleSpawn)] = value; } }
        public Object OnParticleBurst { get { return this[nameof(OnParticleBurst)]; } set { this[nameof(OnParticleBurst)] = value; } }
        public Object OnParticleDeath { get { return this[nameof(OnParticleDeath)]; } set { this[nameof(OnParticleDeath)] = value; } }
        public Object OnParticleCollide { get { return this[nameof(OnParticleCollide)]; } set { this[nameof(OnParticleCollide)] = value; } }
        public void ToggleActive() { Invoke(nameof(ToggleActive)); }
        public void SetVectorParameter(Object ParameterName, Vector Param) { Invoke(nameof(SetVectorParameter), ParameterName, Param); }
        public void SetTemplate(ParticleSystem NewTemplate) { Invoke(nameof(SetTemplate), NewTemplate); }
        public void SetMaterialParameter(Object ParameterName, MaterialInterface Param) { Invoke(nameof(SetMaterialParameter), ParameterName, Param); }
        public void SetFloatParameter(Object ParameterName, float Param) { Invoke(nameof(SetFloatParameter), ParameterName, Param); }
        public void SetColorParameter(Object ParameterName, LinearColor Param) { Invoke(nameof(SetColorParameter), ParameterName, Param); }
        public void SetActorParameter(Object ParameterName, Actor Param) { Invoke(nameof(SetActorParameter), ParameterName, Param); }
        public void OnRep_bCurrentlyActive() { Invoke(nameof(OnRep_bCurrentlyActive)); }
        public void OnParticleSystemFinished(ParticleSystemComponent FinishedComponent) { Invoke(nameof(OnParticleSystemFinished), FinishedComponent); }
        public bool IsActive() { return Invoke<bool>(nameof(IsActive)); }
        public void Deactivate() { Invoke(nameof(Deactivate)); }
        public void Activate() { Invoke(nameof(Activate)); }
    }
    public class EmitterCameraLensEffectBase : Emitter
    {
        public EmitterCameraLensEffectBase(nint addr) : base(addr) { }
        public ParticleSystem PS_CameraEffect { get { return this[nameof(PS_CameraEffect)].As<ParticleSystem>(); } set { this["PS_CameraEffect"] = value; } }
        public PlayerCameraManager BaseCamera { get { return this[nameof(BaseCamera)].As<PlayerCameraManager>(); } set { this["BaseCamera"] = value; } }
        public Transform RelativeTransform { get { return this[nameof(RelativeTransform)].As<Transform>(); } set { this["RelativeTransform"] = value; } }
        public float BaseFov { get { return this[nameof(BaseFov)].GetValue<float>(); } set { this[nameof(BaseFov)].SetValue<float>(value); } }
        public bool bAllowMultipleInstances { get { return this[nameof(bAllowMultipleInstances)].Flag; } set { this[nameof(bAllowMultipleInstances)].Flag = value; } }
        public bool bResetWhenRetriggered { get { return this[nameof(bResetWhenRetriggered)].Flag; } set { this[nameof(bResetWhenRetriggered)].Flag = value; } }
        public Array<Object> EmittersToTreatAsSame { get { return new Array<Object>(this[nameof(EmittersToTreatAsSame)].Address); } }
        public float DistFromCamera { get { return this[nameof(DistFromCamera)].GetValue<float>(); } set { this[nameof(DistFromCamera)].SetValue<float>(value); } }
    }
    public class ViewModeUtils : Object
    {
        public ViewModeUtils(nint addr) : base(addr) { }
    }
    public class EngineBaseTypes : Object
    {
        public EngineBaseTypes(nint addr) : base(addr) { }
    }
    public class EngineTypes : Object
    {
        public EngineTypes(nint addr) : base(addr) { }
    }
    public class ExponentialHeightFog : Info
    {
        public ExponentialHeightFog(nint addr) : base(addr) { }
        public ExponentialHeightFogComponent Component { get { return this[nameof(Component)].As<ExponentialHeightFogComponent>(); } set { this["Component"] = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public void OnRep_bEnabled() { Invoke(nameof(OnRep_bEnabled)); }
    }
    public class ExponentialHeightFogComponent : SceneComponent
    {
        public ExponentialHeightFogComponent(nint addr) : base(addr) { }
        public float FogDensity { get { return this[nameof(FogDensity)].GetValue<float>(); } set { this[nameof(FogDensity)].SetValue<float>(value); } }
        public float FogHeightFalloff { get { return this[nameof(FogHeightFalloff)].GetValue<float>(); } set { this[nameof(FogHeightFalloff)].SetValue<float>(value); } }
        public ExponentialHeightFogData SecondFogData { get { return this[nameof(SecondFogData)].As<ExponentialHeightFogData>(); } set { this["SecondFogData"] = value; } }
        public LinearColor FogInscatteringColor { get { return this[nameof(FogInscatteringColor)].As<LinearColor>(); } set { this["FogInscatteringColor"] = value; } }
        public LinearColor FogInscatteringLuminance { get { return this[nameof(FogInscatteringLuminance)].As<LinearColor>(); } set { this["FogInscatteringLuminance"] = value; } }
        public LinearColor SkyAtmosphereAmbientContributionColorScale { get { return this[nameof(SkyAtmosphereAmbientContributionColorScale)].As<LinearColor>(); } set { this["SkyAtmosphereAmbientContributionColorScale"] = value; } }
        public TextureCube InscatteringColorCubemap { get { return this[nameof(InscatteringColorCubemap)].As<TextureCube>(); } set { this["InscatteringColorCubemap"] = value; } }
        public float InscatteringColorCubemapAngle { get { return this[nameof(InscatteringColorCubemapAngle)].GetValue<float>(); } set { this[nameof(InscatteringColorCubemapAngle)].SetValue<float>(value); } }
        public LinearColor InscatteringTextureTint { get { return this[nameof(InscatteringTextureTint)].As<LinearColor>(); } set { this["InscatteringTextureTint"] = value; } }
        public float FullyDirectionalInscatteringColorDistance { get { return this[nameof(FullyDirectionalInscatteringColorDistance)].GetValue<float>(); } set { this[nameof(FullyDirectionalInscatteringColorDistance)].SetValue<float>(value); } }
        public float NonDirectionalInscatteringColorDistance { get { return this[nameof(NonDirectionalInscatteringColorDistance)].GetValue<float>(); } set { this[nameof(NonDirectionalInscatteringColorDistance)].SetValue<float>(value); } }
        public float DirectionalInscatteringExponent { get { return this[nameof(DirectionalInscatteringExponent)].GetValue<float>(); } set { this[nameof(DirectionalInscatteringExponent)].SetValue<float>(value); } }
        public float DirectionalInscatteringStartDistance { get { return this[nameof(DirectionalInscatteringStartDistance)].GetValue<float>(); } set { this[nameof(DirectionalInscatteringStartDistance)].SetValue<float>(value); } }
        public LinearColor DirectionalInscatteringColor { get { return this[nameof(DirectionalInscatteringColor)].As<LinearColor>(); } set { this["DirectionalInscatteringColor"] = value; } }
        public LinearColor DirectionalInscatteringLuminance { get { return this[nameof(DirectionalInscatteringLuminance)].As<LinearColor>(); } set { this["DirectionalInscatteringLuminance"] = value; } }
        public float FogMaxOpacity { get { return this[nameof(FogMaxOpacity)].GetValue<float>(); } set { this[nameof(FogMaxOpacity)].SetValue<float>(value); } }
        public float StartDistance { get { return this[nameof(StartDistance)].GetValue<float>(); } set { this[nameof(StartDistance)].SetValue<float>(value); } }
        public float FogCutoffDistance { get { return this[nameof(FogCutoffDistance)].GetValue<float>(); } set { this[nameof(FogCutoffDistance)].SetValue<float>(value); } }
        public bool bEnableVolumetricFog { get { return this[nameof(bEnableVolumetricFog)].Flag; } set { this[nameof(bEnableVolumetricFog)].Flag = value; } }
        public float VolumetricFogScatteringDistribution { get { return this[nameof(VolumetricFogScatteringDistribution)].GetValue<float>(); } set { this[nameof(VolumetricFogScatteringDistribution)].SetValue<float>(value); } }
        public Color VolumetricFogAlbedo { get { return this[nameof(VolumetricFogAlbedo)].As<Color>(); } set { this["VolumetricFogAlbedo"] = value; } }
        public LinearColor VolumetricFogEmissive { get { return this[nameof(VolumetricFogEmissive)].As<LinearColor>(); } set { this["VolumetricFogEmissive"] = value; } }
        public float VolumetricFogExtinctionScale { get { return this[nameof(VolumetricFogExtinctionScale)].GetValue<float>(); } set { this[nameof(VolumetricFogExtinctionScale)].SetValue<float>(value); } }
        public float VolumetricFogDistance { get { return this[nameof(VolumetricFogDistance)].GetValue<float>(); } set { this[nameof(VolumetricFogDistance)].SetValue<float>(value); } }
        public float VolumetricFogStartDistance { get { return this[nameof(VolumetricFogStartDistance)].GetValue<float>(); } set { this[nameof(VolumetricFogStartDistance)].SetValue<float>(value); } }
        public float VolumetricFogNearFadeInDistance { get { return this[nameof(VolumetricFogNearFadeInDistance)].GetValue<float>(); } set { this[nameof(VolumetricFogNearFadeInDistance)].SetValue<float>(value); } }
        public float VolumetricFogStaticLightingScatteringIntensity { get { return this[nameof(VolumetricFogStaticLightingScatteringIntensity)].GetValue<float>(); } set { this[nameof(VolumetricFogStaticLightingScatteringIntensity)].SetValue<float>(value); } }
        public bool bOverrideLightColorsWithFogInscatteringColors { get { return this[nameof(bOverrideLightColorsWithFogInscatteringColors)].Flag; } set { this[nameof(bOverrideLightColorsWithFogInscatteringColors)].Flag = value; } }
        public void SetVolumetricFogScatteringDistribution(float NewValue) { Invoke(nameof(SetVolumetricFogScatteringDistribution), NewValue); }
        public void SetVolumetricFogExtinctionScale(float NewValue) { Invoke(nameof(SetVolumetricFogExtinctionScale), NewValue); }
        public void SetVolumetricFogEmissive(LinearColor NewValue) { Invoke(nameof(SetVolumetricFogEmissive), NewValue); }
        public void SetVolumetricFogDistance(float NewValue) { Invoke(nameof(SetVolumetricFogDistance), NewValue); }
        public void SetVolumetricFogAlbedo(Color NewValue) { Invoke(nameof(SetVolumetricFogAlbedo), NewValue); }
        public void SetVolumetricFog(bool bNewValue) { Invoke(nameof(SetVolumetricFog), bNewValue); }
        public void SetStartDistance(float Value) { Invoke(nameof(SetStartDistance), Value); }
        public void SetSecondFogHeightOffset(float Value) { Invoke(nameof(SetSecondFogHeightOffset), Value); }
        public void SetSecondFogHeightFalloff(float Value) { Invoke(nameof(SetSecondFogHeightFalloff), Value); }
        public void SetSecondFogDensity(float Value) { Invoke(nameof(SetSecondFogDensity), Value); }
        public void SetSecondFogData(ExponentialHeightFogData NewValue) { Invoke(nameof(SetSecondFogData), NewValue); }
        public void SetNonDirectionalInscatteringColorDistance(float Value) { Invoke(nameof(SetNonDirectionalInscatteringColorDistance), Value); }
        public void SetInscatteringTextureTint(LinearColor Value) { Invoke(nameof(SetInscatteringTextureTint), Value); }
        public void SetInscatteringColorCubemapAngle(float Value) { Invoke(nameof(SetInscatteringColorCubemapAngle), Value); }
        public void SetInscatteringColorCubemap(TextureCube Value) { Invoke(nameof(SetInscatteringColorCubemap), Value); }
        public void SetFullyDirectionalInscatteringColorDistance(float Value) { Invoke(nameof(SetFullyDirectionalInscatteringColorDistance), Value); }
        public void SetFogMaxOpacity(float Value) { Invoke(nameof(SetFogMaxOpacity), Value); }
        public void SetFogInscatteringColor(LinearColor Value) { Invoke(nameof(SetFogInscatteringColor), Value); }
        public void SetFogHeightFalloff(float Value) { Invoke(nameof(SetFogHeightFalloff), Value); }
        public void SetFogDensity(float Value) { Invoke(nameof(SetFogDensity), Value); }
        public void SetFogCutoffDistance(float Value) { Invoke(nameof(SetFogCutoffDistance), Value); }
        public void SetDirectionalInscatteringStartDistance(float Value) { Invoke(nameof(SetDirectionalInscatteringStartDistance), Value); }
        public void SetDirectionalInscatteringExponent(float Value) { Invoke(nameof(SetDirectionalInscatteringExponent), Value); }
        public void SetDirectionalInscatteringColor(LinearColor Value) { Invoke(nameof(SetDirectionalInscatteringColor), Value); }
    }
    public class FontImportOptions : Object
    {
        public FontImportOptions(nint addr) : base(addr) { }
        public FontImportOptionsData Data { get { return this[nameof(Data)].As<FontImportOptionsData>(); } set { this["Data"] = value; } }
    }
    public class ForceFeedbackAttenuation : Object
    {
        public ForceFeedbackAttenuation(nint addr) : base(addr) { }
        public ForceFeedbackAttenuationSettings Attenuation { get { return this[nameof(Attenuation)].As<ForceFeedbackAttenuationSettings>(); } set { this["Attenuation"] = value; } }
    }
    public class GameNetworkManager : Info
    {
        public GameNetworkManager(nint addr) : base(addr) { }
        public float BadPacketLossThreshold { get { return this[nameof(BadPacketLossThreshold)].GetValue<float>(); } set { this[nameof(BadPacketLossThreshold)].SetValue<float>(value); } }
        public float SeverePacketLossThreshold { get { return this[nameof(SeverePacketLossThreshold)].GetValue<float>(); } set { this[nameof(SeverePacketLossThreshold)].SetValue<float>(value); } }
        public int BadPingThreshold { get { return this[nameof(BadPingThreshold)].GetValue<int>(); } set { this[nameof(BadPingThreshold)].SetValue<int>(value); } }
        public int SeverePingThreshold { get { return this[nameof(SeverePingThreshold)].GetValue<int>(); } set { this[nameof(SeverePingThreshold)].SetValue<int>(value); } }
        public int AdjustedNetSpeed { get { return this[nameof(AdjustedNetSpeed)].GetValue<int>(); } set { this[nameof(AdjustedNetSpeed)].SetValue<int>(value); } }
        public float LastNetSpeedUpdateTime { get { return this[nameof(LastNetSpeedUpdateTime)].GetValue<float>(); } set { this[nameof(LastNetSpeedUpdateTime)].SetValue<float>(value); } }
        public int TotalNetBandwidth { get { return this[nameof(TotalNetBandwidth)].GetValue<int>(); } set { this[nameof(TotalNetBandwidth)].SetValue<int>(value); } }
        public int MinDynamicBandwidth { get { return this[nameof(MinDynamicBandwidth)].GetValue<int>(); } set { this[nameof(MinDynamicBandwidth)].SetValue<int>(value); } }
        public int MaxDynamicBandwidth { get { return this[nameof(MaxDynamicBandwidth)].GetValue<int>(); } set { this[nameof(MaxDynamicBandwidth)].SetValue<int>(value); } }
        public bool bIsStandbyCheckingEnabled { get { return this[nameof(bIsStandbyCheckingEnabled)].Flag; } set { this[nameof(bIsStandbyCheckingEnabled)].Flag = value; } }
        public bool bHasStandbyCheatTriggered { get { return this[nameof(bHasStandbyCheatTriggered)].Flag; } set { this[nameof(bHasStandbyCheatTriggered)].Flag = value; } }
        public float StandbyRxCheatTime { get { return this[nameof(StandbyRxCheatTime)].GetValue<float>(); } set { this[nameof(StandbyRxCheatTime)].SetValue<float>(value); } }
        public float StandbyTxCheatTime { get { return this[nameof(StandbyTxCheatTime)].GetValue<float>(); } set { this[nameof(StandbyTxCheatTime)].SetValue<float>(value); } }
        public float PercentMissingForRxStandby { get { return this[nameof(PercentMissingForRxStandby)].GetValue<float>(); } set { this[nameof(PercentMissingForRxStandby)].SetValue<float>(value); } }
        public float PercentMissingForTxStandby { get { return this[nameof(PercentMissingForTxStandby)].GetValue<float>(); } set { this[nameof(PercentMissingForTxStandby)].SetValue<float>(value); } }
        public float PercentForBadPing { get { return this[nameof(PercentForBadPing)].GetValue<float>(); } set { this[nameof(PercentForBadPing)].SetValue<float>(value); } }
        public float JoinInProgressStandbyWaitTime { get { return this[nameof(JoinInProgressStandbyWaitTime)].GetValue<float>(); } set { this[nameof(JoinInProgressStandbyWaitTime)].SetValue<float>(value); } }
        public float MoveRepSize { get { return this[nameof(MoveRepSize)].GetValue<float>(); } set { this[nameof(MoveRepSize)].SetValue<float>(value); } }
        public float MAXPOSITIONERRORSQUARED { get { return this[nameof(MAXPOSITIONERRORSQUARED)].GetValue<float>(); } set { this[nameof(MAXPOSITIONERRORSQUARED)].SetValue<float>(value); } }
        public float MAXNEARZEROVELOCITYSQUARED { get { return this[nameof(MAXNEARZEROVELOCITYSQUARED)].GetValue<float>(); } set { this[nameof(MAXNEARZEROVELOCITYSQUARED)].SetValue<float>(value); } }
        public float CLIENTADJUSTUPDATECOST { get { return this[nameof(CLIENTADJUSTUPDATECOST)].GetValue<float>(); } set { this[nameof(CLIENTADJUSTUPDATECOST)].SetValue<float>(value); } }
        public float MAXCLIENTUPDATEINTERVAL { get { return this[nameof(MAXCLIENTUPDATEINTERVAL)].GetValue<float>(); } set { this[nameof(MAXCLIENTUPDATEINTERVAL)].SetValue<float>(value); } }
        public float MaxClientForcedUpdateDuration { get { return this[nameof(MaxClientForcedUpdateDuration)].GetValue<float>(); } set { this[nameof(MaxClientForcedUpdateDuration)].SetValue<float>(value); } }
        public float ServerForcedUpdateHitchThreshold { get { return this[nameof(ServerForcedUpdateHitchThreshold)].GetValue<float>(); } set { this[nameof(ServerForcedUpdateHitchThreshold)].SetValue<float>(value); } }
        public float ServerForcedUpdateHitchCooldown { get { return this[nameof(ServerForcedUpdateHitchCooldown)].GetValue<float>(); } set { this[nameof(ServerForcedUpdateHitchCooldown)].SetValue<float>(value); } }
        public float MaxMoveDeltaTime { get { return this[nameof(MaxMoveDeltaTime)].GetValue<float>(); } set { this[nameof(MaxMoveDeltaTime)].SetValue<float>(value); } }
        public float MaxClientSmoothingDeltaTime { get { return this[nameof(MaxClientSmoothingDeltaTime)].GetValue<float>(); } set { this[nameof(MaxClientSmoothingDeltaTime)].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTime { get { return this[nameof(ClientNetSendMoveDeltaTime)].GetValue<float>(); } set { this[nameof(ClientNetSendMoveDeltaTime)].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTimeThrottled { get { return this[nameof(ClientNetSendMoveDeltaTimeThrottled)].GetValue<float>(); } set { this[nameof(ClientNetSendMoveDeltaTimeThrottled)].SetValue<float>(value); } }
        public float ClientNetSendMoveDeltaTimeStationary { get { return this[nameof(ClientNetSendMoveDeltaTimeStationary)].GetValue<float>(); } set { this[nameof(ClientNetSendMoveDeltaTimeStationary)].SetValue<float>(value); } }
        public int ClientNetSendMoveThrottleAtNetSpeed { get { return this[nameof(ClientNetSendMoveThrottleAtNetSpeed)].GetValue<int>(); } set { this[nameof(ClientNetSendMoveThrottleAtNetSpeed)].SetValue<int>(value); } }
        public int ClientNetSendMoveThrottleOverPlayerCount { get { return this[nameof(ClientNetSendMoveThrottleOverPlayerCount)].GetValue<int>(); } set { this[nameof(ClientNetSendMoveThrottleOverPlayerCount)].SetValue<int>(value); } }
        public float ClientErrorUpdateRateLimit { get { return this[nameof(ClientErrorUpdateRateLimit)].GetValue<float>(); } set { this[nameof(ClientErrorUpdateRateLimit)].SetValue<float>(value); } }
        public float ClientNetCamUpdateDeltaTime { get { return this[nameof(ClientNetCamUpdateDeltaTime)].GetValue<float>(); } set { this[nameof(ClientNetCamUpdateDeltaTime)].SetValue<float>(value); } }
        public float ClientNetCamUpdatePositionLimit { get { return this[nameof(ClientNetCamUpdatePositionLimit)].GetValue<float>(); } set { this[nameof(ClientNetCamUpdatePositionLimit)].SetValue<float>(value); } }
        public bool ClientAuthorativePosition { get { return this[nameof(ClientAuthorativePosition)].Flag; } set { this[nameof(ClientAuthorativePosition)].Flag = value; } }
        public bool bMovementTimeDiscrepancyDetection { get { return this[nameof(bMovementTimeDiscrepancyDetection)].Flag; } set { this[nameof(bMovementTimeDiscrepancyDetection)].Flag = value; } }
        public bool bMovementTimeDiscrepancyResolution { get { return this[nameof(bMovementTimeDiscrepancyResolution)].Flag; } set { this[nameof(bMovementTimeDiscrepancyResolution)].Flag = value; } }
        public float MovementTimeDiscrepancyMaxTimeMargin { get { return this[nameof(MovementTimeDiscrepancyMaxTimeMargin)].GetValue<float>(); } set { this[nameof(MovementTimeDiscrepancyMaxTimeMargin)].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyMinTimeMargin { get { return this[nameof(MovementTimeDiscrepancyMinTimeMargin)].GetValue<float>(); } set { this[nameof(MovementTimeDiscrepancyMinTimeMargin)].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyResolutionRate { get { return this[nameof(MovementTimeDiscrepancyResolutionRate)].GetValue<float>(); } set { this[nameof(MovementTimeDiscrepancyResolutionRate)].SetValue<float>(value); } }
        public float MovementTimeDiscrepancyDriftAllowance { get { return this[nameof(MovementTimeDiscrepancyDriftAllowance)].GetValue<float>(); } set { this[nameof(MovementTimeDiscrepancyDriftAllowance)].SetValue<float>(value); } }
        public bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution { get { return this[nameof(bMovementTimeDiscrepancyForceCorrectionsDuringResolution)].Flag; } set { this[nameof(bMovementTimeDiscrepancyForceCorrectionsDuringResolution)].Flag = value; } }
        public bool bUseDistanceBasedRelevancy { get { return this[nameof(bUseDistanceBasedRelevancy)].Flag; } set { this[nameof(bUseDistanceBasedRelevancy)].Flag = value; } }
    }
    public class SpotLight : Light
    {
        public SpotLight(nint addr) : base(addr) { }
        public SpotLightComponent SpotLightComponent { get { return this[nameof(SpotLightComponent)].As<SpotLightComponent>(); } set { this["SpotLightComponent"] = value; } }
        public void SetOuterConeAngle(float NewOuterConeAngle) { Invoke(nameof(SetOuterConeAngle), NewOuterConeAngle); }
        public void SetInnerConeAngle(float NewInnerConeAngle) { Invoke(nameof(SetInnerConeAngle), NewInnerConeAngle); }
    }
    public class GeneratedMeshAreaLight : SpotLight
    {
        public GeneratedMeshAreaLight(nint addr) : base(addr) { }
    }
    public class HapticFeedbackEffect_Base : Object
    {
        public HapticFeedbackEffect_Base(nint addr) : base(addr) { }
    }
    public class HapticFeedbackEffect_Buffer : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_Buffer(nint addr) : base(addr) { }
        public Array<byte> Amplitudes { get { return new Array<byte>(this[nameof(Amplitudes)].Address); } }
        public int SampleRate { get { return this[nameof(SampleRate)].GetValue<int>(); } set { this[nameof(SampleRate)].SetValue<int>(value); } }
    }
    public class HapticFeedbackEffect_Curve : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_Curve(nint addr) : base(addr) { }
        public HapticFeedbackDetails_Curve HapticDetails { get { return this[nameof(HapticDetails)].As<HapticFeedbackDetails_Curve>(); } set { this["HapticDetails"] = value; } }
    }
    public class HapticFeedbackEffect_SoundWave : HapticFeedbackEffect_Base
    {
        public HapticFeedbackEffect_SoundWave(nint addr) : base(addr) { }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
        public bool bUseStereo { get { return this[nameof(bUseStereo)].Flag; } set { this[nameof(bUseStereo)].Flag = value; } }
    }
    public class AnimationDataController : Interface
    {
        public AnimationDataController(nint addr) : base(addr) { }
        public void UpdateCurveNamesFromSkeleton(Skeleton Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact) { Invoke(nameof(UpdateCurveNamesFromSkeleton), Skeleton, SupportedCurveType, bShouldTransact); }
        public bool SetTransformCurveKeys(AnimationCurveIdentifier CurveId, Array<Transform> TransformValues, Array<float> TimeKeys, bool bShouldTransact) { return Invoke<bool>(nameof(SetTransformCurveKeys), CurveId, TransformValues, TimeKeys, bShouldTransact); }
        public bool SetTransformCurveKey(AnimationCurveIdentifier CurveId, float Time, Transform Value, bool bShouldTransact) { return Invoke<bool>(nameof(SetTransformCurveKey), CurveId, Time, Value, bShouldTransact); }
        public void SetPlayLength(float Length, bool bShouldTransact) { Invoke(nameof(SetPlayLength), Length, bShouldTransact); }
        public void SetModel(AnimDataModel InModel) { Invoke(nameof(SetModel), InModel); }
        public void SetFrameRate(FrameRate FrameRate, bool bShouldTransact) { Invoke(nameof(SetFrameRate), FrameRate, bShouldTransact); }
        public bool SetCurveKeys(AnimationCurveIdentifier CurveId, Array<RichCurveKey> CurveKeys, bool bShouldTransact) { return Invoke<bool>(nameof(SetCurveKeys), CurveId, CurveKeys, bShouldTransact); }
        public bool SetCurveKey(AnimationCurveIdentifier CurveId, RichCurveKey Key, bool bShouldTransact) { return Invoke<bool>(nameof(SetCurveKey), CurveId, Key, bShouldTransact); }
        public bool SetCurveFlags(AnimationCurveIdentifier CurveId, int Flags, bool bShouldTransact) { return Invoke<bool>(nameof(SetCurveFlags), CurveId, Flags, bShouldTransact); }
        public bool SetCurveFlag(AnimationCurveIdentifier CurveId, byte Flag, bool bState, bool bShouldTransact) { return Invoke<bool>(nameof(SetCurveFlag), CurveId, Flag, bState, bShouldTransact); }
        public bool SetCurveColor(AnimationCurveIdentifier CurveId, LinearColor Color, bool bShouldTransact) { return Invoke<bool>(nameof(SetCurveColor), CurveId, Color, bShouldTransact); }
        public bool SetBoneTrackKeys(Object BoneName, Array<Vector> PositionalKeys, Array<Quat> RotationalKeys, Array<Vector> ScalingKeys, bool bShouldTransact) { return Invoke<bool>(nameof(SetBoneTrackKeys), BoneName, PositionalKeys, RotationalKeys, ScalingKeys, bShouldTransact); }
        public bool ScaleCurve(AnimationCurveIdentifier CurveId, float Origin, float Factor, bool bShouldTransact) { return Invoke<bool>(nameof(ScaleCurve), CurveId, Origin, Factor, bShouldTransact); }
        public void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact) { Invoke(nameof(ResizePlayLength), NewLength, T0, T1, bShouldTransact); }
        public void Resize(float Length, float T0, float T1, bool bShouldTransact) { Invoke(nameof(Resize), Length, T0, T1, bShouldTransact); }
        public bool RenameCurve(AnimationCurveIdentifier CurveToRenameId, AnimationCurveIdentifier NewCurveId, bool bShouldTransact) { return Invoke<bool>(nameof(RenameCurve), CurveToRenameId, NewCurveId, bShouldTransact); }
        public bool RemoveTransformCurveKey(AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveTransformCurveKey), CurveId, Time, bShouldTransact); }
        public bool RemoveCurveKey(AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveCurveKey), CurveId, Time, bShouldTransact); }
        public bool RemoveCurve(AnimationCurveIdentifier CurveId, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveCurve), CurveId, bShouldTransact); }
        public bool RemoveBoneTrack(Object BoneName, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveBoneTrack), BoneName, bShouldTransact); }
        public bool RemoveAttributeKey(AnimationAttributeIdentifier AttributeIdentifier, float Time, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveAttributeKey), AttributeIdentifier, Time, bShouldTransact); }
        public bool RemoveAttribute(AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact) { return Invoke<bool>(nameof(RemoveAttribute), AttributeIdentifier, bShouldTransact); }
        public void RemoveAllCurvesOfType(ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact) { Invoke(nameof(RemoveAllCurvesOfType), SupportedCurveType, bShouldTransact); }
        public void RemoveAllBoneTracks(bool bShouldTransact) { Invoke(nameof(RemoveAllBoneTracks), bShouldTransact); }
        public int RemoveAllAttributesForBone(Object BoneName, bool bShouldTransact) { return Invoke<int>(nameof(RemoveAllAttributesForBone), BoneName, bShouldTransact); }
        public int RemoveAllAttributes(bool bShouldTransact) { return Invoke<int>(nameof(RemoveAllAttributes), bShouldTransact); }
        public void OpenBracket(Object InTitle, bool bShouldTransact) { Invoke(nameof(OpenBracket), InTitle, bShouldTransact); }
        public int InsertBoneTrack(Object BoneName, int DesiredIndex, bool bShouldTransact) { return Invoke<int>(nameof(InsertBoneTrack), BoneName, DesiredIndex, bShouldTransact); }
        public AnimDataModel GetModel() { return Invoke<AnimDataModel>(nameof(GetModel)); }
        public void FindOrAddCurveNamesOnSkeleton(Skeleton Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact) { Invoke(nameof(FindOrAddCurveNamesOnSkeleton), Skeleton, SupportedCurveType, bShouldTransact); }
        public bool DuplicateCurve(AnimationCurveIdentifier CopyCurveId, AnimationCurveIdentifier NewCurveId, bool bShouldTransact) { return Invoke<bool>(nameof(DuplicateCurve), CopyCurveId, NewCurveId, bShouldTransact); }
        public bool DuplicateAttribute(AnimationAttributeIdentifier AttributeIdentifier, AnimationAttributeIdentifier NewAttributeIdentifier, bool bShouldTransact) { return Invoke<bool>(nameof(DuplicateAttribute), AttributeIdentifier, NewAttributeIdentifier, bShouldTransact); }
        public void CloseBracket(bool bShouldTransact) { Invoke(nameof(CloseBracket), bShouldTransact); }
        public bool AddCurve(AnimationCurveIdentifier CurveId, int CurveFlags, bool bShouldTransact) { return Invoke<bool>(nameof(AddCurve), CurveId, CurveFlags, bShouldTransact); }
        public int AddBoneTrack(Object BoneName, bool bShouldTransact) { return Invoke<int>(nameof(AddBoneTrack), BoneName, bShouldTransact); }
        public bool AddAttribute(AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact) { return Invoke<bool>(nameof(AddAttribute), AttributeIdentifier, bShouldTransact); }
    }
    public class InGameAdManager : PlatformInterfaceBase
    {
        public InGameAdManager(nint addr) : base(addr) { }
        public bool bShouldPauseWhileAdOpen { get { return this[nameof(bShouldPauseWhileAdOpen)].Flag; } set { this[nameof(bShouldPauseWhileAdOpen)].Flag = value; } }
        public Array<Object> ClickedBannerDelegates { get { return new Array<Object>(this[nameof(ClickedBannerDelegates)].Address); } }
        public Array<Object> ClosedAdDelegates { get { return new Array<Object>(this[nameof(ClosedAdDelegates)].Address); } }
    }
    public class Interface_ActorSubobject : Interface
    {
        public Interface_ActorSubobject(nint addr) : base(addr) { }
    }
    public class Interface_AssetUserData : Interface
    {
        public Interface_AssetUserData(nint addr) : base(addr) { }
    }
    public class Interface_AsyncCompilation : Interface
    {
        public Interface_AsyncCompilation(nint addr) : base(addr) { }
    }
    public class BoneReferenceSkeletonProvider : Interface
    {
        public BoneReferenceSkeletonProvider(nint addr) : base(addr) { }
    }
    public class Interface_CollisionDataProvider : Interface
    {
        public Interface_CollisionDataProvider(nint addr) : base(addr) { }
    }
    public class Interface_PostProcessVolume : Interface
    {
        public Interface_PostProcessVolume(nint addr) : base(addr) { }
    }
    public class Interface_PreviewMeshProvider : Interface
    {
        public Interface_PreviewMeshProvider(nint addr) : base(addr) { }
    }
    public class ISMPartitionInstanceManager : Interface
    {
        public ISMPartitionInstanceManager(nint addr) : base(addr) { }
    }
    public class ISMPartitionInstanceManagerProvider : Interface
    {
        public ISMPartitionInstanceManagerProvider(nint addr) : base(addr) { }
    }
    public class KismetTextLibrary : BlueprintFunctionLibrary
    {
        public KismetTextLibrary(nint addr) : base(addr) { }
        public Object TextTrimTrailing(Object InText) { return Invoke<Object>(nameof(TextTrimTrailing), InText); }
        public Object TextTrimPrecedingAndTrailing(Object InText) { return Invoke<Object>(nameof(TextTrimPrecedingAndTrailing), InText); }
        public Object TextTrimPreceding(Object InText) { return Invoke<Object>(nameof(TextTrimPreceding), InText); }
        public Object TextToUpper(Object InText) { return Invoke<Object>(nameof(TextToUpper), InText); }
        public Object TextToLower(Object InText) { return Invoke<Object>(nameof(TextToLower), InText); }
        public bool TextIsTransient(Object InText) { return Invoke<bool>(nameof(TextIsTransient), InText); }
        public bool TextIsFromStringTable(Object Text) { return Invoke<bool>(nameof(TextIsFromStringTable), Text); }
        public bool TextIsEmpty(Object InText) { return Invoke<bool>(nameof(TextIsEmpty), InText); }
        public bool TextIsCultureInvariant(Object InText) { return Invoke<bool>(nameof(TextIsCultureInvariant), InText); }
        public Object TextFromStringTable(Object TableId, Object Key) { return Invoke<Object>(nameof(TextFromStringTable), TableId, Key); }
        public bool StringTableIdAndKeyFromText(Object Text, Object OutTableId, Object OutKey) { return Invoke<bool>(nameof(StringTableIdAndKeyFromText), Text, OutTableId, OutKey); }
        public Object PolyglotDataToText(PolyglotTextData PolyglotData) { return Invoke<Object>(nameof(PolyglotDataToText), PolyglotData); }
        public bool NotEqual_TextText(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_TextText), A, B); }
        public bool NotEqual_IgnoreCase_TextText(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_IgnoreCase_TextText), A, B); }
        public void IsPolyglotDataValid(PolyglotTextData PolyglotData, bool IsValid, Object ErrorMessage) { Invoke(nameof(IsPolyglotDataValid), PolyglotData, IsValid, ErrorMessage); }
        public Object GetEmptyText() { return Invoke<Object>(nameof(GetEmptyText)); }
        public Object Format(Object InPattern, Array<FormatArgumentData> InArgs) { return Invoke<Object>(nameof(Format), InPattern, InArgs); }
        public bool FindTextInLocalizationTable(Object Namespace, Object Key, Object OutText) { return Invoke<bool>(nameof(FindTextInLocalizationTable), Namespace, Key, OutText); }
        public bool EqualEqual_TextText(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_TextText), A, B); }
        public bool EqualEqual_IgnoreCase_TextText(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_IgnoreCase_TextText), A, B); }
        public Object Conv_VectorToText(Vector InVec) { return Invoke<Object>(nameof(Conv_VectorToText), InVec); }
        public Object Conv_Vector2dToText(Vector2D InVec) { return Invoke<Object>(nameof(Conv_Vector2dToText), InVec); }
        public Object Conv_TransformToText(Transform InTrans) { return Invoke<Object>(nameof(Conv_TransformToText), InTrans); }
        public Object Conv_TextToString(Object InText) { return Invoke<Object>(nameof(Conv_TextToString), InText); }
        public Object Conv_StringToText(Object InString) { return Invoke<Object>(nameof(Conv_StringToText), InString); }
        public Object Conv_RotatorToText(Rotator InRot) { return Invoke<Object>(nameof(Conv_RotatorToText), InRot); }
        public Object Conv_ObjectToText(Object InObj) { return Invoke<Object>(nameof(Conv_ObjectToText), InObj); }
        public Object Conv_NameToText(Object InName) { return Invoke<Object>(nameof(Conv_NameToText), InName); }
        public Object Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits) { return Invoke<Object>(nameof(Conv_IntToText), Value, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits); }
        public Object Conv_Int64ToText(long Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits) { return Invoke<Object>(nameof(Conv_Int64ToText), Value, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits); }
        public Object Conv_DoubleToText(double Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits) { return Invoke<Object>(nameof(Conv_DoubleToText), Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits); }
        public Object Conv_ColorToText(LinearColor inColor) { return Invoke<Object>(nameof(Conv_ColorToText), inColor); }
        public Object Conv_ByteToText(byte Value) { return Invoke<Object>(nameof(Conv_ByteToText), Value); }
        public Object Conv_BoolToText(bool InBool) { return Invoke<Object>(nameof(Conv_BoolToText), InBool); }
        public Object AsTimeZoneTime_DateTime(DateTime InDateTime, Object InTimeZone) { return Invoke<Object>(nameof(AsTimeZoneTime_DateTime), InDateTime, InTimeZone); }
        public Object AsTimeZoneDateTime_DateTime(DateTime InDateTime, Object InTimeZone) { return Invoke<Object>(nameof(AsTimeZoneDateTime_DateTime), InDateTime, InTimeZone); }
        public Object AsTimeZoneDate_DateTime(DateTime InDateTime, Object InTimeZone) { return Invoke<Object>(nameof(AsTimeZoneDate_DateTime), InDateTime, InTimeZone); }
        public Object AsTimespan_Timespan(Timespan InTimespan) { return Invoke<Object>(nameof(AsTimespan_Timespan), InTimespan); }
        public Object AsTime_DateTime(DateTime In) { return Invoke<Object>(nameof(AsTime_DateTime), In); }
        public Object AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits) { return Invoke<Object>(nameof(AsPercent_Float), Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits); }
        public Object AsDateTime_DateTime(DateTime In) { return Invoke<Object>(nameof(AsDateTime_DateTime), In); }
        public Object AsDate_DateTime(DateTime InDateTime) { return Invoke<Object>(nameof(AsDate_DateTime), InDateTime); }
        public Object AsCurrencyBase(int BaseValue, Object CurrencyCode) { return Invoke<Object>(nameof(AsCurrencyBase), BaseValue, CurrencyCode); }
        public Object AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, Object CurrencyCode) { return Invoke<Object>(nameof(AsCurrency_Integer), Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode); }
        public Object AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, Object CurrencyCode) { return Invoke<Object>(nameof(AsCurrency_Float), Value, RoundingMode, bAlwaysSign, bUseGrouping, MinimumIntegralDigits, MaximumIntegralDigits, MinimumFractionalDigits, MaximumFractionalDigits, CurrencyCode); }
    }
    public class LevelInstanceEditorPivotInterface : Interface
    {
        public LevelInstanceEditorPivotInterface(nint addr) : base(addr) { }
    }
    public class LevelStreaming : Object
    {
        public LevelStreaming(nint addr) : base(addr) { }
        public Object WorldAsset { get { return this[nameof(WorldAsset)]; } set { this[nameof(WorldAsset)] = value; } }
        public int StreamingPriority { get { return this[nameof(StreamingPriority)].GetValue<int>(); } set { this[nameof(StreamingPriority)].SetValue<int>(value); } }
        public Object PackageNameToLoad { get { return this[nameof(PackageNameToLoad)]; } set { this[nameof(PackageNameToLoad)] = value; } }
        public Array<Object> LODPackageNames { get { return new Array<Object>(this[nameof(LODPackageNames)].Address); } }
        public Transform LevelTransform { get { return this[nameof(LevelTransform)].As<Transform>(); } set { this["LevelTransform"] = value; } }
        public bool bClientOnlyVisible { get { return this[nameof(bClientOnlyVisible)].Flag; } set { this[nameof(bClientOnlyVisible)].Flag = value; } }
        public int LevelLODIndex { get { return this[nameof(LevelLODIndex)].GetValue<int>(); } set { this[nameof(LevelLODIndex)].SetValue<int>(value); } }
        public bool bShouldBeVisible { get { return this[nameof(bShouldBeVisible)].Flag; } set { this[nameof(bShouldBeVisible)].Flag = value; } }
        public bool bShouldBeLoaded { get { return this[nameof(bShouldBeLoaded)].Flag; } set { this[nameof(bShouldBeLoaded)].Flag = value; } }
        public bool bLocked { get { return this[nameof(bLocked)].Flag; } set { this[nameof(bLocked)].Flag = value; } }
        public bool bIsStatic { get { return this[nameof(bIsStatic)].Flag; } set { this[nameof(bIsStatic)].Flag = value; } }
        public bool bShouldBlockOnLoad { get { return this[nameof(bShouldBlockOnLoad)].Flag; } set { this[nameof(bShouldBlockOnLoad)].Flag = value; } }
        public bool bShouldBlockOnUnload { get { return this[nameof(bShouldBlockOnUnload)].Flag; } set { this[nameof(bShouldBlockOnUnload)].Flag = value; } }
        public bool bDisableDistanceStreaming { get { return this[nameof(bDisableDistanceStreaming)].Flag; } set { this[nameof(bDisableDistanceStreaming)].Flag = value; } }
        public bool bDrawOnLevelStatusMap { get { return this[nameof(bDrawOnLevelStatusMap)].Flag; } set { this[nameof(bDrawOnLevelStatusMap)].Flag = value; } }
        public LinearColor LevelColor { get { return this[nameof(LevelColor)].As<LinearColor>(); } set { this["LevelColor"] = value; } }
        public Array<LevelStreamingVolume> EditorStreamingVolumes { get { return new Array<LevelStreamingVolume>(this[nameof(EditorStreamingVolumes)].Address); } }
        public float MinTimeBetweenVolumeUnloadRequests { get { return this[nameof(MinTimeBetweenVolumeUnloadRequests)].GetValue<float>(); } set { this[nameof(MinTimeBetweenVolumeUnloadRequests)].SetValue<float>(value); } }
        public Object OnLevelLoaded { get { return this[nameof(OnLevelLoaded)]; } set { this[nameof(OnLevelLoaded)] = value; } }
        public Object OnLevelUnloaded { get { return this[nameof(OnLevelUnloaded)]; } set { this[nameof(OnLevelUnloaded)] = value; } }
        public Object OnLevelShown { get { return this[nameof(OnLevelShown)]; } set { this[nameof(OnLevelShown)] = value; } }
        public Object OnLevelHidden { get { return this[nameof(OnLevelHidden)]; } set { this[nameof(OnLevelHidden)] = value; } }
        public Level LoadedLevel { get { return this[nameof(LoadedLevel)].As<Level>(); } set { this["LoadedLevel"] = value; } }
        public Level PendingUnloadLevel { get { return this[nameof(PendingUnloadLevel)].As<Level>(); } set { this["PendingUnloadLevel"] = value; } }
        public bool ShouldBeLoaded() { return Invoke<bool>(nameof(ShouldBeLoaded)); }
        public void SetShouldBeVisible(bool bInShouldBeVisible) { Invoke(nameof(SetShouldBeVisible), bInShouldBeVisible); }
        public void SetShouldBeLoaded(bool bInShouldBeLoaded) { Invoke(nameof(SetShouldBeLoaded), bInShouldBeLoaded); }
        public void SetPriority(int NewPriority) { Invoke(nameof(SetPriority), NewPriority); }
        public void SetLevelLODIndex(int LODIndex) { Invoke(nameof(SetLevelLODIndex), LODIndex); }
        public void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval) { Invoke(nameof(SetIsRequestingUnloadAndRemoval), bInIsRequestingUnloadAndRemoval); }
        public bool IsStreamingStatePending() { return Invoke<bool>(nameof(IsStreamingStatePending)); }
        public bool IsLevelVisible() { return Invoke<bool>(nameof(IsLevelVisible)); }
        public bool IsLevelLoaded() { return Invoke<bool>(nameof(IsLevelLoaded)); }
        public Object GetWorldAssetPackageFName() { return Invoke<Object>(nameof(GetWorldAssetPackageFName)); }
        public Level GetLoadedLevel() { return Invoke<Level>(nameof(GetLoadedLevel)); }
        public LevelScriptActor GetLevelScriptActor() { return Invoke<LevelScriptActor>(nameof(GetLevelScriptActor)); }
        public bool GetIsRequestingUnloadAndRemoval() { return Invoke<bool>(nameof(GetIsRequestingUnloadAndRemoval)); }
        public LevelStreaming CreateInstance(Object UniqueInstanceName) { return Invoke<LevelStreaming>(nameof(CreateInstance), UniqueInstanceName); }
    }
    public class LevelStreamingAlwaysLoaded : LevelStreaming
    {
        public LevelStreamingAlwaysLoaded(nint addr) : base(addr) { }
    }
    public class LevelStreamingDynamic : LevelStreaming
    {
        public LevelStreamingDynamic(nint addr) : base(addr) { }
        public bool bInitiallyLoaded { get { return this[nameof(bInitiallyLoaded)].Flag; } set { this[nameof(bInitiallyLoaded)].Flag = value; } }
        public bool bInitiallyVisible { get { return this[nameof(bInitiallyVisible)].Flag; } set { this[nameof(bInitiallyVisible)].Flag = value; } }
        public LevelStreamingDynamic LoadLevelInstanceBySoftObjectPtr(Object WorldContextObject, Object Level, Vector Location, Rotator Rotation, bool bOutSuccess, Object OptionalLevelNameOverride, Object OptionalLevelStreamingClass, bool bLoadAsTempPackage) { return Invoke<LevelStreamingDynamic>(nameof(LoadLevelInstanceBySoftObjectPtr), WorldContextObject, Level, Location, Rotation, bOutSuccess, OptionalLevelNameOverride, OptionalLevelStreamingClass, bLoadAsTempPackage); }
        public LevelStreamingDynamic LoadLevelInstance(Object WorldContextObject, Object LevelName, Vector Location, Rotator Rotation, bool bOutSuccess, Object OptionalLevelNameOverride, Object OptionalLevelStreamingClass, bool bLoadAsTempPackage) { return Invoke<LevelStreamingDynamic>(nameof(LoadLevelInstance), WorldContextObject, LevelName, Location, Rotation, bOutSuccess, OptionalLevelNameOverride, OptionalLevelStreamingClass, bLoadAsTempPackage); }
    }
    public class LevelStreamingPersistent : LevelStreaming
    {
        public LevelStreamingPersistent(nint addr) : base(addr) { }
    }
    public class LevelStreamingVolume : Volume
    {
        public LevelStreamingVolume(nint addr) : base(addr) { }
        public Array<Object> StreamingLevelNames { get { return new Array<Object>(this[nameof(StreamingLevelNames)].Address); } }
        public bool bEditorPreVisOnly { get { return this[nameof(bEditorPreVisOnly)].Flag; } set { this[nameof(bEditorPreVisOnly)].Flag = value; } }
        public bool bDisabled { get { return this[nameof(bDisabled)].Flag; } set { this[nameof(bDisabled)].Flag = value; } }
        public byte StreamingUsage { get { return this[nameof(StreamingUsage)].GetValue<byte>(); } set { this[nameof(StreamingUsage)].SetValue<byte>(value); } }
    }
    public class Texture2D : Texture
    {
        public Texture2D(nint addr) : base(addr) { }
        public int FirstResourceMemMip { get { return this[nameof(FirstResourceMemMip)].GetValue<int>(); } set { this[nameof(FirstResourceMemMip)].SetValue<int>(value); } }
        public bool bTemporarilyDisableStreaming { get { return this[nameof(bTemporarilyDisableStreaming)].Flag; } set { this[nameof(bTemporarilyDisableStreaming)].Flag = value; } }
        public byte AddressX { get { return this[nameof(AddressX)].GetValue<byte>(); } set { this[nameof(AddressX)].SetValue<byte>(value); } }
        public byte AddressY { get { return this[nameof(AddressY)].GetValue<byte>(); } set { this[nameof(AddressY)].SetValue<byte>(value); } }
        public IntPoint ImportedSize { get { return this[nameof(ImportedSize)].As<IntPoint>(); } set { this["ImportedSize"] = value; } }
        public int Blueprint_GetSizeY() { return Invoke<int>(nameof(Blueprint_GetSizeY)); }
        public int Blueprint_GetSizeX() { return Invoke<int>(nameof(Blueprint_GetSizeX)); }
    }
    public class LightMapTexture2D : Texture2D
    {
        public LightMapTexture2D(nint addr) : base(addr) { }
    }
    public class LightmassPortal : Actor
    {
        public LightmassPortal(nint addr) : base(addr) { }
        public LightmassPortalComponent PortalComponent { get { return this[nameof(PortalComponent)].As<LightmassPortalComponent>(); } set { this["PortalComponent"] = value; } }
    }
    public class LightmassPortalComponent : SceneComponent
    {
        public LightmassPortalComponent(nint addr) : base(addr) { }
        public BoxComponent PreviewBox { get { return this[nameof(PreviewBox)].As<BoxComponent>(); } set { this["PreviewBox"] = value; } }
    }
    public class MapBuildDataRegistry : Object
    {
        public MapBuildDataRegistry(nint addr) : base(addr) { }
        public byte LevelLightingQuality { get { return this[nameof(LevelLightingQuality)].GetValue<byte>(); } set { this[nameof(LevelLightingQuality)].SetValue<byte>(value); } }
    }
    public class MaterialInterfaceEditorOnlyData : Object
    {
        public MaterialInterfaceEditorOnlyData(nint addr) : base(addr) { }
    }
    public class MaterialEditorOnlyData : MaterialInterfaceEditorOnlyData
    {
        public MaterialEditorOnlyData(nint addr) : base(addr) { }
        public ColorMaterialInput BaseColor { get { return this[nameof(BaseColor)].As<ColorMaterialInput>(); } set { this["BaseColor"] = value; } }
        public ScalarMaterialInput Metallic { get { return this[nameof(Metallic)].As<ScalarMaterialInput>(); } set { this["Metallic"] = value; } }
        public ScalarMaterialInput Specular { get { return this[nameof(Specular)].As<ScalarMaterialInput>(); } set { this["Specular"] = value; } }
        public ScalarMaterialInput Roughness { get { return this[nameof(Roughness)].As<ScalarMaterialInput>(); } set { this["Roughness"] = value; } }
        public ScalarMaterialInput Anisotropy { get { return this[nameof(Anisotropy)].As<ScalarMaterialInput>(); } set { this["Anisotropy"] = value; } }
        public VectorMaterialInput Normal { get { return this[nameof(Normal)].As<VectorMaterialInput>(); } set { this["Normal"] = value; } }
        public VectorMaterialInput Tangent { get { return this[nameof(Tangent)].As<VectorMaterialInput>(); } set { this["Tangent"] = value; } }
        public ColorMaterialInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ColorMaterialInput>(); } set { this["EmissiveColor"] = value; } }
        public ScalarMaterialInput Opacity { get { return this[nameof(Opacity)].As<ScalarMaterialInput>(); } set { this["Opacity"] = value; } }
        public ScalarMaterialInput OpacityMask { get { return this[nameof(OpacityMask)].As<ScalarMaterialInput>(); } set { this["OpacityMask"] = value; } }
        public VectorMaterialInput WorldPositionOffset { get { return this[nameof(WorldPositionOffset)].As<VectorMaterialInput>(); } set { this["WorldPositionOffset"] = value; } }
        public ColorMaterialInput SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<ColorMaterialInput>(); } set { this["SubsurfaceColor"] = value; } }
        public ScalarMaterialInput ClearCoat { get { return this[nameof(ClearCoat)].As<ScalarMaterialInput>(); } set { this["ClearCoat"] = value; } }
        public ScalarMaterialInput ClearCoatRoughness { get { return this[nameof(ClearCoatRoughness)].As<ScalarMaterialInput>(); } set { this["ClearCoatRoughness"] = value; } }
        public ScalarMaterialInput AmbientOcclusion { get { return this[nameof(AmbientOcclusion)].As<ScalarMaterialInput>(); } set { this["AmbientOcclusion"] = value; } }
        public ScalarMaterialInput Refraction { get { return this[nameof(Refraction)].As<ScalarMaterialInput>(); } set { this["Refraction"] = value; } }
        public Vector2MaterialInput CustomizedUVs { get { return this[nameof(CustomizedUVs)].As<Vector2MaterialInput>(); } set { this["CustomizedUVs"] = value; } }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
        public ScalarMaterialInput PixelDepthOffset { get { return this[nameof(PixelDepthOffset)].As<ScalarMaterialInput>(); } set { this["PixelDepthOffset"] = value; } }
        public ShadingModelMaterialInput ShadingModelFromMaterialExpression { get { return this[nameof(ShadingModelFromMaterialExpression)].As<ShadingModelMaterialInput>(); } set { this["ShadingModelFromMaterialExpression"] = value; } }
        public StrataMaterialInput FrontMaterial { get { return this[nameof(FrontMaterial)].As<StrataMaterialInput>(); } set { this["FrontMaterial"] = value; } }
        public MaterialExpressionCollection ExpressionCollection { get { return this[nameof(ExpressionCollection)].As<MaterialExpressionCollection>(); } set { this["ExpressionCollection"] = value; } }
        public Array<ParameterGroupData> ParameterGroupData { get { return new Array<ParameterGroupData>(this[nameof(ParameterGroupData)].Address); } }
    }
    public class Material : MaterialInterface
    {
        public Material(nint addr) : base(addr) { }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public PhysicalMaterialMask PhysMaterialMask { get { return this[nameof(PhysMaterialMask)].As<PhysicalMaterialMask>(); } set { this["PhysMaterialMask"] = value; } }
        public PhysicalMaterial PhysicalMaterialMap { get { return this[nameof(PhysicalMaterialMap)].As<PhysicalMaterial>(); } set { this["PhysicalMaterialMap"] = value; } }
        public Array<PhysicalMaterial> RenderTracePhysicalMaterialOutputs { get { return new Array<PhysicalMaterial>(this[nameof(RenderTracePhysicalMaterialOutputs)].Address); } }
        public byte MaterialDomain { get { return this[nameof(MaterialDomain)].GetValue<byte>(); } set { this[nameof(MaterialDomain)].SetValue<byte>(value); } }
        public byte BlendMode { get { return this[nameof(BlendMode)].GetValue<byte>(); } set { this[nameof(BlendMode)].SetValue<byte>(value); } }
        public byte StrataBlendMode { get { return this[nameof(StrataBlendMode)].GetValue<byte>(); } set { this[nameof(StrataBlendMode)].SetValue<byte>(value); } }
        public byte DecalBlendMode { get { return this[nameof(DecalBlendMode)].GetValue<byte>(); } set { this[nameof(DecalBlendMode)].SetValue<byte>(value); } }
        public byte MaterialDecalResponse { get { return this[nameof(MaterialDecalResponse)].GetValue<byte>(); } set { this[nameof(MaterialDecalResponse)].SetValue<byte>(value); } }
        public MaterialOverrideNanite NaniteOverrideMaterial { get { return this[nameof(NaniteOverrideMaterial)].As<MaterialOverrideNanite>(); } set { this["NaniteOverrideMaterial"] = value; } }
        public uint CachedConnectedInputs { get { return this[nameof(CachedConnectedInputs)].GetValue<uint>(); } set { this[nameof(CachedConnectedInputs)].SetValue<uint>(value); } }
        public byte ShadingModel { get { return this[nameof(ShadingModel)].GetValue<byte>(); } set { this[nameof(ShadingModel)].SetValue<byte>(value); } }
        public bool bCastDynamicShadowAsMasked { get { return this[nameof(bCastDynamicShadowAsMasked)].Flag; } set { this[nameof(bCastDynamicShadowAsMasked)].Flag = value; } }
        public MaterialShadingModelField ShadingModels { get { return this[nameof(ShadingModels)].As<MaterialShadingModelField>(); } set { this["ShadingModels"] = value; } }
        public float OpacityMaskClipValue { get { return this[nameof(OpacityMaskClipValue)].GetValue<float>(); } set { this[nameof(OpacityMaskClipValue)].SetValue<float>(value); } }
        public bool bEnableSeparateTranslucency { get { return this[nameof(bEnableSeparateTranslucency)].Flag; } set { this[nameof(bEnableSeparateTranslucency)].Flag = value; } }
        public bool bEnableResponsiveAA { get { return this[nameof(bEnableResponsiveAA)].Flag; } set { this[nameof(bEnableResponsiveAA)].Flag = value; } }
        public bool bScreenSpaceReflections { get { return this[nameof(bScreenSpaceReflections)].Flag; } set { this[nameof(bScreenSpaceReflections)].Flag = value; } }
        public bool bContactShadows { get { return this[nameof(bContactShadows)].Flag; } set { this[nameof(bContactShadows)].Flag = value; } }
        public bool TwoSided { get { return this[nameof(TwoSided)].Flag; } set { this[nameof(TwoSided)].Flag = value; } }
        public bool DitheredLODTransition { get { return this[nameof(DitheredLODTransition)].Flag; } set { this[nameof(DitheredLODTransition)].Flag = value; } }
        public bool DitherOpacityMask { get { return this[nameof(DitherOpacityMask)].Flag; } set { this[nameof(DitherOpacityMask)].Flag = value; } }
        public bool bAllowNegativeEmissiveColor { get { return this[nameof(bAllowNegativeEmissiveColor)].Flag; } set { this[nameof(bAllowNegativeEmissiveColor)].Flag = value; } }
        public byte TranslucencyPass { get { return this[nameof(TranslucencyPass)].GetValue<byte>(); } set { this[nameof(TranslucencyPass)].SetValue<byte>(value); } }
        public byte TranslucencyLightingMode { get { return this[nameof(TranslucencyLightingMode)].GetValue<byte>(); } set { this[nameof(TranslucencyLightingMode)].SetValue<byte>(value); } }
        public bool bEnableMobileSeparateTranslucency { get { return this[nameof(bEnableMobileSeparateTranslucency)].Flag; } set { this[nameof(bEnableMobileSeparateTranslucency)].Flag = value; } }
        public int NumCustomizedUVs { get { return this[nameof(NumCustomizedUVs)].GetValue<int>(); } set { this[nameof(NumCustomizedUVs)].SetValue<int>(value); } }
        public float TranslucencyDirectionalLightingIntensity { get { return this[nameof(TranslucencyDirectionalLightingIntensity)].GetValue<float>(); } set { this[nameof(TranslucencyDirectionalLightingIntensity)].SetValue<float>(value); } }
        public float TranslucentShadowDensityScale { get { return this[nameof(TranslucentShadowDensityScale)].GetValue<float>(); } set { this[nameof(TranslucentShadowDensityScale)].SetValue<float>(value); } }
        public float TranslucentSelfShadowDensityScale { get { return this[nameof(TranslucentSelfShadowDensityScale)].GetValue<float>(); } set { this[nameof(TranslucentSelfShadowDensityScale)].SetValue<float>(value); } }
        public float TranslucentSelfShadowSecondDensityScale { get { return this[nameof(TranslucentSelfShadowSecondDensityScale)].GetValue<float>(); } set { this[nameof(TranslucentSelfShadowSecondDensityScale)].SetValue<float>(value); } }
        public float TranslucentSelfShadowSecondOpacity { get { return this[nameof(TranslucentSelfShadowSecondOpacity)].GetValue<float>(); } set { this[nameof(TranslucentSelfShadowSecondOpacity)].SetValue<float>(value); } }
        public float TranslucentBackscatteringExponent { get { return this[nameof(TranslucentBackscatteringExponent)].GetValue<float>(); } set { this[nameof(TranslucentBackscatteringExponent)].SetValue<float>(value); } }
        public LinearColor TranslucentMultipleScatteringExtinction { get { return this[nameof(TranslucentMultipleScatteringExtinction)].As<LinearColor>(); } set { this["TranslucentMultipleScatteringExtinction"] = value; } }
        public float TranslucentShadowStartOffset { get { return this[nameof(TranslucentShadowStartOffset)].GetValue<float>(); } set { this[nameof(TranslucentShadowStartOffset)].SetValue<float>(value); } }
        public bool bDisableDepthTest { get { return this[nameof(bDisableDepthTest)].Flag; } set { this[nameof(bDisableDepthTest)].Flag = value; } }
        public bool bWriteOnlyAlpha { get { return this[nameof(bWriteOnlyAlpha)].Flag; } set { this[nameof(bWriteOnlyAlpha)].Flag = value; } }
        public bool bGenerateSphericalParticleNormals { get { return this[nameof(bGenerateSphericalParticleNormals)].Flag; } set { this[nameof(bGenerateSphericalParticleNormals)].Flag = value; } }
        public bool bTangentSpaceNormal { get { return this[nameof(bTangentSpaceNormal)].Flag; } set { this[nameof(bTangentSpaceNormal)].Flag = value; } }
        public bool bUseEmissiveForDynamicAreaLighting { get { return this[nameof(bUseEmissiveForDynamicAreaLighting)].Flag; } set { this[nameof(bUseEmissiveForDynamicAreaLighting)].Flag = value; } }
        public bool bUsedAsSpecialEngineMaterial { get { return this[nameof(bUsedAsSpecialEngineMaterial)].Flag; } set { this[nameof(bUsedAsSpecialEngineMaterial)].Flag = value; } }
        public bool bUsedWithSkeletalMesh { get { return this[nameof(bUsedWithSkeletalMesh)].Flag; } set { this[nameof(bUsedWithSkeletalMesh)].Flag = value; } }
        public bool bUsedWithEditorCompositing { get { return this[nameof(bUsedWithEditorCompositing)].Flag; } set { this[nameof(bUsedWithEditorCompositing)].Flag = value; } }
        public bool bUsedWithParticleSprites { get { return this[nameof(bUsedWithParticleSprites)].Flag; } set { this[nameof(bUsedWithParticleSprites)].Flag = value; } }
        public bool bUsedWithBeamTrails { get { return this[nameof(bUsedWithBeamTrails)].Flag; } set { this[nameof(bUsedWithBeamTrails)].Flag = value; } }
        public bool bUsedWithMeshParticles { get { return this[nameof(bUsedWithMeshParticles)].Flag; } set { this[nameof(bUsedWithMeshParticles)].Flag = value; } }
        public bool bUsedWithNiagaraSprites { get { return this[nameof(bUsedWithNiagaraSprites)].Flag; } set { this[nameof(bUsedWithNiagaraSprites)].Flag = value; } }
        public bool bUsedWithNiagaraRibbons { get { return this[nameof(bUsedWithNiagaraRibbons)].Flag; } set { this[nameof(bUsedWithNiagaraRibbons)].Flag = value; } }
        public bool bUsedWithNiagaraMeshParticles { get { return this[nameof(bUsedWithNiagaraMeshParticles)].Flag; } set { this[nameof(bUsedWithNiagaraMeshParticles)].Flag = value; } }
        public bool bUsedWithGeometryCache { get { return this[nameof(bUsedWithGeometryCache)].Flag; } set { this[nameof(bUsedWithGeometryCache)].Flag = value; } }
        public bool bUsedWithStaticLighting { get { return this[nameof(bUsedWithStaticLighting)].Flag; } set { this[nameof(bUsedWithStaticLighting)].Flag = value; } }
        public bool bUsedWithMorphTargets { get { return this[nameof(bUsedWithMorphTargets)].Flag; } set { this[nameof(bUsedWithMorphTargets)].Flag = value; } }
        public bool bUsedWithSplineMeshes { get { return this[nameof(bUsedWithSplineMeshes)].Flag; } set { this[nameof(bUsedWithSplineMeshes)].Flag = value; } }
        public bool bUsedWithInstancedStaticMeshes { get { return this[nameof(bUsedWithInstancedStaticMeshes)].Flag; } set { this[nameof(bUsedWithInstancedStaticMeshes)].Flag = value; } }
        public bool bUsedWithGeometryCollections { get { return this[nameof(bUsedWithGeometryCollections)].Flag; } set { this[nameof(bUsedWithGeometryCollections)].Flag = value; } }
        public bool bUsesDistortion { get { return this[nameof(bUsesDistortion)].Flag; } set { this[nameof(bUsesDistortion)].Flag = value; } }
        public bool bUsedWithClothing { get { return this[nameof(bUsedWithClothing)].Flag; } set { this[nameof(bUsedWithClothing)].Flag = value; } }
        public bool bUsedWithWater { get { return this[nameof(bUsedWithWater)].Flag; } set { this[nameof(bUsedWithWater)].Flag = value; } }
        public bool bUsedWithHairStrands { get { return this[nameof(bUsedWithHairStrands)].Flag; } set { this[nameof(bUsedWithHairStrands)].Flag = value; } }
        public bool bUsedWithLidarPointCloud { get { return this[nameof(bUsedWithLidarPointCloud)].Flag; } set { this[nameof(bUsedWithLidarPointCloud)].Flag = value; } }
        public bool bUsedWithVirtualHeightfieldMesh { get { return this[nameof(bUsedWithVirtualHeightfieldMesh)].Flag; } set { this[nameof(bUsedWithVirtualHeightfieldMesh)].Flag = value; } }
        public bool bUsedWithNanite { get { return this[nameof(bUsedWithNanite)].Flag; } set { this[nameof(bUsedWithNanite)].Flag = value; } }
        public bool bUsedWithUI { get { return this[nameof(bUsedWithUI)].Flag; } set { this[nameof(bUsedWithUI)].Flag = value; } }
        public bool bAutomaticallySetUsageInEditor { get { return this[nameof(bAutomaticallySetUsageInEditor)].Flag; } set { this[nameof(bAutomaticallySetUsageInEditor)].Flag = value; } }
        public bool bFullyRough { get { return this[nameof(bFullyRough)].Flag; } set { this[nameof(bFullyRough)].Flag = value; } }
        public bool bUseFullPrecision { get { return this[nameof(bUseFullPrecision)].Flag; } set { this[nameof(bUseFullPrecision)].Flag = value; } }
        //public byte FloatPrecisionMode { get { return this[nameof(FloatPrecisionMode)].GetValue<byte>(); } set { this[nameof(FloatPrecisionMode)].SetValue<byte>(value); } }
        public bool bUseLightmapDirectionality { get { return this[nameof(bUseLightmapDirectionality)].Flag; } set { this[nameof(bUseLightmapDirectionality)].Flag = value; } }
        public bool bMobileEnableHighQualityBRDF { get { return this[nameof(bMobileEnableHighQualityBRDF)].Flag; } set { this[nameof(bMobileEnableHighQualityBRDF)].Flag = value; } }
        public bool bUseAlphaToCoverage { get { return this[nameof(bUseAlphaToCoverage)].Flag; } set { this[nameof(bUseAlphaToCoverage)].Flag = value; } }
        public bool bForwardRenderUsePreintegratedGFForSimpleIBL { get { return this[nameof(bForwardRenderUsePreintegratedGFForSimpleIBL)].Flag; } set { this[nameof(bForwardRenderUsePreintegratedGFForSimpleIBL)].Flag = value; } }
        public bool bUseHQForwardReflections { get { return this[nameof(bUseHQForwardReflections)].Flag; } set { this[nameof(bUseHQForwardReflections)].Flag = value; } }
        public bool bForwardBlendsSkyLightCubemaps { get { return this[nameof(bForwardBlendsSkyLightCubemaps)].Flag; } set { this[nameof(bForwardBlendsSkyLightCubemaps)].Flag = value; } }
        public bool bUsePlanarForwardReflections { get { return this[nameof(bUsePlanarForwardReflections)].Flag; } set { this[nameof(bUsePlanarForwardReflections)].Flag = value; } }
        public bool bNormalCurvatureToRoughness { get { return this[nameof(bNormalCurvatureToRoughness)].Flag; } set { this[nameof(bNormalCurvatureToRoughness)].Flag = value; } }
        public bool AllowTranslucentCustomDepthWrites { get { return this[nameof(AllowTranslucentCustomDepthWrites)].Flag; } set { this[nameof(AllowTranslucentCustomDepthWrites)].Flag = value; } }
        public bool Wireframe { get { return this[nameof(Wireframe)].Flag; } set { this[nameof(Wireframe)].Flag = value; } }
        public byte ShadingRate { get { return this[nameof(ShadingRate)].GetValue<byte>(); } set { this[nameof(ShadingRate)].SetValue<byte>(value); } }
        public bool bCanMaskedBeAssumedOpaque { get { return this[nameof(bCanMaskedBeAssumedOpaque)].Flag; } set { this[nameof(bCanMaskedBeAssumedOpaque)].Flag = value; } }
        public bool bIsMasked { get { return this[nameof(bIsMasked)].Flag; } set { this[nameof(bIsMasked)].Flag = value; } }
        public bool bIsPreviewMaterial { get { return this[nameof(bIsPreviewMaterial)].Flag; } set { this[nameof(bIsPreviewMaterial)].Flag = value; } }
        public bool bIsFunctionPreviewMaterial { get { return this[nameof(bIsFunctionPreviewMaterial)].Flag; } set { this[nameof(bIsFunctionPreviewMaterial)].Flag = value; } }
        public bool bUseMaterialAttributes { get { return this[nameof(bUseMaterialAttributes)].Flag; } set { this[nameof(bUseMaterialAttributes)].Flag = value; } }
        public bool bEnableExecWire { get { return this[nameof(bEnableExecWire)].Flag; } set { this[nameof(bEnableExecWire)].Flag = value; } }
        public bool bEnableNewHLSLGenerator { get { return this[nameof(bEnableNewHLSLGenerator)].Flag; } set { this[nameof(bEnableNewHLSLGenerator)].Flag = value; } }
        public bool bCastRayTracedShadows { get { return this[nameof(bCastRayTracedShadows)].Flag; } set { this[nameof(bCastRayTracedShadows)].Flag = value; } }
        public bool bUseTranslucencyVertexFog { get { return this[nameof(bUseTranslucencyVertexFog)].Flag; } set { this[nameof(bUseTranslucencyVertexFog)].Flag = value; } }
        public bool bApplyCloudFogging { get { return this[nameof(bApplyCloudFogging)].Flag; } set { this[nameof(bApplyCloudFogging)].Flag = value; } }
        public bool bIsSky { get { return this[nameof(bIsSky)].Flag; } set { this[nameof(bIsSky)].Flag = value; } }
        public bool bComputeFogPerPixel { get { return this[nameof(bComputeFogPerPixel)].Flag; } set { this[nameof(bComputeFogPerPixel)].Flag = value; } }
        public bool bOutputTranslucentVelocity { get { return this[nameof(bOutputTranslucentVelocity)].Flag; } set { this[nameof(bOutputTranslucentVelocity)].Flag = value; } }
        public bool bAllowDevelopmentShaderCompile { get { return this[nameof(bAllowDevelopmentShaderCompile)].Flag; } set { this[nameof(bAllowDevelopmentShaderCompile)].Flag = value; } }
        public bool bIsMaterialEditorStatsMaterial { get { return this[nameof(bIsMaterialEditorStatsMaterial)].Flag; } set { this[nameof(bIsMaterialEditorStatsMaterial)].Flag = value; } }
        public byte BlendableLocation { get { return this[nameof(BlendableLocation)].GetValue<byte>(); } set { this[nameof(BlendableLocation)].SetValue<byte>(value); } }
        public bool BlendableOutputAlpha { get { return this[nameof(BlendableOutputAlpha)].Flag; } set { this[nameof(BlendableOutputAlpha)].Flag = value; } }
        public bool bEnableStencilTest { get { return this[nameof(bEnableStencilTest)].Flag; } set { this[nameof(bEnableStencilTest)].Flag = value; } }
        public byte StencilCompare { get { return this[nameof(StencilCompare)].GetValue<byte>(); } set { this[nameof(StencilCompare)].SetValue<byte>(value); } }
        public byte StencilRefValue { get { return this[nameof(StencilRefValue)].GetValue<byte>(); } set { this[nameof(StencilRefValue)].SetValue<byte>(value); } }
        public byte RefractionMode { get { return this[nameof(RefractionMode)].GetValue<byte>(); } set { this[nameof(RefractionMode)].SetValue<byte>(value); } }
        public int BlendablePriority { get { return this[nameof(BlendablePriority)].GetValue<int>(); } set { this[nameof(BlendablePriority)].SetValue<int>(value); } }
        public bool bIsBlendable { get { return this[nameof(bIsBlendable)].Flag; } set { this[nameof(bIsBlendable)].Flag = value; } }
        public uint UsageFlagWarnings { get { return this[nameof(UsageFlagWarnings)].GetValue<uint>(); } set { this[nameof(UsageFlagWarnings)].SetValue<uint>(value); } }
        public float RefractionDepthBias { get { return this[nameof(RefractionDepthBias)].GetValue<float>(); } set { this[nameof(RefractionDepthBias)].SetValue<float>(value); } }
        public Guid StateId { get { return this[nameof(StateId)].As<Guid>(); } set { this["StateId"] = value; } }
    }
    public class MaterialExpressionAbs : MaterialExpression
    {
        public MaterialExpressionAbs(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionAbsorptionMediumMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionAbsorptionMediumMaterialOutput(nint addr) : base(addr) { }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
    }
    public class MaterialExpressionActorPositionWS : MaterialExpression
    {
        public MaterialExpressionActorPositionWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionAdd : MaterialExpression
    {
        public MaterialExpressionAdd(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionAntialiasedTextureMask : MaterialExpressionTextureSampleParameter2D
    {
        public MaterialExpressionAntialiasedTextureMask(nint addr) : base(addr) { }
        public float Threshold { get { return this[nameof(Threshold)].GetValue<float>(); } set { this[nameof(Threshold)].SetValue<float>(value); } }
        public byte Channel { get { return this[nameof(Channel)].GetValue<byte>(); } set { this[nameof(Channel)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionAppendVector : MaterialExpression
    {
        public MaterialExpressionAppendVector(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionArccosine : MaterialExpression
    {
        public MaterialExpressionArccosine(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArccosineFast : MaterialExpression
    {
        public MaterialExpressionArccosineFast(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArcsine : MaterialExpression
    {
        public MaterialExpressionArcsine(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArcsineFast : MaterialExpression
    {
        public MaterialExpressionArcsineFast(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArctangent : MaterialExpression
    {
        public MaterialExpressionArctangent(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionArctangent2 : MaterialExpression
    {
        public MaterialExpressionArctangent2(nint addr) : base(addr) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionArctangent2Fast : MaterialExpression
    {
        public MaterialExpressionArctangent2Fast(nint addr) : base(addr) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionArctangentFast : MaterialExpression
    {
        public MaterialExpressionArctangentFast(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionAtmosphericFogColor : MaterialExpression
    {
        public MaterialExpressionAtmosphericFogColor(nint addr) : base(addr) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionAtmosphericLightColor : MaterialExpression
    {
        public MaterialExpressionAtmosphericLightColor(nint addr) : base(addr) { }
    }
    public class MaterialExpressionAtmosphericLightVector : MaterialExpression
    {
        public MaterialExpressionAtmosphericLightVector(nint addr) : base(addr) { }
    }
    public class MaterialExpressionBentNormalCustomOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionBentNormalCustomOutput(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionBinaryOp : MaterialExpression
    {
        public MaterialExpressionBinaryOp(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionLess : MaterialExpressionBinaryOp
    {
        public MaterialExpressionLess(nint addr) : base(addr) { }
    }
    public class MaterialExpressionBlackBody : MaterialExpression
    {
        public MaterialExpressionBlackBody(nint addr) : base(addr) { }
        public ExpressionInput Temp { get { return this[nameof(Temp)].As<ExpressionInput>(); } set { this["Temp"] = value; } }
    }
    public class MaterialExpressionBlendMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionBlendMaterialAttributes(nint addr) : base(addr) { }
        public MaterialAttributesInput A { get { return this[nameof(A)].As<MaterialAttributesInput>(); } set { this["A"] = value; } }
        public MaterialAttributesInput B { get { return this[nameof(B)].As<MaterialAttributesInput>(); } set { this["B"] = value; } }
        public ExpressionInput Alpha { get { return this[nameof(Alpha)].As<ExpressionInput>(); } set { this["Alpha"] = value; } }
        public byte PixelAttributeBlendType { get { return this[nameof(PixelAttributeBlendType)].GetValue<byte>(); } set { this[nameof(PixelAttributeBlendType)].SetValue<byte>(value); } }
        public byte VertexAttributeBlendType { get { return this[nameof(VertexAttributeBlendType)].GetValue<byte>(); } set { this[nameof(VertexAttributeBlendType)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionBreakMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionBreakMaterialAttributes(nint addr) : base(addr) { }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
    }
    public class MaterialExpressionBumpOffset : MaterialExpression
    {
        public MaterialExpressionBumpOffset(nint addr) : base(addr) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Height { get { return this[nameof(Height)].As<ExpressionInput>(); } set { this["Height"] = value; } }
        public ExpressionInput HeightRatioInput { get { return this[nameof(HeightRatioInput)].As<ExpressionInput>(); } set { this["HeightRatioInput"] = value; } }
        public float HeightRatio { get { return this[nameof(HeightRatio)].GetValue<float>(); } set { this[nameof(HeightRatio)].SetValue<float>(value); } }
        public float ReferencePlane { get { return this[nameof(ReferencePlane)].GetValue<float>(); } set { this[nameof(ReferencePlane)].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this[nameof(ConstCoordinate)].GetValue<uint>(); } set { this[nameof(ConstCoordinate)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionCameraPositionWS : MaterialExpression
    {
        public MaterialExpressionCameraPositionWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionCameraVectorWS : MaterialExpression
    {
        public MaterialExpressionCameraVectorWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionCeil : MaterialExpression
    {
        public MaterialExpressionCeil(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionParameter : MaterialExpression
    {
        public MaterialExpressionParameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
    }
    public class MaterialExpressionVectorParameter : MaterialExpressionParameter
    {
        public MaterialExpressionVectorParameter(nint addr) : base(addr) { }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
        public bool bUseCustomPrimitiveData { get { return this[nameof(bUseCustomPrimitiveData)].Flag; } set { this[nameof(bUseCustomPrimitiveData)].Flag = value; } }
        public byte PrimitiveDataIndex { get { return this[nameof(PrimitiveDataIndex)].GetValue<byte>(); } set { this[nameof(PrimitiveDataIndex)].SetValue<byte>(value); } }
        public ParameterChannelNames ChannelNames { get { return this[nameof(ChannelNames)].As<ParameterChannelNames>(); } set { this["ChannelNames"] = value; } }
    }
    public class MaterialExpressionChannelMaskParameter : MaterialExpressionVectorParameter
    {
        public MaterialExpressionChannelMaskParameter(nint addr) : base(addr) { }
        public byte MaskChannel { get { return this[nameof(MaskChannel)].GetValue<byte>(); } set { this[nameof(MaskChannel)].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionClamp : MaterialExpression
    {
        public MaterialExpressionClamp(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Min { get { return this[nameof(Min)].As<ExpressionInput>(); } set { this["Min"] = value; } }
        public ExpressionInput Max { get { return this[nameof(Max)].As<ExpressionInput>(); } set { this["Max"] = value; } }
        public byte ClampMode { get { return this[nameof(ClampMode)].GetValue<byte>(); } set { this[nameof(ClampMode)].SetValue<byte>(value); } }
        public float MinDefault { get { return this[nameof(MinDefault)].GetValue<float>(); } set { this[nameof(MinDefault)].SetValue<float>(value); } }
        public float MaxDefault { get { return this[nameof(MaxDefault)].GetValue<float>(); } set { this[nameof(MaxDefault)].SetValue<float>(value); } }
    }
    public class MaterialExpressionClearCoatNormalCustomOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionClearCoatNormalCustomOutput(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionCloudSampleAttribute : MaterialExpression
    {
        public MaterialExpressionCloudSampleAttribute(nint addr) : base(addr) { }
    }
    public class MaterialExpressionCollectionParameter : MaterialExpression
    {
        public MaterialExpressionCollectionParameter(nint addr) : base(addr) { }
        public MaterialParameterCollection Collection { get { return this[nameof(Collection)].As<MaterialParameterCollection>(); } set { this["Collection"] = value; } }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ParameterId { get { return this[nameof(ParameterId)].As<Guid>(); } set { this["ParameterId"] = value; } }
    }
    public class MaterialExpressionComment : MaterialExpression
    {
        public MaterialExpressionComment(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public LinearColor CommentColor { get { return this[nameof(CommentColor)].As<LinearColor>(); } set { this["CommentColor"] = value; } }
        public int FontSize { get { return this[nameof(FontSize)].GetValue<int>(); } set { this[nameof(FontSize)].SetValue<int>(value); } }
    }
    public class MaterialExpressionComponentMask : MaterialExpression
    {
        public MaterialExpressionComponentMask(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public bool R { get { return this[nameof(R)].Flag; } set { this[nameof(R)].Flag = value; } }
        public bool G { get { return this[nameof(G)].Flag; } set { this[nameof(G)].Flag = value; } }
        public bool B { get { return this[nameof(B)].Flag; } set { this[nameof(B)].Flag = value; } }
        public bool A { get { return this[nameof(A)].Flag; } set { this[nameof(A)].Flag = value; } }
    }
    public class MaterialExpressionComposite : MaterialExpression
    {
        public MaterialExpressionComposite(nint addr) : base(addr) { }
        public Object SubgraphName { get { return this[nameof(SubgraphName)]; } set { this[nameof(SubgraphName)] = value; } }
        public MaterialExpressionPinBase InputExpressions { get { return this[nameof(InputExpressions)].As<MaterialExpressionPinBase>(); } set { this["InputExpressions"] = value; } }
        public MaterialExpressionPinBase OutputExpressions { get { return this[nameof(OutputExpressions)].As<MaterialExpressionPinBase>(); } set { this["OutputExpressions"] = value; } }
    }
    public class MaterialExpressionConstant : MaterialExpression
    {
        public MaterialExpressionConstant(nint addr) : base(addr) { }
        public float R { get { return this[nameof(R)].GetValue<float>(); } set { this[nameof(R)].SetValue<float>(value); } }
    }
    public class MaterialExpressionConstant2Vector : MaterialExpression
    {
        public MaterialExpressionConstant2Vector(nint addr) : base(addr) { }
        public float R { get { return this[nameof(R)].GetValue<float>(); } set { this[nameof(R)].SetValue<float>(value); } }
        public float G { get { return this[nameof(G)].GetValue<float>(); } set { this[nameof(G)].SetValue<float>(value); } }
    }
    public class MaterialExpressionConstant3Vector : MaterialExpression
    {
        public MaterialExpressionConstant3Vector(nint addr) : base(addr) { }
        public LinearColor Constant { get { return this[nameof(Constant)].As<LinearColor>(); } set { this["Constant"] = value; } }
    }
    public class MaterialExpressionConstant4Vector : MaterialExpression
    {
        public MaterialExpressionConstant4Vector(nint addr) : base(addr) { }
        public LinearColor Constant { get { return this[nameof(Constant)].As<LinearColor>(); } set { this["Constant"] = value; } }
    }
    public class MaterialExpressionConstantBiasScale : MaterialExpression
    {
        public MaterialExpressionConstantBiasScale(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Bias { get { return this[nameof(Bias)].GetValue<float>(); } set { this[nameof(Bias)].SetValue<float>(value); } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
    }
    public class MaterialExpressionCosine : MaterialExpression
    {
        public MaterialExpressionCosine(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this[nameof(Period)].GetValue<float>(); } set { this[nameof(Period)].SetValue<float>(value); } }
    }
    public class MaterialExpressionCrossProduct : MaterialExpression
    {
        public MaterialExpressionCrossProduct(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionScalarParameter : MaterialExpressionParameter
    {
        public MaterialExpressionScalarParameter(nint addr) : base(addr) { }
        public float DefaultValue { get { return this[nameof(DefaultValue)].GetValue<float>(); } set { this[nameof(DefaultValue)].SetValue<float>(value); } }
        public bool bUseCustomPrimitiveData { get { return this[nameof(bUseCustomPrimitiveData)].Flag; } set { this[nameof(bUseCustomPrimitiveData)].Flag = value; } }
        public byte PrimitiveDataIndex { get { return this[nameof(PrimitiveDataIndex)].GetValue<byte>(); } set { this[nameof(PrimitiveDataIndex)].SetValue<byte>(value); } }
        public float SliderMin { get { return this[nameof(SliderMin)].GetValue<float>(); } set { this[nameof(SliderMin)].SetValue<float>(value); } }
        public float SliderMax { get { return this[nameof(SliderMax)].GetValue<float>(); } set { this[nameof(SliderMax)].SetValue<float>(value); } }
    }
    public class MaterialExpressionCurveAtlasRowParameter : MaterialExpressionScalarParameter
    {
        public MaterialExpressionCurveAtlasRowParameter(nint addr) : base(addr) { }
        public CurveLinearColor Curve { get { return this[nameof(Curve)].As<CurveLinearColor>(); } set { this["Curve"] = value; } }
        public CurveLinearColorAtlas Atlas { get { return this[nameof(Atlas)].As<CurveLinearColorAtlas>(); } set { this["Atlas"] = value; } }
        public ExpressionInput InputTime { get { return this[nameof(InputTime)].As<ExpressionInput>(); } set { this["InputTime"] = value; } }
    }
    public class MaterialExpressionCustom : MaterialExpression
    {
        public MaterialExpressionCustom(nint addr) : base(addr) { }
        public Object Code { get { return this[nameof(Code)]; } set { this[nameof(Code)] = value; } }
        public byte OutputType { get { return this[nameof(OutputType)].GetValue<byte>(); } set { this[nameof(OutputType)].SetValue<byte>(value); } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Array<CustomInput> Inputs { get { return new Array<CustomInput>(this[nameof(Inputs)].Address); } }
        public Array<CustomOutput> AdditionalOutputs { get { return new Array<CustomOutput>(this[nameof(AdditionalOutputs)].Address); } }
        public Array<CustomDefine> AdditionalDefines { get { return new Array<CustomDefine>(this[nameof(AdditionalDefines)].Address); } }
        public Array<Object> IncludeFilePaths { get { return new Array<Object>(this[nameof(IncludeFilePaths)].Address); } }
    }
    public class MaterialExpressionDBufferTexture : MaterialExpression
    {
        public MaterialExpressionDBufferTexture(nint addr) : base(addr) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public byte DBufferTextureId { get { return this[nameof(DBufferTextureId)].GetValue<byte>(); } set { this[nameof(DBufferTextureId)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionDDX : MaterialExpression
    {
        public MaterialExpressionDDX(nint addr) : base(addr) { }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionDDY : MaterialExpression
    {
        public MaterialExpressionDDY(nint addr) : base(addr) { }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionDecalDerivative : MaterialExpression
    {
        public MaterialExpressionDecalDerivative(nint addr) : base(addr) { }
    }
    public class MaterialExpressionDecalLifetimeOpacity : MaterialExpression
    {
        public MaterialExpressionDecalLifetimeOpacity(nint addr) : base(addr) { }
    }
    public class MaterialExpressionDecalMipmapLevel : MaterialExpression
    {
        public MaterialExpressionDecalMipmapLevel(nint addr) : base(addr) { }
        public ExpressionInput TextureSize { get { return this[nameof(TextureSize)].As<ExpressionInput>(); } set { this["TextureSize"] = value; } }
        public float ConstWidth { get { return this[nameof(ConstWidth)].GetValue<float>(); } set { this[nameof(ConstWidth)].SetValue<float>(value); } }
        public float ConstHeight { get { return this[nameof(ConstHeight)].GetValue<float>(); } set { this[nameof(ConstHeight)].SetValue<float>(value); } }
    }
    public class MaterialExpressionDeltaTime : MaterialExpression
    {
        public MaterialExpressionDeltaTime(nint addr) : base(addr) { }
    }
    public class MaterialExpressionDepthFade : MaterialExpression
    {
        public MaterialExpressionDepthFade(nint addr) : base(addr) { }
        public ExpressionInput InOpacity { get { return this[nameof(InOpacity)].As<ExpressionInput>(); } set { this["InOpacity"] = value; } }
        public ExpressionInput FadeDistance { get { return this[nameof(FadeDistance)].As<ExpressionInput>(); } set { this["FadeDistance"] = value; } }
        public float OpacityDefault { get { return this[nameof(OpacityDefault)].GetValue<float>(); } set { this[nameof(OpacityDefault)].SetValue<float>(value); } }
        public float FadeDistanceDefault { get { return this[nameof(FadeDistanceDefault)].GetValue<float>(); } set { this[nameof(FadeDistanceDefault)].SetValue<float>(value); } }
    }
    public class MaterialExpressionDepthOfFieldFunction : MaterialExpression
    {
        public MaterialExpressionDepthOfFieldFunction(nint addr) : base(addr) { }
        public byte FunctionValue { get { return this[nameof(FunctionValue)].GetValue<byte>(); } set { this[nameof(FunctionValue)].SetValue<byte>(value); } }
        public ExpressionInput Depth { get { return this[nameof(Depth)].As<ExpressionInput>(); } set { this["Depth"] = value; } }
    }
    public class MaterialExpressionDeriveNormalZ : MaterialExpression
    {
        public MaterialExpressionDeriveNormalZ(nint addr) : base(addr) { }
        public ExpressionInput InXY { get { return this[nameof(InXY)].As<ExpressionInput>(); } set { this["InXY"] = value; } }
    }
    public class MaterialExpressionDesaturation : MaterialExpression
    {
        public MaterialExpressionDesaturation(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Fraction { get { return this[nameof(Fraction)].As<ExpressionInput>(); } set { this["Fraction"] = value; } }
        public LinearColor LuminanceFactors { get { return this[nameof(LuminanceFactors)].As<LinearColor>(); } set { this["LuminanceFactors"] = value; } }
    }
    public class MaterialExpressionDistance : MaterialExpression
    {
        public MaterialExpressionDistance(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionDistanceCullFade : MaterialExpression
    {
        public MaterialExpressionDistanceCullFade(nint addr) : base(addr) { }
    }
    public class MaterialExpressionDistanceFieldApproxAO : MaterialExpression
    {
        public MaterialExpressionDistanceFieldApproxAO(nint addr) : base(addr) { }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput BaseDistance { get { return this[nameof(BaseDistance)].As<ExpressionInput>(); } set { this["BaseDistance"] = value; } }
        public float BaseDistanceDefault { get { return this[nameof(BaseDistanceDefault)].GetValue<float>(); } set { this[nameof(BaseDistanceDefault)].SetValue<float>(value); } }
        public ExpressionInput Radius { get { return this[nameof(Radius)].As<ExpressionInput>(); } set { this["Radius"] = value; } }
        public float RadiusDefault { get { return this[nameof(RadiusDefault)].GetValue<float>(); } set { this[nameof(RadiusDefault)].SetValue<float>(value); } }
        public uint NumSteps { get { return this[nameof(NumSteps)].GetValue<uint>(); } set { this[nameof(NumSteps)].SetValue<uint>(value); } }
        public float StepScaleDefault { get { return this[nameof(StepScaleDefault)].GetValue<float>(); } set { this[nameof(StepScaleDefault)].SetValue<float>(value); } }
    }
    public class MaterialExpressionDistanceFieldGradient : MaterialExpression
    {
        public MaterialExpressionDistanceFieldGradient(nint addr) : base(addr) { }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
    }
    public class MaterialExpressionDistanceFieldsRenderingSwitch : MaterialExpression
    {
        public MaterialExpressionDistanceFieldsRenderingSwitch(nint addr) : base(addr) { }
        public ExpressionInput No { get { return this[nameof(No)].As<ExpressionInput>(); } set { this["No"] = value; } }
        public ExpressionInput Yes { get { return this[nameof(Yes)].As<ExpressionInput>(); } set { this["Yes"] = value; } }
    }
    public class MaterialExpressionDistanceToNearestSurface : MaterialExpression
    {
        public MaterialExpressionDistanceToNearestSurface(nint addr) : base(addr) { }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
    }
    public class MaterialExpressionDivide : MaterialExpression
    {
        public MaterialExpressionDivide(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionDotProduct : MaterialExpression
    {
        public MaterialExpressionDotProduct(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionDoubleVectorParameter : MaterialExpressionParameter
    {
        public MaterialExpressionDoubleVectorParameter(nint addr) : base(addr) { }
        public Vector4d DefaultValue { get { return this[nameof(DefaultValue)].As<Vector4d>(); } set { this["DefaultValue"] = value; } }
    }
    public class MaterialExpressionDynamicParameter : MaterialExpression
    {
        public MaterialExpressionDynamicParameter(nint addr) : base(addr) { }
        public Array<Object> ParamNames { get { return new Array<Object>(this[nameof(ParamNames)].Address); } }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
        public uint ParameterIndex { get { return this[nameof(ParameterIndex)].GetValue<uint>(); } set { this[nameof(ParameterIndex)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionExecBegin : MaterialExpression
    {
        public MaterialExpressionExecBegin(nint addr) : base(addr) { }
        public ExpressionExecOutput Exec { get { return this[nameof(Exec)].As<ExpressionExecOutput>(); } set { this["Exec"] = value; } }
    }
    public class MaterialExpressionExecEnd : MaterialExpression
    {
        public MaterialExpressionExecEnd(nint addr) : base(addr) { }
    }
    public class MaterialExpressionEyeAdaptation : MaterialExpression
    {
        public MaterialExpressionEyeAdaptation(nint addr) : base(addr) { }
    }
    public class MaterialExpressionEyeAdaptationInverse : MaterialExpression
    {
        public MaterialExpressionEyeAdaptationInverse(nint addr) : base(addr) { }
        public ExpressionInput LightValueInput { get { return this[nameof(LightValueInput)].As<ExpressionInput>(); } set { this["LightValueInput"] = value; } }
        public ExpressionInput AlphaInput { get { return this[nameof(AlphaInput)].As<ExpressionInput>(); } set { this["AlphaInput"] = value; } }
    }
    public class MaterialExpressionFeatureLevelSwitch : MaterialExpression
    {
        public MaterialExpressionFeatureLevelSwitch(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Inputs { get { return this[nameof(Inputs)].As<ExpressionInput>(); } set { this["Inputs"] = value; } }
    }
    public class MaterialExpressionFloor : MaterialExpression
    {
        public MaterialExpressionFloor(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionFmod : MaterialExpression
    {
        public MaterialExpressionFmod(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionFontSample : MaterialExpression
    {
        public MaterialExpressionFontSample(nint addr) : base(addr) { }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public int FontTexturePage { get { return this[nameof(FontTexturePage)].GetValue<int>(); } set { this[nameof(FontTexturePage)].SetValue<int>(value); } }
    }
    public class MaterialExpressionFontSampleParameter : MaterialExpressionFontSample
    {
        public MaterialExpressionFontSampleParameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
    }
    public class MaterialExpressionForLoop : MaterialExpression
    {
        public MaterialExpressionForLoop(nint addr) : base(addr) { }
        public ExpressionExecOutput LoopBody { get { return this[nameof(LoopBody)].As<ExpressionExecOutput>(); } set { this["LoopBody"] = value; } }
        public ExpressionExecOutput Completed { get { return this[nameof(Completed)].As<ExpressionExecOutput>(); } set { this["Completed"] = value; } }
        public ExpressionInput StartIndex { get { return this[nameof(StartIndex)].As<ExpressionInput>(); } set { this["StartIndex"] = value; } }
        public ExpressionInput EndIndex { get { return this[nameof(EndIndex)].As<ExpressionInput>(); } set { this["EndIndex"] = value; } }
        public ExpressionInput IndexStep { get { return this[nameof(IndexStep)].As<ExpressionInput>(); } set { this["IndexStep"] = value; } }
    }
    public class MaterialExpressionFrac : MaterialExpression
    {
        public MaterialExpressionFrac(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionFresnel : MaterialExpression
    {
        public MaterialExpressionFresnel(nint addr) : base(addr) { }
        public ExpressionInput ExponentIn { get { return this[nameof(ExponentIn)].As<ExpressionInput>(); } set { this["ExponentIn"] = value; } }
        public float Exponent { get { return this[nameof(Exponent)].GetValue<float>(); } set { this[nameof(Exponent)].SetValue<float>(value); } }
        public ExpressionInput BaseReflectFractionIn { get { return this[nameof(BaseReflectFractionIn)].As<ExpressionInput>(); } set { this["BaseReflectFractionIn"] = value; } }
        public float BaseReflectFraction { get { return this[nameof(BaseReflectFraction)].GetValue<float>(); } set { this[nameof(BaseReflectFraction)].SetValue<float>(value); } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
    }
    public class MaterialExpressionFunctionInput : MaterialExpression
    {
        public MaterialExpressionFunctionInput(nint addr) : base(addr) { }
        public ExpressionInput Preview { get { return this[nameof(Preview)].As<ExpressionInput>(); } set { this["Preview"] = value; } }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
        public byte InputType { get { return this[nameof(InputType)].GetValue<byte>(); } set { this[nameof(InputType)].SetValue<byte>(value); } }
        public Vector4f PreviewValue { get { return this[nameof(PreviewValue)].As<Vector4f>(); } set { this["PreviewValue"] = value; } }
        public bool bUsePreviewValueAsDefault { get { return this[nameof(bUsePreviewValueAsDefault)].Flag; } set { this[nameof(bUsePreviewValueAsDefault)].Flag = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
        public bool bCompilingFunctionPreview { get { return this[nameof(bCompilingFunctionPreview)].Flag; } set { this[nameof(bCompilingFunctionPreview)].Flag = value; } }
    }
    public class MaterialExpressionFunctionOutput : MaterialExpression
    {
        public MaterialExpressionFunctionOutput(nint addr) : base(addr) { }
        public Object OutputName { get { return this[nameof(OutputName)]; } set { this[nameof(OutputName)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public bool bLastPreviewed { get { return this[nameof(bLastPreviewed)].Flag; } set { this[nameof(bLastPreviewed)].Flag = value; } }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
    }
    public class MaterialExpressionGenericConstant : MaterialExpression
    {
        public MaterialExpressionGenericConstant(nint addr) : base(addr) { }
    }
    public class MaterialExpressionConstantDouble : MaterialExpressionGenericConstant
    {
        public MaterialExpressionConstantDouble(nint addr) : base(addr) { }
        public double Value { get { return this[nameof(Value)].GetValue<double>(); } set { this[nameof(Value)].SetValue<double>(value); } }
    }
    public class MaterialExpressionGetLocal : MaterialExpression
    {
        public MaterialExpressionGetLocal(nint addr) : base(addr) { }
        public Object LocalName { get { return this[nameof(LocalName)]; } set { this[nameof(LocalName)] = value; } }
    }
    public class MaterialExpressionGetMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionGetMaterialAttributes(nint addr) : base(addr) { }
        public MaterialAttributesInput MaterialAttributes { get { return this[nameof(MaterialAttributes)].As<MaterialAttributesInput>(); } set { this["MaterialAttributes"] = value; } }
        public Array<Guid> AttributeGetTypes { get { return new Array<Guid>(this[nameof(AttributeGetTypes)].Address); } }
    }
    public class MaterialExpressionGIReplace : MaterialExpression
    {
        public MaterialExpressionGIReplace(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput StaticIndirect { get { return this[nameof(StaticIndirect)].As<ExpressionInput>(); } set { this["StaticIndirect"] = value; } }
        public ExpressionInput DynamicIndirect { get { return this[nameof(DynamicIndirect)].As<ExpressionInput>(); } set { this["DynamicIndirect"] = value; } }
    }
    public class MaterialExpressionHairAttributes : MaterialExpression
    {
        public MaterialExpressionHairAttributes(nint addr) : base(addr) { }
        public bool bUseTangentSpace { get { return this[nameof(bUseTangentSpace)].Flag; } set { this[nameof(bUseTangentSpace)].Flag = value; } }
    }
    public class MaterialExpressionHairColor : MaterialExpression
    {
        public MaterialExpressionHairColor(nint addr) : base(addr) { }
        public ExpressionInput Melanin { get { return this[nameof(Melanin)].As<ExpressionInput>(); } set { this["Melanin"] = value; } }
        public ExpressionInput Redness { get { return this[nameof(Redness)].As<ExpressionInput>(); } set { this["Redness"] = value; } }
        public ExpressionInput DyeColor { get { return this[nameof(DyeColor)].As<ExpressionInput>(); } set { this["DyeColor"] = value; } }
    }
    public class MaterialExpressionIf : MaterialExpression
    {
        public MaterialExpressionIf(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput AGreaterThanB { get { return this[nameof(AGreaterThanB)].As<ExpressionInput>(); } set { this["AGreaterThanB"] = value; } }
        public ExpressionInput AEqualsB { get { return this[nameof(AEqualsB)].As<ExpressionInput>(); } set { this["AEqualsB"] = value; } }
        public ExpressionInput ALessThanB { get { return this[nameof(ALessThanB)].As<ExpressionInput>(); } set { this["ALessThanB"] = value; } }
        public float EqualsThreshold { get { return this[nameof(EqualsThreshold)].GetValue<float>(); } set { this[nameof(EqualsThreshold)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
        public float ConstAEqualsB { get { return this[nameof(ConstAEqualsB)].GetValue<float>(); } set { this[nameof(ConstAEqualsB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionIfThenElse : MaterialExpression
    {
        public MaterialExpressionIfThenElse(nint addr) : base(addr) { }
        public ExpressionExecOutput Then { get { return this[nameof(Then)].As<ExpressionExecOutput>(); } set { this["Then"] = value; } }
        public ExpressionExecOutput Else { get { return this[nameof(Else)].As<ExpressionExecOutput>(); } set { this["Else"] = value; } }
        public ExpressionInput Condition { get { return this[nameof(Condition)].As<ExpressionInput>(); } set { this["Condition"] = value; } }
    }
    public class MaterialExpressionInverseLinearInterpolate : MaterialExpression
    {
        public MaterialExpressionInverseLinearInterpolate(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
        public float ConstValue { get { return this[nameof(ConstValue)].GetValue<float>(); } set { this[nameof(ConstValue)].SetValue<float>(value); } }
        public bool bClampResult { get { return this[nameof(bClampResult)].Flag; } set { this[nameof(bClampResult)].Flag = value; } }
    }
    public class MaterialExpressionIsOrthographic : MaterialExpression
    {
        public MaterialExpressionIsOrthographic(nint addr) : base(addr) { }
    }
    public class MaterialExpressionLightmapUVs : MaterialExpression
    {
        public MaterialExpressionLightmapUVs(nint addr) : base(addr) { }
    }
    public class MaterialExpressionLightmassReplace : MaterialExpression
    {
        public MaterialExpressionLightmassReplace(nint addr) : base(addr) { }
        public ExpressionInput Realtime { get { return this[nameof(Realtime)].As<ExpressionInput>(); } set { this["Realtime"] = value; } }
        public ExpressionInput Lightmass { get { return this[nameof(Lightmass)].As<ExpressionInput>(); } set { this["Lightmass"] = value; } }
    }
    public class MaterialExpressionLightVector : MaterialExpression
    {
        public MaterialExpressionLightVector(nint addr) : base(addr) { }
    }
    public class MaterialExpressionLinearInterpolate : MaterialExpression
    {
        public MaterialExpressionLinearInterpolate(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Alpha { get { return this[nameof(Alpha)].As<ExpressionInput>(); } set { this["Alpha"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
        public float ConstAlpha { get { return this[nameof(ConstAlpha)].GetValue<float>(); } set { this[nameof(ConstAlpha)].SetValue<float>(value); } }
    }
    public class MaterialExpressionLogarithm10 : MaterialExpression
    {
        public MaterialExpressionLogarithm10(nint addr) : base(addr) { }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionLogarithm2 : MaterialExpression
    {
        public MaterialExpressionLogarithm2(nint addr) : base(addr) { }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
    }
    public class MaterialExpressionMakeMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionMakeMaterialAttributes(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Anisotropy { get { return this[nameof(Anisotropy)].As<ExpressionInput>(); } set { this["Anisotropy"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
        public ExpressionInput OpacityMask { get { return this[nameof(OpacityMask)].As<ExpressionInput>(); } set { this["OpacityMask"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput Tangent { get { return this[nameof(Tangent)].As<ExpressionInput>(); } set { this["Tangent"] = value; } }
        public ExpressionInput WorldPositionOffset { get { return this[nameof(WorldPositionOffset)].As<ExpressionInput>(); } set { this["WorldPositionOffset"] = value; } }
        public ExpressionInput SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<ExpressionInput>(); } set { this["SubsurfaceColor"] = value; } }
        public ExpressionInput ClearCoat { get { return this[nameof(ClearCoat)].As<ExpressionInput>(); } set { this["ClearCoat"] = value; } }
        public ExpressionInput ClearCoatRoughness { get { return this[nameof(ClearCoatRoughness)].As<ExpressionInput>(); } set { this["ClearCoatRoughness"] = value; } }
        public ExpressionInput AmbientOcclusion { get { return this[nameof(AmbientOcclusion)].As<ExpressionInput>(); } set { this["AmbientOcclusion"] = value; } }
        public ExpressionInput Refraction { get { return this[nameof(Refraction)].As<ExpressionInput>(); } set { this["Refraction"] = value; } }
        public ExpressionInput CustomizedUVs { get { return this[nameof(CustomizedUVs)].As<ExpressionInput>(); } set { this["CustomizedUVs"] = value; } }
        public ExpressionInput PixelDepthOffset { get { return this[nameof(PixelDepthOffset)].As<ExpressionInput>(); } set { this["PixelDepthOffset"] = value; } }
        public ExpressionInput ShadingModel { get { return this[nameof(ShadingModel)].As<ExpressionInput>(); } set { this["ShadingModel"] = value; } }
    }
    public class MaterialExpressionMapARPassthroughCameraUV : MaterialExpression
    {
        public MaterialExpressionMapARPassthroughCameraUV(nint addr) : base(addr) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
    }
    public class MaterialExpressionMaterialAttributeLayers : MaterialExpression
    {
        public MaterialExpressionMaterialAttributeLayers(nint addr) : base(addr) { }
        public MaterialAttributesInput Input { get { return this[nameof(Input)].As<MaterialAttributesInput>(); } set { this["Input"] = value; } }
        public MaterialLayersFunctions DefaultLayers { get { return this[nameof(DefaultLayers)].As<MaterialLayersFunctions>(); } set { this["DefaultLayers"] = value; } }
        public Array<MaterialExpressionMaterialFunctionCall> LayerCallers { get { return new Array<MaterialExpressionMaterialFunctionCall>(this[nameof(LayerCallers)].Address); } }
        public int NumActiveLayerCallers { get { return this[nameof(NumActiveLayerCallers)].GetValue<int>(); } set { this[nameof(NumActiveLayerCallers)].SetValue<int>(value); } }
        public Array<MaterialExpressionMaterialFunctionCall> BlendCallers { get { return new Array<MaterialExpressionMaterialFunctionCall>(this[nameof(BlendCallers)].Address); } }
        public int NumActiveBlendCallers { get { return this[nameof(NumActiveBlendCallers)].GetValue<int>(); } set { this[nameof(NumActiveBlendCallers)].SetValue<int>(value); } }
        public bool bIsLayerGraphBuilt { get { return this[nameof(bIsLayerGraphBuilt)].Flag; } set { this[nameof(bIsLayerGraphBuilt)].Flag = value; } }
    }
    public class MaterialExpressionMaterialFunctionCall : MaterialExpression
    {
        public MaterialExpressionMaterialFunctionCall(nint addr) : base(addr) { }
        public MaterialFunctionInterface MaterialFunction { get { return this[nameof(MaterialFunction)].As<MaterialFunctionInterface>(); } set { this["MaterialFunction"] = value; } }
        public Array<FunctionExpressionInput> FunctionInputs { get { return new Array<FunctionExpressionInput>(this[nameof(FunctionInputs)].Address); } }
        public Array<FunctionExpressionOutput> FunctionOutputs { get { return new Array<FunctionExpressionOutput>(this[nameof(FunctionOutputs)].Address); } }
        public MaterialParameterInfo FunctionParameterInfo { get { return this[nameof(FunctionParameterInfo)].As<MaterialParameterInfo>(); } set { this["FunctionParameterInfo"] = value; } }
    }
    public class MaterialExpressionMaterialLayerOutput : MaterialExpressionFunctionOutput
    {
        public MaterialExpressionMaterialLayerOutput(nint addr) : base(addr) { }
    }
    public class MaterialExpressionMaterialProxyReplace : MaterialExpression
    {
        public MaterialExpressionMaterialProxyReplace(nint addr) : base(addr) { }
        public ExpressionInput Realtime { get { return this[nameof(Realtime)].As<ExpressionInput>(); } set { this["Realtime"] = value; } }
        public ExpressionInput MaterialProxy { get { return this[nameof(MaterialProxy)].As<ExpressionInput>(); } set { this["MaterialProxy"] = value; } }
    }
    public class MaterialExpressionMax : MaterialExpression
    {
        public MaterialExpressionMax(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionMin : MaterialExpression
    {
        public MaterialExpressionMin(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionMultiply : MaterialExpression
    {
        public MaterialExpressionMultiply(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionRerouteBase : MaterialExpression
    {
        public MaterialExpressionRerouteBase(nint addr) : base(addr) { }
    }
    public class MaterialExpressionNamedRerouteBase : MaterialExpressionRerouteBase
    {
        public MaterialExpressionNamedRerouteBase(nint addr) : base(addr) { }
    }
    public class MaterialExpressionNamedRerouteDeclaration : MaterialExpressionNamedRerouteBase
    {
        public MaterialExpressionNamedRerouteDeclaration(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public LinearColor NodeColor { get { return this[nameof(NodeColor)].As<LinearColor>(); } set { this["NodeColor"] = value; } }
        public Guid VariableGuid { get { return this[nameof(VariableGuid)].As<Guid>(); } set { this["VariableGuid"] = value; } }
    }
    public class MaterialExpressionNamedRerouteUsage : MaterialExpressionNamedRerouteBase
    {
        public MaterialExpressionNamedRerouteUsage(nint addr) : base(addr) { }
        public MaterialExpressionNamedRerouteDeclaration Declaration { get { return this[nameof(Declaration)].As<MaterialExpressionNamedRerouteDeclaration>(); } set { this["Declaration"] = value; } }
        public Guid DeclarationGuid { get { return this[nameof(DeclarationGuid)].As<Guid>(); } set { this["DeclarationGuid"] = value; } }
    }
    public class MaterialExpressionNaniteReplace : MaterialExpression
    {
        public MaterialExpressionNaniteReplace(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Nanite { get { return this[nameof(Nanite)].As<ExpressionInput>(); } set { this["Nanite"] = value; } }
    }
    public class MaterialExpressionNoise : MaterialExpression
    {
        public MaterialExpressionNoise(nint addr) : base(addr) { }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
        public ExpressionInput FilterWidth { get { return this[nameof(FilterWidth)].As<ExpressionInput>(); } set { this["FilterWidth"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public int Quality { get { return this[nameof(Quality)].GetValue<int>(); } set { this[nameof(Quality)].SetValue<int>(value); } }
        public byte NoiseFunction { get { return this[nameof(NoiseFunction)].GetValue<byte>(); } set { this[nameof(NoiseFunction)].SetValue<byte>(value); } }
        public bool bTurbulence { get { return this[nameof(bTurbulence)].Flag; } set { this[nameof(bTurbulence)].Flag = value; } }
        public int Levels { get { return this[nameof(Levels)].GetValue<int>(); } set { this[nameof(Levels)].SetValue<int>(value); } }
        public float OutputMin { get { return this[nameof(OutputMin)].GetValue<float>(); } set { this[nameof(OutputMin)].SetValue<float>(value); } }
        public float OutputMax { get { return this[nameof(OutputMax)].GetValue<float>(); } set { this[nameof(OutputMax)].SetValue<float>(value); } }
        public float LevelScale { get { return this[nameof(LevelScale)].GetValue<float>(); } set { this[nameof(LevelScale)].SetValue<float>(value); } }
        public bool bTiling { get { return this[nameof(bTiling)].Flag; } set { this[nameof(bTiling)].Flag = value; } }
        public uint RepeatSize { get { return this[nameof(RepeatSize)].GetValue<uint>(); } set { this[nameof(RepeatSize)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionNormalize : MaterialExpression
    {
        public MaterialExpressionNormalize(nint addr) : base(addr) { }
        public ExpressionInput VectorInput { get { return this[nameof(VectorInput)].As<ExpressionInput>(); } set { this["VectorInput"] = value; } }
    }
    public class MaterialExpressionObjectBounds : MaterialExpression
    {
        public MaterialExpressionObjectBounds(nint addr) : base(addr) { }
    }
    public class MaterialExpressionObjectOrientation : MaterialExpression
    {
        public MaterialExpressionObjectOrientation(nint addr) : base(addr) { }
    }
    public class MaterialExpressionObjectPositionWS : MaterialExpression
    {
        public MaterialExpressionObjectPositionWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionObjectRadius : MaterialExpression
    {
        public MaterialExpressionObjectRadius(nint addr) : base(addr) { }
    }
    public class MaterialExpressionOneMinus : MaterialExpression
    {
        public MaterialExpressionOneMinus(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionPanner : MaterialExpression
    {
        public MaterialExpressionPanner(nint addr) : base(addr) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Time { get { return this[nameof(Time)].As<ExpressionInput>(); } set { this["Time"] = value; } }
        public ExpressionInput Speed { get { return this[nameof(Speed)].As<ExpressionInput>(); } set { this["Speed"] = value; } }
        public float SpeedX { get { return this[nameof(SpeedX)].GetValue<float>(); } set { this[nameof(SpeedX)].SetValue<float>(value); } }
        public float SpeedY { get { return this[nameof(SpeedY)].GetValue<float>(); } set { this[nameof(SpeedY)].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this[nameof(ConstCoordinate)].GetValue<uint>(); } set { this[nameof(ConstCoordinate)].SetValue<uint>(value); } }
        public bool bFractionalPart { get { return this[nameof(bFractionalPart)].Flag; } set { this[nameof(bFractionalPart)].Flag = value; } }
    }
    public class MaterialExpressionParticleColor : MaterialExpression
    {
        public MaterialExpressionParticleColor(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleDirection : MaterialExpression
    {
        public MaterialExpressionParticleDirection(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleMacroUV : MaterialExpression
    {
        public MaterialExpressionParticleMacroUV(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleMotionBlurFade : MaterialExpression
    {
        public MaterialExpressionParticleMotionBlurFade(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticlePositionWS : MaterialExpression
    {
        public MaterialExpressionParticlePositionWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleRadius : MaterialExpression
    {
        public MaterialExpressionParticleRadius(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleRandom : MaterialExpression
    {
        public MaterialExpressionParticleRandom(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleRelativeTime : MaterialExpression
    {
        public MaterialExpressionParticleRelativeTime(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleSize : MaterialExpression
    {
        public MaterialExpressionParticleSize(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleSpeed : MaterialExpression
    {
        public MaterialExpressionParticleSpeed(nint addr) : base(addr) { }
    }
    public class MaterialExpressionParticleSubUV : MaterialExpressionTextureSample
    {
        public MaterialExpressionParticleSubUV(nint addr) : base(addr) { }
        public bool bBlend { get { return this[nameof(bBlend)].Flag; } set { this[nameof(bBlend)].Flag = value; } }
    }
    public class MaterialExpressionParticleSubUVProperties : MaterialExpression
    {
        public MaterialExpressionParticleSubUVProperties(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPathTracingQualitySwitch : MaterialExpression
    {
        public MaterialExpressionPathTracingQualitySwitch(nint addr) : base(addr) { }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput PathTraced { get { return this[nameof(PathTraced)].As<ExpressionInput>(); } set { this["PathTraced"] = value; } }
    }
    public class MaterialExpressionPerInstanceCustomData : MaterialExpression
    {
        public MaterialExpressionPerInstanceCustomData(nint addr) : base(addr) { }
        public ExpressionInput DefaultValue { get { return this[nameof(DefaultValue)].As<ExpressionInput>(); } set { this["DefaultValue"] = value; } }
        public float ConstDefaultValue { get { return this[nameof(ConstDefaultValue)].GetValue<float>(); } set { this[nameof(ConstDefaultValue)].SetValue<float>(value); } }
        public uint DataIndex { get { return this[nameof(DataIndex)].GetValue<uint>(); } set { this[nameof(DataIndex)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionPerInstanceCustomData3Vector : MaterialExpression
    {
        public MaterialExpressionPerInstanceCustomData3Vector(nint addr) : base(addr) { }
        public ExpressionInput DefaultValue { get { return this[nameof(DefaultValue)].As<ExpressionInput>(); } set { this["DefaultValue"] = value; } }
        public LinearColor ConstDefaultValue { get { return this[nameof(ConstDefaultValue)].As<LinearColor>(); } set { this["ConstDefaultValue"] = value; } }
        public uint DataIndex { get { return this[nameof(DataIndex)].GetValue<uint>(); } set { this[nameof(DataIndex)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionPerInstanceFadeAmount : MaterialExpression
    {
        public MaterialExpressionPerInstanceFadeAmount(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPerInstanceRandom : MaterialExpression
    {
        public MaterialExpressionPerInstanceRandom(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPinBase : MaterialExpression
    {
        public MaterialExpressionPinBase(nint addr) : base(addr) { }
        public Array<CompositeReroute> ReroutePins { get { return new Array<CompositeReroute>(this[nameof(ReroutePins)].Address); } }
        public byte PinDirection { get { return this[nameof(PinDirection)].GetValue<byte>(); } set { this[nameof(PinDirection)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionPixelDepth : MaterialExpression
    {
        public MaterialExpressionPixelDepth(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPixelNormalWS : MaterialExpression
    {
        public MaterialExpressionPixelNormalWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPower : MaterialExpression
    {
        public MaterialExpressionPower(nint addr) : base(addr) { }
        public ExpressionInput Base { get { return this[nameof(Base)].As<ExpressionInput>(); } set { this["Base"] = value; } }
        public ExpressionInput Exponent { get { return this[nameof(Exponent)].As<ExpressionInput>(); } set { this["Exponent"] = value; } }
        public float ConstExponent { get { return this[nameof(ConstExponent)].GetValue<float>(); } set { this[nameof(ConstExponent)].SetValue<float>(value); } }
    }
    public class MaterialExpressionPrecomputedAOMask : MaterialExpression
    {
        public MaterialExpressionPrecomputedAOMask(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPreSkinnedLocalBounds : MaterialExpression
    {
        public MaterialExpressionPreSkinnedLocalBounds(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPreSkinnedNormal : MaterialExpression
    {
        public MaterialExpressionPreSkinnedNormal(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPreSkinnedPosition : MaterialExpression
    {
        public MaterialExpressionPreSkinnedPosition(nint addr) : base(addr) { }
    }
    public class MaterialExpressionPreviousFrameSwitch : MaterialExpression
    {
        public MaterialExpressionPreviousFrameSwitch(nint addr) : base(addr) { }
        public ExpressionInput CurrentFrame { get { return this[nameof(CurrentFrame)].As<ExpressionInput>(); } set { this["CurrentFrame"] = value; } }
        public ExpressionInput PreviousFrame { get { return this[nameof(PreviousFrame)].As<ExpressionInput>(); } set { this["PreviousFrame"] = value; } }
    }
    public class MaterialExpressionQualitySwitch : MaterialExpression
    {
        public MaterialExpressionQualitySwitch(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Inputs { get { return this[nameof(Inputs)].As<ExpressionInput>(); } set { this["Inputs"] = value; } }
    }
    public class MaterialExpressionRayTracingQualitySwitch : MaterialExpression
    {
        public MaterialExpressionRayTracingQualitySwitch(nint addr) : base(addr) { }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput RayTraced { get { return this[nameof(RayTraced)].As<ExpressionInput>(); } set { this["RayTraced"] = value; } }
    }
    public class MaterialExpressionReflectionCapturePassSwitch : MaterialExpression
    {
        public MaterialExpressionReflectionCapturePassSwitch(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Reflection { get { return this[nameof(Reflection)].As<ExpressionInput>(); } set { this["Reflection"] = value; } }
    }
    public class MaterialExpressionReflectionVectorWS : MaterialExpression
    {
        public MaterialExpressionReflectionVectorWS(nint addr) : base(addr) { }
        public ExpressionInput CustomWorldNormal { get { return this[nameof(CustomWorldNormal)].As<ExpressionInput>(); } set { this["CustomWorldNormal"] = value; } }
        public bool bNormalizeCustomWorldNormal { get { return this[nameof(bNormalizeCustomWorldNormal)].Flag; } set { this[nameof(bNormalizeCustomWorldNormal)].Flag = value; } }
    }
    public class MaterialExpressionReroute : MaterialExpressionRerouteBase
    {
        public MaterialExpressionReroute(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionRotateAboutAxis : MaterialExpression
    {
        public MaterialExpressionRotateAboutAxis(nint addr) : base(addr) { }
        public ExpressionInput NormalizedRotationAxis { get { return this[nameof(NormalizedRotationAxis)].As<ExpressionInput>(); } set { this["NormalizedRotationAxis"] = value; } }
        public ExpressionInput RotationAngle { get { return this[nameof(RotationAngle)].As<ExpressionInput>(); } set { this["RotationAngle"] = value; } }
        public ExpressionInput PivotPoint { get { return this[nameof(PivotPoint)].As<ExpressionInput>(); } set { this["PivotPoint"] = value; } }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
        public float Period { get { return this[nameof(Period)].GetValue<float>(); } set { this[nameof(Period)].SetValue<float>(value); } }
    }
    public class MaterialExpressionRotator : MaterialExpression
    {
        public MaterialExpressionRotator(nint addr) : base(addr) { }
        public ExpressionInput Coordinate { get { return this[nameof(Coordinate)].As<ExpressionInput>(); } set { this["Coordinate"] = value; } }
        public ExpressionInput Time { get { return this[nameof(Time)].As<ExpressionInput>(); } set { this["Time"] = value; } }
        public float CenterX { get { return this[nameof(CenterX)].GetValue<float>(); } set { this[nameof(CenterX)].SetValue<float>(value); } }
        public float CenterY { get { return this[nameof(CenterY)].GetValue<float>(); } set { this[nameof(CenterY)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public uint ConstCoordinate { get { return this[nameof(ConstCoordinate)].GetValue<uint>(); } set { this[nameof(ConstCoordinate)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionRound : MaterialExpression
    {
        public MaterialExpressionRound(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionRuntimeVirtualTextureOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionRuntimeVirtualTextureOutput(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput WorldHeight { get { return this[nameof(WorldHeight)].As<ExpressionInput>(); } set { this["WorldHeight"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
        public ExpressionInput mask { get { return this[nameof(mask)].As<ExpressionInput>(); } set { this["mask"] = value; } }
    }
    public class MaterialExpressionRuntimeVirtualTextureReplace : MaterialExpression
    {
        public MaterialExpressionRuntimeVirtualTextureReplace(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput VirtualTextureOutput { get { return this[nameof(VirtualTextureOutput)].As<ExpressionInput>(); } set { this["VirtualTextureOutput"] = value; } }
    }
    public class MaterialExpressionRuntimeVirtualTextureSample : MaterialExpression
    {
        public MaterialExpressionRuntimeVirtualTextureSample(nint addr) : base(addr) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public ExpressionInput MipValue { get { return this[nameof(MipValue)].As<ExpressionInput>(); } set { this["MipValue"] = value; } }
        public RuntimeVirtualTexture VirtualTexture { get { return this[nameof(VirtualTexture)].As<RuntimeVirtualTexture>(); } set { this["VirtualTexture"] = value; } }
        public ERuntimeVirtualTextureMaterialType MaterialType { get { return (ERuntimeVirtualTextureMaterialType)this[nameof(MaterialType)].GetValue<int>(); } set { this[nameof(MaterialType)].SetValue<int>((int)value); } }
        public bool bSinglePhysicalSpace { get { return this[nameof(bSinglePhysicalSpace)].Flag; } set { this[nameof(bSinglePhysicalSpace)].Flag = value; } }
        public bool bAdaptive { get { return this[nameof(bAdaptive)].Flag; } set { this[nameof(bAdaptive)].Flag = value; } }
        public byte MipValueMode { get { return this[nameof(MipValueMode)].GetValue<byte>(); } set { this[nameof(MipValueMode)].SetValue<byte>(value); } }
        public byte TextureAddressMode { get { return this[nameof(TextureAddressMode)].GetValue<byte>(); } set { this[nameof(TextureAddressMode)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionRuntimeVirtualTextureSampleParameter : MaterialExpressionRuntimeVirtualTextureSample
    {
        public MaterialExpressionRuntimeVirtualTextureSampleParameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
    }
    public class MaterialExpressionSamplePhysicsVectorField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsVectorField(nint addr) : base(addr) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this[nameof(FieldTarget)].GetValue<byte>(); } set { this[nameof(FieldTarget)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionSamplePhysicsScalarField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsScalarField(nint addr) : base(addr) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this[nameof(FieldTarget)].GetValue<byte>(); } set { this[nameof(FieldTarget)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionSamplePhysicsIntegerField : MaterialExpression
    {
        public MaterialExpressionSamplePhysicsIntegerField(nint addr) : base(addr) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
        public byte FieldTarget { get { return this[nameof(FieldTarget)].GetValue<byte>(); } set { this[nameof(FieldTarget)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionSaturate : MaterialExpression
    {
        public MaterialExpressionSaturate(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionSceneColor : MaterialExpression
    {
        public MaterialExpressionSceneColor(nint addr) : base(addr) { }
        public byte InputMode { get { return this[nameof(InputMode)].GetValue<byte>(); } set { this[nameof(InputMode)].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput OffsetFraction { get { return this[nameof(OffsetFraction)].As<ExpressionInput>(); } set { this["OffsetFraction"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
    }
    public class MaterialExpressionSceneDepth : MaterialExpression
    {
        public MaterialExpressionSceneDepth(nint addr) : base(addr) { }
        public byte InputMode { get { return this[nameof(InputMode)].GetValue<byte>(); } set { this[nameof(InputMode)].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
    }
    public class MaterialExpressionSceneDepthWithoutWater : MaterialExpression
    {
        public MaterialExpressionSceneDepthWithoutWater(nint addr) : base(addr) { }
        public byte InputMode { get { return this[nameof(InputMode)].GetValue<byte>(); } set { this[nameof(InputMode)].SetValue<byte>(value); } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public Vector2D ConstInput { get { return this[nameof(ConstInput)].As<Vector2D>(); } set { this["ConstInput"] = value; } }
        public float FallbackDepth { get { return this[nameof(FallbackDepth)].GetValue<float>(); } set { this[nameof(FallbackDepth)].SetValue<float>(value); } }
    }
    public class MaterialExpressionSceneTexelSize : MaterialExpression
    {
        public MaterialExpressionSceneTexelSize(nint addr) : base(addr) { }
    }
    public class MaterialExpressionSceneTexture : MaterialExpression
    {
        public MaterialExpressionSceneTexture(nint addr) : base(addr) { }
        public ExpressionInput Coordinates { get { return this[nameof(Coordinates)].As<ExpressionInput>(); } set { this["Coordinates"] = value; } }
        public byte SceneTextureId { get { return this[nameof(SceneTextureId)].GetValue<byte>(); } set { this[nameof(SceneTextureId)].SetValue<byte>(value); } }
        public bool bFiltered { get { return this[nameof(bFiltered)].Flag; } set { this[nameof(bFiltered)].Flag = value; } }
    }
    public class MaterialExpressionScreenPosition : MaterialExpression
    {
        public MaterialExpressionScreenPosition(nint addr) : base(addr) { }
    }
    public class MaterialExpressionSetLocal : MaterialExpression
    {
        public MaterialExpressionSetLocal(nint addr) : base(addr) { }
        public ExpressionExecOutput Exec { get { return this[nameof(Exec)].As<ExpressionExecOutput>(); } set { this["Exec"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
        public Object LocalName { get { return this[nameof(LocalName)]; } set { this[nameof(LocalName)] = value; } }
    }
    public class MaterialExpressionSetMaterialAttributes : MaterialExpression
    {
        public MaterialExpressionSetMaterialAttributes(nint addr) : base(addr) { }
        public Array<ExpressionInput> Inputs { get { return new Array<ExpressionInput>(this[nameof(Inputs)].Address); } }
        public Array<Guid> AttributeSetTypes { get { return new Array<Guid>(this[nameof(AttributeSetTypes)].Address); } }
    }
    public class MaterialExpressionShaderStageSwitch : MaterialExpression
    {
        public MaterialExpressionShaderStageSwitch(nint addr) : base(addr) { }
        public ExpressionInput PixelShader { get { return this[nameof(PixelShader)].As<ExpressionInput>(); } set { this["PixelShader"] = value; } }
        public ExpressionInput VertexShader { get { return this[nameof(VertexShader)].As<ExpressionInput>(); } set { this["VertexShader"] = value; } }
    }
    public class MaterialExpressionShadingModel : MaterialExpression
    {
        public MaterialExpressionShadingModel(nint addr) : base(addr) { }
        public byte ShadingModel { get { return this[nameof(ShadingModel)].GetValue<byte>(); } set { this[nameof(ShadingModel)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionShadingPathSwitch : MaterialExpression
    {
        public MaterialExpressionShadingPathSwitch(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Inputs { get { return this[nameof(Inputs)].As<ExpressionInput>(); } set { this["Inputs"] = value; } }
    }
    public class MaterialExpressionShadowReplace : MaterialExpression
    {
        public MaterialExpressionShadowReplace(nint addr) : base(addr) { }
        public ExpressionInput Default { get { return this[nameof(Default)].As<ExpressionInput>(); } set { this["Default"] = value; } }
        public ExpressionInput Shadow { get { return this[nameof(Shadow)].As<ExpressionInput>(); } set { this["Shadow"] = value; } }
    }
    public class MaterialExpressionSign : MaterialExpression
    {
        public MaterialExpressionSign(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionSine : MaterialExpression
    {
        public MaterialExpressionSine(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this[nameof(Period)].GetValue<float>(); } set { this[nameof(Period)].SetValue<float>(value); } }
    }
    public class MaterialExpressionSingleLayerWaterMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionSingleLayerWaterMaterialOutput(nint addr) : base(addr) { }
        public ExpressionInput ScatteringCoefficients { get { return this[nameof(ScatteringCoefficients)].As<ExpressionInput>(); } set { this["ScatteringCoefficients"] = value; } }
        public ExpressionInput AbsorptionCoefficients { get { return this[nameof(AbsorptionCoefficients)].As<ExpressionInput>(); } set { this["AbsorptionCoefficients"] = value; } }
        public ExpressionInput PhaseG { get { return this[nameof(PhaseG)].As<ExpressionInput>(); } set { this["PhaseG"] = value; } }
        public ExpressionInput ColorScaleBehindWater { get { return this[nameof(ColorScaleBehindWater)].As<ExpressionInput>(); } set { this["ColorScaleBehindWater"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereLightDirection : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightDirection(nint addr) : base(addr) { }
        public int LightIndex { get { return this[nameof(LightIndex)].GetValue<int>(); } set { this[nameof(LightIndex)].SetValue<int>(value); } }
    }
    public class MaterialExpressionSkyAtmosphereLightIlluminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightIlluminance(nint addr) : base(addr) { }
        public int LightIndex { get { return this[nameof(LightIndex)].GetValue<int>(); } set { this[nameof(LightIndex)].SetValue<int>(value); } }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereLightDiskLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereLightDiskLuminance(nint addr) : base(addr) { }
        public int LightIndex { get { return this[nameof(LightIndex)].GetValue<int>(); } set { this[nameof(LightIndex)].SetValue<int>(value); } }
        public ExpressionInput DiskAngularDiameterOverride { get { return this[nameof(DiskAngularDiameterOverride)].As<ExpressionInput>(); } set { this["DiskAngularDiameterOverride"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereAerialPerspective : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereAerialPerspective(nint addr) : base(addr) { }
        public ExpressionInput WorldPosition { get { return this[nameof(WorldPosition)].As<ExpressionInput>(); } set { this["WorldPosition"] = value; } }
    }
    public class MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(nint addr) : base(addr) { }
    }
    public class MaterialExpressionSkyAtmosphereViewLuminance : MaterialExpression
    {
        public MaterialExpressionSkyAtmosphereViewLuminance(nint addr) : base(addr) { }
    }
    public class MaterialExpressionSkyLightEnvMapSample : MaterialExpression
    {
        public MaterialExpressionSkyLightEnvMapSample(nint addr) : base(addr) { }
        public ExpressionInput Direction { get { return this[nameof(Direction)].As<ExpressionInput>(); } set { this["Direction"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
    }
    public class MaterialExpressionSmoothStep : MaterialExpression
    {
        public MaterialExpressionSmoothStep(nint addr) : base(addr) { }
        public ExpressionInput Min { get { return this[nameof(Min)].As<ExpressionInput>(); } set { this["Min"] = value; } }
        public ExpressionInput Max { get { return this[nameof(Max)].As<ExpressionInput>(); } set { this["Max"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
        public float ConstMin { get { return this[nameof(ConstMin)].GetValue<float>(); } set { this[nameof(ConstMin)].SetValue<float>(value); } }
        public float ConstMax { get { return this[nameof(ConstMax)].GetValue<float>(); } set { this[nameof(ConstMax)].SetValue<float>(value); } }
        public float ConstValue { get { return this[nameof(ConstValue)].GetValue<float>(); } set { this[nameof(ConstValue)].SetValue<float>(value); } }
    }
    public class MaterialExpressionSobol : MaterialExpression
    {
        public MaterialExpressionSobol(nint addr) : base(addr) { }
        public ExpressionInput Cell { get { return this[nameof(Cell)].As<ExpressionInput>(); } set { this["Cell"] = value; } }
        public ExpressionInput Index { get { return this[nameof(Index)].As<ExpressionInput>(); } set { this["Index"] = value; } }
        public ExpressionInput Seed { get { return this[nameof(Seed)].As<ExpressionInput>(); } set { this["Seed"] = value; } }
        public uint ConstIndex { get { return this[nameof(ConstIndex)].GetValue<uint>(); } set { this[nameof(ConstIndex)].SetValue<uint>(value); } }
        public Vector2D ConstSeed { get { return this[nameof(ConstSeed)].As<Vector2D>(); } set { this["ConstSeed"] = value; } }
    }
    public class MaterialExpressionSpeedTree : MaterialExpression
    {
        public MaterialExpressionSpeedTree(nint addr) : base(addr) { }
        public ExpressionInput GeometryInput { get { return this[nameof(GeometryInput)].As<ExpressionInput>(); } set { this["GeometryInput"] = value; } }
        public ExpressionInput WindInput { get { return this[nameof(WindInput)].As<ExpressionInput>(); } set { this["WindInput"] = value; } }
        public ExpressionInput LODInput { get { return this[nameof(LODInput)].As<ExpressionInput>(); } set { this["LODInput"] = value; } }
        public ExpressionInput ExtraBendWS { get { return this[nameof(ExtraBendWS)].As<ExpressionInput>(); } set { this["ExtraBendWS"] = value; } }
        public byte GeometryType { get { return this[nameof(GeometryType)].GetValue<byte>(); } set { this[nameof(GeometryType)].SetValue<byte>(value); } }
        public byte WindType { get { return this[nameof(WindType)].GetValue<byte>(); } set { this[nameof(WindType)].SetValue<byte>(value); } }
        public byte LODType { get { return this[nameof(LODType)].GetValue<byte>(); } set { this[nameof(LODType)].SetValue<byte>(value); } }
        public float BillboardThreshold { get { return this[nameof(BillboardThreshold)].GetValue<float>(); } set { this[nameof(BillboardThreshold)].SetValue<float>(value); } }
        public bool bAccurateWindVelocities { get { return this[nameof(bAccurateWindVelocities)].Flag; } set { this[nameof(bAccurateWindVelocities)].Flag = value; } }
    }
    public class MaterialExpressionSphereMask : MaterialExpression
    {
        public MaterialExpressionSphereMask(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Radius { get { return this[nameof(Radius)].As<ExpressionInput>(); } set { this["Radius"] = value; } }
        public ExpressionInput Hardness { get { return this[nameof(Hardness)].As<ExpressionInput>(); } set { this["Hardness"] = value; } }
        public float AttenuationRadius { get { return this[nameof(AttenuationRadius)].GetValue<float>(); } set { this[nameof(AttenuationRadius)].SetValue<float>(value); } }
        public float HardnessPercent { get { return this[nameof(HardnessPercent)].GetValue<float>(); } set { this[nameof(HardnessPercent)].SetValue<float>(value); } }
    }
    public class MaterialExpressionSphericalParticleOpacity : MaterialExpression
    {
        public MaterialExpressionSphericalParticleOpacity(nint addr) : base(addr) { }
        public ExpressionInput Density { get { return this[nameof(Density)].As<ExpressionInput>(); } set { this["Density"] = value; } }
        public float ConstantDensity { get { return this[nameof(ConstantDensity)].GetValue<float>(); } set { this[nameof(ConstantDensity)].SetValue<float>(value); } }
    }
    public class MaterialExpressionSquareRoot : MaterialExpression
    {
        public MaterialExpressionSquareRoot(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionStaticBool : MaterialExpression
    {
        public MaterialExpressionStaticBool(nint addr) : base(addr) { }
        public bool Value { get { return this[nameof(Value)].Flag; } set { this[nameof(Value)].Flag = value; } }
    }
    public class MaterialExpressionStaticBoolParameter : MaterialExpressionParameter
    {
        public MaterialExpressionStaticBoolParameter(nint addr) : base(addr) { }
        public bool DefaultValue { get { return this[nameof(DefaultValue)].Flag; } set { this[nameof(DefaultValue)].Flag = value; } }
    }
    public class MaterialExpressionStaticComponentMaskParameter : MaterialExpressionParameter
    {
        public MaterialExpressionStaticComponentMaskParameter(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public bool DefaultR { get { return this[nameof(DefaultR)].Flag; } set { this[nameof(DefaultR)].Flag = value; } }
        public bool DefaultG { get { return this[nameof(DefaultG)].Flag; } set { this[nameof(DefaultG)].Flag = value; } }
        public bool DefaultB { get { return this[nameof(DefaultB)].Flag; } set { this[nameof(DefaultB)].Flag = value; } }
        public bool DefaultA { get { return this[nameof(DefaultA)].Flag; } set { this[nameof(DefaultA)].Flag = value; } }
    }
    public class MaterialExpressionStaticSwitch : MaterialExpression
    {
        public MaterialExpressionStaticSwitch(nint addr) : base(addr) { }
        public bool DefaultValue { get { return this[nameof(DefaultValue)].Flag; } set { this[nameof(DefaultValue)].Flag = value; } }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public ExpressionInput Value { get { return this[nameof(Value)].As<ExpressionInput>(); } set { this["Value"] = value; } }
    }
    public class MaterialExpressionStaticSwitchParameter : MaterialExpressionStaticBoolParameter
    {
        public MaterialExpressionStaticSwitchParameter(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
    }
    public class MaterialExpressionStep : MaterialExpression
    {
        public MaterialExpressionStep(nint addr) : base(addr) { }
        public ExpressionInput Y { get { return this[nameof(Y)].As<ExpressionInput>(); } set { this["Y"] = value; } }
        public ExpressionInput X { get { return this[nameof(X)].As<ExpressionInput>(); } set { this["X"] = value; } }
        public float ConstY { get { return this[nameof(ConstY)].GetValue<float>(); } set { this[nameof(ConstY)].SetValue<float>(value); } }
        public float ConstX { get { return this[nameof(ConstX)].GetValue<float>(); } set { this[nameof(ConstX)].SetValue<float>(value); } }
    }
    public class MaterialExpressionStrataBSDF : MaterialExpression
    {
        public MaterialExpressionStrataBSDF(nint addr) : base(addr) { }
    }
    public class MaterialExpressionStrataLegacyConversion : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataLegacyConversion(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Anisotropy { get { return this[nameof(Anisotropy)].As<ExpressionInput>(); } set { this["Anisotropy"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput Tangent { get { return this[nameof(Tangent)].As<ExpressionInput>(); } set { this["Tangent"] = value; } }
        public ExpressionInput SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<ExpressionInput>(); } set { this["SubsurfaceColor"] = value; } }
        public ExpressionInput ClearCoat { get { return this[nameof(ClearCoat)].As<ExpressionInput>(); } set { this["ClearCoat"] = value; } }
        public ExpressionInput ClearCoatRoughness { get { return this[nameof(ClearCoatRoughness)].As<ExpressionInput>(); } set { this["ClearCoatRoughness"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
        public ExpressionInput WaterScatteringCoefficients { get { return this[nameof(WaterScatteringCoefficients)].As<ExpressionInput>(); } set { this["WaterScatteringCoefficients"] = value; } }
        public ExpressionInput WaterAbsorptionCoefficients { get { return this[nameof(WaterAbsorptionCoefficients)].As<ExpressionInput>(); } set { this["WaterAbsorptionCoefficients"] = value; } }
        public ExpressionInput WaterPhaseG { get { return this[nameof(WaterPhaseG)].As<ExpressionInput>(); } set { this["WaterPhaseG"] = value; } }
        public ExpressionInput ColorScaleBehindWater { get { return this[nameof(ColorScaleBehindWater)].As<ExpressionInput>(); } set { this["ColorScaleBehindWater"] = value; } }
        public ExpressionInput ClearCoatNormal { get { return this[nameof(ClearCoatNormal)].As<ExpressionInput>(); } set { this["ClearCoatNormal"] = value; } }
        public ExpressionInput CustomTangent { get { return this[nameof(CustomTangent)].As<ExpressionInput>(); } set { this["CustomTangent"] = value; } }
        public ShadingModelMaterialInput ShadingModel { get { return this[nameof(ShadingModel)].As<ShadingModelMaterialInput>(); } set { this["ShadingModel"] = value; } }
        public SubsurfaceProfile SubsurfaceProfile { get { return this[nameof(SubsurfaceProfile)].As<SubsurfaceProfile>(); } set { this["SubsurfaceProfile"] = value; } }
        public StrataMaterialInfo ConvertedStrataMaterialInfo { get { return this[nameof(ConvertedStrataMaterialInfo)].As<StrataMaterialInfo>(); } set { this["ConvertedStrataMaterialInfo"] = value; } }
    }
    public class MaterialExpressionStrataSlabBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataSlabBSDF(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput EdgeColor { get { return this[nameof(EdgeColor)].As<ExpressionInput>(); } set { this["EdgeColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput DiffuseAlbedo { get { return this[nameof(DiffuseAlbedo)].As<ExpressionInput>(); } set { this["DiffuseAlbedo"] = value; } }
        public ExpressionInput F0 { get { return this[nameof(F0)].As<ExpressionInput>(); } set { this["F0"] = value; } }
        public ExpressionInput F90 { get { return this[nameof(F90)].As<ExpressionInput>(); } set { this["F90"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Anisotropy { get { return this[nameof(Anisotropy)].As<ExpressionInput>(); } set { this["Anisotropy"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput Tangent { get { return this[nameof(Tangent)].As<ExpressionInput>(); } set { this["Tangent"] = value; } }
        public ExpressionInput SSSMFP { get { return this[nameof(SSSMFP)].As<ExpressionInput>(); } set { this["SSSMFP"] = value; } }
        public ExpressionInput SSSMFPScale { get { return this[nameof(SSSMFPScale)].As<ExpressionInput>(); } set { this["SSSMFPScale"] = value; } }
        public ExpressionInput SSSPhaseAnisotropy { get { return this[nameof(SSSPhaseAnisotropy)].As<ExpressionInput>(); } set { this["SSSPhaseAnisotropy"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput SecondRoughness { get { return this[nameof(SecondRoughness)].As<ExpressionInput>(); } set { this["SecondRoughness"] = value; } }
        public ExpressionInput SecondRoughnessWeight { get { return this[nameof(SecondRoughnessWeight)].As<ExpressionInput>(); } set { this["SecondRoughnessWeight"] = value; } }
        public ExpressionInput Thickness { get { return this[nameof(Thickness)].As<ExpressionInput>(); } set { this["Thickness"] = value; } }
        public ExpressionInput FuzzAmount { get { return this[nameof(FuzzAmount)].As<ExpressionInput>(); } set { this["FuzzAmount"] = value; } }
        public ExpressionInput FuzzColor { get { return this[nameof(FuzzColor)].As<ExpressionInput>(); } set { this["FuzzColor"] = value; } }
        public SubsurfaceProfile SubsurfaceProfile { get { return this[nameof(SubsurfaceProfile)].As<SubsurfaceProfile>(); } set { this["SubsurfaceProfile"] = value; } }
        public bool bUseMetalness { get { return this[nameof(bUseMetalness)].Flag; } set { this[nameof(bUseMetalness)].Flag = value; } }
        public bool bUseSSSDiffusion { get { return this[nameof(bUseSSSDiffusion)].Flag; } set { this[nameof(bUseSSSDiffusion)].Flag = value; } }
    }
    public class MaterialExpressionStrataSimpleClearCoatBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataSimpleClearCoatBSDF(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput ClearCoatCoverage { get { return this[nameof(ClearCoatCoverage)].As<ExpressionInput>(); } set { this["ClearCoatCoverage"] = value; } }
        public ExpressionInput ClearCoatRoughness { get { return this[nameof(ClearCoatRoughness)].As<ExpressionInput>(); } set { this["ClearCoatRoughness"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
    }
    public class MaterialExpressionStrataVolumetricFogCloudBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataVolumetricFogCloudBSDF(nint addr) : base(addr) { }
        public ExpressionInput albedo { get { return this[nameof(albedo)].As<ExpressionInput>(); } set { this["albedo"] = value; } }
        public ExpressionInput Extinction { get { return this[nameof(Extinction)].As<ExpressionInput>(); } set { this["Extinction"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput AmbientOcclusion { get { return this[nameof(AmbientOcclusion)].As<ExpressionInput>(); } set { this["AmbientOcclusion"] = value; } }
    }
    public class MaterialExpressionStrataUnlitBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataUnlitBSDF(nint addr) : base(addr) { }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
    }
    public class MaterialExpressionStrataHairBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataHairBSDF(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Scatter { get { return this[nameof(Scatter)].As<ExpressionInput>(); } set { this["Scatter"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Backlit { get { return this[nameof(Backlit)].As<ExpressionInput>(); } set { this["Backlit"] = value; } }
        public ExpressionInput Tangent { get { return this[nameof(Tangent)].As<ExpressionInput>(); } set { this["Tangent"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
    }
    public class MaterialExpressionStrataEyeBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataEyeBSDF(nint addr) : base(addr) { }
        public ExpressionInput DiffuseColor { get { return this[nameof(DiffuseColor)].As<ExpressionInput>(); } set { this["DiffuseColor"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput CorneaNormal { get { return this[nameof(CorneaNormal)].As<ExpressionInput>(); } set { this["CorneaNormal"] = value; } }
        public ExpressionInput IrisNormal { get { return this[nameof(IrisNormal)].As<ExpressionInput>(); } set { this["IrisNormal"] = value; } }
        public ExpressionInput IrisPlaneNormal { get { return this[nameof(IrisPlaneNormal)].As<ExpressionInput>(); } set { this["IrisPlaneNormal"] = value; } }
        public ExpressionInput IrisMask { get { return this[nameof(IrisMask)].As<ExpressionInput>(); } set { this["IrisMask"] = value; } }
        public ExpressionInput IrisDistance { get { return this[nameof(IrisDistance)].As<ExpressionInput>(); } set { this["IrisDistance"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public SubsurfaceProfile SubsurfaceProfile { get { return this[nameof(SubsurfaceProfile)].As<SubsurfaceProfile>(); } set { this["SubsurfaceProfile"] = value; } }
    }
    public class MaterialExpressionStrataSingleLayerWaterBSDF : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataSingleLayerWaterBSDF(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
        public ExpressionInput Roughness { get { return this[nameof(Roughness)].As<ExpressionInput>(); } set { this["Roughness"] = value; } }
        public ExpressionInput Normal { get { return this[nameof(Normal)].As<ExpressionInput>(); } set { this["Normal"] = value; } }
        public ExpressionInput EmissiveColor { get { return this[nameof(EmissiveColor)].As<ExpressionInput>(); } set { this["EmissiveColor"] = value; } }
        public ExpressionInput TopMaterialOpacity { get { return this[nameof(TopMaterialOpacity)].As<ExpressionInput>(); } set { this["TopMaterialOpacity"] = value; } }
        public ExpressionInput WaterAlbedo { get { return this[nameof(WaterAlbedo)].As<ExpressionInput>(); } set { this["WaterAlbedo"] = value; } }
        public ExpressionInput WaterExtinction { get { return this[nameof(WaterExtinction)].As<ExpressionInput>(); } set { this["WaterExtinction"] = value; } }
        public ExpressionInput WaterPhaseG { get { return this[nameof(WaterPhaseG)].As<ExpressionInput>(); } set { this["WaterPhaseG"] = value; } }
        public ExpressionInput ColorScaleBehindWater { get { return this[nameof(ColorScaleBehindWater)].As<ExpressionInput>(); } set { this["ColorScaleBehindWater"] = value; } }
    }
    public class MaterialExpressionStrataLightFunction : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataLightFunction(nint addr) : base(addr) { }
        public ExpressionInput Color { get { return this[nameof(Color)].As<ExpressionInput>(); } set { this["Color"] = value; } }
    }
    public class MaterialExpressionStrataPostProcess : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataPostProcess(nint addr) : base(addr) { }
        public ExpressionInput Color { get { return this[nameof(Color)].As<ExpressionInput>(); } set { this["Color"] = value; } }
        public ExpressionInput Opacity { get { return this[nameof(Opacity)].As<ExpressionInput>(); } set { this["Opacity"] = value; } }
    }
    public class MaterialExpressionStrataConvertToDecal : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataConvertToDecal(nint addr) : base(addr) { }
        public ExpressionInput DecalMaterial { get { return this[nameof(DecalMaterial)].As<ExpressionInput>(); } set { this["DecalMaterial"] = value; } }
        public ExpressionInput Coverage { get { return this[nameof(Coverage)].As<ExpressionInput>(); } set { this["Coverage"] = value; } }
    }
    public class MaterialExpressionStrataHorizontalMixing : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataHorizontalMixing(nint addr) : base(addr) { }
        public ExpressionInput Background { get { return this[nameof(Background)].As<ExpressionInput>(); } set { this["Background"] = value; } }
        public ExpressionInput Foreground { get { return this[nameof(Foreground)].As<ExpressionInput>(); } set { this["Foreground"] = value; } }
        public ExpressionInput Mix { get { return this[nameof(Mix)].As<ExpressionInput>(); } set { this["Mix"] = value; } }
        public bool bUseParameterBlending { get { return this[nameof(bUseParameterBlending)].Flag; } set { this[nameof(bUseParameterBlending)].Flag = value; } }
    }
    public class MaterialExpressionStrataVerticalLayering : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataVerticalLayering(nint addr) : base(addr) { }
        public ExpressionInput Top { get { return this[nameof(Top)].As<ExpressionInput>(); } set { this["Top"] = value; } }
        public ExpressionInput Base { get { return this[nameof(Base)].As<ExpressionInput>(); } set { this["Base"] = value; } }
        public bool bUseParameterBlending { get { return this[nameof(bUseParameterBlending)].Flag; } set { this[nameof(bUseParameterBlending)].Flag = value; } }
    }
    public class MaterialExpressionStrataAdd : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataAdd(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public bool bUseParameterBlending { get { return this[nameof(bUseParameterBlending)].Flag; } set { this[nameof(bUseParameterBlending)].Flag = value; } }
    }
    public class MaterialExpressionStrataWeight : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataWeight(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput Weight { get { return this[nameof(Weight)].As<ExpressionInput>(); } set { this["Weight"] = value; } }
    }
    public class MaterialExpressionStrataThinFilm : MaterialExpressionStrataBSDF
    {
        public MaterialExpressionStrataThinFilm(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput Thickness { get { return this[nameof(Thickness)].As<ExpressionInput>(); } set { this["Thickness"] = value; } }
        public ExpressionInput IOR { get { return this[nameof(IOR)].As<ExpressionInput>(); } set { this["IOR"] = value; } }
    }
    public class MaterialExpressionStrataUtilityBase : MaterialExpression
    {
        public MaterialExpressionStrataUtilityBase(nint addr) : base(addr) { }
    }
    public class MaterialExpressionStrataTransmittanceToMFP : MaterialExpressionStrataUtilityBase
    {
        public MaterialExpressionStrataTransmittanceToMFP(nint addr) : base(addr) { }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
        public ExpressionInput Thickness { get { return this[nameof(Thickness)].As<ExpressionInput>(); } set { this["Thickness"] = value; } }
    }
    public class MaterialExpressionStrataMetalnessToDiffuseAlbedoF0 : MaterialExpressionStrataUtilityBase
    {
        public MaterialExpressionStrataMetalnessToDiffuseAlbedoF0(nint addr) : base(addr) { }
        public ExpressionInput BaseColor { get { return this[nameof(BaseColor)].As<ExpressionInput>(); } set { this["BaseColor"] = value; } }
        public ExpressionInput Metallic { get { return this[nameof(Metallic)].As<ExpressionInput>(); } set { this["Metallic"] = value; } }
        public ExpressionInput Specular { get { return this[nameof(Specular)].As<ExpressionInput>(); } set { this["Specular"] = value; } }
    }
    public class MaterialExpressionStrataHazinessToSecondaryRoughness : MaterialExpressionStrataUtilityBase
    {
        public MaterialExpressionStrataHazinessToSecondaryRoughness(nint addr) : base(addr) { }
        public ExpressionInput BaseRoughness { get { return this[nameof(BaseRoughness)].As<ExpressionInput>(); } set { this["BaseRoughness"] = value; } }
        public ExpressionInput Haziness { get { return this[nameof(Haziness)].As<ExpressionInput>(); } set { this["Haziness"] = value; } }
    }
    public class MaterialExpressionSubtract : MaterialExpression
    {
        public MaterialExpressionSubtract(nint addr) : base(addr) { }
        public ExpressionInput A { get { return this[nameof(A)].As<ExpressionInput>(); } set { this["A"] = value; } }
        public ExpressionInput B { get { return this[nameof(B)].As<ExpressionInput>(); } set { this["B"] = value; } }
        public float ConstA { get { return this[nameof(ConstA)].GetValue<float>(); } set { this[nameof(ConstA)].SetValue<float>(value); } }
        public float ConstB { get { return this[nameof(ConstB)].GetValue<float>(); } set { this[nameof(ConstB)].SetValue<float>(value); } }
    }
    public class MaterialExpressionTangent : MaterialExpression
    {
        public MaterialExpressionTangent(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public float Period { get { return this[nameof(Period)].GetValue<float>(); } set { this[nameof(Period)].SetValue<float>(value); } }
    }
    public class MaterialExpressionTangentOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionTangentOutput(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionTemporalSobol : MaterialExpression
    {
        public MaterialExpressionTemporalSobol(nint addr) : base(addr) { }
        public ExpressionInput Index { get { return this[nameof(Index)].As<ExpressionInput>(); } set { this["Index"] = value; } }
        public ExpressionInput Seed { get { return this[nameof(Seed)].As<ExpressionInput>(); } set { this["Seed"] = value; } }
        public uint ConstIndex { get { return this[nameof(ConstIndex)].GetValue<uint>(); } set { this[nameof(ConstIndex)].SetValue<uint>(value); } }
        public Vector2D ConstSeed { get { return this[nameof(ConstSeed)].As<Vector2D>(); } set { this["ConstSeed"] = value; } }
    }
    public class MaterialExpressionTextureCoordinate : MaterialExpression
    {
        public MaterialExpressionTextureCoordinate(nint addr) : base(addr) { }
        public int CoordinateIndex { get { return this[nameof(CoordinateIndex)].GetValue<int>(); } set { this[nameof(CoordinateIndex)].SetValue<int>(value); } }
        public float UTiling { get { return this[nameof(UTiling)].GetValue<float>(); } set { this[nameof(UTiling)].SetValue<float>(value); } }
        public float VTiling { get { return this[nameof(VTiling)].GetValue<float>(); } set { this[nameof(VTiling)].SetValue<float>(value); } }
        public bool UnMirrorU { get { return this[nameof(UnMirrorU)].Flag; } set { this[nameof(UnMirrorU)].Flag = value; } }
        public bool UnMirrorV { get { return this[nameof(UnMirrorV)].Flag; } set { this[nameof(UnMirrorV)].Flag = value; } }
    }
    public class MaterialExpressionTextureObject : MaterialExpressionTextureBase
    {
        public MaterialExpressionTextureObject(nint addr) : base(addr) { }
    }
    public class MaterialExpressionTextureObjectParameter : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureObjectParameter(nint addr) : base(addr) { }
    }
    public class MaterialExpressionTextureProperty : MaterialExpression
    {
        public MaterialExpressionTextureProperty(nint addr) : base(addr) { }
        public ExpressionInput TextureObject { get { return this[nameof(TextureObject)].As<ExpressionInput>(); } set { this["TextureObject"] = value; } }
        public byte Property { get { return this[nameof(Property)].GetValue<byte>(); } set { this[nameof(Property)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTextureSampleParameter2DArray : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameter2DArray(nint addr) : base(addr) { }
    }
    public class MaterialExpressionTextureSampleParameterCube : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameterCube(nint addr) : base(addr) { }
    }
    public class MaterialExpressionTextureSampleParameterCubeArray : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameterCubeArray(nint addr) : base(addr) { }
    }
    public class MaterialExpressionTextureSampleParameterSubUV : MaterialExpressionTextureSampleParameter2D
    {
        public MaterialExpressionTextureSampleParameterSubUV(nint addr) : base(addr) { }
        public bool bBlend { get { return this[nameof(bBlend)].Flag; } set { this[nameof(bBlend)].Flag = value; } }
    }
    public class MaterialExpressionTextureSampleParameterVolume : MaterialExpressionTextureSampleParameter
    {
        public MaterialExpressionTextureSampleParameterVolume(nint addr) : base(addr) { }
    }
    public class MaterialExpressionThinTranslucentMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionThinTranslucentMaterialOutput(nint addr) : base(addr) { }
        public ExpressionInput TransmittanceColor { get { return this[nameof(TransmittanceColor)].As<ExpressionInput>(); } set { this["TransmittanceColor"] = value; } }
    }
    public class MaterialExpressionTime : MaterialExpression
    {
        public MaterialExpressionTime(nint addr) : base(addr) { }
        public bool bIgnorePause { get { return this[nameof(bIgnorePause)].Flag; } set { this[nameof(bIgnorePause)].Flag = value; } }
        public bool bOverride_Period { get { return this[nameof(bOverride_Period)].Flag; } set { this[nameof(bOverride_Period)].Flag = value; } }
        public float Period { get { return this[nameof(Period)].GetValue<float>(); } set { this[nameof(Period)].SetValue<float>(value); } }
    }
    public class MaterialExpressionTransform : MaterialExpression
    {
        public MaterialExpressionTransform(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public byte TransformSourceType { get { return this[nameof(TransformSourceType)].GetValue<byte>(); } set { this[nameof(TransformSourceType)].SetValue<byte>(value); } }
        public byte TransformType { get { return this[nameof(TransformType)].GetValue<byte>(); } set { this[nameof(TransformType)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTransformPosition : MaterialExpression
    {
        public MaterialExpressionTransformPosition(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
        public byte TransformSourceType { get { return this[nameof(TransformSourceType)].GetValue<byte>(); } set { this[nameof(TransformSourceType)].SetValue<byte>(value); } }
        public byte TransformType { get { return this[nameof(TransformType)].GetValue<byte>(); } set { this[nameof(TransformType)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionTruncate : MaterialExpression
    {
        public MaterialExpressionTruncate(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionTwoSidedSign : MaterialExpression
    {
        public MaterialExpressionTwoSidedSign(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVectorNoise : MaterialExpression
    {
        public MaterialExpressionVectorNoise(nint addr) : base(addr) { }
        public ExpressionInput Position { get { return this[nameof(Position)].As<ExpressionInput>(); } set { this["Position"] = value; } }
        public byte NoiseFunction { get { return this[nameof(NoiseFunction)].GetValue<byte>(); } set { this[nameof(NoiseFunction)].SetValue<byte>(value); } }
        public int Quality { get { return this[nameof(Quality)].GetValue<int>(); } set { this[nameof(Quality)].SetValue<int>(value); } }
        public bool bTiling { get { return this[nameof(bTiling)].Flag; } set { this[nameof(bTiling)].Flag = value; } }
        public uint TileSize { get { return this[nameof(TileSize)].GetValue<uint>(); } set { this[nameof(TileSize)].SetValue<uint>(value); } }
    }
    public class MaterialExpressionVertexColor : MaterialExpression
    {
        public MaterialExpressionVertexColor(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVertexInterpolator : MaterialExpressionCustomOutput
    {
        public MaterialExpressionVertexInterpolator(nint addr) : base(addr) { }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class MaterialExpressionVertexNormalWS : MaterialExpression
    {
        public MaterialExpressionVertexNormalWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVertexTangentWS : MaterialExpression
    {
        public MaterialExpressionVertexTangentWS(nint addr) : base(addr) { }
    }
    public class MaterialExpressionViewProperty : MaterialExpression
    {
        public MaterialExpressionViewProperty(nint addr) : base(addr) { }
        public byte Property { get { return this[nameof(Property)].GetValue<byte>(); } set { this[nameof(Property)].SetValue<byte>(value); } }
    }
    public class MaterialExpressionViewSize : MaterialExpression
    {
        public MaterialExpressionViewSize(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVirtualTextureFeatureSwitch : MaterialExpression
    {
        public MaterialExpressionVirtualTextureFeatureSwitch(nint addr) : base(addr) { }
        public ExpressionInput No { get { return this[nameof(No)].As<ExpressionInput>(); } set { this["No"] = value; } }
        public ExpressionInput Yes { get { return this[nameof(Yes)].As<ExpressionInput>(); } set { this["Yes"] = value; } }
    }
    public class MaterialExpressionVolumetricAdvancedMaterialInput : MaterialExpression
    {
        public MaterialExpressionVolumetricAdvancedMaterialInput(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVolumetricCloudEmptySpaceSkippingInput : MaterialExpression
    {
        public MaterialExpressionVolumetricCloudEmptySpaceSkippingInput(nint addr) : base(addr) { }
    }
    public class MaterialExpressionVolumetricAdvancedMaterialOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionVolumetricAdvancedMaterialOutput(nint addr) : base(addr) { }
        public ExpressionInput PhaseG { get { return this[nameof(PhaseG)].As<ExpressionInput>(); } set { this["PhaseG"] = value; } }
        public ExpressionInput PhaseG2 { get { return this[nameof(PhaseG2)].As<ExpressionInput>(); } set { this["PhaseG2"] = value; } }
        public ExpressionInput PhaseBlend { get { return this[nameof(PhaseBlend)].As<ExpressionInput>(); } set { this["PhaseBlend"] = value; } }
        public ExpressionInput MultiScatteringContribution { get { return this[nameof(MultiScatteringContribution)].As<ExpressionInput>(); } set { this["MultiScatteringContribution"] = value; } }
        public ExpressionInput MultiScatteringOcclusion { get { return this[nameof(MultiScatteringOcclusion)].As<ExpressionInput>(); } set { this["MultiScatteringOcclusion"] = value; } }
        public ExpressionInput MultiScatteringEccentricity { get { return this[nameof(MultiScatteringEccentricity)].As<ExpressionInput>(); } set { this["MultiScatteringEccentricity"] = value; } }
        public ExpressionInput ConservativeDensity { get { return this[nameof(ConservativeDensity)].As<ExpressionInput>(); } set { this["ConservativeDensity"] = value; } }
        public float ConstPhaseG { get { return this[nameof(ConstPhaseG)].GetValue<float>(); } set { this[nameof(ConstPhaseG)].SetValue<float>(value); } }
        public float ConstPhaseG2 { get { return this[nameof(ConstPhaseG2)].GetValue<float>(); } set { this[nameof(ConstPhaseG2)].SetValue<float>(value); } }
        public float ConstPhaseBlend { get { return this[nameof(ConstPhaseBlend)].GetValue<float>(); } set { this[nameof(ConstPhaseBlend)].SetValue<float>(value); } }
        public bool PerSamplePhaseEvaluation { get { return this[nameof(PerSamplePhaseEvaluation)].Flag; } set { this[nameof(PerSamplePhaseEvaluation)].Flag = value; } }
        public uint MultiScatteringApproximationOctaveCount { get { return this[nameof(MultiScatteringApproximationOctaveCount)].GetValue<uint>(); } set { this[nameof(MultiScatteringApproximationOctaveCount)].SetValue<uint>(value); } }
        public float ConstMultiScatteringContribution { get { return this[nameof(ConstMultiScatteringContribution)].GetValue<float>(); } set { this[nameof(ConstMultiScatteringContribution)].SetValue<float>(value); } }
        public float ConstMultiScatteringOcclusion { get { return this[nameof(ConstMultiScatteringOcclusion)].GetValue<float>(); } set { this[nameof(ConstMultiScatteringOcclusion)].SetValue<float>(value); } }
        public float ConstMultiScatteringEccentricity { get { return this[nameof(ConstMultiScatteringEccentricity)].GetValue<float>(); } set { this[nameof(ConstMultiScatteringEccentricity)].SetValue<float>(value); } }
        public bool bGroundContribution { get { return this[nameof(bGroundContribution)].Flag; } set { this[nameof(bGroundContribution)].Flag = value; } }
        public bool bGrayScaleMaterial { get { return this[nameof(bGrayScaleMaterial)].Flag; } set { this[nameof(bGrayScaleMaterial)].Flag = value; } }
        public bool bRayMarchVolumeShadow { get { return this[nameof(bRayMarchVolumeShadow)].Flag; } set { this[nameof(bRayMarchVolumeShadow)].Flag = value; } }
        public bool bClampMultiScatteringContribution { get { return this[nameof(bClampMultiScatteringContribution)].Flag; } set { this[nameof(bClampMultiScatteringContribution)].Flag = value; } }
    }
    public class MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : MaterialExpressionCustomOutput
    {
        public MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput(nint addr) : base(addr) { }
        public ExpressionInput ContainsMatter { get { return this[nameof(ContainsMatter)].As<ExpressionInput>(); } set { this["ContainsMatter"] = value; } }
    }
    public class MaterialExpressionWhileLoop : MaterialExpression
    {
        public MaterialExpressionWhileLoop(nint addr) : base(addr) { }
        public ExpressionExecOutput LoopBody { get { return this[nameof(LoopBody)].As<ExpressionExecOutput>(); } set { this["LoopBody"] = value; } }
        public ExpressionExecOutput Completed { get { return this[nameof(Completed)].As<ExpressionExecOutput>(); } set { this["Completed"] = value; } }
        public ExpressionInput Condition { get { return this[nameof(Condition)].As<ExpressionInput>(); } set { this["Condition"] = value; } }
    }
    public class MaterialExpressionWorldPosition : MaterialExpression
    {
        public MaterialExpressionWorldPosition(nint addr) : base(addr) { }
        public byte WorldPositionShaderOffset { get { return this[nameof(WorldPositionShaderOffset)].GetValue<byte>(); } set { this[nameof(WorldPositionShaderOffset)].SetValue<byte>(value); } }
    }
    public class MaterialFunctionInterfaceEditorOnlyData : Object
    {
        public MaterialFunctionInterfaceEditorOnlyData(nint addr) : base(addr) { }
    }
    public class MaterialFunctionEditorOnlyData : MaterialFunctionInterfaceEditorOnlyData
    {
        public MaterialFunctionEditorOnlyData(nint addr) : base(addr) { }
        public MaterialExpressionCollection ExpressionCollection { get { return this[nameof(ExpressionCollection)].As<MaterialExpressionCollection>(); } set { this["ExpressionCollection"] = value; } }
    }
    public class MaterialFunctionInterface : Object
    {
        public MaterialFunctionInterface(nint addr) : base(addr) { }
        public Guid StateId { get { return this[nameof(StateId)].As<Guid>(); } set { this["StateId"] = value; } }
        public EMaterialFunctionUsage MaterialFunctionUsage { get { return (EMaterialFunctionUsage)this[nameof(MaterialFunctionUsage)].GetValue<int>(); } set { this[nameof(MaterialFunctionUsage)].SetValue<int>((int)value); } }
    }
    public class MaterialFunction : MaterialFunctionInterface
    {
        public MaterialFunction(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public bool bExposeToLibrary { get { return this[nameof(bExposeToLibrary)].Flag; } set { this[nameof(bExposeToLibrary)].Flag = value; } }
        public bool bPrefixParameterNames { get { return this[nameof(bPrefixParameterNames)].Flag; } set { this[nameof(bPrefixParameterNames)].Flag = value; } }
        public bool bEnableExecWire { get { return this[nameof(bEnableExecWire)].Flag; } set { this[nameof(bEnableExecWire)].Flag = value; } }
        public bool bEnableNewHLSLGenerator { get { return this[nameof(bEnableNewHLSLGenerator)].Flag; } set { this[nameof(bEnableNewHLSLGenerator)].Flag = value; } }
    }
    public class MaterialFunctionInstance : MaterialFunctionInterface
    {
        public MaterialFunctionInstance(nint addr) : base(addr) { }
        public MaterialFunctionInterface Parent { get { return this[nameof(Parent)].As<MaterialFunctionInterface>(); } set { this["Parent"] = value; } }
        public MaterialFunctionInterface Base { get { return this[nameof(Base)].As<MaterialFunctionInterface>(); } set { this["Base"] = value; } }
        public Array<ScalarParameterValue> ScalarParameterValues { get { return new Array<ScalarParameterValue>(this[nameof(ScalarParameterValues)].Address); } }
        public Array<VectorParameterValue> VectorParameterValues { get { return new Array<VectorParameterValue>(this[nameof(VectorParameterValues)].Address); } }
        public Array<DoubleVectorParameterValue> DoubleVectorParameterValues { get { return new Array<DoubleVectorParameterValue>(this[nameof(DoubleVectorParameterValues)].Address); } }
        public Array<TextureParameterValue> TextureParameterValues { get { return new Array<TextureParameterValue>(this[nameof(TextureParameterValues)].Address); } }
        public Array<FontParameterValue> FontParameterValues { get { return new Array<FontParameterValue>(this[nameof(FontParameterValues)].Address); } }
        public Array<StaticSwitchParameter> StaticSwitchParameterValues { get { return new Array<StaticSwitchParameter>(this[nameof(StaticSwitchParameterValues)].Address); } }
        public Array<StaticComponentMaskParameter> StaticComponentMaskParameterValues { get { return new Array<StaticComponentMaskParameter>(this[nameof(StaticComponentMaskParameterValues)].Address); } }
        public Array<RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues { get { return new Array<RuntimeVirtualTextureParameterValue>(this[nameof(RuntimeVirtualTextureParameterValues)].Address); } }
    }
    public class MaterialFunctionMaterialLayer : MaterialFunction
    {
        public MaterialFunctionMaterialLayer(nint addr) : base(addr) { }
    }
    public class MaterialFunctionMaterialLayerInstance : MaterialFunctionInstance
    {
        public MaterialFunctionMaterialLayerInstance(nint addr) : base(addr) { }
    }
    public class MaterialFunctionMaterialLayerBlend : MaterialFunction
    {
        public MaterialFunctionMaterialLayerBlend(nint addr) : base(addr) { }
    }
    public class MaterialFunctionMaterialLayerBlendInstance : MaterialFunctionInstance
    {
        public MaterialFunctionMaterialLayerBlendInstance(nint addr) : base(addr) { }
    }
    public class MaterialParameterCollection : Object
    {
        public MaterialParameterCollection(nint addr) : base(addr) { }
        public Guid StateId { get { return this[nameof(StateId)].As<Guid>(); } set { this["StateId"] = value; } }
        public Array<CollectionScalarParameter> ScalarParameters { get { return new Array<CollectionScalarParameter>(this[nameof(ScalarParameters)].Address); } }
        public Array<CollectionVectorParameter> VectorParameters { get { return new Array<CollectionVectorParameter>(this[nameof(VectorParameters)].Address); } }
        public Array<Object> GetVectorParameterNames() { return Invoke<Array<Object>>(nameof(GetVectorParameterNames)); }
        public LinearColor GetVectorParameterDefaultValue(Object ParameterName, bool bParameterFound) { return Invoke<LinearColor>(nameof(GetVectorParameterDefaultValue), ParameterName, bParameterFound); }
        public Array<Object> GetScalarParameterNames() { return Invoke<Array<Object>>(nameof(GetScalarParameterNames)); }
        public float GetScalarParameterDefaultValue(Object ParameterName, bool bParameterFound) { return Invoke<float>(nameof(GetScalarParameterDefaultValue), ParameterName, bParameterFound); }
    }
    public class MaterialParameterCollectionInstance : Object
    {
        public MaterialParameterCollectionInstance(nint addr) : base(addr) { }
        public MaterialParameterCollection Collection { get { return this[nameof(Collection)].As<MaterialParameterCollection>(); } set { this["Collection"] = value; } }
    }
    public class MeshDeformer : Object
    {
        public MeshDeformer(nint addr) : base(addr) { }
    }
    public class MeshDeformerInstanceSettings : Object
    {
        public MeshDeformerInstanceSettings(nint addr) : base(addr) { }
    }
    public class MeshDeformerInstance : Object
    {
        public MeshDeformerInstance(nint addr) : base(addr) { }
    }
    public class MicroTransactionBase : PlatformInterfaceBase
    {
        public MicroTransactionBase(nint addr) : base(addr) { }
        public Array<PurchaseInfo> AvailableProducts { get { return new Array<PurchaseInfo>(this[nameof(AvailableProducts)].Address); } }
        public Object LastError { get { return this[nameof(LastError)]; } set { this[nameof(LastError)] = value; } }
        public Object LastErrorSolution { get { return this[nameof(LastErrorSolution)]; } set { this[nameof(LastErrorSolution)] = value; } }
    }
    public class MorphTarget : Object
    {
        public MorphTarget(nint addr) : base(addr) { }
        public SkeletalMesh BaseSkelMesh { get { return this[nameof(BaseSkelMesh)].As<SkeletalMesh>(); } set { this["BaseSkelMesh"] = value; } }
    }
    public class NavAgentInterface : Interface
    {
        public NavAgentInterface(nint addr) : base(addr) { }
    }
    public class NavEdgeProviderInterface : Interface
    {
        public NavEdgeProviderInterface(nint addr) : base(addr) { }
    }
    public class NavigationDataInterface : Interface
    {
        public NavigationDataInterface(nint addr) : base(addr) { }
    }
    public class NavLinkDefinition : Object
    {
        public NavLinkDefinition(nint addr) : base(addr) { }
        public Array<NavigationLink> Links { get { return new Array<NavigationLink>(this[nameof(Links)].Address); } }
        public Array<NavigationSegmentLink> SegmentLinks { get { return new Array<NavigationSegmentLink>(this[nameof(SegmentLinks)].Address); } }
    }
    public class NavPathObserverInterface : Interface
    {
        public NavPathObserverInterface(nint addr) : base(addr) { }
    }
    public class NavRelevantInterface : Interface
    {
        public NavRelevantInterface(nint addr) : base(addr) { }
    }
    public class NetworkPredictionInterface : Interface
    {
        public NetworkPredictionInterface(nint addr) : base(addr) { }
    }
    public class ParticleEmitter : Object
    {
        public ParticleEmitter(nint addr) : base(addr) { }
        public Object EmitterName { get { return this[nameof(EmitterName)]; } set { this[nameof(EmitterName)] = value; } }
        public int SubUVDataOffset { get { return this[nameof(SubUVDataOffset)].GetValue<int>(); } set { this[nameof(SubUVDataOffset)].SetValue<int>(value); } }
        public byte EmitterRenderMode { get { return this[nameof(EmitterRenderMode)].GetValue<byte>(); } set { this[nameof(EmitterRenderMode)].SetValue<byte>(value); } }
        public EParticleSignificanceLevel SignificanceLevel { get { return (EParticleSignificanceLevel)this[nameof(SignificanceLevel)].GetValue<int>(); } set { this[nameof(SignificanceLevel)].SetValue<int>((int)value); } }
        public bool bUseLegacySpawningBehavior { get { return this[nameof(bUseLegacySpawningBehavior)].Flag; } set { this[nameof(bUseLegacySpawningBehavior)].Flag = value; } }
        public bool ConvertedModules { get { return this[nameof(ConvertedModules)].Flag; } set { this[nameof(ConvertedModules)].Flag = value; } }
        public bool bIsSoloing { get { return this[nameof(bIsSoloing)].Flag; } set { this[nameof(bIsSoloing)].Flag = value; } }
        public bool bCookedOut { get { return this[nameof(bCookedOut)].Flag; } set { this[nameof(bCookedOut)].Flag = value; } }
        public bool bDisabledLODsKeepEmitterAlive { get { return this[nameof(bDisabledLODsKeepEmitterAlive)].Flag; } set { this[nameof(bDisabledLODsKeepEmitterAlive)].Flag = value; } }
        public bool bDisableWhenInsignficant { get { return this[nameof(bDisableWhenInsignficant)].Flag; } set { this[nameof(bDisableWhenInsignficant)].Flag = value; } }
        public Array<ParticleLODLevel> LODLevels { get { return new Array<ParticleLODLevel>(this[nameof(LODLevels)].Address); } }
        public int PeakActiveParticles { get { return this[nameof(PeakActiveParticles)].GetValue<int>(); } set { this[nameof(PeakActiveParticles)].SetValue<int>(value); } }
        public int InitialAllocationCount { get { return this[nameof(InitialAllocationCount)].GetValue<int>(); } set { this[nameof(InitialAllocationCount)].SetValue<int>(value); } }
        public float QualityLevelSpawnRateScale { get { return this[nameof(QualityLevelSpawnRateScale)].GetValue<float>(); } set { this[nameof(QualityLevelSpawnRateScale)].SetValue<float>(value); } }
        public uint DetailModeBitmask { get { return this[nameof(DetailModeBitmask)].GetValue<uint>(); } set { this[nameof(DetailModeBitmask)].SetValue<uint>(value); } }
    }
    public class ParticleLODLevel : Object
    {
        public ParticleLODLevel(nint addr) : base(addr) { }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public ParticleModuleRequired RequiredModule { get { return this[nameof(RequiredModule)].As<ParticleModuleRequired>(); } set { this["RequiredModule"] = value; } }
        public Array<ParticleModule> Modules { get { return new Array<ParticleModule>(this[nameof(Modules)].Address); } }
        public ParticleModuleTypeDataBase TypeDataModule { get { return this[nameof(TypeDataModule)].As<ParticleModuleTypeDataBase>(); } set { this["TypeDataModule"] = value; } }
        public ParticleModuleSpawn SpawnModule { get { return this[nameof(SpawnModule)].As<ParticleModuleSpawn>(); } set { this["SpawnModule"] = value; } }
        public ParticleModuleEventGenerator EventGenerator { get { return this[nameof(EventGenerator)].As<ParticleModuleEventGenerator>(); } set { this["EventGenerator"] = value; } }
        public Array<ParticleModuleSpawnBase> SpawningModules { get { return new Array<ParticleModuleSpawnBase>(this[nameof(SpawningModules)].Address); } }
        public Array<ParticleModule> SpawnModules { get { return new Array<ParticleModule>(this[nameof(SpawnModules)].Address); } }
        public Array<ParticleModule> UpdateModules { get { return new Array<ParticleModule>(this[nameof(UpdateModules)].Address); } }
        public Array<ParticleModuleOrbit> OrbitModules { get { return new Array<ParticleModuleOrbit>(this[nameof(OrbitModules)].Address); } }
        public Array<ParticleModuleEventReceiverBase> EventReceiverModules { get { return new Array<ParticleModuleEventReceiverBase>(this[nameof(EventReceiverModules)].Address); } }
        public bool ConvertedModules { get { return this[nameof(ConvertedModules)].Flag; } set { this[nameof(ConvertedModules)].Flag = value; } }
        public int PeakActiveParticles { get { return this[nameof(PeakActiveParticles)].GetValue<int>(); } set { this[nameof(PeakActiveParticles)].SetValue<int>(value); } }
    }
    public class ParticleSystem : FXSystemAsset
    {
        public ParticleSystem(nint addr) : base(addr) { }
        public float UpdateTime_FPS { get { return this[nameof(UpdateTime_FPS)].GetValue<float>(); } set { this[nameof(UpdateTime_FPS)].SetValue<float>(value); } }
        public float UpdateTime_Delta { get { return this[nameof(UpdateTime_Delta)].GetValue<float>(); } set { this[nameof(UpdateTime_Delta)].SetValue<float>(value); } }
        public float WarmupTime { get { return this[nameof(WarmupTime)].GetValue<float>(); } set { this[nameof(WarmupTime)].SetValue<float>(value); } }
        public float WarmupTickRate { get { return this[nameof(WarmupTickRate)].GetValue<float>(); } set { this[nameof(WarmupTickRate)].SetValue<float>(value); } }
        public Array<ParticleEmitter> Emitters { get { return new Array<ParticleEmitter>(this[nameof(Emitters)].Address); } }
        public ParticleSystemComponent PreviewComponent { get { return this[nameof(PreviewComponent)].As<ParticleSystemComponent>(); } set { this["PreviewComponent"] = value; } }
        public InterpCurveEdSetup CurveEdSetup { get { return this[nameof(CurveEdSetup)].As<InterpCurveEdSetup>(); } set { this["CurveEdSetup"] = value; } }
        public float LODDistanceCheckTime { get { return this[nameof(LODDistanceCheckTime)].GetValue<float>(); } set { this[nameof(LODDistanceCheckTime)].SetValue<float>(value); } }
        public float MacroUVRadius { get { return this[nameof(MacroUVRadius)].GetValue<float>(); } set { this[nameof(MacroUVRadius)].SetValue<float>(value); } }
        public Array<float> LODDistances { get { return new Array<float>(this[nameof(LODDistances)].Address); } }
        public Array<ParticleSystemLOD> LODSettings { get { return new Array<ParticleSystemLOD>(this[nameof(LODSettings)].Address); } }
        public Box FixedRelativeBoundingBox { get { return this[nameof(FixedRelativeBoundingBox)].As<Box>(); } set { this["FixedRelativeBoundingBox"] = value; } }
        public float SecondsBeforeInactive { get { return this[nameof(SecondsBeforeInactive)].GetValue<float>(); } set { this[nameof(SecondsBeforeInactive)].SetValue<float>(value); } }
        public float Delay { get { return this[nameof(Delay)].GetValue<float>(); } set { this[nameof(Delay)].SetValue<float>(value); } }
        public float DelayLow { get { return this[nameof(DelayLow)].GetValue<float>(); } set { this[nameof(DelayLow)].SetValue<float>(value); } }
        public bool bOrientZAxisTowardCamera { get { return this[nameof(bOrientZAxisTowardCamera)].Flag; } set { this[nameof(bOrientZAxisTowardCamera)].Flag = value; } }
        public bool bUseFixedRelativeBoundingBox { get { return this[nameof(bUseFixedRelativeBoundingBox)].Flag; } set { this[nameof(bUseFixedRelativeBoundingBox)].Flag = value; } }
        public bool bShouldResetPeakCounts { get { return this[nameof(bShouldResetPeakCounts)].Flag; } set { this[nameof(bShouldResetPeakCounts)].Flag = value; } }
        public bool bHasPhysics { get { return this[nameof(bHasPhysics)].Flag; } set { this[nameof(bHasPhysics)].Flag = value; } }
        public bool bUseRealtimeThumbnail { get { return this[nameof(bUseRealtimeThumbnail)].Flag; } set { this[nameof(bUseRealtimeThumbnail)].Flag = value; } }
        public bool ThumbnailImageOutOfDate { get { return this[nameof(ThumbnailImageOutOfDate)].Flag; } set { this[nameof(ThumbnailImageOutOfDate)].Flag = value; } }
        public bool bUseDelayRange { get { return this[nameof(bUseDelayRange)].Flag; } set { this[nameof(bUseDelayRange)].Flag = value; } }
        public bool bAllowManagedTicking { get { return this[nameof(bAllowManagedTicking)].Flag; } set { this[nameof(bAllowManagedTicking)].Flag = value; } }
        public bool bAutoDeactivate { get { return this[nameof(bAutoDeactivate)].Flag; } set { this[nameof(bAutoDeactivate)].Flag = value; } }
        public bool bRegenerateLODDuplicate { get { return this[nameof(bRegenerateLODDuplicate)].Flag; } set { this[nameof(bRegenerateLODDuplicate)].Flag = value; } }
        public byte SystemUpdateMode { get { return this[nameof(SystemUpdateMode)].GetValue<byte>(); } set { this[nameof(SystemUpdateMode)].SetValue<byte>(value); } }
        public byte LODMethod { get { return this[nameof(LODMethod)].GetValue<byte>(); } set { this[nameof(LODMethod)].SetValue<byte>(value); } }
        public EParticleSystemInsignificanceReaction InsignificantReaction { get { return (EParticleSystemInsignificanceReaction)this[nameof(InsignificantReaction)].GetValue<int>(); } set { this[nameof(InsignificantReaction)].SetValue<int>((int)value); } }
        public byte OcclusionBoundsMethod { get { return this[nameof(OcclusionBoundsMethod)].GetValue<byte>(); } set { this[nameof(OcclusionBoundsMethod)].SetValue<byte>(value); } }
        public EParticleSignificanceLevel MaxSignificanceLevel { get { return (EParticleSignificanceLevel)this[nameof(MaxSignificanceLevel)].GetValue<int>(); } set { this[nameof(MaxSignificanceLevel)].SetValue<int>((int)value); } }
        public uint MinTimeBetweenTicks { get { return this[nameof(MinTimeBetweenTicks)].GetValue<uint>(); } set { this[nameof(MinTimeBetweenTicks)].SetValue<uint>(value); } }
        public float InsignificanceDelay { get { return this[nameof(InsignificanceDelay)].GetValue<float>(); } set { this[nameof(InsignificanceDelay)].SetValue<float>(value); } }
        public Vector MacroUVPosition { get { return this[nameof(MacroUVPosition)].As<Vector>(); } set { this["MacroUVPosition"] = value; } }
        public Box CustomOcclusionBounds { get { return this[nameof(CustomOcclusionBounds)].As<Box>(); } set { this["CustomOcclusionBounds"] = value; } }
        public Array<LODSoloTrack> SoloTracking { get { return new Array<LODSoloTrack>(this[nameof(SoloTracking)].Address); } }
        public Array<NamedEmitterMaterial> NamedMaterialSlots { get { return new Array<NamedEmitterMaterial>(this[nameof(NamedMaterialSlots)].Address); } }
        public bool ContainsEmitterType(Object TypeData) { return Invoke<bool>(nameof(ContainsEmitterType), TypeData); }
    }
    public class ParticleModule : Object
    {
        public ParticleModule(nint addr) : base(addr) { }
        public bool bSpawnModule { get { return this[nameof(bSpawnModule)].Flag; } set { this[nameof(bSpawnModule)].Flag = value; } }
        public bool bUpdateModule { get { return this[nameof(bUpdateModule)].Flag; } set { this[nameof(bUpdateModule)].Flag = value; } }
        public bool bFinalUpdateModule { get { return this[nameof(bFinalUpdateModule)].Flag; } set { this[nameof(bFinalUpdateModule)].Flag = value; } }
        public bool bUpdateForGPUEmitter { get { return this[nameof(bUpdateForGPUEmitter)].Flag; } set { this[nameof(bUpdateForGPUEmitter)].Flag = value; } }
        public bool bCurvesAsColor { get { return this[nameof(bCurvesAsColor)].Flag; } set { this[nameof(bCurvesAsColor)].Flag = value; } }
        public bool b3DDrawMode { get { return this[nameof(b3DDrawMode)].Flag; } set { this[nameof(b3DDrawMode)].Flag = value; } }
        public bool bSupported3DDrawMode { get { return this[nameof(bSupported3DDrawMode)].Flag; } set { this[nameof(bSupported3DDrawMode)].Flag = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bEditable { get { return this[nameof(bEditable)].Flag; } set { this[nameof(bEditable)].Flag = value; } }
        public bool LODDuplicate { get { return this[nameof(LODDuplicate)].Flag; } set { this[nameof(LODDuplicate)].Flag = value; } }
        public bool bSupportsRandomSeed { get { return this[nameof(bSupportsRandomSeed)].Flag; } set { this[nameof(bSupportsRandomSeed)].Flag = value; } }
        public bool bRequiresLoopingNotification { get { return this[nameof(bRequiresLoopingNotification)].Flag; } set { this[nameof(bRequiresLoopingNotification)].Flag = value; } }
        public byte LODValidity { get { return this[nameof(LODValidity)].GetValue<byte>(); } set { this[nameof(LODValidity)].SetValue<byte>(value); } }
    }
    public class ParticleModuleAccelerationBase : ParticleModule
    {
        public ParticleModuleAccelerationBase(nint addr) : base(addr) { }
        public bool bAlwaysInWorldSpace { get { return this[nameof(bAlwaysInWorldSpace)].Flag; } set { this[nameof(bAlwaysInWorldSpace)].Flag = value; } }
    }
    public class ParticleModuleAcceleration : ParticleModuleAccelerationBase
    {
        public ParticleModuleAcceleration(nint addr) : base(addr) { }
        public RawDistributionVector Acceleration { get { return this[nameof(Acceleration)].As<RawDistributionVector>(); } set { this["Acceleration"] = value; } }
        public bool bApplyOwnerScale { get { return this[nameof(bApplyOwnerScale)].Flag; } set { this[nameof(bApplyOwnerScale)].Flag = value; } }
    }
    public class ParticleModuleAccelerationConstant : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationConstant(nint addr) : base(addr) { }
        public Vector Acceleration { get { return this[nameof(Acceleration)].As<Vector>(); } set { this["Acceleration"] = value; } }
    }
    public class ParticleModuleAccelerationDrag : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationDrag(nint addr) : base(addr) { }
        public DistributionFloat DragCoefficient { get { return this[nameof(DragCoefficient)].As<DistributionFloat>(); } set { this["DragCoefficient"] = value; } }
        public RawDistributionFloat DragCoefficientRaw { get { return this[nameof(DragCoefficientRaw)].As<RawDistributionFloat>(); } set { this["DragCoefficientRaw"] = value; } }
    }
    public class ParticleModuleAccelerationDragScaleOverLife : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationDragScaleOverLife(nint addr) : base(addr) { }
        public DistributionFloat DragScale { get { return this[nameof(DragScale)].As<DistributionFloat>(); } set { this["DragScale"] = value; } }
        public RawDistributionFloat DragScaleRaw { get { return this[nameof(DragScaleRaw)].As<RawDistributionFloat>(); } set { this["DragScaleRaw"] = value; } }
    }
    public class ParticleModuleAccelerationOverLifetime : ParticleModuleAccelerationBase
    {
        public ParticleModuleAccelerationOverLifetime(nint addr) : base(addr) { }
        public RawDistributionVector AccelOverLife { get { return this[nameof(AccelOverLife)].As<RawDistributionVector>(); } set { this["AccelOverLife"] = value; } }
    }
    public class ParticleModuleAttractorBase : ParticleModule
    {
        public ParticleModuleAttractorBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleAttractorLine : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorLine(nint addr) : base(addr) { }
        public Vector EndPoint0 { get { return this[nameof(EndPoint0)].As<Vector>(); } set { this["EndPoint0"] = value; } }
        public Vector EndPoint1 { get { return this[nameof(EndPoint1)].As<Vector>(); } set { this["EndPoint1"] = value; } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
    }
    public class ParticleModuleAttractorParticle : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorParticle(nint addr) : base(addr) { }
        public Object EmitterName { get { return this[nameof(EmitterName)]; } set { this[nameof(EmitterName)] = value; } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public bool bStrengthByDistance { get { return this[nameof(bStrengthByDistance)].Flag; } set { this[nameof(bStrengthByDistance)].Flag = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
        public bool bAffectBaseVelocity { get { return this[nameof(bAffectBaseVelocity)].Flag; } set { this[nameof(bAffectBaseVelocity)].Flag = value; } }
        public byte SelectionMethod { get { return this[nameof(SelectionMethod)].GetValue<byte>(); } set { this[nameof(SelectionMethod)].SetValue<byte>(value); } }
        public bool bRenewSource { get { return this[nameof(bRenewSource)].Flag; } set { this[nameof(bRenewSource)].Flag = value; } }
        public bool bInheritSourceVel { get { return this[nameof(bInheritSourceVel)].Flag; } set { this[nameof(bInheritSourceVel)].Flag = value; } }
        public int LastSelIndex { get { return this[nameof(LastSelIndex)].GetValue<int>(); } set { this[nameof(LastSelIndex)].SetValue<int>(value); } }
    }
    public class ParticleModuleAttractorPoint : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorPoint(nint addr) : base(addr) { }
        public RawDistributionVector Position { get { return this[nameof(Position)].As<RawDistributionVector>(); } set { this["Position"] = value; } }
        public RawDistributionFloat Range { get { return this[nameof(Range)].As<RawDistributionFloat>(); } set { this["Range"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
        public bool StrengthByDistance { get { return this[nameof(StrengthByDistance)].Flag; } set { this[nameof(StrengthByDistance)].Flag = value; } }
        public bool bAffectBaseVelocity { get { return this[nameof(bAffectBaseVelocity)].Flag; } set { this[nameof(bAffectBaseVelocity)].Flag = value; } }
        public bool bOverrideVelocity { get { return this[nameof(bOverrideVelocity)].Flag; } set { this[nameof(bOverrideVelocity)].Flag = value; } }
        public bool bUseWorldSpacePosition { get { return this[nameof(bUseWorldSpacePosition)].Flag; } set { this[nameof(bUseWorldSpacePosition)].Flag = value; } }
        public bool Positive_X { get { return this[nameof(Positive_X)].Flag; } set { this[nameof(Positive_X)].Flag = value; } }
        public bool Positive_Y { get { return this[nameof(Positive_Y)].Flag; } set { this[nameof(Positive_Y)].Flag = value; } }
        public bool Positive_Z { get { return this[nameof(Positive_Z)].Flag; } set { this[nameof(Positive_Z)].Flag = value; } }
        public bool Negative_X { get { return this[nameof(Negative_X)].Flag; } set { this[nameof(Negative_X)].Flag = value; } }
        public bool Negative_Y { get { return this[nameof(Negative_Y)].Flag; } set { this[nameof(Negative_Y)].Flag = value; } }
        public bool Negative_Z { get { return this[nameof(Negative_Z)].Flag; } set { this[nameof(Negative_Z)].Flag = value; } }
    }
    public class ParticleModuleAttractorPointGravity : ParticleModuleAttractorBase
    {
        public ParticleModuleAttractorPointGravity(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public DistributionFloat Strength { get { return this[nameof(Strength)].As<DistributionFloat>(); } set { this["Strength"] = value; } }
        public RawDistributionFloat StrengthRaw { get { return this[nameof(StrengthRaw)].As<RawDistributionFloat>(); } set { this["StrengthRaw"] = value; } }
    }
    public class ParticleModuleBeamBase : ParticleModule
    {
        public ParticleModuleBeamBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleBeamModifier : ParticleModuleBeamBase
    {
        public ParticleModuleBeamModifier(nint addr) : base(addr) { }
        public byte ModifierType { get { return this[nameof(ModifierType)].GetValue<byte>(); } set { this[nameof(ModifierType)].SetValue<byte>(value); } }
        public BeamModifierOptions PositionOptions { get { return this[nameof(PositionOptions)].As<BeamModifierOptions>(); } set { this["PositionOptions"] = value; } }
        public RawDistributionVector Position { get { return this[nameof(Position)].As<RawDistributionVector>(); } set { this["Position"] = value; } }
        public BeamModifierOptions TangentOptions { get { return this[nameof(TangentOptions)].As<BeamModifierOptions>(); } set { this["TangentOptions"] = value; } }
        public RawDistributionVector Tangent { get { return this[nameof(Tangent)].As<RawDistributionVector>(); } set { this["Tangent"] = value; } }
        public bool bAbsoluteTangent { get { return this[nameof(bAbsoluteTangent)].Flag; } set { this[nameof(bAbsoluteTangent)].Flag = value; } }
        public BeamModifierOptions StrengthOptions { get { return this[nameof(StrengthOptions)].As<BeamModifierOptions>(); } set { this["StrengthOptions"] = value; } }
        public RawDistributionFloat Strength { get { return this[nameof(Strength)].As<RawDistributionFloat>(); } set { this["Strength"] = value; } }
    }
    public class ParticleModuleBeamNoise : ParticleModuleBeamBase
    {
        public ParticleModuleBeamNoise(nint addr) : base(addr) { }
        public bool bLowFreq_Enabled { get { return this[nameof(bLowFreq_Enabled)].Flag; } set { this[nameof(bLowFreq_Enabled)].Flag = value; } }
        public int Frequency { get { return this[nameof(Frequency)].GetValue<int>(); } set { this[nameof(Frequency)].SetValue<int>(value); } }
        public int Frequency_LowRange { get { return this[nameof(Frequency_LowRange)].GetValue<int>(); } set { this[nameof(Frequency_LowRange)].SetValue<int>(value); } }
        public RawDistributionVector NoiseRange { get { return this[nameof(NoiseRange)].As<RawDistributionVector>(); } set { this["NoiseRange"] = value; } }
        public RawDistributionFloat NoiseRangeScale { get { return this[nameof(NoiseRangeScale)].As<RawDistributionFloat>(); } set { this["NoiseRangeScale"] = value; } }
        public bool bNRScaleEmitterTime { get { return this[nameof(bNRScaleEmitterTime)].Flag; } set { this[nameof(bNRScaleEmitterTime)].Flag = value; } }
        public RawDistributionVector NoiseSpeed { get { return this[nameof(NoiseSpeed)].As<RawDistributionVector>(); } set { this["NoiseSpeed"] = value; } }
        public bool bSmooth { get { return this[nameof(bSmooth)].Flag; } set { this[nameof(bSmooth)].Flag = value; } }
        public float NoiseLockRadius { get { return this[nameof(NoiseLockRadius)].GetValue<float>(); } set { this[nameof(NoiseLockRadius)].SetValue<float>(value); } }
        public bool bNoiseLock { get { return this[nameof(bNoiseLock)].Flag; } set { this[nameof(bNoiseLock)].Flag = value; } }
        public bool bOscillate { get { return this[nameof(bOscillate)].Flag; } set { this[nameof(bOscillate)].Flag = value; } }
        public float NoiseLockTime { get { return this[nameof(NoiseLockTime)].GetValue<float>(); } set { this[nameof(NoiseLockTime)].SetValue<float>(value); } }
        public float NoiseTension { get { return this[nameof(NoiseTension)].GetValue<float>(); } set { this[nameof(NoiseTension)].SetValue<float>(value); } }
        public bool bUseNoiseTangents { get { return this[nameof(bUseNoiseTangents)].Flag; } set { this[nameof(bUseNoiseTangents)].Flag = value; } }
        public RawDistributionFloat NoiseTangentStrength { get { return this[nameof(NoiseTangentStrength)].As<RawDistributionFloat>(); } set { this["NoiseTangentStrength"] = value; } }
        public int NoiseTessellation { get { return this[nameof(NoiseTessellation)].GetValue<int>(); } set { this[nameof(NoiseTessellation)].SetValue<int>(value); } }
        public bool bTargetNoise { get { return this[nameof(bTargetNoise)].Flag; } set { this[nameof(bTargetNoise)].Flag = value; } }
        public float FrequencyDistance { get { return this[nameof(FrequencyDistance)].GetValue<float>(); } set { this[nameof(FrequencyDistance)].SetValue<float>(value); } }
        public bool bApplyNoiseScale { get { return this[nameof(bApplyNoiseScale)].Flag; } set { this[nameof(bApplyNoiseScale)].Flag = value; } }
        public RawDistributionFloat NoiseScale { get { return this[nameof(NoiseScale)].As<RawDistributionFloat>(); } set { this["NoiseScale"] = value; } }
    }
    public class ParticleModuleBeamSource : ParticleModuleBeamBase
    {
        public ParticleModuleBeamSource(nint addr) : base(addr) { }
        public byte SourceMethod { get { return this[nameof(SourceMethod)].GetValue<byte>(); } set { this[nameof(SourceMethod)].SetValue<byte>(value); } }
        public Object SourceName { get { return this[nameof(SourceName)]; } set { this[nameof(SourceName)] = value; } }
        public bool bSourceAbsolute { get { return this[nameof(bSourceAbsolute)].Flag; } set { this[nameof(bSourceAbsolute)].Flag = value; } }
        public RawDistributionVector Source { get { return this[nameof(Source)].As<RawDistributionVector>(); } set { this["Source"] = value; } }
        public bool bLockSource { get { return this[nameof(bLockSource)].Flag; } set { this[nameof(bLockSource)].Flag = value; } }
        public byte SourceTangentMethod { get { return this[nameof(SourceTangentMethod)].GetValue<byte>(); } set { this[nameof(SourceTangentMethod)].SetValue<byte>(value); } }
        public RawDistributionVector SourceTangent { get { return this[nameof(SourceTangent)].As<RawDistributionVector>(); } set { this["SourceTangent"] = value; } }
        public bool bLockSourceTangent { get { return this[nameof(bLockSourceTangent)].Flag; } set { this[nameof(bLockSourceTangent)].Flag = value; } }
        public RawDistributionFloat SourceStrength { get { return this[nameof(SourceStrength)].As<RawDistributionFloat>(); } set { this["SourceStrength"] = value; } }
        public bool bLockSourceStength { get { return this[nameof(bLockSourceStength)].Flag; } set { this[nameof(bLockSourceStength)].Flag = value; } }
    }
    public class ParticleModuleBeamTarget : ParticleModuleBeamBase
    {
        public ParticleModuleBeamTarget(nint addr) : base(addr) { }
        public byte TargetMethod { get { return this[nameof(TargetMethod)].GetValue<byte>(); } set { this[nameof(TargetMethod)].SetValue<byte>(value); } }
        public Object TargetName { get { return this[nameof(TargetName)]; } set { this[nameof(TargetName)] = value; } }
        public RawDistributionVector Target { get { return this[nameof(Target)].As<RawDistributionVector>(); } set { this["Target"] = value; } }
        public bool bTargetAbsolute { get { return this[nameof(bTargetAbsolute)].Flag; } set { this[nameof(bTargetAbsolute)].Flag = value; } }
        public bool bLockTarget { get { return this[nameof(bLockTarget)].Flag; } set { this[nameof(bLockTarget)].Flag = value; } }
        public byte TargetTangentMethod { get { return this[nameof(TargetTangentMethod)].GetValue<byte>(); } set { this[nameof(TargetTangentMethod)].SetValue<byte>(value); } }
        public RawDistributionVector TargetTangent { get { return this[nameof(TargetTangent)].As<RawDistributionVector>(); } set { this["TargetTangent"] = value; } }
        public bool bLockTargetTangent { get { return this[nameof(bLockTargetTangent)].Flag; } set { this[nameof(bLockTargetTangent)].Flag = value; } }
        public RawDistributionFloat TargetStrength { get { return this[nameof(TargetStrength)].As<RawDistributionFloat>(); } set { this["TargetStrength"] = value; } }
        public bool bLockTargetStength { get { return this[nameof(bLockTargetStength)].Flag; } set { this[nameof(bLockTargetStength)].Flag = value; } }
        public float LockRadius { get { return this[nameof(LockRadius)].GetValue<float>(); } set { this[nameof(LockRadius)].SetValue<float>(value); } }
    }
    public class ParticleModuleCameraBase : ParticleModule
    {
        public ParticleModuleCameraBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleCameraOffset : ParticleModuleCameraBase
    {
        public ParticleModuleCameraOffset(nint addr) : base(addr) { }
        public RawDistributionFloat CameraOffset { get { return this[nameof(CameraOffset)].As<RawDistributionFloat>(); } set { this["CameraOffset"] = value; } }
        public bool bSpawnTimeOnly { get { return this[nameof(bSpawnTimeOnly)].Flag; } set { this[nameof(bSpawnTimeOnly)].Flag = value; } }
        public byte UpdateMethod { get { return this[nameof(UpdateMethod)].GetValue<byte>(); } set { this[nameof(UpdateMethod)].SetValue<byte>(value); } }
    }
    public class ParticleModuleCollisionBase : ParticleModule
    {
        public ParticleModuleCollisionBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleCollision : ParticleModuleCollisionBase
    {
        public ParticleModuleCollision(nint addr) : base(addr) { }
        public RawDistributionVector DampingFactor { get { return this[nameof(DampingFactor)].As<RawDistributionVector>(); } set { this["DampingFactor"] = value; } }
        public RawDistributionVector DampingFactorRotation { get { return this[nameof(DampingFactorRotation)].As<RawDistributionVector>(); } set { this["DampingFactorRotation"] = value; } }
        public RawDistributionFloat MaxCollisions { get { return this[nameof(MaxCollisions)].As<RawDistributionFloat>(); } set { this["MaxCollisions"] = value; } }
        public byte CollisionCompletionOption { get { return this[nameof(CollisionCompletionOption)].GetValue<byte>(); } set { this[nameof(CollisionCompletionOption)].SetValue<byte>(value); } }
        public Array<byte> CollisionTypes { get { return new Array<byte>(this[nameof(CollisionTypes)].Address); } }
        public bool bApplyPhysics { get { return this[nameof(bApplyPhysics)].Flag; } set { this[nameof(bApplyPhysics)].Flag = value; } }
        public bool bIgnoreTriggerVolumes { get { return this[nameof(bIgnoreTriggerVolumes)].Flag; } set { this[nameof(bIgnoreTriggerVolumes)].Flag = value; } }
        public RawDistributionFloat ParticleMass { get { return this[nameof(ParticleMass)].As<RawDistributionFloat>(); } set { this["ParticleMass"] = value; } }
        public float DirScalar { get { return this[nameof(DirScalar)].GetValue<float>(); } set { this[nameof(DirScalar)].SetValue<float>(value); } }
        public bool bPawnsDoNotDecrementCount { get { return this[nameof(bPawnsDoNotDecrementCount)].Flag; } set { this[nameof(bPawnsDoNotDecrementCount)].Flag = value; } }
        public bool bOnlyVerticalNormalsDecrementCount { get { return this[nameof(bOnlyVerticalNormalsDecrementCount)].Flag; } set { this[nameof(bOnlyVerticalNormalsDecrementCount)].Flag = value; } }
        public float VerticalFudgeFactor { get { return this[nameof(VerticalFudgeFactor)].GetValue<float>(); } set { this[nameof(VerticalFudgeFactor)].SetValue<float>(value); } }
        public RawDistributionFloat DelayAmount { get { return this[nameof(DelayAmount)].As<RawDistributionFloat>(); } set { this["DelayAmount"] = value; } }
        public bool bDropDetail { get { return this[nameof(bDropDetail)].Flag; } set { this[nameof(bDropDetail)].Flag = value; } }
        public bool bCollideOnlyIfVisible { get { return this[nameof(bCollideOnlyIfVisible)].Flag; } set { this[nameof(bCollideOnlyIfVisible)].Flag = value; } }
        public bool bIgnoreSourceActor { get { return this[nameof(bIgnoreSourceActor)].Flag; } set { this[nameof(bIgnoreSourceActor)].Flag = value; } }
        public float MaxCollisionDistance { get { return this[nameof(MaxCollisionDistance)].GetValue<float>(); } set { this[nameof(MaxCollisionDistance)].SetValue<float>(value); } }
    }
    public class ParticleModuleCollisionGPU : ParticleModuleCollisionBase
    {
        public ParticleModuleCollisionGPU(nint addr) : base(addr) { }
        public RawDistributionFloat Resilience { get { return this[nameof(Resilience)].As<RawDistributionFloat>(); } set { this["Resilience"] = value; } }
        public RawDistributionFloat ResilienceScaleOverLife { get { return this[nameof(ResilienceScaleOverLife)].As<RawDistributionFloat>(); } set { this["ResilienceScaleOverLife"] = value; } }
        public float Friction { get { return this[nameof(Friction)].GetValue<float>(); } set { this[nameof(Friction)].SetValue<float>(value); } }
        public float RandomSpread { get { return this[nameof(RandomSpread)].GetValue<float>(); } set { this[nameof(RandomSpread)].SetValue<float>(value); } }
        public float RandomDistribution { get { return this[nameof(RandomDistribution)].GetValue<float>(); } set { this[nameof(RandomDistribution)].SetValue<float>(value); } }
        public float RadiusScale { get { return this[nameof(RadiusScale)].GetValue<float>(); } set { this[nameof(RadiusScale)].SetValue<float>(value); } }
        public float RadiusBias { get { return this[nameof(RadiusBias)].GetValue<float>(); } set { this[nameof(RadiusBias)].SetValue<float>(value); } }
        public byte Response { get { return this[nameof(Response)].GetValue<byte>(); } set { this[nameof(Response)].SetValue<byte>(value); } }
        public byte CollisionMode { get { return this[nameof(CollisionMode)].GetValue<byte>(); } set { this[nameof(CollisionMode)].SetValue<byte>(value); } }
    }
    public class ParticleModuleColorBase : ParticleModule
    {
        public ParticleModuleColorBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleColor : ParticleModuleColorBase
    {
        public ParticleModuleColor(nint addr) : base(addr) { }
        public RawDistributionVector StartColor { get { return this[nameof(StartColor)].As<RawDistributionVector>(); } set { this["StartColor"] = value; } }
        public RawDistributionFloat StartAlpha { get { return this[nameof(StartAlpha)].As<RawDistributionFloat>(); } set { this["StartAlpha"] = value; } }
        public bool bClampAlpha { get { return this[nameof(bClampAlpha)].Flag; } set { this[nameof(bClampAlpha)].Flag = value; } }
    }
    public class ParticleModuleColorOverLife : ParticleModuleColorBase
    {
        public ParticleModuleColorOverLife(nint addr) : base(addr) { }
        public RawDistributionVector ColorOverLife { get { return this[nameof(ColorOverLife)].As<RawDistributionVector>(); } set { this["ColorOverLife"] = value; } }
        public RawDistributionFloat AlphaOverLife { get { return this[nameof(AlphaOverLife)].As<RawDistributionFloat>(); } set { this["AlphaOverLife"] = value; } }
        public bool bClampAlpha { get { return this[nameof(bClampAlpha)].Flag; } set { this[nameof(bClampAlpha)].Flag = value; } }
    }
    public class ParticleModuleColorScaleOverLife : ParticleModuleColorBase
    {
        public ParticleModuleColorScaleOverLife(nint addr) : base(addr) { }
        public RawDistributionVector ColorScaleOverLife { get { return this[nameof(ColorScaleOverLife)].As<RawDistributionVector>(); } set { this["ColorScaleOverLife"] = value; } }
        public RawDistributionFloat AlphaScaleOverLife { get { return this[nameof(AlphaScaleOverLife)].As<RawDistributionFloat>(); } set { this["AlphaScaleOverLife"] = value; } }
        public bool bEmitterTime { get { return this[nameof(bEmitterTime)].Flag; } set { this[nameof(bEmitterTime)].Flag = value; } }
    }
    public class ParticleModuleColor_Seeded : ParticleModuleColor
    {
        public ParticleModuleColor_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleEventBase : ParticleModule
    {
        public ParticleModuleEventBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleEventGenerator : ParticleModuleEventBase
    {
        public ParticleModuleEventGenerator(nint addr) : base(addr) { }
        public Array<ParticleEvent_GenerateInfo> Events { get { return new Array<ParticleEvent_GenerateInfo>(this[nameof(Events)].Address); } }
    }
    public class ParticleModuleEventReceiverBase : ParticleModuleEventBase
    {
        public ParticleModuleEventReceiverBase(nint addr) : base(addr) { }
        public byte EventGeneratorType { get { return this[nameof(EventGeneratorType)].GetValue<byte>(); } set { this[nameof(EventGeneratorType)].SetValue<byte>(value); } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
    }
    public class ParticleModuleEventReceiverKillParticles : ParticleModuleEventReceiverBase
    {
        public ParticleModuleEventReceiverKillParticles(nint addr) : base(addr) { }
        public bool bStopSpawning { get { return this[nameof(bStopSpawning)].Flag; } set { this[nameof(bStopSpawning)].Flag = value; } }
    }
    public class ParticleModuleEventReceiverSpawn : ParticleModuleEventReceiverBase
    {
        public ParticleModuleEventReceiverSpawn(nint addr) : base(addr) { }
        public RawDistributionFloat SpawnCount { get { return this[nameof(SpawnCount)].As<RawDistributionFloat>(); } set { this["SpawnCount"] = value; } }
        public bool bUseParticleTime { get { return this[nameof(bUseParticleTime)].Flag; } set { this[nameof(bUseParticleTime)].Flag = value; } }
        public bool bUsePSysLocation { get { return this[nameof(bUsePSysLocation)].Flag; } set { this[nameof(bUsePSysLocation)].Flag = value; } }
        public bool bInheritVelocity { get { return this[nameof(bInheritVelocity)].Flag; } set { this[nameof(bInheritVelocity)].Flag = value; } }
        public RawDistributionVector InheritVelocityScale { get { return this[nameof(InheritVelocityScale)].As<RawDistributionVector>(); } set { this["InheritVelocityScale"] = value; } }
        public Array<PhysicalMaterial> PhysicalMaterials { get { return new Array<PhysicalMaterial>(this[nameof(PhysicalMaterials)].Address); } }
        public bool bBanPhysicalMaterials { get { return this[nameof(bBanPhysicalMaterials)].Flag; } set { this[nameof(bBanPhysicalMaterials)].Flag = value; } }
    }
    public class ParticleModuleEventSendToGame : Object
    {
        public ParticleModuleEventSendToGame(nint addr) : base(addr) { }
    }
    public class ParticleModuleKillBase : ParticleModule
    {
        public ParticleModuleKillBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleKillBox : ParticleModuleKillBase
    {
        public ParticleModuleKillBox(nint addr) : base(addr) { }
        public RawDistributionVector LowerLeftCorner { get { return this[nameof(LowerLeftCorner)].As<RawDistributionVector>(); } set { this["LowerLeftCorner"] = value; } }
        public RawDistributionVector UpperRightCorner { get { return this[nameof(UpperRightCorner)].As<RawDistributionVector>(); } set { this["UpperRightCorner"] = value; } }
        public bool bAbsolute { get { return this[nameof(bAbsolute)].Flag; } set { this[nameof(bAbsolute)].Flag = value; } }
        public bool bKillInside { get { return this[nameof(bKillInside)].Flag; } set { this[nameof(bKillInside)].Flag = value; } }
        public bool bAxisAlignedAndFixedSize { get { return this[nameof(bAxisAlignedAndFixedSize)].Flag; } set { this[nameof(bAxisAlignedAndFixedSize)].Flag = value; } }
    }
    public class ParticleModuleKillHeight : ParticleModuleKillBase
    {
        public ParticleModuleKillHeight(nint addr) : base(addr) { }
        public RawDistributionFloat Height { get { return this[nameof(Height)].As<RawDistributionFloat>(); } set { this["Height"] = value; } }
        public bool bAbsolute { get { return this[nameof(bAbsolute)].Flag; } set { this[nameof(bAbsolute)].Flag = value; } }
        public bool bFloor { get { return this[nameof(bFloor)].Flag; } set { this[nameof(bFloor)].Flag = value; } }
        public bool bApplyPSysScale { get { return this[nameof(bApplyPSysScale)].Flag; } set { this[nameof(bApplyPSysScale)].Flag = value; } }
    }
    public class ParticleModuleLifetimeBase : ParticleModule
    {
        public ParticleModuleLifetimeBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleLifetime : ParticleModuleLifetimeBase
    {
        public ParticleModuleLifetime(nint addr) : base(addr) { }
        public RawDistributionFloat LifeTime { get { return this[nameof(LifeTime)].As<RawDistributionFloat>(); } set { this["LifeTime"] = value; } }
    }
    public class ParticleModuleLifetime_Seeded : ParticleModuleLifetime
    {
        public ParticleModuleLifetime_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLightBase : ParticleModule
    {
        public ParticleModuleLightBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleLight : ParticleModuleLightBase
    {
        public ParticleModuleLight(nint addr) : base(addr) { }
        public bool bUseInverseSquaredFalloff { get { return this[nameof(bUseInverseSquaredFalloff)].Flag; } set { this[nameof(bUseInverseSquaredFalloff)].Flag = value; } }
        public bool bAffectsTranslucency { get { return this[nameof(bAffectsTranslucency)].Flag; } set { this[nameof(bAffectsTranslucency)].Flag = value; } }
        public bool bOverrideInverseExposureBlend { get { return this[nameof(bOverrideInverseExposureBlend)].Flag; } set { this[nameof(bOverrideInverseExposureBlend)].Flag = value; } }
        public bool bPreviewLightRadius { get { return this[nameof(bPreviewLightRadius)].Flag; } set { this[nameof(bPreviewLightRadius)].Flag = value; } }
        public float SpawnFraction { get { return this[nameof(SpawnFraction)].GetValue<float>(); } set { this[nameof(SpawnFraction)].SetValue<float>(value); } }
        public RawDistributionVector ColorScaleOverLife { get { return this[nameof(ColorScaleOverLife)].As<RawDistributionVector>(); } set { this["ColorScaleOverLife"] = value; } }
        public RawDistributionFloat BrightnessOverLife { get { return this[nameof(BrightnessOverLife)].As<RawDistributionFloat>(); } set { this["BrightnessOverLife"] = value; } }
        public RawDistributionFloat RadiusScale { get { return this[nameof(RadiusScale)].As<RawDistributionFloat>(); } set { this["RadiusScale"] = value; } }
        public RawDistributionFloat LightExponent { get { return this[nameof(LightExponent)].As<RawDistributionFloat>(); } set { this["LightExponent"] = value; } }
        public float InverseExposureBlend { get { return this[nameof(InverseExposureBlend)].GetValue<float>(); } set { this[nameof(InverseExposureBlend)].SetValue<float>(value); } }
        public LightingChannels LightingChannels { get { return this[nameof(LightingChannels)].As<LightingChannels>(); } set { this["LightingChannels"] = value; } }
        public float VolumetricScatteringIntensity { get { return this[nameof(VolumetricScatteringIntensity)].GetValue<float>(); } set { this[nameof(VolumetricScatteringIntensity)].SetValue<float>(value); } }
        public bool bHighQualityLights { get { return this[nameof(bHighQualityLights)].Flag; } set { this[nameof(bHighQualityLights)].Flag = value; } }
        public bool bShadowCastingLights { get { return this[nameof(bShadowCastingLights)].Flag; } set { this[nameof(bShadowCastingLights)].Flag = value; } }
    }
    public class ParticleModuleLight_Seeded : ParticleModuleLight
    {
        public ParticleModuleLight_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationBase : ParticleModule
    {
        public ParticleModuleLocationBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleLocation : ParticleModuleLocationBase
    {
        public ParticleModuleLocation(nint addr) : base(addr) { }
        public RawDistributionVector StartLocation { get { return this[nameof(StartLocation)].As<RawDistributionVector>(); } set { this["StartLocation"] = value; } }
        public float DistributeOverNPoints { get { return this[nameof(DistributeOverNPoints)].GetValue<float>(); } set { this[nameof(DistributeOverNPoints)].SetValue<float>(value); } }
        public float DistributeThreshold { get { return this[nameof(DistributeThreshold)].GetValue<float>(); } set { this[nameof(DistributeThreshold)].SetValue<float>(value); } }
    }
    public class ParticleModuleLocationBoneSocket : ParticleModuleLocationBase
    {
        public ParticleModuleLocationBoneSocket(nint addr) : base(addr) { }
        public byte SourceType { get { return this[nameof(SourceType)].GetValue<byte>(); } set { this[nameof(SourceType)].SetValue<byte>(value); } }
        public Vector UniversalOffset { get { return this[nameof(UniversalOffset)].As<Vector>(); } set { this["UniversalOffset"] = value; } }
        public Array<LocationBoneSocketInfo> SourceLocations { get { return new Array<LocationBoneSocketInfo>(this[nameof(SourceLocations)].Address); } }
        public byte SelectionMethod { get { return this[nameof(SelectionMethod)].GetValue<byte>(); } set { this[nameof(SelectionMethod)].SetValue<byte>(value); } }
        public bool bUpdatePositionEachFrame { get { return this[nameof(bUpdatePositionEachFrame)].Flag; } set { this[nameof(bUpdatePositionEachFrame)].Flag = value; } }
        public bool bOrientMeshEmitters { get { return this[nameof(bOrientMeshEmitters)].Flag; } set { this[nameof(bOrientMeshEmitters)].Flag = value; } }
        public bool bInheritBoneVelocity { get { return this[nameof(bInheritBoneVelocity)].Flag; } set { this[nameof(bInheritBoneVelocity)].Flag = value; } }
        public float InheritVelocityScale { get { return this[nameof(InheritVelocityScale)].GetValue<float>(); } set { this[nameof(InheritVelocityScale)].SetValue<float>(value); } }
        public Object SkelMeshActorParamName { get { return this[nameof(SkelMeshActorParamName)]; } set { this[nameof(SkelMeshActorParamName)] = value; } }
        public int NumPreSelectedIndices { get { return this[nameof(NumPreSelectedIndices)].GetValue<int>(); } set { this[nameof(NumPreSelectedIndices)].SetValue<int>(value); } }
    }
    public class ParticleModuleLocationDirect : ParticleModuleLocationBase
    {
        public ParticleModuleLocationDirect(nint addr) : base(addr) { }
        public RawDistributionVector Location { get { return this[nameof(Location)].As<RawDistributionVector>(); } set { this["Location"] = value; } }
        public RawDistributionVector LocationOffset { get { return this[nameof(LocationOffset)].As<RawDistributionVector>(); } set { this["LocationOffset"] = value; } }
        public RawDistributionVector ScaleFactor { get { return this[nameof(ScaleFactor)].As<RawDistributionVector>(); } set { this["ScaleFactor"] = value; } }
        public RawDistributionVector Direction { get { return this[nameof(Direction)].As<RawDistributionVector>(); } set { this["Direction"] = value; } }
    }
    public class ParticleModuleLocationEmitter : ParticleModuleLocationBase
    {
        public ParticleModuleLocationEmitter(nint addr) : base(addr) { }
        public Object EmitterName { get { return this[nameof(EmitterName)]; } set { this[nameof(EmitterName)] = value; } }
        public byte SelectionMethod { get { return this[nameof(SelectionMethod)].GetValue<byte>(); } set { this[nameof(SelectionMethod)].SetValue<byte>(value); } }
        public bool InheritSourceVelocity { get { return this[nameof(InheritSourceVelocity)].Flag; } set { this[nameof(InheritSourceVelocity)].Flag = value; } }
        public float InheritSourceVelocityScale { get { return this[nameof(InheritSourceVelocityScale)].GetValue<float>(); } set { this[nameof(InheritSourceVelocityScale)].SetValue<float>(value); } }
        public bool bInheritSourceRotation { get { return this[nameof(bInheritSourceRotation)].Flag; } set { this[nameof(bInheritSourceRotation)].Flag = value; } }
        public float InheritSourceRotationScale { get { return this[nameof(InheritSourceRotationScale)].GetValue<float>(); } set { this[nameof(InheritSourceRotationScale)].SetValue<float>(value); } }
    }
    public class ParticleModuleLocationEmitterDirect : ParticleModuleLocationBase
    {
        public ParticleModuleLocationEmitterDirect(nint addr) : base(addr) { }
        public Object EmitterName { get { return this[nameof(EmitterName)]; } set { this[nameof(EmitterName)] = value; } }
    }
    public class ParticleModuleLocationPrimitiveBase : ParticleModuleLocationBase
    {
        public ParticleModuleLocationPrimitiveBase(nint addr) : base(addr) { }
        public bool Positive_X { get { return this[nameof(Positive_X)].Flag; } set { this[nameof(Positive_X)].Flag = value; } }
        public bool Positive_Y { get { return this[nameof(Positive_Y)].Flag; } set { this[nameof(Positive_Y)].Flag = value; } }
        public bool Positive_Z { get { return this[nameof(Positive_Z)].Flag; } set { this[nameof(Positive_Z)].Flag = value; } }
        public bool Negative_X { get { return this[nameof(Negative_X)].Flag; } set { this[nameof(Negative_X)].Flag = value; } }
        public bool Negative_Y { get { return this[nameof(Negative_Y)].Flag; } set { this[nameof(Negative_Y)].Flag = value; } }
        public bool Negative_Z { get { return this[nameof(Negative_Z)].Flag; } set { this[nameof(Negative_Z)].Flag = value; } }
        public bool SurfaceOnly { get { return this[nameof(SurfaceOnly)].Flag; } set { this[nameof(SurfaceOnly)].Flag = value; } }
        public bool Velocity { get { return this[nameof(Velocity)].Flag; } set { this[nameof(Velocity)].Flag = value; } }
        public RawDistributionFloat VelocityScale { get { return this[nameof(VelocityScale)].As<RawDistributionFloat>(); } set { this["VelocityScale"] = value; } }
        public RawDistributionVector StartLocation { get { return this[nameof(StartLocation)].As<RawDistributionVector>(); } set { this["StartLocation"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveCylinder : ParticleModuleLocationPrimitiveBase
    {
        public ParticleModuleLocationPrimitiveCylinder(nint addr) : base(addr) { }
        public bool RadialVelocity { get { return this[nameof(RadialVelocity)].Flag; } set { this[nameof(RadialVelocity)].Flag = value; } }
        public RawDistributionFloat StartRadius { get { return this[nameof(StartRadius)].As<RawDistributionFloat>(); } set { this["StartRadius"] = value; } }
        public RawDistributionFloat StartHeight { get { return this[nameof(StartHeight)].As<RawDistributionFloat>(); } set { this["StartHeight"] = value; } }
        public byte HeightAxis { get { return this[nameof(HeightAxis)].GetValue<byte>(); } set { this[nameof(HeightAxis)].SetValue<byte>(value); } }
    }
    public class ParticleModuleLocationPrimitiveCylinder_Seeded : ParticleModuleLocationPrimitiveCylinder
    {
        public ParticleModuleLocationPrimitiveCylinder_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveSphere : ParticleModuleLocationPrimitiveBase
    {
        public ParticleModuleLocationPrimitiveSphere(nint addr) : base(addr) { }
        public RawDistributionFloat StartRadius { get { return this[nameof(StartRadius)].As<RawDistributionFloat>(); } set { this["StartRadius"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveSphere_Seeded : ParticleModuleLocationPrimitiveSphere
    {
        public ParticleModuleLocationPrimitiveSphere_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocationPrimitiveTriangle : ParticleModuleLocationBase
    {
        public ParticleModuleLocationPrimitiveTriangle(nint addr) : base(addr) { }
        public RawDistributionVector StartOffset { get { return this[nameof(StartOffset)].As<RawDistributionVector>(); } set { this["StartOffset"] = value; } }
        public RawDistributionFloat Height { get { return this[nameof(Height)].As<RawDistributionFloat>(); } set { this["Height"] = value; } }
        public RawDistributionFloat Angle { get { return this[nameof(Angle)].As<RawDistributionFloat>(); } set { this["Angle"] = value; } }
        public RawDistributionFloat Thickness { get { return this[nameof(Thickness)].As<RawDistributionFloat>(); } set { this["Thickness"] = value; } }
    }
    public class ParticleModuleLocationSkelVertSurface : ParticleModuleLocationBase
    {
        public ParticleModuleLocationSkelVertSurface(nint addr) : base(addr) { }
        public byte SourceType { get { return this[nameof(SourceType)].GetValue<byte>(); } set { this[nameof(SourceType)].SetValue<byte>(value); } }
        public Vector UniversalOffset { get { return this[nameof(UniversalOffset)].As<Vector>(); } set { this["UniversalOffset"] = value; } }
        public bool bUpdatePositionEachFrame { get { return this[nameof(bUpdatePositionEachFrame)].Flag; } set { this[nameof(bUpdatePositionEachFrame)].Flag = value; } }
        public bool bOrientMeshEmitters { get { return this[nameof(bOrientMeshEmitters)].Flag; } set { this[nameof(bOrientMeshEmitters)].Flag = value; } }
        public bool bInheritBoneVelocity { get { return this[nameof(bInheritBoneVelocity)].Flag; } set { this[nameof(bInheritBoneVelocity)].Flag = value; } }
        public float InheritVelocityScale { get { return this[nameof(InheritVelocityScale)].GetValue<float>(); } set { this[nameof(InheritVelocityScale)].SetValue<float>(value); } }
        public Object SkelMeshActorParamName { get { return this[nameof(SkelMeshActorParamName)]; } set { this[nameof(SkelMeshActorParamName)] = value; } }
        public Array<Object> ValidAssociatedBones { get { return new Array<Object>(this[nameof(ValidAssociatedBones)].Address); } }
        public bool bEnforceNormalCheck { get { return this[nameof(bEnforceNormalCheck)].Flag; } set { this[nameof(bEnforceNormalCheck)].Flag = value; } }
        public Vector NormalToCompare { get { return this[nameof(NormalToCompare)].As<Vector>(); } set { this["NormalToCompare"] = value; } }
        public float NormalCheckToleranceDegrees { get { return this[nameof(NormalCheckToleranceDegrees)].GetValue<float>(); } set { this[nameof(NormalCheckToleranceDegrees)].SetValue<float>(value); } }
        public float NormalCheckTolerance { get { return this[nameof(NormalCheckTolerance)].GetValue<float>(); } set { this[nameof(NormalCheckTolerance)].SetValue<float>(value); } }
        public Array<int> ValidMaterialIndices { get { return new Array<int>(this[nameof(ValidMaterialIndices)].Address); } }
        public bool bInheritVertexColor { get { return this[nameof(bInheritVertexColor)].Flag; } set { this[nameof(bInheritVertexColor)].Flag = value; } }
        public bool bInheritUV { get { return this[nameof(bInheritUV)].Flag; } set { this[nameof(bInheritUV)].Flag = value; } }
        public uint InheritUVChannel { get { return this[nameof(InheritUVChannel)].GetValue<uint>(); } set { this[nameof(InheritUVChannel)].SetValue<uint>(value); } }
    }
    public class ParticleModuleLocationWorldOffset : ParticleModuleLocation
    {
        public ParticleModuleLocationWorldOffset(nint addr) : base(addr) { }
    }
    public class ParticleModuleLocationWorldOffset_Seeded : ParticleModuleLocationWorldOffset
    {
        public ParticleModuleLocationWorldOffset_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleLocation_Seeded : ParticleModuleLocation
    {
        public ParticleModuleLocation_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleMaterialBase : ParticleModule
    {
        public ParticleModuleMaterialBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleMeshMaterial : ParticleModuleMaterialBase
    {
        public ParticleModuleMeshMaterial(nint addr) : base(addr) { }
        public Array<MaterialInterface> MeshMaterials { get { return new Array<MaterialInterface>(this[nameof(MeshMaterials)].Address); } }
    }
    public class ParticleModuleRotationBase : ParticleModule
    {
        public ParticleModuleRotationBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleMeshRotation : ParticleModuleRotationBase
    {
        public ParticleModuleMeshRotation(nint addr) : base(addr) { }
        public RawDistributionVector StartRotation { get { return this[nameof(StartRotation)].As<RawDistributionVector>(); } set { this["StartRotation"] = value; } }
        public bool bInheritParent { get { return this[nameof(bInheritParent)].Flag; } set { this[nameof(bInheritParent)].Flag = value; } }
    }
    public class ParticleModuleRotationRateBase : ParticleModule
    {
        public ParticleModuleRotationRateBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleMeshRotationRate : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRate(nint addr) : base(addr) { }
        public RawDistributionVector StartRotationRate { get { return this[nameof(StartRotationRate)].As<RawDistributionVector>(); } set { this["StartRotationRate"] = value; } }
    }
    public class ParticleModuleMeshRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRateMultiplyLife(nint addr) : base(addr) { }
        public RawDistributionVector LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionVector>(); } set { this["LifeMultiplier"] = value; } }
    }
    public class ParticleModuleMeshRotationRateOverLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleMeshRotationRateOverLife(nint addr) : base(addr) { }
        public RawDistributionVector RotRate { get { return this[nameof(RotRate)].As<RawDistributionVector>(); } set { this["RotRate"] = value; } }
        public bool bScaleRotRate { get { return this[nameof(bScaleRotRate)].Flag; } set { this[nameof(bScaleRotRate)].Flag = value; } }
    }
    public class ParticleModuleMeshRotationRate_Seeded : ParticleModuleMeshRotationRate
    {
        public ParticleModuleMeshRotationRate_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleMeshRotation_Seeded : ParticleModuleMeshRotation
    {
        public ParticleModuleMeshRotation_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleOrbitBase : ParticleModule
    {
        public ParticleModuleOrbitBase(nint addr) : base(addr) { }
        public bool bUseEmitterTime { get { return this[nameof(bUseEmitterTime)].Flag; } set { this[nameof(bUseEmitterTime)].Flag = value; } }
    }
    public class ParticleModuleOrbit : ParticleModuleOrbitBase
    {
        public ParticleModuleOrbit(nint addr) : base(addr) { }
        public byte ChainMode { get { return this[nameof(ChainMode)].GetValue<byte>(); } set { this[nameof(ChainMode)].SetValue<byte>(value); } }
        public RawDistributionVector OffsetAmount { get { return this[nameof(OffsetAmount)].As<RawDistributionVector>(); } set { this["OffsetAmount"] = value; } }
        public OrbitOptions OffsetOptions { get { return this[nameof(OffsetOptions)].As<OrbitOptions>(); } set { this["OffsetOptions"] = value; } }
        public RawDistributionVector RotationAmount { get { return this[nameof(RotationAmount)].As<RawDistributionVector>(); } set { this["RotationAmount"] = value; } }
        public OrbitOptions RotationOptions { get { return this[nameof(RotationOptions)].As<OrbitOptions>(); } set { this["RotationOptions"] = value; } }
        public RawDistributionVector RotationRateAmount { get { return this[nameof(RotationRateAmount)].As<RawDistributionVector>(); } set { this["RotationRateAmount"] = value; } }
        public OrbitOptions RotationRateOptions { get { return this[nameof(RotationRateOptions)].As<OrbitOptions>(); } set { this["RotationRateOptions"] = value; } }
    }
    public class ParticleModuleOrientationBase : ParticleModule
    {
        public ParticleModuleOrientationBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleOrientationAxisLock : ParticleModuleOrientationBase
    {
        public ParticleModuleOrientationAxisLock(nint addr) : base(addr) { }
        public byte LockAxisFlags { get { return this[nameof(LockAxisFlags)].GetValue<byte>(); } set { this[nameof(LockAxisFlags)].SetValue<byte>(value); } }
    }
    public class ParticleModuleParameterBase : ParticleModule
    {
        public ParticleModuleParameterBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleParameterDynamic : ParticleModuleParameterBase
    {
        public ParticleModuleParameterDynamic(nint addr) : base(addr) { }
        public Array<EmitterDynamicParameter> DynamicParams { get { return new Array<EmitterDynamicParameter>(this[nameof(DynamicParams)].Address); } }
        public int UpdateFlags { get { return this[nameof(UpdateFlags)].GetValue<int>(); } set { this[nameof(UpdateFlags)].SetValue<int>(value); } }
        public bool bUsesVelocity { get { return this[nameof(bUsesVelocity)].Flag; } set { this[nameof(bUsesVelocity)].Flag = value; } }
    }
    public class ParticleModuleParameterDynamic_Seeded : ParticleModuleParameterDynamic
    {
        public ParticleModuleParameterDynamic_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModulePivotOffset : ParticleModuleLocationBase
    {
        public ParticleModulePivotOffset(nint addr) : base(addr) { }
        public Vector2D PivotOffset { get { return this[nameof(PivotOffset)].As<Vector2D>(); } set { this["PivotOffset"] = value; } }
    }
    public class ParticleModuleRequired : ParticleModule
    {
        public ParticleModuleRequired(nint addr) : base(addr) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public float MinFacingCameraBlendDistance { get { return this[nameof(MinFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MinFacingCameraBlendDistance)].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this[nameof(MaxFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MaxFacingCameraBlendDistance)].SetValue<float>(value); } }
        public Vector EmitterOrigin { get { return this[nameof(EmitterOrigin)].As<Vector>(); } set { this["EmitterOrigin"] = value; } }
        public Rotator EmitterRotation { get { return this[nameof(EmitterRotation)].As<Rotator>(); } set { this["EmitterRotation"] = value; } }
        public byte ScreenAlignment { get { return this[nameof(ScreenAlignment)].GetValue<byte>(); } set { this[nameof(ScreenAlignment)].SetValue<byte>(value); } }
        public bool bUseLocalSpace { get { return this[nameof(bUseLocalSpace)].Flag; } set { this[nameof(bUseLocalSpace)].Flag = value; } }
        public bool bKillOnDeactivate { get { return this[nameof(bKillOnDeactivate)].Flag; } set { this[nameof(bKillOnDeactivate)].Flag = value; } }
        public bool bKillOnCompleted { get { return this[nameof(bKillOnCompleted)].Flag; } set { this[nameof(bKillOnCompleted)].Flag = value; } }
        public byte SortMode { get { return this[nameof(SortMode)].GetValue<byte>(); } set { this[nameof(SortMode)].SetValue<byte>(value); } }
        public bool bUseLegacyEmitterTime { get { return this[nameof(bUseLegacyEmitterTime)].Flag; } set { this[nameof(bUseLegacyEmitterTime)].Flag = value; } }
        public bool bRemoveHMDRoll { get { return this[nameof(bRemoveHMDRoll)].Flag; } set { this[nameof(bRemoveHMDRoll)].Flag = value; } }
        public bool bSupportLargeWorldCoordinates { get { return this[nameof(bSupportLargeWorldCoordinates)].Flag; } set { this[nameof(bSupportLargeWorldCoordinates)].Flag = value; } }
        public bool bEmitterDurationUseRange { get { return this[nameof(bEmitterDurationUseRange)].Flag; } set { this[nameof(bEmitterDurationUseRange)].Flag = value; } }
        public float EmitterDuration { get { return this[nameof(EmitterDuration)].GetValue<float>(); } set { this[nameof(EmitterDuration)].SetValue<float>(value); } }
        public RawDistributionFloat SpawnRate { get { return this[nameof(SpawnRate)].As<RawDistributionFloat>(); } set { this["SpawnRate"] = value; } }
        public Array<ParticleBurst> BurstList { get { return new Array<ParticleBurst>(this[nameof(BurstList)].Address); } }
        public float EmitterDelay { get { return this[nameof(EmitterDelay)].GetValue<float>(); } set { this[nameof(EmitterDelay)].SetValue<float>(value); } }
        public float EmitterDelayLow { get { return this[nameof(EmitterDelayLow)].GetValue<float>(); } set { this[nameof(EmitterDelayLow)].SetValue<float>(value); } }
        public bool bDelayFirstLoopOnly { get { return this[nameof(bDelayFirstLoopOnly)].Flag; } set { this[nameof(bDelayFirstLoopOnly)].Flag = value; } }
        public byte InterpolationMethod { get { return this[nameof(InterpolationMethod)].GetValue<byte>(); } set { this[nameof(InterpolationMethod)].SetValue<byte>(value); } }
        public bool bScaleUV { get { return this[nameof(bScaleUV)].Flag; } set { this[nameof(bScaleUV)].Flag = value; } }
        public bool bEmitterDelayUseRange { get { return this[nameof(bEmitterDelayUseRange)].Flag; } set { this[nameof(bEmitterDelayUseRange)].Flag = value; } }
        public byte ParticleBurstMethod { get { return this[nameof(ParticleBurstMethod)].GetValue<byte>(); } set { this[nameof(ParticleBurstMethod)].SetValue<byte>(value); } }
        public bool bOverrideSystemMacroUV { get { return this[nameof(bOverrideSystemMacroUV)].Flag; } set { this[nameof(bOverrideSystemMacroUV)].Flag = value; } }
        public bool bUseMaxDrawCount { get { return this[nameof(bUseMaxDrawCount)].Flag; } set { this[nameof(bUseMaxDrawCount)].Flag = value; } }
        public byte OpacitySourceMode { get { return this[nameof(OpacitySourceMode)].GetValue<byte>(); } set { this[nameof(OpacitySourceMode)].SetValue<byte>(value); } }
        public byte EmitterNormalsMode { get { return this[nameof(EmitterNormalsMode)].GetValue<byte>(); } set { this[nameof(EmitterNormalsMode)].SetValue<byte>(value); } }
        public bool bOrbitModuleAffectsVelocityAlignment { get { return this[nameof(bOrbitModuleAffectsVelocityAlignment)].Flag; } set { this[nameof(bOrbitModuleAffectsVelocityAlignment)].Flag = value; } }
        public int SubImages_Horizontal { get { return this[nameof(SubImages_Horizontal)].GetValue<int>(); } set { this[nameof(SubImages_Horizontal)].SetValue<int>(value); } }
        public int SubImages_Vertical { get { return this[nameof(SubImages_Vertical)].GetValue<int>(); } set { this[nameof(SubImages_Vertical)].SetValue<int>(value); } }
        public float RandomImageTime { get { return this[nameof(RandomImageTime)].GetValue<float>(); } set { this[nameof(RandomImageTime)].SetValue<float>(value); } }
        public int RandomImageChanges { get { return this[nameof(RandomImageChanges)].GetValue<int>(); } set { this[nameof(RandomImageChanges)].SetValue<int>(value); } }
        public Vector MacroUVPosition { get { return this[nameof(MacroUVPosition)].As<Vector>(); } set { this["MacroUVPosition"] = value; } }
        public float MacroUVRadius { get { return this[nameof(MacroUVRadius)].GetValue<float>(); } set { this[nameof(MacroUVRadius)].SetValue<float>(value); } }
        public EParticleUVFlipMode UVFlippingMode { get { return (EParticleUVFlipMode)this[nameof(UVFlippingMode)].GetValue<int>(); } set { this[nameof(UVFlippingMode)].SetValue<int>((int)value); } }
        public byte BoundingMode { get { return this[nameof(BoundingMode)].GetValue<byte>(); } set { this[nameof(BoundingMode)].SetValue<byte>(value); } }
        public bool bDurationRecalcEachLoop { get { return this[nameof(bDurationRecalcEachLoop)].Flag; } set { this[nameof(bDurationRecalcEachLoop)].Flag = value; } }
        public Vector NormalsSphereCenter { get { return this[nameof(NormalsSphereCenter)].As<Vector>(); } set { this["NormalsSphereCenter"] = value; } }
        public float AlphaThreshold { get { return this[nameof(AlphaThreshold)].GetValue<float>(); } set { this[nameof(AlphaThreshold)].SetValue<float>(value); } }
        public int EmitterLoops { get { return this[nameof(EmitterLoops)].GetValue<int>(); } set { this[nameof(EmitterLoops)].SetValue<int>(value); } }
        public Texture2D CutoutTexture { get { return this[nameof(CutoutTexture)].As<Texture2D>(); } set { this["CutoutTexture"] = value; } }
        public int MaxDrawCount { get { return this[nameof(MaxDrawCount)].GetValue<int>(); } set { this[nameof(MaxDrawCount)].SetValue<int>(value); } }
        public float EmitterDurationLow { get { return this[nameof(EmitterDurationLow)].GetValue<float>(); } set { this[nameof(EmitterDurationLow)].SetValue<float>(value); } }
        public Vector NormalsCylinderDirection { get { return this[nameof(NormalsCylinderDirection)].As<Vector>(); } set { this["NormalsCylinderDirection"] = value; } }
        public Array<Object> NamedMaterialOverrides { get { return new Array<Object>(this[nameof(NamedMaterialOverrides)].Address); } }
    }
    public class ParticleModuleRotation : ParticleModuleRotationBase
    {
        public ParticleModuleRotation(nint addr) : base(addr) { }
        public RawDistributionFloat StartRotation { get { return this[nameof(StartRotation)].As<RawDistributionFloat>(); } set { this["StartRotation"] = value; } }
    }
    public class ParticleModuleRotationOverLifetime : ParticleModuleRotationBase
    {
        public ParticleModuleRotationOverLifetime(nint addr) : base(addr) { }
        public RawDistributionFloat RotationOverLife { get { return this[nameof(RotationOverLife)].As<RawDistributionFloat>(); } set { this["RotationOverLife"] = value; } }
        public bool Scale { get { return this[nameof(Scale)].Flag; } set { this[nameof(Scale)].Flag = value; } }
    }
    public class ParticleModuleRotationRate : ParticleModuleRotationRateBase
    {
        public ParticleModuleRotationRate(nint addr) : base(addr) { }
        public RawDistributionFloat StartRotationRate { get { return this[nameof(StartRotationRate)].As<RawDistributionFloat>(); } set { this["StartRotationRate"] = value; } }
    }
    public class ParticleModuleRotationRateMultiplyLife : ParticleModuleRotationRateBase
    {
        public ParticleModuleRotationRateMultiplyLife(nint addr) : base(addr) { }
        public RawDistributionFloat LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionFloat>(); } set { this["LifeMultiplier"] = value; } }
    }
    public class ParticleModuleRotationRate_Seeded : ParticleModuleRotationRate
    {
        public ParticleModuleRotationRate_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleRotation_Seeded : ParticleModuleRotation
    {
        public ParticleModuleRotation_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleSizeBase : ParticleModule
    {
        public ParticleModuleSizeBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleSize : ParticleModuleSizeBase
    {
        public ParticleModuleSize(nint addr) : base(addr) { }
        public RawDistributionVector StartSize { get { return this[nameof(StartSize)].As<RawDistributionVector>(); } set { this["StartSize"] = value; } }
    }
    public class ParticleModuleSizeMultiplyLife : ParticleModuleSizeBase
    {
        public ParticleModuleSizeMultiplyLife(nint addr) : base(addr) { }
        public RawDistributionVector LifeMultiplier { get { return this[nameof(LifeMultiplier)].As<RawDistributionVector>(); } set { this["LifeMultiplier"] = value; } }
        public bool MultiplyX { get { return this[nameof(MultiplyX)].Flag; } set { this[nameof(MultiplyX)].Flag = value; } }
        public bool MultiplyY { get { return this[nameof(MultiplyY)].Flag; } set { this[nameof(MultiplyY)].Flag = value; } }
        public bool MultiplyZ { get { return this[nameof(MultiplyZ)].Flag; } set { this[nameof(MultiplyZ)].Flag = value; } }
    }
    public class ParticleModuleSizeScale : ParticleModuleSizeBase
    {
        public ParticleModuleSizeScale(nint addr) : base(addr) { }
        public RawDistributionVector SizeScale { get { return this[nameof(SizeScale)].As<RawDistributionVector>(); } set { this["SizeScale"] = value; } }
        public bool EnableX { get { return this[nameof(EnableX)].Flag; } set { this[nameof(EnableX)].Flag = value; } }
        public bool EnableY { get { return this[nameof(EnableY)].Flag; } set { this[nameof(EnableY)].Flag = value; } }
        public bool EnableZ { get { return this[nameof(EnableZ)].Flag; } set { this[nameof(EnableZ)].Flag = value; } }
    }
    public class ParticleModuleSizeScaleBySpeed : ParticleModuleSizeBase
    {
        public ParticleModuleSizeScaleBySpeed(nint addr) : base(addr) { }
        public Vector2D SpeedScale { get { return this[nameof(SpeedScale)].As<Vector2D>(); } set { this["SpeedScale"] = value; } }
        public Vector2D MaxScale { get { return this[nameof(MaxScale)].As<Vector2D>(); } set { this["MaxScale"] = value; } }
    }
    public class ParticleModuleSize_Seeded : ParticleModuleSize
    {
        public ParticleModuleSize_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleModuleSourceMovement : ParticleModuleLocationBase
    {
        public ParticleModuleSourceMovement(nint addr) : base(addr) { }
        public RawDistributionVector SourceMovementScale { get { return this[nameof(SourceMovementScale)].As<RawDistributionVector>(); } set { this["SourceMovementScale"] = value; } }
    }
    public class ParticleModuleSpawnBase : ParticleModule
    {
        public ParticleModuleSpawnBase(nint addr) : base(addr) { }
        public bool bProcessSpawnRate { get { return this[nameof(bProcessSpawnRate)].Flag; } set { this[nameof(bProcessSpawnRate)].Flag = value; } }
        public bool bProcessBurstList { get { return this[nameof(bProcessBurstList)].Flag; } set { this[nameof(bProcessBurstList)].Flag = value; } }
    }
    public class ParticleModuleSpawn : ParticleModuleSpawnBase
    {
        public ParticleModuleSpawn(nint addr) : base(addr) { }
        public RawDistributionFloat Rate { get { return this[nameof(Rate)].As<RawDistributionFloat>(); } set { this["Rate"] = value; } }
        public RawDistributionFloat RateScale { get { return this[nameof(RateScale)].As<RawDistributionFloat>(); } set { this["RateScale"] = value; } }
        public Array<ParticleBurst> BurstList { get { return new Array<ParticleBurst>(this[nameof(BurstList)].Address); } }
        public RawDistributionFloat BurstScale { get { return this[nameof(BurstScale)].As<RawDistributionFloat>(); } set { this["BurstScale"] = value; } }
        public byte ParticleBurstMethod { get { return this[nameof(ParticleBurstMethod)].GetValue<byte>(); } set { this[nameof(ParticleBurstMethod)].SetValue<byte>(value); } }
        public bool bApplyGlobalSpawnRateScale { get { return this[nameof(bApplyGlobalSpawnRateScale)].Flag; } set { this[nameof(bApplyGlobalSpawnRateScale)].Flag = value; } }
    }
    public class ParticleModuleSpawnPerUnit : ParticleModuleSpawnBase
    {
        public ParticleModuleSpawnPerUnit(nint addr) : base(addr) { }
        public float UnitScalar { get { return this[nameof(UnitScalar)].GetValue<float>(); } set { this[nameof(UnitScalar)].SetValue<float>(value); } }
        public float MovementTolerance { get { return this[nameof(MovementTolerance)].GetValue<float>(); } set { this[nameof(MovementTolerance)].SetValue<float>(value); } }
        public RawDistributionFloat SpawnPerUnit { get { return this[nameof(SpawnPerUnit)].As<RawDistributionFloat>(); } set { this["SpawnPerUnit"] = value; } }
        public float MaxFrameDistance { get { return this[nameof(MaxFrameDistance)].GetValue<float>(); } set { this[nameof(MaxFrameDistance)].SetValue<float>(value); } }
        public bool bIgnoreSpawnRateWhenMoving { get { return this[nameof(bIgnoreSpawnRateWhenMoving)].Flag; } set { this[nameof(bIgnoreSpawnRateWhenMoving)].Flag = value; } }
        public bool bIgnoreMovementAlongX { get { return this[nameof(bIgnoreMovementAlongX)].Flag; } set { this[nameof(bIgnoreMovementAlongX)].Flag = value; } }
        public bool bIgnoreMovementAlongY { get { return this[nameof(bIgnoreMovementAlongY)].Flag; } set { this[nameof(bIgnoreMovementAlongY)].Flag = value; } }
        public bool bIgnoreMovementAlongZ { get { return this[nameof(bIgnoreMovementAlongZ)].Flag; } set { this[nameof(bIgnoreMovementAlongZ)].Flag = value; } }
    }
    public class ParticleModuleSubUVBase : ParticleModule
    {
        public ParticleModuleSubUVBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleSubUV : ParticleModuleSubUVBase
    {
        public ParticleModuleSubUV(nint addr) : base(addr) { }
        public SubUVAnimation Animation { get { return this[nameof(Animation)].As<SubUVAnimation>(); } set { this["Animation"] = value; } }
        public RawDistributionFloat SubImageIndex { get { return this[nameof(SubImageIndex)].As<RawDistributionFloat>(); } set { this["SubImageIndex"] = value; } }
        public bool bUseRealTime { get { return this[nameof(bUseRealTime)].Flag; } set { this[nameof(bUseRealTime)].Flag = value; } }
    }
    public class ParticleModuleSubUVMovie : ParticleModuleSubUV
    {
        public ParticleModuleSubUVMovie(nint addr) : base(addr) { }
        public bool bUseEmitterTime { get { return this[nameof(bUseEmitterTime)].Flag; } set { this[nameof(bUseEmitterTime)].Flag = value; } }
        public RawDistributionFloat FrameRate { get { return this[nameof(FrameRate)].As<RawDistributionFloat>(); } set { this["FrameRate"] = value; } }
        public int StartingFrame { get { return this[nameof(StartingFrame)].GetValue<int>(); } set { this[nameof(StartingFrame)].SetValue<int>(value); } }
    }
    public class ParticleModuleTrailBase : ParticleModule
    {
        public ParticleModuleTrailBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleTrailSource : ParticleModuleTrailBase
    {
        public ParticleModuleTrailSource(nint addr) : base(addr) { }
        public byte SourceMethod { get { return this[nameof(SourceMethod)].GetValue<byte>(); } set { this[nameof(SourceMethod)].SetValue<byte>(value); } }
        public Object SourceName { get { return this[nameof(SourceName)]; } set { this[nameof(SourceName)] = value; } }
        public RawDistributionFloat SourceStrength { get { return this[nameof(SourceStrength)].As<RawDistributionFloat>(); } set { this["SourceStrength"] = value; } }
        public bool bLockSourceStength { get { return this[nameof(bLockSourceStength)].Flag; } set { this[nameof(bLockSourceStength)].Flag = value; } }
        public int SourceOffsetCount { get { return this[nameof(SourceOffsetCount)].GetValue<int>(); } set { this[nameof(SourceOffsetCount)].SetValue<int>(value); } }
        public Array<Vector> SourceOffsetDefaults { get { return new Array<Vector>(this[nameof(SourceOffsetDefaults)].Address); } }
        public byte SelectionMethod { get { return this[nameof(SelectionMethod)].GetValue<byte>(); } set { this[nameof(SelectionMethod)].SetValue<byte>(value); } }
        public bool bInheritRotation { get { return this[nameof(bInheritRotation)].Flag; } set { this[nameof(bInheritRotation)].Flag = value; } }
    }
    public class ParticleModuleTypeDataBase : ParticleModule
    {
        public ParticleModuleTypeDataBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleTypeDataAnimTrail : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataAnimTrail(nint addr) : base(addr) { }
        public bool bDeadTrailsOnDeactivate { get { return this[nameof(bDeadTrailsOnDeactivate)].Flag; } set { this[nameof(bDeadTrailsOnDeactivate)].Flag = value; } }
        public bool bEnablePreviousTangentRecalculation { get { return this[nameof(bEnablePreviousTangentRecalculation)].Flag; } set { this[nameof(bEnablePreviousTangentRecalculation)].Flag = value; } }
        public bool bTangentRecalculationEveryFrame { get { return this[nameof(bTangentRecalculationEveryFrame)].Flag; } set { this[nameof(bTangentRecalculationEveryFrame)].Flag = value; } }
        public float TilingDistance { get { return this[nameof(TilingDistance)].GetValue<float>(); } set { this[nameof(TilingDistance)].SetValue<float>(value); } }
        public float DistanceTessellationStepSize { get { return this[nameof(DistanceTessellationStepSize)].GetValue<float>(); } set { this[nameof(DistanceTessellationStepSize)].SetValue<float>(value); } }
        public float TangentTessellationStepSize { get { return this[nameof(TangentTessellationStepSize)].GetValue<float>(); } set { this[nameof(TangentTessellationStepSize)].SetValue<float>(value); } }
        public float WidthTessellationStepSize { get { return this[nameof(WidthTessellationStepSize)].GetValue<float>(); } set { this[nameof(WidthTessellationStepSize)].SetValue<float>(value); } }
    }
    public class ParticleModuleTypeDataBeam2 : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataBeam2(nint addr) : base(addr) { }
        public byte BeamMethod { get { return this[nameof(BeamMethod)].GetValue<byte>(); } set { this[nameof(BeamMethod)].SetValue<byte>(value); } }
        public int TextureTile { get { return this[nameof(TextureTile)].GetValue<int>(); } set { this[nameof(TextureTile)].SetValue<int>(value); } }
        public float TextureTileDistance { get { return this[nameof(TextureTileDistance)].GetValue<float>(); } set { this[nameof(TextureTileDistance)].SetValue<float>(value); } }
        public int Sheets { get { return this[nameof(Sheets)].GetValue<int>(); } set { this[nameof(Sheets)].SetValue<int>(value); } }
        public int MaxBeamCount { get { return this[nameof(MaxBeamCount)].GetValue<int>(); } set { this[nameof(MaxBeamCount)].SetValue<int>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public int InterpolationPoints { get { return this[nameof(InterpolationPoints)].GetValue<int>(); } set { this[nameof(InterpolationPoints)].SetValue<int>(value); } }
        public bool bAlwaysOn { get { return this[nameof(bAlwaysOn)].Flag; } set { this[nameof(bAlwaysOn)].Flag = value; } }
        public int UpVectorStepSize { get { return this[nameof(UpVectorStepSize)].GetValue<int>(); } set { this[nameof(UpVectorStepSize)].SetValue<int>(value); } }
        public Object BranchParentName { get { return this[nameof(BranchParentName)]; } set { this[nameof(BranchParentName)] = value; } }
        public RawDistributionFloat Distance { get { return this[nameof(Distance)].As<RawDistributionFloat>(); } set { this["Distance"] = value; } }
        public byte TaperMethod { get { return this[nameof(TaperMethod)].GetValue<byte>(); } set { this[nameof(TaperMethod)].SetValue<byte>(value); } }
        public RawDistributionFloat TaperFactor { get { return this[nameof(TaperFactor)].As<RawDistributionFloat>(); } set { this["TaperFactor"] = value; } }
        public RawDistributionFloat TaperScale { get { return this[nameof(TaperScale)].As<RawDistributionFloat>(); } set { this["TaperScale"] = value; } }
        public bool RenderGeometry { get { return this[nameof(RenderGeometry)].Flag; } set { this[nameof(RenderGeometry)].Flag = value; } }
        public bool RenderDirectLine { get { return this[nameof(RenderDirectLine)].Flag; } set { this[nameof(RenderDirectLine)].Flag = value; } }
        public bool RenderLines { get { return this[nameof(RenderLines)].Flag; } set { this[nameof(RenderLines)].Flag = value; } }
        public bool RenderTessellation { get { return this[nameof(RenderTessellation)].Flag; } set { this[nameof(RenderTessellation)].Flag = value; } }
    }
    public class ParticleModuleTypeDataGpu : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataGpu(nint addr) : base(addr) { }
        public GPUSpriteEmitterInfo EmitterInfo { get { return this[nameof(EmitterInfo)].As<GPUSpriteEmitterInfo>(); } set { this["EmitterInfo"] = value; } }
        public GPUSpriteResourceData ResourceData { get { return this[nameof(ResourceData)].As<GPUSpriteResourceData>(); } set { this["ResourceData"] = value; } }
        public float CameraMotionBlurAmount { get { return this[nameof(CameraMotionBlurAmount)].GetValue<float>(); } set { this[nameof(CameraMotionBlurAmount)].SetValue<float>(value); } }
        public bool bClearExistingParticlesOnInit { get { return this[nameof(bClearExistingParticlesOnInit)].Flag; } set { this[nameof(bClearExistingParticlesOnInit)].Flag = value; } }
    }
    public class ParticleModuleTypeDataMesh : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataMesh(nint addr) : base(addr) { }
        public StaticMesh Mesh { get { return this[nameof(Mesh)].As<StaticMesh>(); } set { this["Mesh"] = value; } }
        public float LODSizeScale { get { return this[nameof(LODSizeScale)].GetValue<float>(); } set { this[nameof(LODSizeScale)].SetValue<float>(value); } }
        public bool bUseStaticMeshLODs { get { return this[nameof(bUseStaticMeshLODs)].Flag; } set { this[nameof(bUseStaticMeshLODs)].Flag = value; } }
        public bool CastShadows { get { return this[nameof(CastShadows)].Flag; } set { this[nameof(CastShadows)].Flag = value; } }
        public bool DoCollisions { get { return this[nameof(DoCollisions)].Flag; } set { this[nameof(DoCollisions)].Flag = value; } }
        public byte MeshAlignment { get { return this[nameof(MeshAlignment)].GetValue<byte>(); } set { this[nameof(MeshAlignment)].SetValue<byte>(value); } }
        public bool bOverrideMaterial { get { return this[nameof(bOverrideMaterial)].Flag; } set { this[nameof(bOverrideMaterial)].Flag = value; } }
        public bool bOverrideDefaultMotionBlurSettings { get { return this[nameof(bOverrideDefaultMotionBlurSettings)].Flag; } set { this[nameof(bOverrideDefaultMotionBlurSettings)].Flag = value; } }
        public bool bEnableMotionBlur { get { return this[nameof(bEnableMotionBlur)].Flag; } set { this[nameof(bEnableMotionBlur)].Flag = value; } }
        public RawDistributionVector RollPitchYawRange { get { return this[nameof(RollPitchYawRange)].As<RawDistributionVector>(); } set { this["RollPitchYawRange"] = value; } }
        public byte AxisLockOption { get { return this[nameof(AxisLockOption)].GetValue<byte>(); } set { this[nameof(AxisLockOption)].SetValue<byte>(value); } }
        public bool bCameraFacing { get { return this[nameof(bCameraFacing)].Flag; } set { this[nameof(bCameraFacing)].Flag = value; } }
        public byte CameraFacingUpAxisOption { get { return this[nameof(CameraFacingUpAxisOption)].GetValue<byte>(); } set { this[nameof(CameraFacingUpAxisOption)].SetValue<byte>(value); } }
        public byte CameraFacingOption { get { return this[nameof(CameraFacingOption)].GetValue<byte>(); } set { this[nameof(CameraFacingOption)].SetValue<byte>(value); } }
        public bool bApplyParticleRotationAsSpin { get { return this[nameof(bApplyParticleRotationAsSpin)].Flag; } set { this[nameof(bApplyParticleRotationAsSpin)].Flag = value; } }
        public bool bFaceCameraDirectionRatherThanPosition { get { return this[nameof(bFaceCameraDirectionRatherThanPosition)].Flag; } set { this[nameof(bFaceCameraDirectionRatherThanPosition)].Flag = value; } }
        public bool bCollisionsConsiderPartilceSize { get { return this[nameof(bCollisionsConsiderPartilceSize)].Flag; } set { this[nameof(bCollisionsConsiderPartilceSize)].Flag = value; } }
    }
    public class ParticleModuleTypeDataRibbon : ParticleModuleTypeDataBase
    {
        public ParticleModuleTypeDataRibbon(nint addr) : base(addr) { }
        public int MaxTessellationBetweenParticles { get { return this[nameof(MaxTessellationBetweenParticles)].GetValue<int>(); } set { this[nameof(MaxTessellationBetweenParticles)].SetValue<int>(value); } }
        public int SheetsPerTrail { get { return this[nameof(SheetsPerTrail)].GetValue<int>(); } set { this[nameof(SheetsPerTrail)].SetValue<int>(value); } }
        public int MaxTrailCount { get { return this[nameof(MaxTrailCount)].GetValue<int>(); } set { this[nameof(MaxTrailCount)].SetValue<int>(value); } }
        public int MaxParticleInTrailCount { get { return this[nameof(MaxParticleInTrailCount)].GetValue<int>(); } set { this[nameof(MaxParticleInTrailCount)].SetValue<int>(value); } }
        public bool bDeadTrailsOnDeactivate { get { return this[nameof(bDeadTrailsOnDeactivate)].Flag; } set { this[nameof(bDeadTrailsOnDeactivate)].Flag = value; } }
        public bool bDeadTrailsOnSourceLoss { get { return this[nameof(bDeadTrailsOnSourceLoss)].Flag; } set { this[nameof(bDeadTrailsOnSourceLoss)].Flag = value; } }
        public bool bClipSourceSegement { get { return this[nameof(bClipSourceSegement)].Flag; } set { this[nameof(bClipSourceSegement)].Flag = value; } }
        public bool bEnablePreviousTangentRecalculation { get { return this[nameof(bEnablePreviousTangentRecalculation)].Flag; } set { this[nameof(bEnablePreviousTangentRecalculation)].Flag = value; } }
        public bool bTangentRecalculationEveryFrame { get { return this[nameof(bTangentRecalculationEveryFrame)].Flag; } set { this[nameof(bTangentRecalculationEveryFrame)].Flag = value; } }
        public bool bSpawnInitialParticle { get { return this[nameof(bSpawnInitialParticle)].Flag; } set { this[nameof(bSpawnInitialParticle)].Flag = value; } }
        public byte RenderAxis { get { return this[nameof(RenderAxis)].GetValue<byte>(); } set { this[nameof(RenderAxis)].SetValue<byte>(value); } }
        public float TangentSpawningScalar { get { return this[nameof(TangentSpawningScalar)].GetValue<float>(); } set { this[nameof(TangentSpawningScalar)].SetValue<float>(value); } }
        public bool bRenderGeometry { get { return this[nameof(bRenderGeometry)].Flag; } set { this[nameof(bRenderGeometry)].Flag = value; } }
        public bool bRenderSpawnPoints { get { return this[nameof(bRenderSpawnPoints)].Flag; } set { this[nameof(bRenderSpawnPoints)].Flag = value; } }
        public bool bRenderTangents { get { return this[nameof(bRenderTangents)].Flag; } set { this[nameof(bRenderTangents)].Flag = value; } }
        public bool bRenderTessellation { get { return this[nameof(bRenderTessellation)].Flag; } set { this[nameof(bRenderTessellation)].Flag = value; } }
        public float TilingDistance { get { return this[nameof(TilingDistance)].GetValue<float>(); } set { this[nameof(TilingDistance)].SetValue<float>(value); } }
        public float DistanceTessellationStepSize { get { return this[nameof(DistanceTessellationStepSize)].GetValue<float>(); } set { this[nameof(DistanceTessellationStepSize)].SetValue<float>(value); } }
        public bool bEnableTangentDiffInterpScale { get { return this[nameof(bEnableTangentDiffInterpScale)].Flag; } set { this[nameof(bEnableTangentDiffInterpScale)].Flag = value; } }
        public float TangentTessellationScalar { get { return this[nameof(TangentTessellationScalar)].GetValue<float>(); } set { this[nameof(TangentTessellationScalar)].SetValue<float>(value); } }
    }
    public class ParticleModuleVectorFieldBase : ParticleModule
    {
        public ParticleModuleVectorFieldBase(nint addr) : base(addr) { }
    }
    public class ParticleModuleVectorFieldGlobal : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldGlobal(nint addr) : base(addr) { }
        public bool bOverrideGlobalVectorFieldTightness { get { return this[nameof(bOverrideGlobalVectorFieldTightness)].Flag; } set { this[nameof(bOverrideGlobalVectorFieldTightness)].Flag = value; } }
        public float GlobalVectorFieldScale { get { return this[nameof(GlobalVectorFieldScale)].GetValue<float>(); } set { this[nameof(GlobalVectorFieldScale)].SetValue<float>(value); } }
        public float GlobalVectorFieldTightness { get { return this[nameof(GlobalVectorFieldTightness)].GetValue<float>(); } set { this[nameof(GlobalVectorFieldTightness)].SetValue<float>(value); } }
    }
    public class ParticleModuleVectorFieldLocal : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldLocal(nint addr) : base(addr) { }
        public VectorField VectorField { get { return this[nameof(VectorField)].As<VectorField>(); } set { this["VectorField"] = value; } }
        public Vector RelativeTranslation { get { return this[nameof(RelativeTranslation)].As<Vector>(); } set { this["RelativeTranslation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector>(); } set { this["RelativeScale3D"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Tightness { get { return this[nameof(Tightness)].GetValue<float>(); } set { this[nameof(Tightness)].SetValue<float>(value); } }
        public bool bIgnoreComponentTransform { get { return this[nameof(bIgnoreComponentTransform)].Flag; } set { this[nameof(bIgnoreComponentTransform)].Flag = value; } }
        public bool bTileX { get { return this[nameof(bTileX)].Flag; } set { this[nameof(bTileX)].Flag = value; } }
        public bool bTileY { get { return this[nameof(bTileY)].Flag; } set { this[nameof(bTileY)].Flag = value; } }
        public bool bTileZ { get { return this[nameof(bTileZ)].Flag; } set { this[nameof(bTileZ)].Flag = value; } }
        public bool bUseFixDT { get { return this[nameof(bUseFixDT)].Flag; } set { this[nameof(bUseFixDT)].Flag = value; } }
    }
    public class ParticleModuleVectorFieldRotation : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldRotation(nint addr) : base(addr) { }
        public Vector MinInitialRotation { get { return this[nameof(MinInitialRotation)].As<Vector>(); } set { this["MinInitialRotation"] = value; } }
        public Vector MaxInitialRotation { get { return this[nameof(MaxInitialRotation)].As<Vector>(); } set { this["MaxInitialRotation"] = value; } }
    }
    public class ParticleModuleVectorFieldRotationRate : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldRotationRate(nint addr) : base(addr) { }
        public Vector RotationRate { get { return this[nameof(RotationRate)].As<Vector>(); } set { this["RotationRate"] = value; } }
    }
    public class ParticleModuleVectorFieldScale : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldScale(nint addr) : base(addr) { }
        public DistributionFloat VectorFieldScale { get { return this[nameof(VectorFieldScale)].As<DistributionFloat>(); } set { this["VectorFieldScale"] = value; } }
        public RawDistributionFloat VectorFieldScaleRaw { get { return this[nameof(VectorFieldScaleRaw)].As<RawDistributionFloat>(); } set { this["VectorFieldScaleRaw"] = value; } }
    }
    public class ParticleModuleVectorFieldScaleOverLife : ParticleModuleVectorFieldBase
    {
        public ParticleModuleVectorFieldScaleOverLife(nint addr) : base(addr) { }
        public DistributionFloat VectorFieldScaleOverLife { get { return this[nameof(VectorFieldScaleOverLife)].As<DistributionFloat>(); } set { this["VectorFieldScaleOverLife"] = value; } }
        public RawDistributionFloat VectorFieldScaleOverLifeRaw { get { return this[nameof(VectorFieldScaleOverLifeRaw)].As<RawDistributionFloat>(); } set { this["VectorFieldScaleOverLifeRaw"] = value; } }
    }
    public class ParticleModuleVelocityBase : ParticleModule
    {
        public ParticleModuleVelocityBase(nint addr) : base(addr) { }
        public bool bInWorldSpace { get { return this[nameof(bInWorldSpace)].Flag; } set { this[nameof(bInWorldSpace)].Flag = value; } }
        public bool bApplyOwnerScale { get { return this[nameof(bApplyOwnerScale)].Flag; } set { this[nameof(bApplyOwnerScale)].Flag = value; } }
    }
    public class ParticleModuleVelocity : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocity(nint addr) : base(addr) { }
        public RawDistributionVector StartVelocity { get { return this[nameof(StartVelocity)].As<RawDistributionVector>(); } set { this["StartVelocity"] = value; } }
        public RawDistributionFloat StartVelocityRadial { get { return this[nameof(StartVelocityRadial)].As<RawDistributionFloat>(); } set { this["StartVelocityRadial"] = value; } }
    }
    public class ParticleModuleVelocityCone : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityCone(nint addr) : base(addr) { }
        public RawDistributionFloat Angle { get { return this[nameof(Angle)].As<RawDistributionFloat>(); } set { this["Angle"] = value; } }
        public RawDistributionFloat Velocity { get { return this[nameof(Velocity)].As<RawDistributionFloat>(); } set { this["Velocity"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
    }
    public class ParticleModuleVelocityInheritParent : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityInheritParent(nint addr) : base(addr) { }
        public RawDistributionVector Scale { get { return this[nameof(Scale)].As<RawDistributionVector>(); } set { this["Scale"] = value; } }
    }
    public class ParticleModuleVelocityOverLifetime : ParticleModuleVelocityBase
    {
        public ParticleModuleVelocityOverLifetime(nint addr) : base(addr) { }
        public RawDistributionVector VelOverLife { get { return this[nameof(VelOverLife)].As<RawDistributionVector>(); } set { this["VelOverLife"] = value; } }
        public bool Absolute { get { return this[nameof(Absolute)].Flag; } set { this[nameof(Absolute)].Flag = value; } }
    }
    public class ParticleModuleVelocity_Seeded : ParticleModuleVelocity
    {
        public ParticleModuleVelocity_Seeded(nint addr) : base(addr) { }
        public ParticleRandomSeedInfo RandomSeedInfo { get { return this[nameof(RandomSeedInfo)].As<ParticleRandomSeedInfo>(); } set { this["RandomSeedInfo"] = value; } }
    }
    public class ParticleSpriteEmitter : ParticleEmitter
    {
        public ParticleSpriteEmitter(nint addr) : base(addr) { }
    }
    public class ParticleSystemComponent : FXSystemComponent
    {
        public ParticleSystemComponent(nint addr) : base(addr) { }
        public ParticleSystem Template { get { return this[nameof(Template)].As<ParticleSystem>(); } set { this["Template"] = value; } }
        public Array<MaterialInterface> EmitterMaterials { get { return new Array<MaterialInterface>(this[nameof(EmitterMaterials)].Address); } }
        public Array<SkeletalMeshComponent> SkelMeshComponents { get { return new Array<SkeletalMeshComponent>(this[nameof(SkelMeshComponents)].Address); } }
        public bool bResetOnDetach { get { return this[nameof(bResetOnDetach)].Flag; } set { this[nameof(bResetOnDetach)].Flag = value; } }
        public bool bUpdateOnDedicatedServer { get { return this[nameof(bUpdateOnDedicatedServer)].Flag; } set { this[nameof(bUpdateOnDedicatedServer)].Flag = value; } }
        public bool bAllowRecycling { get { return this[nameof(bAllowRecycling)].Flag; } set { this[nameof(bAllowRecycling)].Flag = value; } }
        public bool bAutoManageAttachment { get { return this[nameof(bAutoManageAttachment)].Flag; } set { this[nameof(bAutoManageAttachment)].Flag = value; } }
        public bool bAutoAttachWeldSimulatedBodies { get { return this[nameof(bAutoAttachWeldSimulatedBodies)].Flag; } set { this[nameof(bAutoAttachWeldSimulatedBodies)].Flag = value; } }
        public bool bWarmingUp { get { return this[nameof(bWarmingUp)].Flag; } set { this[nameof(bWarmingUp)].Flag = value; } }
        public bool bOverrideLODMethod { get { return this[nameof(bOverrideLODMethod)].Flag; } set { this[nameof(bOverrideLODMethod)].Flag = value; } }
        public bool bSkipUpdateDynamicDataDuringTick { get { return this[nameof(bSkipUpdateDynamicDataDuringTick)].Flag; } set { this[nameof(bSkipUpdateDynamicDataDuringTick)].Flag = value; } }
        public byte LODMethod { get { return this[nameof(LODMethod)].GetValue<byte>(); } set { this[nameof(LODMethod)].SetValue<byte>(value); } }
        public EParticleSignificanceLevel RequiredSignificance { get { return (EParticleSignificanceLevel)this[nameof(RequiredSignificance)].GetValue<int>(); } set { this[nameof(RequiredSignificance)].SetValue<int>((int)value); } }
        public Array<ParticleSysParam> InstanceParameters { get { return new Array<ParticleSysParam>(this[nameof(InstanceParameters)].Address); } }
        public Object OnParticleSpawn { get { return this[nameof(OnParticleSpawn)]; } set { this[nameof(OnParticleSpawn)] = value; } }
        public Object OnParticleBurst { get { return this[nameof(OnParticleBurst)]; } set { this[nameof(OnParticleBurst)] = value; } }
        public Object OnParticleDeath { get { return this[nameof(OnParticleDeath)]; } set { this[nameof(OnParticleDeath)] = value; } }
        public Object OnParticleCollide { get { return this[nameof(OnParticleCollide)]; } set { this[nameof(OnParticleCollide)] = value; } }
        public bool bOldPositionValid { get { return this[nameof(bOldPositionValid)].Flag; } set { this[nameof(bOldPositionValid)].Flag = value; } }
        public Vector OldPosition { get { return this[nameof(OldPosition)].As<Vector>(); } set { this["OldPosition"] = value; } }
        public Vector PartSysVelocity { get { return this[nameof(PartSysVelocity)].As<Vector>(); } set { this["PartSysVelocity"] = value; } }
        public float WarmupTime { get { return this[nameof(WarmupTime)].GetValue<float>(); } set { this[nameof(WarmupTime)].SetValue<float>(value); } }
        public float WarmupTickRate { get { return this[nameof(WarmupTickRate)].GetValue<float>(); } set { this[nameof(WarmupTickRate)].SetValue<float>(value); } }
        public float SecondsBeforeInactive { get { return this[nameof(SecondsBeforeInactive)].GetValue<float>(); } set { this[nameof(SecondsBeforeInactive)].SetValue<float>(value); } }
        public float MaxTimeBeforeForceUpdateTransform { get { return this[nameof(MaxTimeBeforeForceUpdateTransform)].GetValue<float>(); } set { this[nameof(MaxTimeBeforeForceUpdateTransform)].SetValue<float>(value); } }
        public Array<ParticleSystemReplay> ReplayClips { get { return new Array<ParticleSystemReplay>(this[nameof(ReplayClips)].Address); } }
        public float CustomTimeDilation { get { return this[nameof(CustomTimeDilation)].GetValue<float>(); } set { this[nameof(CustomTimeDilation)].SetValue<float>(value); } }
        public Object AutoAttachParent { get { return this[nameof(AutoAttachParent)]; } set { this[nameof(AutoAttachParent)] = value; } }
        public Object AutoAttachSocketName { get { return this[nameof(AutoAttachSocketName)]; } set { this[nameof(AutoAttachSocketName)] = value; } }
        public EAttachmentRule AutoAttachLocationRule { get { return (EAttachmentRule)this[nameof(AutoAttachLocationRule)].GetValue<int>(); } set { this[nameof(AutoAttachLocationRule)].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachRotationRule { get { return (EAttachmentRule)this[nameof(AutoAttachRotationRule)].GetValue<int>(); } set { this[nameof(AutoAttachRotationRule)].SetValue<int>((int)value); } }
        public EAttachmentRule AutoAttachScaleRule { get { return (EAttachmentRule)this[nameof(AutoAttachScaleRule)].GetValue<int>(); } set { this[nameof(AutoAttachScaleRule)].SetValue<int>((int)value); } }
        public Object OnSystemFinished { get { return this[nameof(OnSystemFinished)]; } set { this[nameof(OnSystemFinished)] = value; } }
        public void SetTrailSourceData(Object InFirstSocketName, Object InSecondSocketName, byte InWidthMode, float InWidth) { Invoke(nameof(SetTrailSourceData), InFirstSocketName, InSecondSocketName, InWidthMode, InWidth); }
        public void SetTemplate(ParticleSystem NewTemplate) { Invoke(nameof(SetTemplate), NewTemplate); }
        public void SetMaterialParameter(Object ParameterName, MaterialInterface Param) { Invoke(nameof(SetMaterialParameter), ParameterName, Param); }
        public void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex) { Invoke(nameof(SetBeamTargetTangent), EmitterIndex, NewTangentPoint, TargetIndex); }
        public void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex) { Invoke(nameof(SetBeamTargetStrength), EmitterIndex, NewTargetStrength, TargetIndex); }
        public void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex) { Invoke(nameof(SetBeamTargetPoint), EmitterIndex, NewTargetPoint, TargetIndex); }
        public void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex) { Invoke(nameof(SetBeamSourceTangent), EmitterIndex, NewTangentPoint, SourceIndex); }
        public void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex) { Invoke(nameof(SetBeamSourceStrength), EmitterIndex, NewSourceStrength, SourceIndex); }
        public void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex) { Invoke(nameof(SetBeamSourcePoint), EmitterIndex, NewSourcePoint, SourceIndex); }
        public void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint) { Invoke(nameof(SetBeamEndPoint), EmitterIndex, NewEndPoint); }
        public void SetAutoAttachParams(SceneComponent Parent, Object SocketName, byte LocationType) { Invoke(nameof(SetAutoAttachParams), Parent, SocketName, LocationType); }
        public int GetNumActiveParticles() { return Invoke<int>(nameof(GetNumActiveParticles)); }
        public MaterialInterface GetNamedMaterial(Object InName) { return Invoke<MaterialInterface>(nameof(GetNamedMaterial), InName); }
        public bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, Vector OutTangentPoint) { return Invoke<bool>(nameof(GetBeamTargetTangent), EmitterIndex, TargetIndex, OutTangentPoint); }
        public bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float OutTargetStrength) { return Invoke<bool>(nameof(GetBeamTargetStrength), EmitterIndex, TargetIndex, OutTargetStrength); }
        public bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, Vector OutTargetPoint) { return Invoke<bool>(nameof(GetBeamTargetPoint), EmitterIndex, TargetIndex, OutTargetPoint); }
        public bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, Vector OutTangentPoint) { return Invoke<bool>(nameof(GetBeamSourceTangent), EmitterIndex, SourceIndex, OutTangentPoint); }
        public bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float OutSourceStrength) { return Invoke<bool>(nameof(GetBeamSourceStrength), EmitterIndex, SourceIndex, OutSourceStrength); }
        public bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, Vector OutSourcePoint) { return Invoke<bool>(nameof(GetBeamSourcePoint), EmitterIndex, SourceIndex, OutSourcePoint); }
        public bool GetBeamEndPoint(int EmitterIndex, Vector OutEndPoint) { return Invoke<bool>(nameof(GetBeamEndPoint), EmitterIndex, OutEndPoint); }
        public void GenerateParticleEvent(Object InEventName, float InEmitterTime, Vector InLocation, Vector InDirection, Vector InVelocity) { Invoke(nameof(GenerateParticleEvent), InEventName, InEmitterTime, InLocation, InDirection, InVelocity); }
        public void EndTrails() { Invoke(nameof(EndTrails)); }
        public MaterialInstanceDynamic CreateNamedDynamicMaterialInstance(Object InName, MaterialInterface SourceMaterial) { return Invoke<MaterialInstanceDynamic>(nameof(CreateNamedDynamicMaterialInstance), InName, SourceMaterial); }
        public void BeginTrails(Object InFirstSocketName, Object InSecondSocketName, byte InWidthMode, float InWidth) { Invoke(nameof(BeginTrails), InFirstSocketName, InSecondSocketName, InWidthMode, InWidth); }
    }
    public class ParticleSystemReplay : Object
    {
        public ParticleSystemReplay(nint addr) : base(addr) { }
        public int ClipIDNumber { get { return this[nameof(ClipIDNumber)].GetValue<int>(); } set { this[nameof(ClipIDNumber)].SetValue<int>(value); } }
    }
    public class PathFollowingAgentInterface : Interface
    {
        public PathFollowingAgentInterface(nint addr) : base(addr) { }
    }
    public class PhysicsSpringComponent : SceneComponent
    {
        public PhysicsSpringComponent(nint addr) : base(addr) { }
        public float SpringStiffness { get { return this[nameof(SpringStiffness)].GetValue<float>(); } set { this[nameof(SpringStiffness)].SetValue<float>(value); } }
        public float SpringDamping { get { return this[nameof(SpringDamping)].GetValue<float>(); } set { this[nameof(SpringDamping)].SetValue<float>(value); } }
        public float SpringLengthAtRest { get { return this[nameof(SpringLengthAtRest)].GetValue<float>(); } set { this[nameof(SpringLengthAtRest)].SetValue<float>(value); } }
        public float SpringRadius { get { return this[nameof(SpringRadius)].GetValue<float>(); } set { this[nameof(SpringRadius)].SetValue<float>(value); } }
        public byte SpringChannel { get { return this[nameof(SpringChannel)].GetValue<byte>(); } set { this[nameof(SpringChannel)].SetValue<byte>(value); } }
        public bool bIgnoreSelf { get { return this[nameof(bIgnoreSelf)].Flag; } set { this[nameof(bIgnoreSelf)].Flag = value; } }
        public float SpringCompression { get { return this[nameof(SpringCompression)].GetValue<float>(); } set { this[nameof(SpringCompression)].SetValue<float>(value); } }
        public Vector GetSpringRestingPoint() { return Invoke<Vector>(nameof(GetSpringRestingPoint)); }
        public Vector GetSpringDirection() { return Invoke<Vector>(nameof(GetSpringDirection)); }
        public Vector GetSpringCurrentEndPoint() { return Invoke<Vector>(nameof(GetSpringCurrentEndPoint)); }
        public float GetNormalizedCompressionScalar() { return Invoke<float>(nameof(GetNormalizedCompressionScalar)); }
    }
    public class PhysicsThreadLibrary : BlueprintFunctionLibrary
    {
        public PhysicsThreadLibrary(nint addr) : base(addr) { }
        public void AddForce(BodyInstanceAsyncPhysicsTickHandle Handle, Vector Force, bool bAccelChange) { Invoke(nameof(AddForce), Handle, Force, bAccelChange); }
    }
    public class PhysicsThrusterComponent : SceneComponent
    {
        public PhysicsThrusterComponent(nint addr) : base(addr) { }
        public float ThrustStrength { get { return this[nameof(ThrustStrength)].GetValue<float>(); } set { this[nameof(ThrustStrength)].SetValue<float>(value); } }
    }
    public class SceneCapture : Actor
    {
        public SceneCapture(nint addr) : base(addr) { }
        public StaticMeshComponent MeshComp { get { return this[nameof(MeshComp)].As<StaticMeshComponent>(); } set { this["MeshComp"] = value; } }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
    }
    public class PlanarReflection : SceneCapture
    {
        public PlanarReflection(nint addr) : base(addr) { }
        public PlanarReflectionComponent PlanarReflectionComponent { get { return this[nameof(PlanarReflectionComponent)].As<PlanarReflectionComponent>(); } set { this["PlanarReflectionComponent"] = value; } }
        public bool bShowPreviewPlane { get { return this[nameof(bShowPreviewPlane)].Flag; } set { this[nameof(bShowPreviewPlane)].Flag = value; } }
        public void OnInterpToggle(bool bEnable) { Invoke(nameof(OnInterpToggle), bEnable); }
    }
    public class SceneCaptureComponent : SceneComponent
    {
        public SceneCaptureComponent(nint addr) : base(addr) { }
        public ESceneCapturePrimitiveRenderMode PrimitiveRenderMode { get { return (ESceneCapturePrimitiveRenderMode)this[nameof(PrimitiveRenderMode)].GetValue<int>(); } set { this[nameof(PrimitiveRenderMode)].SetValue<int>((int)value); } }
        public byte CaptureSource { get { return this[nameof(CaptureSource)].GetValue<byte>(); } set { this[nameof(CaptureSource)].SetValue<byte>(value); } }
        public bool bCaptureEveryFrame { get { return this[nameof(bCaptureEveryFrame)].Flag; } set { this[nameof(bCaptureEveryFrame)].Flag = value; } }
        public bool bCaptureOnMovement { get { return this[nameof(bCaptureOnMovement)].Flag; } set { this[nameof(bCaptureOnMovement)].Flag = value; } }
        public bool bAlwaysPersistRenderingState { get { return this[nameof(bAlwaysPersistRenderingState)].Flag; } set { this[nameof(bAlwaysPersistRenderingState)].Flag = value; } }
        public Array<Object> HiddenComponents { get { return new Array<Object>(this[nameof(HiddenComponents)].Address); } }
        public Array<Actor> HiddenActors { get { return new Array<Actor>(this[nameof(HiddenActors)].Address); } }
        public Array<Object> ShowOnlyComponents { get { return new Array<Object>(this[nameof(ShowOnlyComponents)].Address); } }
        public Array<Actor> ShowOnlyActors { get { return new Array<Actor>(this[nameof(ShowOnlyActors)].Address); } }
        public float LODDistanceFactor { get { return this[nameof(LODDistanceFactor)].GetValue<float>(); } set { this[nameof(LODDistanceFactor)].SetValue<float>(value); } }
        public float MaxViewDistanceOverride { get { return this[nameof(MaxViewDistanceOverride)].GetValue<float>(); } set { this[nameof(MaxViewDistanceOverride)].SetValue<float>(value); } }
        public int CaptureSortPriority { get { return this[nameof(CaptureSortPriority)].GetValue<int>(); } set { this[nameof(CaptureSortPriority)].SetValue<int>(value); } }
        public bool bUseRayTracingIfEnabled { get { return this[nameof(bUseRayTracingIfEnabled)].Flag; } set { this[nameof(bUseRayTracingIfEnabled)].Flag = value; } }
        public Array<EngineShowFlagsSetting> ShowFlagSettings { get { return new Array<EngineShowFlagsSetting>(this[nameof(ShowFlagSettings)].Address); } }
        public Object ProfilingEventName { get { return this[nameof(ProfilingEventName)]; } set { this[nameof(ProfilingEventName)] = value; } }
        public void ShowOnlyComponent(PrimitiveComponent InComponent) { Invoke(nameof(ShowOnlyComponent), InComponent); }
        public void ShowOnlyActorComponents(Actor InActor, bool bIncludeFromChildActors) { Invoke(nameof(ShowOnlyActorComponents), InActor, bIncludeFromChildActors); }
        public void SetCaptureSortPriority(int NewCaptureSortPriority) { Invoke(nameof(SetCaptureSortPriority), NewCaptureSortPriority); }
        public void RemoveShowOnlyComponent(PrimitiveComponent InComponent) { Invoke(nameof(RemoveShowOnlyComponent), InComponent); }
        public void RemoveShowOnlyActorComponents(Actor InActor, bool bIncludeFromChildActors) { Invoke(nameof(RemoveShowOnlyActorComponents), InActor, bIncludeFromChildActors); }
        public void HideComponent(PrimitiveComponent InComponent) { Invoke(nameof(HideComponent), InComponent); }
        public void HideActorComponents(Actor InActor, bool bIncludeFromChildActors) { Invoke(nameof(HideActorComponents), InActor, bIncludeFromChildActors); }
        public void ClearShowOnlyComponents() { Invoke(nameof(ClearShowOnlyComponents)); }
        public void ClearHiddenComponents() { Invoke(nameof(ClearHiddenComponents)); }
    }
    public class PlanarReflectionComponent : SceneCaptureComponent
    {
        public PlanarReflectionComponent(nint addr) : base(addr) { }
        public BoxComponent PreviewBox { get { return this[nameof(PreviewBox)].As<BoxComponent>(); } set { this["PreviewBox"] = value; } }
        public float NormalDistortionStrength { get { return this[nameof(NormalDistortionStrength)].GetValue<float>(); } set { this[nameof(NormalDistortionStrength)].SetValue<float>(value); } }
        public float PrefilterRoughness { get { return this[nameof(PrefilterRoughness)].GetValue<float>(); } set { this[nameof(PrefilterRoughness)].SetValue<float>(value); } }
        public float PrefilterRoughnessDistance { get { return this[nameof(PrefilterRoughnessDistance)].GetValue<float>(); } set { this[nameof(PrefilterRoughnessDistance)].SetValue<float>(value); } }
        public int ScreenPercentage { get { return this[nameof(ScreenPercentage)].GetValue<int>(); } set { this[nameof(ScreenPercentage)].SetValue<int>(value); } }
        public float ExtraFOV { get { return this[nameof(ExtraFOV)].GetValue<float>(); } set { this[nameof(ExtraFOV)].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeStart { get { return this[nameof(DistanceFromPlaneFadeStart)].GetValue<float>(); } set { this[nameof(DistanceFromPlaneFadeStart)].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeEnd { get { return this[nameof(DistanceFromPlaneFadeEnd)].GetValue<float>(); } set { this[nameof(DistanceFromPlaneFadeEnd)].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeoutStart { get { return this[nameof(DistanceFromPlaneFadeoutStart)].GetValue<float>(); } set { this[nameof(DistanceFromPlaneFadeoutStart)].SetValue<float>(value); } }
        public float DistanceFromPlaneFadeoutEnd { get { return this[nameof(DistanceFromPlaneFadeoutEnd)].GetValue<float>(); } set { this[nameof(DistanceFromPlaneFadeoutEnd)].SetValue<float>(value); } }
        public float AngleFromPlaneFadeStart { get { return this[nameof(AngleFromPlaneFadeStart)].GetValue<float>(); } set { this[nameof(AngleFromPlaneFadeStart)].SetValue<float>(value); } }
        public float AngleFromPlaneFadeEnd { get { return this[nameof(AngleFromPlaneFadeEnd)].GetValue<float>(); } set { this[nameof(AngleFromPlaneFadeEnd)].SetValue<float>(value); } }
        public bool bShowPreviewPlane { get { return this[nameof(bShowPreviewPlane)].Flag; } set { this[nameof(bShowPreviewPlane)].Flag = value; } }
        public bool bRenderSceneTwoSided { get { return this[nameof(bRenderSceneTwoSided)].Flag; } set { this[nameof(bRenderSceneTwoSided)].Flag = value; } }
    }
    public class PlaneReflectionCapture : ReflectionCapture
    {
        public PlaneReflectionCapture(nint addr) : base(addr) { }
    }
    public class PlaneReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public PlaneReflectionCaptureComponent(nint addr) : base(addr) { }
        public float InfluenceRadiusScale { get { return this[nameof(InfluenceRadiusScale)].GetValue<float>(); } set { this[nameof(InfluenceRadiusScale)].SetValue<float>(value); } }
        public DrawSphereComponent PreviewInfluenceRadius { get { return this[nameof(PreviewInfluenceRadius)].As<DrawSphereComponent>(); } set { this["PreviewInfluenceRadius"] = value; } }
        public BoxComponent PreviewCaptureBox { get { return this[nameof(PreviewCaptureBox)].As<BoxComponent>(); } set { this["PreviewCaptureBox"] = value; } }
    }
    public class PlatformInterfaceWebResponse : Object
    {
        public PlatformInterfaceWebResponse(nint addr) : base(addr) { }
        public Object OriginalURL { get { return this[nameof(OriginalURL)]; } set { this[nameof(OriginalURL)] = value; } }
        public int ResponseCode { get { return this[nameof(ResponseCode)].GetValue<int>(); } set { this[nameof(ResponseCode)].SetValue<int>(value); } }
        public int Tag { get { return this[nameof(Tag)].GetValue<int>(); } set { this[nameof(Tag)].SetValue<int>(value); } }
        public Object StringResponse { get { return this[nameof(StringResponse)]; } set { this[nameof(StringResponse)] = value; } }
        public Array<byte> BinaryResponse { get { return new Array<byte>(this[nameof(BinaryResponse)].Address); } }
        public int GetNumHeaders() { return Invoke<int>(nameof(GetNumHeaders)); }
        public Object GetHeaderValue(Object HeaderName) { return Invoke<Object>(nameof(GetHeaderValue), HeaderName); }
        public void GetHeader(int HeaderIndex, Object Header, Object Value) { Invoke(nameof(GetHeader), HeaderIndex, Header, Value); }
    }
    public class PlayerCameraManager : Actor
    {
        public PlayerCameraManager(nint addr) : base(addr) { }
        public PlayerController PCOwner { get { return this[nameof(PCOwner)].As<PlayerController>(); } set { this["PCOwner"] = value; } }
        public SceneComponent TransformComponent { get { return this[nameof(TransformComponent)].As<SceneComponent>(); } set { this["TransformComponent"] = value; } }
        public float DefaultFOV { get { return this[nameof(DefaultFOV)].GetValue<float>(); } set { this[nameof(DefaultFOV)].SetValue<float>(value); } }
        public float DefaultOrthoWidth { get { return this[nameof(DefaultOrthoWidth)].GetValue<float>(); } set { this[nameof(DefaultOrthoWidth)].SetValue<float>(value); } }
        public float DefaultAspectRatio { get { return this[nameof(DefaultAspectRatio)].GetValue<float>(); } set { this[nameof(DefaultAspectRatio)].SetValue<float>(value); } }
        public CameraCacheEntry CameraCache { get { return this[nameof(CameraCache)].As<CameraCacheEntry>(); } set { this["CameraCache"] = value; } }
        public CameraCacheEntry LastFrameCameraCache { get { return this[nameof(LastFrameCameraCache)].As<CameraCacheEntry>(); } set { this["LastFrameCameraCache"] = value; } }
        public TViewTarget ViewTarget { get { return this[nameof(ViewTarget)].As<TViewTarget>(); } set { this["ViewTarget"] = value; } }
        public TViewTarget PendingViewTarget { get { return this[nameof(PendingViewTarget)].As<TViewTarget>(); } set { this["PendingViewTarget"] = value; } }
        public CameraCacheEntry CameraCachePrivate { get { return this[nameof(CameraCachePrivate)].As<CameraCacheEntry>(); } set { this["CameraCachePrivate"] = value; } }
        public CameraCacheEntry LastFrameCameraCachePrivate { get { return this[nameof(LastFrameCameraCachePrivate)].As<CameraCacheEntry>(); } set { this["LastFrameCameraCachePrivate"] = value; } }
        public Array<CameraModifier> ModifierList { get { return new Array<CameraModifier>(this[nameof(ModifierList)].Address); } }
        public Array<Object> DefaultModifiers { get { return new Array<Object>(this[nameof(DefaultModifiers)].Address); } }
        public float FreeCamDistance { get { return this[nameof(FreeCamDistance)].GetValue<float>(); } set { this[nameof(FreeCamDistance)].SetValue<float>(value); } }
        public Vector FreeCamOffset { get { return this[nameof(FreeCamOffset)].As<Vector>(); } set { this["FreeCamOffset"] = value; } }
        public Vector ViewTargetOffset { get { return this[nameof(ViewTargetOffset)].As<Vector>(); } set { this["ViewTargetOffset"] = value; } }
        public Object OnAudioFadeChangeEvent { get { return this[nameof(OnAudioFadeChangeEvent)]; } set { this[nameof(OnAudioFadeChangeEvent)] = value; } }
        public Array<Object> CameraLensEffects { get { return new Array<Object>(this[nameof(CameraLensEffects)].Address); } }
        public CameraModifier_CameraShake CachedCameraShakeMod { get { return this[nameof(CachedCameraShakeMod)].As<CameraModifier_CameraShake>(); } set { this["CachedCameraShakeMod"] = value; } }
        public Array<PostProcessSettings> PostProcessBlendCache { get { return new Array<PostProcessSettings>(this[nameof(PostProcessBlendCache)].Address); } }
        public CameraActor AnimCameraActor { get { return this[nameof(AnimCameraActor)].As<CameraActor>(); } set { this["AnimCameraActor"] = value; } }
        public bool bIsOrthographic { get { return this[nameof(bIsOrthographic)].Flag; } set { this[nameof(bIsOrthographic)].Flag = value; } }
        public bool bDefaultConstrainAspectRatio { get { return this[nameof(bDefaultConstrainAspectRatio)].Flag; } set { this[nameof(bDefaultConstrainAspectRatio)].Flag = value; } }
        public bool bClientSimulatingViewTarget { get { return this[nameof(bClientSimulatingViewTarget)].Flag; } set { this[nameof(bClientSimulatingViewTarget)].Flag = value; } }
        public bool bUseClientSideCameraUpdates { get { return this[nameof(bUseClientSideCameraUpdates)].Flag; } set { this[nameof(bUseClientSideCameraUpdates)].Flag = value; } }
        public bool bGameCameraCutThisFrame { get { return this[nameof(bGameCameraCutThisFrame)].Flag; } set { this[nameof(bGameCameraCutThisFrame)].Flag = value; } }
        public float ViewPitchMin { get { return this[nameof(ViewPitchMin)].GetValue<float>(); } set { this[nameof(ViewPitchMin)].SetValue<float>(value); } }
        public float ViewPitchMax { get { return this[nameof(ViewPitchMax)].GetValue<float>(); } set { this[nameof(ViewPitchMax)].SetValue<float>(value); } }
        public float ViewYawMin { get { return this[nameof(ViewYawMin)].GetValue<float>(); } set { this[nameof(ViewYawMin)].SetValue<float>(value); } }
        public float ViewYawMax { get { return this[nameof(ViewYawMax)].GetValue<float>(); } set { this[nameof(ViewYawMax)].SetValue<float>(value); } }
        public float ViewRollMin { get { return this[nameof(ViewRollMin)].GetValue<float>(); } set { this[nameof(ViewRollMin)].SetValue<float>(value); } }
        public float ViewRollMax { get { return this[nameof(ViewRollMax)].GetValue<float>(); } set { this[nameof(ViewRollMax)].SetValue<float>(value); } }
        public float ServerUpdateCameraTimeout { get { return this[nameof(ServerUpdateCameraTimeout)].GetValue<float>(); } set { this[nameof(ServerUpdateCameraTimeout)].SetValue<float>(value); } }
        public void SwapPendingViewTargetWhenUsingClientSideCameraUpdates() { Invoke(nameof(SwapPendingViewTargetWhenUsingClientSideCameraUpdates)); }
        public void StopCameraShake(CameraShakeBase ShakeInstance, bool bImmediately) { Invoke(nameof(StopCameraShake), ShakeInstance, bImmediately); }
        public void StopCameraFade() { Invoke(nameof(StopCameraFade)); }
        public void StopAllInstancesOfCameraShakeFromSource(Object Shake, CameraShakeSourceComponent SourceComponent, bool bImmediately) { Invoke(nameof(StopAllInstancesOfCameraShakeFromSource), Shake, SourceComponent, bImmediately); }
        public void StopAllInstancesOfCameraShake(Object Shake, bool bImmediately) { Invoke(nameof(StopAllInstancesOfCameraShake), Shake, bImmediately); }
        public void StopAllCameraShakesFromSource(CameraShakeSourceComponent SourceComponent, bool bImmediately) { Invoke(nameof(StopAllCameraShakesFromSource), SourceComponent, bImmediately); }
        public void StopAllCameraShakes(bool bImmediately) { Invoke(nameof(StopAllCameraShakes), bImmediately); }
        public CameraShakeBase StartCameraShakeFromSource(Object ShakeClass, CameraShakeSourceComponent SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, Rotator UserPlaySpaceRot) { return Invoke<CameraShakeBase>(nameof(StartCameraShakeFromSource), ShakeClass, SourceComponent, Scale, PlaySpace, UserPlaySpaceRot); }
        public CameraShakeBase StartCameraShake(Object ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, Rotator UserPlaySpaceRot) { return Invoke<CameraShakeBase>(nameof(StartCameraShake), ShakeClass, Scale, PlaySpace, UserPlaySpaceRot); }
        public void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished) { Invoke(nameof(StartCameraFade), FromAlpha, ToAlpha, Duration, Color, bShouldFadeAudio, bHoldWhenFinished); }
        public void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio) { Invoke(nameof(SetManualCameraFade), InFadeAmount, Color, bInFadeAudio); }
        public void SetGameCameraCutThisFrame() { Invoke(nameof(SetGameCameraCutThisFrame)); }
        public void RemoveGenericCameraLensEffect(Object Emitter) { Invoke(nameof(RemoveGenericCameraLensEffect), Emitter); }
        public bool RemoveCameraModifier(CameraModifier ModifierToRemove) { return Invoke<bool>(nameof(RemoveCameraModifier), ModifierToRemove); }
        public void RemoveCameraLensEffect(EmitterCameraLensEffectBase Emitter) { Invoke(nameof(RemoveCameraLensEffect), Emitter); }
        public void PhotographyCameraModify(Vector NewCameraLocation, Vector PreviousCameraLocation, Vector OriginalCameraLocation, Vector ResultCameraLocation) { Invoke(nameof(PhotographyCameraModify), NewCameraLocation, PreviousCameraLocation, OriginalCameraLocation, ResultCameraLocation); }
        public void OnPhotographySessionStart() { Invoke(nameof(OnPhotographySessionStart)); }
        public void OnPhotographySessionEnd() { Invoke(nameof(OnPhotographySessionEnd)); }
        public void OnPhotographyMultiPartCaptureStart() { Invoke(nameof(OnPhotographyMultiPartCaptureStart)); }
        public void OnPhotographyMultiPartCaptureEnd() { Invoke(nameof(OnPhotographyMultiPartCaptureEnd)); }
        public PlayerController GetOwningPlayerController() { return Invoke<PlayerController>(nameof(GetOwningPlayerController)); }
        public float GetFOVAngle() { return Invoke<float>(nameof(GetFOVAngle)); }
        public Rotator GetCameraRotation() { return Invoke<Rotator>(nameof(GetCameraRotation)); }
        public Vector GetCameraLocation() { return Invoke<Vector>(nameof(GetCameraLocation)); }
        public CameraModifier FindCameraModifierByClass(Object ModifierClass) { return Invoke<CameraModifier>(nameof(FindCameraModifierByClass), ModifierClass); }
        public void ClearCameraLensEffects() { Invoke(nameof(ClearCameraLensEffects)); }
        public bool BlueprintUpdateCamera(Actor CameraTarget, Vector NewCameraLocation, Rotator NewCameraRotation, float NewCameraFOV) { return Invoke<bool>(nameof(BlueprintUpdateCamera), CameraTarget, NewCameraLocation, NewCameraRotation, NewCameraFOV); }
        public CameraModifier AddNewCameraModifier(Object ModifierClass) { return Invoke<CameraModifier>(nameof(AddNewCameraModifier), ModifierClass); }
        public Object AddGenericCameraLensEffect(Object LensEffectEmitterClass) { return Invoke<Object>(nameof(AddGenericCameraLensEffect), LensEffectEmitterClass); }
        public EmitterCameraLensEffectBase AddCameraLensEffect(Object LensEffectEmitterClass) { return Invoke<EmitterCameraLensEffectBase>(nameof(AddCameraLensEffect), LensEffectEmitterClass); }
    }
    public class PointLight : Light
    {
        public PointLight(nint addr) : base(addr) { }
        public PointLightComponent PointLightComponent { get { return this[nameof(PointLightComponent)].As<PointLightComponent>(); } set { this["PointLightComponent"] = value; } }
        public void SetRadius(float NewRadius) { Invoke(nameof(SetRadius), NewRadius); }
        public void SetLightFalloffExponent(float NewLightFalloffExponent) { Invoke(nameof(SetLightFalloffExponent), NewLightFalloffExponent); }
    }
    public class Polys : Object
    {
        public Polys(nint addr) : base(addr) { }
    }
    public class PrecomputedVisibilityOverrideVolume : Volume
    {
        public PrecomputedVisibilityOverrideVolume(nint addr) : base(addr) { }
        public Array<Actor> OverrideVisibleActors { get { return new Array<Actor>(this[nameof(OverrideVisibleActors)].Address); } }
        public Array<Actor> OverrideInvisibleActors { get { return new Array<Actor>(this[nameof(OverrideInvisibleActors)].Address); } }
        public Array<Object> OverrideInvisibleLevels { get { return new Array<Object>(this[nameof(OverrideInvisibleLevels)].Address); } }
    }
    public class RigidBodyBase : Actor
    {
        public RigidBodyBase(nint addr) : base(addr) { }
    }
    public class RadialForceActor : RigidBodyBase
    {
        public RadialForceActor(nint addr) : base(addr) { }
        public RadialForceComponent ForceComponent { get { return this[nameof(ForceComponent)].As<RadialForceComponent>(); } set { this["ForceComponent"] = value; } }
        public void ToggleForce() { Invoke(nameof(ToggleForce)); }
        public void FireImpulse() { Invoke(nameof(FireImpulse)); }
        public void EnableForce() { Invoke(nameof(EnableForce)); }
        public void DisableForce() { Invoke(nameof(DisableForce)); }
    }
    public class RVOAvoidanceInterface : Interface
    {
        public RVOAvoidanceInterface(nint addr) : base(addr) { }
    }
    public class Scene : Object
    {
        public Scene(nint addr) : base(addr) { }
    }
    public class SceneCapture2D : SceneCapture
    {
        public SceneCapture2D(nint addr) : base(addr) { }
        public SceneCaptureComponent2D CaptureComponent2D { get { return this[nameof(CaptureComponent2D)].As<SceneCaptureComponent2D>(); } set { this["CaptureComponent2D"] = value; } }
        public void OnInterpToggle(bool bEnable) { Invoke(nameof(OnInterpToggle), bEnable); }
    }
    public class SceneCaptureComponent2D : SceneCaptureComponent
    {
        public SceneCaptureComponent2D(nint addr) : base(addr) { }
        public byte ProjectionType { get { return this[nameof(ProjectionType)].GetValue<byte>(); } set { this[nameof(ProjectionType)].SetValue<byte>(value); } }
        public float FOVAngle { get { return this[nameof(FOVAngle)].GetValue<float>(); } set { this[nameof(FOVAngle)].SetValue<float>(value); } }
        public float OrthoWidth { get { return this[nameof(OrthoWidth)].GetValue<float>(); } set { this[nameof(OrthoWidth)].SetValue<float>(value); } }
        public TextureRenderTarget2D TextureTarget { get { return this[nameof(TextureTarget)].As<TextureRenderTarget2D>(); } set { this["TextureTarget"] = value; } }
        public byte CompositeMode { get { return this[nameof(CompositeMode)].GetValue<byte>(); } set { this[nameof(CompositeMode)].SetValue<byte>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public float PostProcessBlendWeight { get { return this[nameof(PostProcessBlendWeight)].GetValue<float>(); } set { this[nameof(PostProcessBlendWeight)].SetValue<float>(value); } }
        public bool bOverride_CustomNearClippingPlane { get { return this[nameof(bOverride_CustomNearClippingPlane)].Flag; } set { this[nameof(bOverride_CustomNearClippingPlane)].Flag = value; } }
        public float CustomNearClippingPlane { get { return this[nameof(CustomNearClippingPlane)].GetValue<float>(); } set { this[nameof(CustomNearClippingPlane)].SetValue<float>(value); } }
        public bool bUseCustomProjectionMatrix { get { return this[nameof(bUseCustomProjectionMatrix)].Flag; } set { this[nameof(bUseCustomProjectionMatrix)].Flag = value; } }
        public Matrix CustomProjectionMatrix { get { return this[nameof(CustomProjectionMatrix)].As<Matrix>(); } set { this["CustomProjectionMatrix"] = value; } }
        public bool bUseFauxOrthoViewPos { get { return this[nameof(bUseFauxOrthoViewPos)].Flag; } set { this[nameof(bUseFauxOrthoViewPos)].Flag = value; } }
        public bool bEnableOrthographicTiling { get { return this[nameof(bEnableOrthographicTiling)].Flag; } set { this[nameof(bEnableOrthographicTiling)].Flag = value; } }
        public int NumXTiles { get { return this[nameof(NumXTiles)].GetValue<int>(); } set { this[nameof(NumXTiles)].SetValue<int>(value); } }
        public int NumYTiles { get { return this[nameof(NumYTiles)].GetValue<int>(); } set { this[nameof(NumYTiles)].SetValue<int>(value); } }
        public bool bEnableClipPlane { get { return this[nameof(bEnableClipPlane)].Flag; } set { this[nameof(bEnableClipPlane)].Flag = value; } }
        public Vector ClipPlaneBase { get { return this[nameof(ClipPlaneBase)].As<Vector>(); } set { this["ClipPlaneBase"] = value; } }
        public Vector ClipPlaneNormal { get { return this[nameof(ClipPlaneNormal)].As<Vector>(); } set { this["ClipPlaneNormal"] = value; } }
        public bool bCameraCutThisFrame { get { return this[nameof(bCameraCutThisFrame)].Flag; } set { this[nameof(bCameraCutThisFrame)].Flag = value; } }
        public bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent { get { return this[nameof(bConsiderUnrenderedOpaquePixelAsFullyTranslucent)].Flag; } set { this[nameof(bConsiderUnrenderedOpaquePixelAsFullyTranslucent)].Flag = value; } }
        public void RemoveBlendable(Object InBlendableObject) { Invoke(nameof(RemoveBlendable), InBlendableObject); }
        public void CaptureScene() { Invoke(nameof(CaptureScene)); }
        public void AddOrUpdateBlendable(Object InBlendableObject, float InWeight) { Invoke(nameof(AddOrUpdateBlendable), InBlendableObject, InWeight); }
    }
    public class SceneCaptureComponentCube : SceneCaptureComponent
    {
        public SceneCaptureComponentCube(nint addr) : base(addr) { }
        public TextureRenderTargetCube TextureTarget { get { return this[nameof(TextureTarget)].As<TextureRenderTargetCube>(); } set { this["TextureTarget"] = value; } }
        public bool bCaptureRotation { get { return this[nameof(bCaptureRotation)].Flag; } set { this[nameof(bCaptureRotation)].Flag = value; } }
        public void CaptureScene() { Invoke(nameof(CaptureScene)); }
    }
    public class SceneCaptureCube : SceneCapture
    {
        public SceneCaptureCube(nint addr) : base(addr) { }
        public SceneCaptureComponentCube CaptureComponentCube { get { return this[nameof(CaptureComponentCube)].As<SceneCaptureComponentCube>(); } set { this["CaptureComponentCube"] = value; } }
        public void OnInterpToggle(bool bEnable) { Invoke(nameof(OnInterpToggle), bEnable); }
    }
    public class ServerStreamingLevelsVisibility : Actor
    {
        public ServerStreamingLevelsVisibility(nint addr) : base(addr) { }
    }
    public class ShadowMapTexture2D : Texture2D
    {
        public ShadowMapTexture2D(nint addr) : base(addr) { }
        public byte ShadowmapFlags { get { return this[nameof(ShadowmapFlags)].GetValue<byte>(); } set { this[nameof(ShadowmapFlags)].SetValue<byte>(value); } }
    }
    public class SkeletalMeshSocket : Object
    {
        public SkeletalMeshSocket(nint addr) : base(addr) { }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale { get { return this[nameof(RelativeScale)].As<Vector>(); } set { this["RelativeScale"] = value; } }
        public bool bForceAlwaysAnimated { get { return this[nameof(bForceAlwaysAnimated)].Flag; } set { this[nameof(bForceAlwaysAnimated)].Flag = value; } }
        public void InitializeSocketFromLocation(SkeletalMeshComponent SkelComp, Vector WorldLocation, Vector WorldNormal) { Invoke(nameof(InitializeSocketFromLocation), SkelComp, WorldLocation, WorldNormal); }
        public Vector GetSocketLocation(SkeletalMeshComponent SkelComp) { return Invoke<Vector>(nameof(GetSocketLocation), SkelComp); }
    }
    public class SkyLightComponent : LightComponentBase
    {
        public SkyLightComponent(nint addr) : base(addr) { }
        public bool bRealTimeCapture { get { return this[nameof(bRealTimeCapture)].Flag; } set { this[nameof(bRealTimeCapture)].Flag = value; } }
        public byte SourceType { get { return this[nameof(SourceType)].GetValue<byte>(); } set { this[nameof(SourceType)].SetValue<byte>(value); } }
        public TextureCube Cubemap { get { return this[nameof(Cubemap)].As<TextureCube>(); } set { this["Cubemap"] = value; } }
        public float SourceCubemapAngle { get { return this[nameof(SourceCubemapAngle)].GetValue<float>(); } set { this[nameof(SourceCubemapAngle)].SetValue<float>(value); } }
        public int CubemapResolution { get { return this[nameof(CubemapResolution)].GetValue<int>(); } set { this[nameof(CubemapResolution)].SetValue<int>(value); } }
        public float SkyDistanceThreshold { get { return this[nameof(SkyDistanceThreshold)].GetValue<float>(); } set { this[nameof(SkyDistanceThreshold)].SetValue<float>(value); } }
        public bool bCaptureEmissiveOnly { get { return this[nameof(bCaptureEmissiveOnly)].Flag; } set { this[nameof(bCaptureEmissiveOnly)].Flag = value; } }
        public bool bLowerHemisphereIsBlack { get { return this[nameof(bLowerHemisphereIsBlack)].Flag; } set { this[nameof(bLowerHemisphereIsBlack)].Flag = value; } }
        public LinearColor LowerHemisphereColor { get { return this[nameof(LowerHemisphereColor)].As<LinearColor>(); } set { this["LowerHemisphereColor"] = value; } }
        public float OcclusionMaxDistance { get { return this[nameof(OcclusionMaxDistance)].GetValue<float>(); } set { this[nameof(OcclusionMaxDistance)].SetValue<float>(value); } }
        public float Contrast { get { return this[nameof(Contrast)].GetValue<float>(); } set { this[nameof(Contrast)].SetValue<float>(value); } }
        public float OcclusionExponent { get { return this[nameof(OcclusionExponent)].GetValue<float>(); } set { this[nameof(OcclusionExponent)].SetValue<float>(value); } }
        public float MinOcclusion { get { return this[nameof(MinOcclusion)].GetValue<float>(); } set { this[nameof(MinOcclusion)].SetValue<float>(value); } }
        public Color OcclusionTint { get { return this[nameof(OcclusionTint)].As<Color>(); } set { this["OcclusionTint"] = value; } }
        public bool bCloudAmbientOcclusion { get { return this[nameof(bCloudAmbientOcclusion)].Flag; } set { this[nameof(bCloudAmbientOcclusion)].Flag = value; } }
        public float CloudAmbientOcclusionStrength { get { return this[nameof(CloudAmbientOcclusionStrength)].GetValue<float>(); } set { this[nameof(CloudAmbientOcclusionStrength)].SetValue<float>(value); } }
        public float CloudAmbientOcclusionExtent { get { return this[nameof(CloudAmbientOcclusionExtent)].GetValue<float>(); } set { this[nameof(CloudAmbientOcclusionExtent)].SetValue<float>(value); } }
        public float CloudAmbientOcclusionMapResolutionScale { get { return this[nameof(CloudAmbientOcclusionMapResolutionScale)].GetValue<float>(); } set { this[nameof(CloudAmbientOcclusionMapResolutionScale)].SetValue<float>(value); } }
        public float CloudAmbientOcclusionApertureScale { get { return this[nameof(CloudAmbientOcclusionApertureScale)].GetValue<float>(); } set { this[nameof(CloudAmbientOcclusionApertureScale)].SetValue<float>(value); } }
        public byte OcclusionCombineMode { get { return this[nameof(OcclusionCombineMode)].GetValue<byte>(); } set { this[nameof(OcclusionCombineMode)].SetValue<byte>(value); } }
        public TextureCube BlendDestinationCubemap { get { return this[nameof(BlendDestinationCubemap)].As<TextureCube>(); } set { this["BlendDestinationCubemap"] = value; } }
        public void SetVolumetricScatteringIntensity(float NewIntensity) { Invoke(nameof(SetVolumetricScatteringIntensity), NewIntensity); }
        public void SetSourceCubemapAngle(float NewValue) { Invoke(nameof(SetSourceCubemapAngle), NewValue); }
        public void SetOcclusionTint(Color InTint) { Invoke(nameof(SetOcclusionTint), InTint); }
        public void SetOcclusionExponent(float InOcclusionExponent) { Invoke(nameof(SetOcclusionExponent), InOcclusionExponent); }
        public void SetOcclusionContrast(float InOcclusionContrast) { Invoke(nameof(SetOcclusionContrast), InOcclusionContrast); }
        public void SetMinOcclusion(float InMinOcclusion) { Invoke(nameof(SetMinOcclusion), InMinOcclusion); }
        public void SetLowerHemisphereColor(LinearColor InLowerHemisphereColor) { Invoke(nameof(SetLowerHemisphereColor), InLowerHemisphereColor); }
        public void SetLightColor(LinearColor NewLightColor) { Invoke(nameof(SetLightColor), NewLightColor); }
        public void SetIntensity(float NewIntensity) { Invoke(nameof(SetIntensity), NewIntensity); }
        public void SetIndirectLightingIntensity(float NewIntensity) { Invoke(nameof(SetIndirectLightingIntensity), NewIntensity); }
        public void SetCubemapBlend(TextureCube SourceCubemap, TextureCube DestinationCubemap, float InBlendFraction) { Invoke(nameof(SetCubemapBlend), SourceCubemap, DestinationCubemap, InBlendFraction); }
        public void SetCubemap(TextureCube NewCubemap) { Invoke(nameof(SetCubemap), NewCubemap); }
        public void RecaptureSky() { Invoke(nameof(RecaptureSky)); }
    }
    public class SMInstanceManager : Interface
    {
        public SMInstanceManager(nint addr) : base(addr) { }
    }
    public class SMInstanceManagerProvider : Interface
    {
        public SMInstanceManagerProvider(nint addr) : base(addr) { }
    }
    public class SoundAttenuation : Object
    {
        public SoundAttenuation(nint addr) : base(addr) { }
        public SoundAttenuationSettings Attenuation { get { return this[nameof(Attenuation)].As<SoundAttenuationSettings>(); } set { this["Attenuation"] = value; } }
    }
    public class SoundEffectPresetWidgetInterface : AudioPanelWidgetInterface
    {
        public SoundEffectPresetWidgetInterface(nint addr) : base(addr) { }
        public void OnPropertyChanged(SoundEffectPreset Preset, Object PropertyName) { Invoke(nameof(OnPropertyChanged), Preset, PropertyName); }
        public void OnConstructed(SoundEffectPreset Preset) { Invoke(nameof(OnConstructed), Preset); }
        public Object GetClass() { return Invoke<Object>(nameof(GetClass)); }
    }
    public class SoundEffectSourcePresetChain : Object
    {
        public SoundEffectSourcePresetChain(nint addr) : base(addr) { }
        public Array<SourceEffectChainEntry> Chain { get { return new Array<SourceEffectChainEntry>(this[nameof(Chain)].Address); } }
        public bool bPlayEffectChainTails { get { return this[nameof(bPlayEffectChainTails)].Flag; } set { this[nameof(bPlayEffectChainTails)].Flag = value; } }
    }
    public class SoundGroups : Object
    {
        public SoundGroups(nint addr) : base(addr) { }
        public Array<SoundGroup> SoundGroupProfiles { get { return new Array<SoundGroup>(this[nameof(SoundGroupProfiles)].Address); } }
    }
    public class SoundNode : Object
    {
        public SoundNode(nint addr) : base(addr) { }
        public Array<SoundNode> ChildNodes { get { return new Array<SoundNode>(this[nameof(ChildNodes)].Address); } }
    }
    public class SoundNodeModulatorContinuous : SoundNode
    {
        public SoundNodeModulatorContinuous(nint addr) : base(addr) { }
        public ModulatorContinuousParams PitchModulationParams { get { return this[nameof(PitchModulationParams)].As<ModulatorContinuousParams>(); } set { this["PitchModulationParams"] = value; } }
        public ModulatorContinuousParams VolumeModulationParams { get { return this[nameof(VolumeModulationParams)].As<ModulatorContinuousParams>(); } set { this["VolumeModulationParams"] = value; } }
    }
    public class SoundSubmixWidgetInterface : Interface
    {
        public SoundSubmixWidgetInterface(nint addr) : base(addr) { }
        public void OnConstructed(SoundSubmixBase SoundSubmix) { Invoke(nameof(OnConstructed), SoundSubmix); }
    }
    public class SphereReflectionCapture : ReflectionCapture
    {
        public SphereReflectionCapture(nint addr) : base(addr) { }
        public DrawSphereComponent DrawCaptureRadius { get { return this[nameof(DrawCaptureRadius)].As<DrawSphereComponent>(); } set { this["DrawCaptureRadius"] = value; } }
    }
    public class SphereReflectionCaptureComponent : ReflectionCaptureComponent
    {
        public SphereReflectionCaptureComponent(nint addr) : base(addr) { }
        public float InfluenceRadius { get { return this[nameof(InfluenceRadius)].GetValue<float>(); } set { this[nameof(InfluenceRadius)].SetValue<float>(value); } }
        public float CaptureDistanceScale { get { return this[nameof(CaptureDistanceScale)].GetValue<float>(); } set { this[nameof(CaptureDistanceScale)].SetValue<float>(value); } }
        public DrawSphereComponent PreviewInfluenceRadius { get { return this[nameof(PreviewInfluenceRadius)].As<DrawSphereComponent>(); } set { this["PreviewInfluenceRadius"] = value; } }
    }
    public class StaticMesh : StreamableRenderAsset
    {
        public StaticMesh(nint addr) : base(addr) { }
        public PerQualityLevelInt MinQualityLevelLOD { get { return this[nameof(MinQualityLevelLOD)].As<PerQualityLevelInt>(); } set { this["MinQualityLevelLOD"] = value; } }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public Array<StaticMaterial> StaticMaterials { get { return new Array<StaticMaterial>(this[nameof(StaticMaterials)].Address); } }
        public float LightmapUVDensity { get { return this[nameof(LightmapUVDensity)].GetValue<float>(); } set { this[nameof(LightmapUVDensity)].SetValue<float>(value); } }
        public int LightMapResolution { get { return this[nameof(LightMapResolution)].GetValue<int>(); } set { this[nameof(LightMapResolution)].SetValue<int>(value); } }
        public int LightMapCoordinateIndex { get { return this[nameof(LightMapCoordinateIndex)].GetValue<int>(); } set { this[nameof(LightMapCoordinateIndex)].SetValue<int>(value); } }
        public float DistanceFieldSelfShadowBias { get { return this[nameof(DistanceFieldSelfShadowBias)].GetValue<float>(); } set { this[nameof(DistanceFieldSelfShadowBias)].SetValue<float>(value); } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public int LODForCollision { get { return this[nameof(LODForCollision)].GetValue<int>(); } set { this[nameof(LODForCollision)].SetValue<int>(value); } }
        public bool bGenerateMeshDistanceField { get { return this[nameof(bGenerateMeshDistanceField)].Flag; } set { this[nameof(bGenerateMeshDistanceField)].Flag = value; } }
        public bool bStripComplexCollisionForConsole { get { return this[nameof(bStripComplexCollisionForConsole)].Flag; } set { this[nameof(bStripComplexCollisionForConsole)].Flag = value; } }
        public bool bHasNavigationData { get { return this[nameof(bHasNavigationData)].Flag; } set { this[nameof(bHasNavigationData)].Flag = value; } }
        public bool bSupportUniformlyDistributedSampling { get { return this[nameof(bSupportUniformlyDistributedSampling)].Flag; } set { this[nameof(bSupportUniformlyDistributedSampling)].Flag = value; } }
        public bool bSupportPhysicalMaterialMasks { get { return this[nameof(bSupportPhysicalMaterialMasks)].Flag; } set { this[nameof(bSupportPhysicalMaterialMasks)].Flag = value; } }
        public bool bSupportRayTracing { get { return this[nameof(bSupportRayTracing)].Flag; } set { this[nameof(bSupportRayTracing)].Flag = value; } }
        public bool bDoFastBuild { get { return this[nameof(bDoFastBuild)].Flag; } set { this[nameof(bDoFastBuild)].Flag = value; } }
        public bool bIsBuiltAtRuntime { get { return this[nameof(bIsBuiltAtRuntime)].Flag; } set { this[nameof(bIsBuiltAtRuntime)].Flag = value; } }
        public bool bAllowCPUAccess { get { return this[nameof(bAllowCPUAccess)].Flag; } set { this[nameof(bAllowCPUAccess)].Flag = value; } }
        public bool bSupportGpuUniformlyDistributedSampling { get { return this[nameof(bSupportGpuUniformlyDistributedSampling)].Flag; } set { this[nameof(bSupportGpuUniformlyDistributedSampling)].Flag = value; } }
        public Array<StaticMeshSocket> Sockets { get { return new Array<StaticMeshSocket>(this[nameof(Sockets)].Address); } }
        public Vector PositiveBoundsExtension { get { return this[nameof(PositiveBoundsExtension)].As<Vector>(); } set { this["PositiveBoundsExtension"] = value; } }
        public Vector NegativeBoundsExtension { get { return this[nameof(NegativeBoundsExtension)].As<Vector>(); } set { this["NegativeBoundsExtension"] = value; } }
        public BoxSphereBounds ExtendedBounds { get { return this[nameof(ExtendedBounds)].As<BoxSphereBounds>(); } set { this["ExtendedBounds"] = value; } }
        public int ElementToIgnoreForTexFactor { get { return this[nameof(ElementToIgnoreForTexFactor)].GetValue<int>(); } set { this[nameof(ElementToIgnoreForTexFactor)].SetValue<int>(value); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public NavCollisionBase NavCollision { get { return this[nameof(NavCollision)].As<NavCollisionBase>(); } set { this["NavCollision"] = value; } }
        public void SetStaticMaterials(Array<StaticMaterial> InStaticMaterials) { Invoke(nameof(SetStaticMaterials), InStaticMaterials); }
        public void SetMinLODForQualityLevels(Object QualityLevelMinimumLODs, int Default) { Invoke(nameof(SetMinLODForQualityLevels), QualityLevelMinimumLODs, Default); }
        public void SetMinimumLODForPlatforms(Object PlatformMinimumLODs) { Invoke(nameof(SetMinimumLODForPlatforms), PlatformMinimumLODs); }
        public void SetMinimumLODForPlatform(Object PlatformName, int InMinLOD) { Invoke(nameof(SetMinimumLODForPlatform), PlatformName, InMinLOD); }
        public void RemoveSocket(StaticMeshSocket Socket) { Invoke(nameof(RemoveSocket), Socket); }
        public StaticMeshDescription GetStaticMeshDescription(int LODIndex) { return Invoke<StaticMeshDescription>(nameof(GetStaticMeshDescription), LODIndex); }
        public Array<StaticMaterial> GetStaticMaterials() { return Invoke<Array<StaticMaterial>>(nameof(GetStaticMaterials)); }
        public Array<StaticMeshSocket> GetSocketsByTag(Object InSocketTag) { return Invoke<Array<StaticMeshSocket>>(nameof(GetSocketsByTag), InSocketTag); }
        public int GetNumTriangles(int LODIndex) { return Invoke<int>(nameof(GetNumTriangles), LODIndex); }
        public int GetNumSections(int InLOD) { return Invoke<int>(nameof(GetNumSections), InLOD); }
        public int GetNumLODs() { return Invoke<int>(nameof(GetNumLODs)); }
        public void GetMinLODForQualityLevels(Object QualityLevelMinimumLODs, int Default) { Invoke(nameof(GetMinLODForQualityLevels), QualityLevelMinimumLODs, Default); }
        public void GetMinimumLODForQualityLevels(Object QualityLevelMinimumLODs) { Invoke(nameof(GetMinimumLODForQualityLevels), QualityLevelMinimumLODs); }
        public int GetMinimumLODForQualityLevel(Object QualityLevel) { return Invoke<int>(nameof(GetMinimumLODForQualityLevel), QualityLevel); }
        public void GetMinimumLODForPlatforms(Object PlatformMinimumLODs) { Invoke(nameof(GetMinimumLODForPlatforms), PlatformMinimumLODs); }
        public int GetMinimumLODForPlatform(Object PlatformName) { return Invoke<int>(nameof(GetMinimumLODForPlatform), PlatformName); }
        public int GetMaterialIndex(Object MaterialSlotName) { return Invoke<int>(nameof(GetMaterialIndex), MaterialSlotName); }
        public MaterialInterface GetMaterial(int MaterialIndex) { return Invoke<MaterialInterface>(nameof(GetMaterial), MaterialIndex); }
        public BoxSphereBounds GetBounds() { return Invoke<BoxSphereBounds>(nameof(GetBounds)); }
        public Box GetBoundingBox() { return Invoke<Box>(nameof(GetBoundingBox)); }
        public StaticMeshSocket FindSocket(Object InSocketName) { return Invoke<StaticMeshSocket>(nameof(FindSocket), InSocketName); }
        public StaticMeshDescription CreateStaticMeshDescription(Object Outer) { return Invoke<StaticMeshDescription>(nameof(CreateStaticMeshDescription), Outer); }
        public void BuildFromStaticMeshDescriptions(Array<StaticMeshDescription> StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild) { Invoke(nameof(BuildFromStaticMeshDescriptions), StaticMeshDescriptions, bBuildSimpleCollision, bFastBuild); }
        public void AddSocket(StaticMeshSocket Socket) { Invoke(nameof(AddSocket), Socket); }
        public Object AddMaterial(MaterialInterface Material) { return Invoke<Object>(nameof(AddMaterial), Material); }
    }
    public class StaticMeshSocket : Object
    {
        public StaticMeshSocket(nint addr) : base(addr) { }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector RelativeLocation { get { return this[nameof(RelativeLocation)].As<Vector>(); } set { this["RelativeLocation"] = value; } }
        public Rotator RelativeRotation { get { return this[nameof(RelativeRotation)].As<Rotator>(); } set { this["RelativeRotation"] = value; } }
        public Vector RelativeScale { get { return this[nameof(RelativeScale)].As<Vector>(); } set { this["RelativeScale"] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
    }
    public class StereoLayerShape : Object
    {
        public StereoLayerShape(nint addr) : base(addr) { }
    }
    public class StereoLayerShapeQuad : StereoLayerShape
    {
        public StereoLayerShapeQuad(nint addr) : base(addr) { }
    }
    public class StereoLayerShapeCylinder : StereoLayerShape
    {
        public StereoLayerShapeCylinder(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float OverlayArc { get { return this[nameof(OverlayArc)].GetValue<float>(); } set { this[nameof(OverlayArc)].SetValue<float>(value); } }
        public int Height { get { return this[nameof(Height)].GetValue<int>(); } set { this[nameof(Height)].SetValue<int>(value); } }
        public void SetRadius(float InRadius) { Invoke(nameof(SetRadius), InRadius); }
        public void SetOverlayArc(float InOverlayArc) { Invoke(nameof(SetOverlayArc), InOverlayArc); }
        public void SetHeight(int InHeight) { Invoke(nameof(SetHeight), InHeight); }
    }
    public class StereoLayerShapeCubemap : StereoLayerShape
    {
        public StereoLayerShapeCubemap(nint addr) : base(addr) { }
    }
    public class StereoLayerShapeEquirect : StereoLayerShape
    {
        public StereoLayerShapeEquirect(nint addr) : base(addr) { }
        public Box2D LeftUVRect { get { return this[nameof(LeftUVRect)].As<Box2D>(); } set { this["LeftUVRect"] = value; } }
        public Box2D RightUVRect { get { return this[nameof(RightUVRect)].As<Box2D>(); } set { this["RightUVRect"] = value; } }
        public Vector2D LeftScale { get { return this[nameof(LeftScale)].As<Vector2D>(); } set { this["LeftScale"] = value; } }
        public Vector2D RightScale { get { return this[nameof(RightScale)].As<Vector2D>(); } set { this["RightScale"] = value; } }
        public Vector2D LeftBias { get { return this[nameof(LeftBias)].As<Vector2D>(); } set { this["LeftBias"] = value; } }
        public Vector2D RightBias { get { return this[nameof(RightBias)].As<Vector2D>(); } set { this["RightBias"] = value; } }
        public void SetEquirectProps(EquirectProps InScaleBiases) { Invoke(nameof(SetEquirectProps), InScaleBiases); }
    }
    public class StereoLayerComponent : SceneComponent
    {
        public StereoLayerComponent(nint addr) : base(addr) { }
        public bool bLiveTexture { get { return this[nameof(bLiveTexture)].Flag; } set { this[nameof(bLiveTexture)].Flag = value; } }
        public bool bSupportsDepth { get { return this[nameof(bSupportsDepth)].Flag; } set { this[nameof(bSupportsDepth)].Flag = value; } }
        public bool bNoAlphaChannel { get { return this[nameof(bNoAlphaChannel)].Flag; } set { this[nameof(bNoAlphaChannel)].Flag = value; } }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
        public Texture LeftTexture { get { return this[nameof(LeftTexture)].As<Texture>(); } set { this["LeftTexture"] = value; } }
        public bool bQuadPreserveTextureRatio { get { return this[nameof(bQuadPreserveTextureRatio)].Flag; } set { this[nameof(bQuadPreserveTextureRatio)].Flag = value; } }
        public Vector2D QuadSize { get { return this[nameof(QuadSize)].As<Vector2D>(); } set { this["QuadSize"] = value; } }
        public Box2D UVRect { get { return this[nameof(UVRect)].As<Box2D>(); } set { this["UVRect"] = value; } }
        public float CylinderRadius { get { return this[nameof(CylinderRadius)].GetValue<float>(); } set { this[nameof(CylinderRadius)].SetValue<float>(value); } }
        public float CylinderOverlayArc { get { return this[nameof(CylinderOverlayArc)].GetValue<float>(); } set { this[nameof(CylinderOverlayArc)].SetValue<float>(value); } }
        public int CylinderHeight { get { return this[nameof(CylinderHeight)].GetValue<int>(); } set { this[nameof(CylinderHeight)].SetValue<int>(value); } }
        public EquirectProps EquirectProps { get { return this[nameof(EquirectProps)].As<EquirectProps>(); } set { this["EquirectProps"] = value; } }
        public byte StereoLayerType { get { return this[nameof(StereoLayerType)].GetValue<byte>(); } set { this[nameof(StereoLayerType)].SetValue<byte>(value); } }
        public byte StereoLayerShape { get { return this[nameof(StereoLayerShape)].GetValue<byte>(); } set { this[nameof(StereoLayerShape)].SetValue<byte>(value); } }
        public StereoLayerShape Shape { get { return this[nameof(Shape)].As<StereoLayerShape>(); } set { this["Shape"] = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public void SetUVRect(Box2D InUVRect) { Invoke(nameof(SetUVRect), InUVRect); }
        public void SetTexture(Texture InTexture) { Invoke(nameof(SetTexture), InTexture); }
        public void SetQuadSize(Vector2D InQuadSize) { Invoke(nameof(SetQuadSize), InQuadSize); }
        public void SetPriority(int InPriority) { Invoke(nameof(SetPriority), InPriority); }
        public void SetLeftTexture(Texture InTexture) { Invoke(nameof(SetLeftTexture), InTexture); }
        public void SetEquirectProps(EquirectProps InScaleBiases) { Invoke(nameof(SetEquirectProps), InScaleBiases); }
        public void MarkTextureForUpdate() { Invoke(nameof(MarkTextureForUpdate)); }
        public Box2D GetUVRect() { return Invoke<Box2D>(nameof(GetUVRect)); }
        public Texture GetTexture() { return Invoke<Texture>(nameof(GetTexture)); }
        public Vector2D GetQuadSize() { return Invoke<Vector2D>(nameof(GetQuadSize)); }
        public int GetPriority() { return Invoke<int>(nameof(GetPriority)); }
        public Texture GetLeftTexture() { return Invoke<Texture>(nameof(GetLeftTexture)); }
    }
    public class SubUVAnimation : Object
    {
        public SubUVAnimation(nint addr) : base(addr) { }
        public Texture2D SubUVTexture { get { return this[nameof(SubUVTexture)].As<Texture2D>(); } set { this["SubUVTexture"] = value; } }
        public int SubImages_Horizontal { get { return this[nameof(SubImages_Horizontal)].GetValue<int>(); } set { this[nameof(SubImages_Horizontal)].SetValue<int>(value); } }
        public int SubImages_Vertical { get { return this[nameof(SubImages_Vertical)].GetValue<int>(); } set { this[nameof(SubImages_Vertical)].SetValue<int>(value); } }
        public byte BoundingMode { get { return this[nameof(BoundingMode)].GetValue<byte>(); } set { this[nameof(BoundingMode)].SetValue<byte>(value); } }
        public byte OpacitySourceMode { get { return this[nameof(OpacitySourceMode)].GetValue<byte>(); } set { this[nameof(OpacitySourceMode)].SetValue<byte>(value); } }
        public float AlphaThreshold { get { return this[nameof(AlphaThreshold)].GetValue<float>(); } set { this[nameof(AlphaThreshold)].SetValue<float>(value); } }
    }
    public class TextPropertyTestObject : Object
    {
        public TextPropertyTestObject(nint addr) : base(addr) { }
        public Object DefaultedText { get { return this[nameof(DefaultedText)]; } set { this[nameof(DefaultedText)] = value; } }
        public Object UndefaultedText { get { return this[nameof(UndefaultedText)]; } set { this[nameof(UndefaultedText)] = value; } }
        public Object TransientText { get { return this[nameof(TransientText)]; } set { this[nameof(TransientText)] = value; } }
    }
    public class TextRenderActor : Actor
    {
        public TextRenderActor(nint addr) : base(addr) { }
        public TextRenderComponent TextRender { get { return this[nameof(TextRender)].As<TextRenderComponent>(); } set { this["TextRender"] = value; } }
    }
    public class TextRenderComponent : PrimitiveComponent
    {
        public TextRenderComponent(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public MaterialInterface TextMaterial { get { return this[nameof(TextMaterial)].As<MaterialInterface>(); } set { this["TextMaterial"] = value; } }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public byte HorizontalAlignment { get { return this[nameof(HorizontalAlignment)].GetValue<byte>(); } set { this[nameof(HorizontalAlignment)].SetValue<byte>(value); } }
        public byte VerticalAlignment { get { return this[nameof(VerticalAlignment)].GetValue<byte>(); } set { this[nameof(VerticalAlignment)].SetValue<byte>(value); } }
        public Color TextRenderColor { get { return this[nameof(TextRenderColor)].As<Color>(); } set { this["TextRenderColor"] = value; } }
        public float XScale { get { return this[nameof(XScale)].GetValue<float>(); } set { this[nameof(XScale)].SetValue<float>(value); } }
        public float YScale { get { return this[nameof(YScale)].GetValue<float>(); } set { this[nameof(YScale)].SetValue<float>(value); } }
        public float WorldSize { get { return this[nameof(WorldSize)].GetValue<float>(); } set { this[nameof(WorldSize)].SetValue<float>(value); } }
        public float InvDefaultSize { get { return this[nameof(InvDefaultSize)].GetValue<float>(); } set { this[nameof(InvDefaultSize)].SetValue<float>(value); } }
        public float HorizSpacingAdjust { get { return this[nameof(HorizSpacingAdjust)].GetValue<float>(); } set { this[nameof(HorizSpacingAdjust)].SetValue<float>(value); } }
        public float VertSpacingAdjust { get { return this[nameof(VertSpacingAdjust)].GetValue<float>(); } set { this[nameof(VertSpacingAdjust)].SetValue<float>(value); } }
        public bool bAlwaysRenderAsText { get { return this[nameof(bAlwaysRenderAsText)].Flag; } set { this[nameof(bAlwaysRenderAsText)].Flag = value; } }
        public void SetYScale(float Value) { Invoke(nameof(SetYScale), Value); }
        public void SetXScale(float Value) { Invoke(nameof(SetXScale), Value); }
        public void SetWorldSize(float Value) { Invoke(nameof(SetWorldSize), Value); }
        public void SetVertSpacingAdjust(float Value) { Invoke(nameof(SetVertSpacingAdjust), Value); }
        public void SetVerticalAlignment(byte Value) { Invoke(nameof(SetVerticalAlignment), Value); }
        public void SetTextRenderColor(Color Value) { Invoke(nameof(SetTextRenderColor), Value); }
        public void SetTextMaterial(MaterialInterface Material) { Invoke(nameof(SetTextMaterial), Material); }
        public void SetHorizSpacingAdjust(float Value) { Invoke(nameof(SetHorizSpacingAdjust), Value); }
        public void SetHorizontalAlignment(byte Value) { Invoke(nameof(SetHorizontalAlignment), Value); }
        public void SetFont(Font Value) { Invoke(nameof(SetFont), Value); }
        public void K2_SetText(Object Value) { Invoke(nameof(K2_SetText), Value); }
        public Vector GetTextWorldSize() { return Invoke<Vector>(nameof(GetTextWorldSize)); }
        public Vector GetTextLocalSize() { return Invoke<Vector>(nameof(GetTextLocalSize)); }
    }
    public class TextureRenderTarget : Texture
    {
        public TextureRenderTarget(nint addr) : base(addr) { }
        public float TargetGamma { get { return this[nameof(TargetGamma)].GetValue<float>(); } set { this[nameof(TargetGamma)].SetValue<float>(value); } }
    }
    public class TextureRenderTarget2D : TextureRenderTarget
    {
        public TextureRenderTarget2D(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte AddressX { get { return this[nameof(AddressX)].GetValue<byte>(); } set { this[nameof(AddressX)].SetValue<byte>(value); } }
        public byte AddressY { get { return this[nameof(AddressY)].GetValue<byte>(); } set { this[nameof(AddressY)].SetValue<byte>(value); } }
        public bool bForceLinearGamma { get { return this[nameof(bForceLinearGamma)].Flag; } set { this[nameof(bForceLinearGamma)].Flag = value; } }
        public bool bHDR { get { return this[nameof(bHDR)].Flag; } set { this[nameof(bHDR)].Flag = value; } }
        public bool bGPUSharedFlag { get { return this[nameof(bGPUSharedFlag)].Flag; } set { this[nameof(bGPUSharedFlag)].Flag = value; } }
        public byte RenderTargetFormat { get { return this[nameof(RenderTargetFormat)].GetValue<byte>(); } set { this[nameof(RenderTargetFormat)].SetValue<byte>(value); } }
        public bool bAutoGenerateMips { get { return this[nameof(bAutoGenerateMips)].Flag; } set { this[nameof(bAutoGenerateMips)].Flag = value; } }
        public byte MipsSamplerFilter { get { return this[nameof(MipsSamplerFilter)].GetValue<byte>(); } set { this[nameof(MipsSamplerFilter)].SetValue<byte>(value); } }
        public byte MipsAddressU { get { return this[nameof(MipsAddressU)].GetValue<byte>(); } set { this[nameof(MipsAddressU)].SetValue<byte>(value); } }
        public byte MipsAddressV { get { return this[nameof(MipsAddressV)].GetValue<byte>(); } set { this[nameof(MipsAddressV)].SetValue<byte>(value); } }
        public byte OverrideFormat { get { return this[nameof(OverrideFormat)].GetValue<byte>(); } set { this[nameof(OverrideFormat)].SetValue<byte>(value); } }
    }
    public class TimelineComponent : ActorComponent
    {
        public TimelineComponent(nint addr) : base(addr) { }
        public Timeline TheTimeline { get { return this[nameof(TheTimeline)].As<Timeline>(); } set { this["TheTimeline"] = value; } }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void SetVectorCurve(CurveVector NewVectorCurve, Object VectorTrackName) { Invoke(nameof(SetVectorCurve), NewVectorCurve, VectorTrackName); }
        public void SetTimelineLengthMode(byte NewLengthMode) { Invoke(nameof(SetTimelineLengthMode), NewLengthMode); }
        public void SetTimelineLength(float NewLength) { Invoke(nameof(SetTimelineLength), NewLength); }
        public void SetPlayRate(float NewRate) { Invoke(nameof(SetPlayRate), NewRate); }
        public void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate) { Invoke(nameof(SetPlaybackPosition), NewPosition, bFireEvents, bFireUpdate); }
        public void SetNewTime(float NewTime) { Invoke(nameof(SetNewTime), NewTime); }
        public void SetLooping(bool bNewLooping) { Invoke(nameof(SetLooping), bNewLooping); }
        public void SetLinearColorCurve(CurveLinearColor NewLinearColorCurve, Object LinearColorTrackName) { Invoke(nameof(SetLinearColorCurve), NewLinearColorCurve, LinearColorTrackName); }
        public void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation) { Invoke(nameof(SetIgnoreTimeDilation), bNewIgnoreTimeDilation); }
        public void SetFloatCurve(CurveFloat NewFloatCurve, Object FloatTrackName) { Invoke(nameof(SetFloatCurve), NewFloatCurve, FloatTrackName); }
        public void ReverseFromEnd() { Invoke(nameof(ReverseFromEnd)); }
        public void Reverse() { Invoke(nameof(Reverse)); }
        public void PlayFromStart() { Invoke(nameof(PlayFromStart)); }
        public void Play() { Invoke(nameof(Play)); }
        public void OnRep_Timeline(Timeline OldTimeline) { Invoke(nameof(OnRep_Timeline), OldTimeline); }
        public bool IsReversing() { return Invoke<bool>(nameof(IsReversing)); }
        public bool IsPlaying() { return Invoke<bool>(nameof(IsPlaying)); }
        public bool IsLooping() { return Invoke<bool>(nameof(IsLooping)); }
        public float GetTimelineLength() { return Invoke<float>(nameof(GetTimelineLength)); }
        public float GetScaledTimelineLength() { return Invoke<float>(nameof(GetScaledTimelineLength)); }
        public float GetPlayRate() { return Invoke<float>(nameof(GetPlayRate)); }
        public float GetPlaybackPosition() { return Invoke<float>(nameof(GetPlaybackPosition)); }
        public bool GetIgnoreTimeDilation() { return Invoke<bool>(nameof(GetIgnoreTimeDilation)); }
    }
    public class TriggerBase : Actor
    {
        public TriggerBase(nint addr) : base(addr) { }
        public ShapeComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<ShapeComponent>(); } set { this["CollisionComponent"] = value; } }
    }
    public class TriggerBox : TriggerBase
    {
        public TriggerBox(nint addr) : base(addr) { }
    }
    public class TriggerCapsule : TriggerBase
    {
        public TriggerCapsule(nint addr) : base(addr) { }
    }
    public class TriggerSphere : TriggerBase
    {
        public TriggerSphere(nint addr) : base(addr) { }
    }
    public class TwitterIntegrationBase : PlatformInterfaceBase
    {
        public TwitterIntegrationBase(nint addr) : base(addr) { }
        public bool TwitterRequest(Object URL, Array<Object> ParamKeysAndValues, byte RequestMethod, int AccountIndex) { return Invoke<bool>(nameof(TwitterRequest), URL, ParamKeysAndValues, RequestMethod, AccountIndex); }
        public bool ShowTweetUI(Object InitialMessage, Object URL, Object Picture) { return Invoke<bool>(nameof(ShowTweetUI), InitialMessage, URL, Picture); }
        public void Init() { Invoke(nameof(Init)); }
        public int GetNumAccounts() { return Invoke<int>(nameof(GetNumAccounts)); }
        public Object GetAccountName(int AccountIndex) { return Invoke<Object>(nameof(GetAccountName), AccountIndex); }
        public bool CanShowTweetUI() { return Invoke<bool>(nameof(CanShowTweetUI)); }
        public bool AuthorizeAccounts() { return Invoke<bool>(nameof(AuthorizeAccounts)); }
    }
    public class UserDefinedStruct : ScriptStruct
    {
        public UserDefinedStruct(nint addr) : base(addr) { }
        public byte Status { get { return this[nameof(Status)].GetValue<byte>(); } set { this[nameof(Status)].SetValue<byte>(value); } }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
    }
    public class VectorField : Object
    {
        public VectorField(nint addr) : base(addr) { }
        public Box Bounds { get { return this[nameof(Bounds)].As<Box>(); } set { this["Bounds"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
    }
    public class VectorFieldAnimated : VectorField
    {
        public VectorFieldAnimated(nint addr) : base(addr) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public byte ConstructionOp { get { return this[nameof(ConstructionOp)].GetValue<byte>(); } set { this[nameof(ConstructionOp)].SetValue<byte>(value); } }
        public int VolumeSizeX { get { return this[nameof(VolumeSizeX)].GetValue<int>(); } set { this[nameof(VolumeSizeX)].SetValue<int>(value); } }
        public int VolumeSizeY { get { return this[nameof(VolumeSizeY)].GetValue<int>(); } set { this[nameof(VolumeSizeY)].SetValue<int>(value); } }
        public int VolumeSizeZ { get { return this[nameof(VolumeSizeZ)].GetValue<int>(); } set { this[nameof(VolumeSizeZ)].SetValue<int>(value); } }
        public int SubImagesX { get { return this[nameof(SubImagesX)].GetValue<int>(); } set { this[nameof(SubImagesX)].SetValue<int>(value); } }
        public int SubImagesY { get { return this[nameof(SubImagesY)].GetValue<int>(); } set { this[nameof(SubImagesY)].SetValue<int>(value); } }
        public int FrameCount { get { return this[nameof(FrameCount)].GetValue<int>(); } set { this[nameof(FrameCount)].SetValue<int>(value); } }
        public float FramesPerSecond { get { return this[nameof(FramesPerSecond)].GetValue<float>(); } set { this[nameof(FramesPerSecond)].SetValue<float>(value); } }
        public bool bLoop { get { return this[nameof(bLoop)].Flag; } set { this[nameof(bLoop)].Flag = value; } }
        public VectorFieldStatic NoiseField { get { return this[nameof(NoiseField)].As<VectorFieldStatic>(); } set { this["NoiseField"] = value; } }
        public float NoiseScale { get { return this[nameof(NoiseScale)].GetValue<float>(); } set { this[nameof(NoiseScale)].SetValue<float>(value); } }
        public float NoiseMax { get { return this[nameof(NoiseMax)].GetValue<float>(); } set { this[nameof(NoiseMax)].SetValue<float>(value); } }
    }
    public class VectorFieldComponent : PrimitiveComponent
    {
        public VectorFieldComponent(nint addr) : base(addr) { }
        public VectorField VectorField { get { return this[nameof(VectorField)].As<VectorField>(); } set { this["VectorField"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Tightness { get { return this[nameof(Tightness)].GetValue<float>(); } set { this[nameof(Tightness)].SetValue<float>(value); } }
        public bool bPreviewVectorField { get { return this[nameof(bPreviewVectorField)].Flag; } set { this[nameof(bPreviewVectorField)].Flag = value; } }
        public void SetIntensity(float NewIntensity) { Invoke(nameof(SetIntensity), NewIntensity); }
    }
    public class VectorFieldStatic : VectorField
    {
        public VectorFieldStatic(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public int SizeZ { get { return this[nameof(SizeZ)].GetValue<int>(); } set { this[nameof(SizeZ)].SetValue<int>(value); } }
        public bool bAllowCPUAccess { get { return this[nameof(bAllowCPUAccess)].Flag; } set { this[nameof(bAllowCPUAccess)].Flag = value; } }
    }
    public class VisualLoggerDebugSnapshotInterface : Interface
    {
        public VisualLoggerDebugSnapshotInterface(nint addr) : base(addr) { }
    }
    public class WindDirectionalSourceComponent : SceneComponent
    {
        public WindDirectionalSourceComponent(nint addr) : base(addr) { }
        public float Strength { get { return this[nameof(Strength)].GetValue<float>(); } set { this[nameof(Strength)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float MinGustAmount { get { return this[nameof(MinGustAmount)].GetValue<float>(); } set { this[nameof(MinGustAmount)].SetValue<float>(value); } }
        public float MaxGustAmount { get { return this[nameof(MaxGustAmount)].GetValue<float>(); } set { this[nameof(MaxGustAmount)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public bool bPointWind { get { return this[nameof(bPointWind)].Flag; } set { this[nameof(bPointWind)].Flag = value; } }
        public void SetWindType(EWindSourceType InNewType) { Invoke(nameof(SetWindType), InNewType); }
        public void SetStrength(float InNewStrength) { Invoke(nameof(SetStrength), InNewStrength); }
        public void SetSpeed(float InNewSpeed) { Invoke(nameof(SetSpeed), InNewSpeed); }
        public void SetRadius(float InNewRadius) { Invoke(nameof(SetRadius), InNewRadius); }
        public void SetMinimumGustAmount(float InNewMinGust) { Invoke(nameof(SetMinimumGustAmount), InNewMinGust); }
        public void SetMaximumGustAmount(float InNewMaxGust) { Invoke(nameof(SetMaximumGustAmount), InNewMaxGust); }
    }
    public class WorldPartitionEditorLoaderAdapter : Object
    {
        public WorldPartitionEditorLoaderAdapter(nint addr) : base(addr) { }
    }
    public class WorldPartitionRuntimeCellOwner : Interface
    {
        public WorldPartitionRuntimeCellOwner(nint addr) : base(addr) { }
    }
    public class HierarchicalLODSetup : Object
    {
        public HierarchicalLODSetup(nint addr) : base(addr) { }
        public Array<HierarchicalSimplification> HierarchicalLODSetup_value { get { return new Array<HierarchicalSimplification>(this[nameof(HierarchicalLODSetup)].Address); } }
        public Object OverrideBaseMaterial { get { return this[nameof(OverrideBaseMaterial)]; } set { this[nameof(OverrideBaseMaterial)] = value; } }
    }
    public class Texture2DArray : Texture
    {
        public Texture2DArray(nint addr) : base(addr) { }
        public byte AddressX { get { return this[nameof(AddressX)].GetValue<byte>(); } set { this[nameof(AddressX)].SetValue<byte>(value); } }
        public byte AddressY { get { return this[nameof(AddressY)].GetValue<byte>(); } set { this[nameof(AddressY)].SetValue<byte>(value); } }
        public byte AddressZ { get { return this[nameof(AddressZ)].GetValue<byte>(); } set { this[nameof(AddressZ)].SetValue<byte>(value); } }
    }
    public class Level : Object
    {
        public Level(nint addr) : base(addr) { }
        public World OwningWorld { get { return this[nameof(OwningWorld)].As<World>(); } set { this["OwningWorld"] = value; } }
        public Model Model { get { return this[nameof(Model)].As<Model>(); } set { this["Model"] = value; } }
        public Array<ModelComponent> ModelComponents { get { return new Array<ModelComponent>(this[nameof(ModelComponents)].Address); } }
        public LevelActorContainer ActorCluster { get { return this[nameof(ActorCluster)].As<LevelActorContainer>(); } set { this["ActorCluster"] = value; } }
        public int NumTextureStreamingUnbuiltComponents { get { return this[nameof(NumTextureStreamingUnbuiltComponents)].GetValue<int>(); } set { this[nameof(NumTextureStreamingUnbuiltComponents)].SetValue<int>(value); } }
        public int NumTextureStreamingDirtyResources { get { return this[nameof(NumTextureStreamingDirtyResources)].GetValue<int>(); } set { this[nameof(NumTextureStreamingDirtyResources)].SetValue<int>(value); } }
        public LevelScriptActor LevelScriptActor { get { return this[nameof(LevelScriptActor)].As<LevelScriptActor>(); } set { this["LevelScriptActor"] = value; } }
        public NavigationObjectBase NavListStart { get { return this[nameof(NavListStart)].As<NavigationObjectBase>(); } set { this["NavListStart"] = value; } }
        public NavigationObjectBase NavListEnd { get { return this[nameof(NavListEnd)].As<NavigationObjectBase>(); } set { this["NavListEnd"] = value; } }
        public Array<NavigationDataChunk> NavDataChunks { get { return new Array<NavigationDataChunk>(this[nameof(NavDataChunks)].Address); } }
        public float LightmapTotalSize { get { return this[nameof(LightmapTotalSize)].GetValue<float>(); } set { this[nameof(LightmapTotalSize)].SetValue<float>(value); } }
        public float ShadowmapTotalSize { get { return this[nameof(ShadowmapTotalSize)].GetValue<float>(); } set { this[nameof(ShadowmapTotalSize)].SetValue<float>(value); } }
        public Array<Vector> StaticNavigableGeometry { get { return new Array<Vector>(this[nameof(StaticNavigableGeometry)].Address); } }
        public Array<Guid> StreamingTextureGuids { get { return new Array<Guid>(this[nameof(StreamingTextureGuids)].Address); } }
        public Array<Object> StreamingTextures { get { return new Array<Object>(this[nameof(StreamingTextures)].Address); } }
        public uint PackedTextureStreamingQualityLevelFeatureLevel { get { return this[nameof(PackedTextureStreamingQualityLevelFeatureLevel)].GetValue<uint>(); } set { this[nameof(PackedTextureStreamingQualityLevelFeatureLevel)].SetValue<uint>(value); } }
        public Guid LevelBuildDataId { get { return this[nameof(LevelBuildDataId)].As<Guid>(); } set { this["LevelBuildDataId"] = value; } }
        public MapBuildDataRegistry MapBuildData { get { return this[nameof(MapBuildData)].As<MapBuildDataRegistry>(); } set { this["MapBuildData"] = value; } }
        public IntVector LightBuildLevelOffset { get { return this[nameof(LightBuildLevelOffset)].As<IntVector>(); } set { this["LightBuildLevelOffset"] = value; } }
        public bool bIsLightingScenario { get { return this[nameof(bIsLightingScenario)].Flag; } set { this[nameof(bIsLightingScenario)].Flag = value; } }
        public bool bTextureStreamingRotationChanged { get { return this[nameof(bTextureStreamingRotationChanged)].Flag; } set { this[nameof(bTextureStreamingRotationChanged)].Flag = value; } }
        public bool bStaticComponentsRegisteredInStreamingManager { get { return this[nameof(bStaticComponentsRegisteredInStreamingManager)].Flag; } set { this[nameof(bStaticComponentsRegisteredInStreamingManager)].Flag = value; } }
        public bool bIsVisible { get { return this[nameof(bIsVisible)].Flag; } set { this[nameof(bIsVisible)].Flag = value; } }
        public bool bIsPartitioned { get { return this[nameof(bIsPartitioned)].Flag; } set { this[nameof(bIsPartitioned)].Flag = value; } }
        public WorldSettings WorldSettings { get { return this[nameof(WorldSettings)].As<WorldSettings>(); } set { this["WorldSettings"] = value; } }
        public WorldDataLayers WorldDataLayers { get { return this[nameof(WorldDataLayers)].As<WorldDataLayers>(); } set { this["WorldDataLayers"] = value; } }
        public Object WorldPartitionRuntimeCell { get { return this[nameof(WorldPartitionRuntimeCell)]; } set { this[nameof(WorldPartitionRuntimeCell)] = value; } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public Array<ReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors { get { return new Array<ReplicatedStaticActorDestructionInfo>(this[nameof(DestroyedReplicatedStaticActors)].Address); } }
    }
    public class ActorFolder : Object
    {
        public ActorFolder(nint addr) : base(addr) { }
    }
    public class ActorPartitionSubsystem : WorldSubsystem
    {
        public ActorPartitionSubsystem(nint addr) : base(addr) { }
    }
    public class AISystemBase : Object
    {
        public AISystemBase(nint addr) : base(addr) { }
        public SoftClassPath AISystemClassName { get { return this[nameof(AISystemClassName)].As<SoftClassPath>(); } set { this["AISystemClassName"] = value; } }
        public Object AISystemModuleName { get { return this[nameof(AISystemModuleName)]; } set { this[nameof(AISystemModuleName)] = value; } }
        public bool bInstantiateAISystemOnClient { get { return this[nameof(bInstantiateAISystemOnClient)].Flag; } set { this[nameof(bInstantiateAISystemOnClient)].Flag = value; } }
    }
    public class NavigationSystemConfig : Object
    {
        public NavigationSystemConfig(nint addr) : base(addr) { }
        public SoftClassPath NavigationSystemClass { get { return this[nameof(NavigationSystemClass)].As<SoftClassPath>(); } set { this["NavigationSystemClass"] = value; } }
        public NavAgentSelector SupportedAgentsMask { get { return this[nameof(SupportedAgentsMask)].As<NavAgentSelector>(); } set { this["SupportedAgentsMask"] = value; } }
        public Object DefaultAgentName { get { return this[nameof(DefaultAgentName)]; } set { this[nameof(DefaultAgentName)] = value; } }
        public bool bIsOverriden { get { return this[nameof(bIsOverriden)].Flag; } set { this[nameof(bIsOverriden)].Flag = value; } }
    }
    public class NullNavSysConfig : NavigationSystemConfig
    {
        public NullNavSysConfig(nint addr) : base(addr) { }
    }
    public class AvoidanceManager : Object
    {
        public AvoidanceManager(nint addr) : base(addr) { }
        public float DefaultTimeToLive { get { return this[nameof(DefaultTimeToLive)].GetValue<float>(); } set { this[nameof(DefaultTimeToLive)].SetValue<float>(value); } }
        public float LockTimeAfterAvoid { get { return this[nameof(LockTimeAfterAvoid)].GetValue<float>(); } set { this[nameof(LockTimeAfterAvoid)].SetValue<float>(value); } }
        public float LockTimeAfterClean { get { return this[nameof(LockTimeAfterClean)].GetValue<float>(); } set { this[nameof(LockTimeAfterClean)].SetValue<float>(value); } }
        public float DeltaTimeToPredict { get { return this[nameof(DeltaTimeToPredict)].GetValue<float>(); } set { this[nameof(DeltaTimeToPredict)].SetValue<float>(value); } }
        public float ArtificialRadiusExpansion { get { return this[nameof(ArtificialRadiusExpansion)].GetValue<float>(); } set { this[nameof(ArtificialRadiusExpansion)].SetValue<float>(value); } }
        public float TestHeightDifference { get { return this[nameof(TestHeightDifference)].GetValue<float>(); } set { this[nameof(TestHeightDifference)].SetValue<float>(value); } }
        public float HeightCheckMargin { get { return this[nameof(HeightCheckMargin)].GetValue<float>(); } set { this[nameof(HeightCheckMargin)].SetValue<float>(value); } }
        public bool RegisterMovementComponent(MovementComponent MovementComp, float AvoidanceWeight) { return Invoke<bool>(nameof(RegisterMovementComponent), MovementComp, AvoidanceWeight); }
        public int GetObjectCount() { return Invoke<int>(nameof(GetObjectCount)); }
        public int GetNewAvoidanceUID() { return Invoke<int>(nameof(GetNewAvoidanceUID)); }
        public Vector GetAvoidanceVelocityForComponent(MovementComponent MovementComp) { return Invoke<Vector>(nameof(GetAvoidanceVelocityForComponent), MovementComp); }
    }
    public class NavCollisionBase : Object
    {
        public NavCollisionBase(nint addr) : base(addr) { }
        public bool bIsDynamicObstacle { get { return this[nameof(bIsDynamicObstacle)].Flag; } set { this[nameof(bIsDynamicObstacle)].Flag = value; } }
    }
    public class NavigationDataChunk : Object
    {
        public NavigationDataChunk(nint addr) : base(addr) { }
        public Object NavigationDataName { get { return this[nameof(NavigationDataName)]; } set { this[nameof(NavigationDataName)] = value; } }
    }
    public class AmbientSound : Actor
    {
        public AmbientSound(nint addr) : base(addr) { }
        public AudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponent>(); } set { this["AudioComponent"] = value; } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void Play(float StartTime) { Invoke(nameof(Play), StartTime); }
        public void FadeOut(float FadeOutDuration, float FadeVolumeLevel) { Invoke(nameof(FadeOut), FadeOutDuration, FadeVolumeLevel); }
        public void FadeIn(float FadeInDuration, float FadeVolumeLevel) { Invoke(nameof(FadeIn), FadeInDuration, FadeVolumeLevel); }
        public void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel) { Invoke(nameof(AdjustVolume), AdjustVolumeDuration, AdjustVolumeLevel); }
    }
    public class AimOffsetBlendSpace : BlendSpace
    {
        public AimOffsetBlendSpace(nint addr) : base(addr) { }
    }
    public class BlendSpace1D : BlendSpace
    {
        public BlendSpace1D(nint addr) : base(addr) { }
        public bool bScaleAnimation { get { return this[nameof(bScaleAnimation)].Flag; } set { this[nameof(bScaleAnimation)].Flag = value; } }
    }
    public class AimOffsetBlendSpace1D : BlendSpace1D
    {
        public AimOffsetBlendSpace1D(nint addr) : base(addr) { }
    }
    public class AnimationSettings : DeveloperSettings
    {
        public AnimationSettings(nint addr) : base(addr) { }
        public int CompressCommandletVersion { get { return this[nameof(CompressCommandletVersion)].GetValue<int>(); } set { this[nameof(CompressCommandletVersion)].SetValue<int>(value); } }
        public Array<Object> KeyEndEffectorsMatchNameArray { get { return new Array<Object>(this[nameof(KeyEndEffectorsMatchNameArray)].Address); } }
        public bool ForceRecompression { get { return this[nameof(ForceRecompression)].Flag; } set { this[nameof(ForceRecompression)].Flag = value; } }
        public bool bForceBelowThreshold { get { return this[nameof(bForceBelowThreshold)].Flag; } set { this[nameof(bForceBelowThreshold)].Flag = value; } }
        public bool bFirstRecompressUsingCurrentOrDefault { get { return this[nameof(bFirstRecompressUsingCurrentOrDefault)].Flag; } set { this[nameof(bFirstRecompressUsingCurrentOrDefault)].Flag = value; } }
        public bool bRaiseMaxErrorToExisting { get { return this[nameof(bRaiseMaxErrorToExisting)].Flag; } set { this[nameof(bRaiseMaxErrorToExisting)].Flag = value; } }
        public bool bEnablePerformanceLog { get { return this[nameof(bEnablePerformanceLog)].Flag; } set { this[nameof(bEnablePerformanceLog)].Flag = value; } }
        public bool bStripAnimationDataOnDedicatedServer { get { return this[nameof(bStripAnimationDataOnDedicatedServer)].Flag; } set { this[nameof(bStripAnimationDataOnDedicatedServer)].Flag = value; } }
        public bool bTickAnimationOnSkeletalMeshInit { get { return this[nameof(bTickAnimationOnSkeletalMeshInit)].Flag; } set { this[nameof(bTickAnimationOnSkeletalMeshInit)].Flag = value; } }
        public TimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings { get { return this[nameof(BoneTimecodeCustomAttributeNameSettings)].As<TimecodeCustomAttributeNameSettings>(); } set { this["BoneTimecodeCustomAttributeNameSettings"] = value; } }
        public Array<CustomAttributeSetting> BoneCustomAttributesNames { get { return new Array<CustomAttributeSetting>(this[nameof(BoneCustomAttributesNames)].Address); } }
        public Array<Object> BoneNamesWithCustomAttributes { get { return new Array<Object>(this[nameof(BoneNamesWithCustomAttributes)].Address); } }
        public Object AttributeBlendModes { get { return this[nameof(AttributeBlendModes)]; } set { this[nameof(AttributeBlendModes)] = value; } }
        public ECustomAttributeBlendType DefaultAttributeBlendMode { get { return (ECustomAttributeBlendType)this[nameof(DefaultAttributeBlendMode)].GetValue<int>(); } set { this[nameof(DefaultAttributeBlendMode)].SetValue<int>((int)value); } }
        public Array<Object> TransformAttributeNames { get { return new Array<Object>(this[nameof(TransformAttributeNames)].Address); } }
        public Array<Object> UserDefinedStructAttributes { get { return new Array<Object>(this[nameof(UserDefinedStructAttributes)].Address); } }
        public Array<MirrorFindReplaceExpression> MirrorFindReplaceExpressions { get { return new Array<MirrorFindReplaceExpression>(this[nameof(MirrorFindReplaceExpressions)].Address); } }
        public Array<Object> GetBoneCustomAttributeNamesToImport() { return Invoke<Array<Object>>(nameof(GetBoneCustomAttributeNamesToImport)); }
    }
    public class AnimBlueprintGeneratedStruct : ScriptStruct
    {
        public AnimBlueprintGeneratedStruct(nint addr) : base(addr) { }
    }
    public class AnimBlueprintGeneratedClass : BlueprintGeneratedClass
    {
        public AnimBlueprintGeneratedClass(nint addr) : base(addr) { }
        public Array<BakedAnimationStateMachine> BakedStateMachines { get { return new Array<BakedAnimationStateMachine>(this[nameof(BakedStateMachines)].Address); } }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimNotifyEvent> AnimNotifies { get { return new Array<AnimNotifyEvent>(this[nameof(AnimNotifies)].Address); } }
        public Object OrderedSavedPoseIndicesMap { get { return this[nameof(OrderedSavedPoseIndicesMap)]; } set { this[nameof(OrderedSavedPoseIndicesMap)] = value; } }
        public Array<Object> SyncGroupNames { get { return new Array<Object>(this[nameof(SyncGroupNames)].Address); } }
        public Object GraphAssetPlayerInformation { get { return this[nameof(GraphAssetPlayerInformation)]; } set { this[nameof(GraphAssetPlayerInformation)] = value; } }
        public Object GraphBlendOptions { get { return this[nameof(GraphBlendOptions)]; } set { this[nameof(GraphBlendOptions)] = value; } }
        public Array<AnimNodeData> AnimNodeData { get { return new Array<AnimNodeData>(this[nameof(AnimNodeData)].Address); } }
        public Object NodeTypeMap { get { return this[nameof(NodeTypeMap)]; } set { this[nameof(NodeTypeMap)] = value; } }
    }
    public class AnimBoneCompressionCodec : Object
    {
        public AnimBoneCompressionCodec(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
    }
    public class AnimBoneCompressionSettings : Object
    {
        public AnimBoneCompressionSettings(nint addr) : base(addr) { }
        public Array<AnimBoneCompressionCodec> Codecs { get { return new Array<AnimBoneCompressionCodec>(this[nameof(Codecs)].Address); } }
    }
    public class AnimClassData : Object
    {
        public AnimClassData(nint addr) : base(addr) { }
        public Array<BakedAnimationStateMachine> BakedStateMachines { get { return new Array<BakedAnimationStateMachine>(this[nameof(BakedStateMachines)].Address); } }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimNotifyEvent> AnimNotifies { get { return new Array<AnimNotifyEvent>(this[nameof(AnimNotifies)].Address); } }
        public Object OrderedSavedPoseIndicesMap { get { return this[nameof(OrderedSavedPoseIndicesMap)]; } set { this[nameof(OrderedSavedPoseIndicesMap)] = value; } }
        public Array<AnimBlueprintFunction> AnimBlueprintFunctions { get { return new Array<AnimBlueprintFunction>(this[nameof(AnimBlueprintFunctions)].Address); } }
        public Array<AnimBlueprintFunctionData> AnimBlueprintFunctionData { get { return new Array<AnimBlueprintFunctionData>(this[nameof(AnimBlueprintFunctionData)].Address); } }
        public Array<Object> AnimNodeProperties { get { return new Array<Object>(this[nameof(AnimNodeProperties)].Address); } }
        public Array<Object> LinkedAnimGraphNodeProperties { get { return new Array<Object>(this[nameof(LinkedAnimGraphNodeProperties)].Address); } }
        public Array<Object> LinkedAnimLayerNodeProperties { get { return new Array<Object>(this[nameof(LinkedAnimLayerNodeProperties)].Address); } }
        public Array<Object> PreUpdateNodeProperties { get { return new Array<Object>(this[nameof(PreUpdateNodeProperties)].Address); } }
        public Array<Object> DynamicResetNodeProperties { get { return new Array<Object>(this[nameof(DynamicResetNodeProperties)].Address); } }
        public Array<Object> StateMachineNodeProperties { get { return new Array<Object>(this[nameof(StateMachineNodeProperties)].Address); } }
        public Array<Object> InitializationNodeProperties { get { return new Array<Object>(this[nameof(InitializationNodeProperties)].Address); } }
        public Object GraphNameAssetPlayers { get { return this[nameof(GraphNameAssetPlayers)]; } set { this[nameof(GraphNameAssetPlayers)] = value; } }
        public Array<Object> SyncGroupNames { get { return new Array<Object>(this[nameof(SyncGroupNames)].Address); } }
        public Object GraphBlendOptions { get { return this[nameof(GraphBlendOptions)]; } set { this[nameof(GraphBlendOptions)] = value; } }
    }
    public class AnimClassInterface : Interface
    {
        public AnimClassInterface(nint addr) : base(addr) { }
    }
    public class AnimCompositeBase : AnimSequenceBase
    {
        public AnimCompositeBase(nint addr) : base(addr) { }
    }
    public class AnimComposite : AnimCompositeBase
    {
        public AnimComposite(nint addr) : base(addr) { }
        public AnimTrack AnimationTrack { get { return this[nameof(AnimationTrack)].As<AnimTrack>(); } set { this["AnimationTrack"] = value; } }
    }
    public class AnimCompress : AnimBoneCompressionCodec
    {
        public AnimCompress(nint addr) : base(addr) { }
        public bool bNeedsSkeleton { get { return this[nameof(bNeedsSkeleton)].Flag; } set { this[nameof(bNeedsSkeleton)].Flag = value; } }
        public byte TranslationCompressionFormat { get { return this[nameof(TranslationCompressionFormat)].GetValue<byte>(); } set { this[nameof(TranslationCompressionFormat)].SetValue<byte>(value); } }
        public byte RotationCompressionFormat { get { return this[nameof(RotationCompressionFormat)].GetValue<byte>(); } set { this[nameof(RotationCompressionFormat)].SetValue<byte>(value); } }
        public byte ScaleCompressionFormat { get { return this[nameof(ScaleCompressionFormat)].GetValue<byte>(); } set { this[nameof(ScaleCompressionFormat)].SetValue<byte>(value); } }
    }
    public class AnimCompress_BitwiseCompressOnly : AnimCompress
    {
        public AnimCompress_BitwiseCompressOnly(nint addr) : base(addr) { }
    }
    public class AnimCompress_LeastDestructive : AnimCompress_BitwiseCompressOnly
    {
        public AnimCompress_LeastDestructive(nint addr) : base(addr) { }
    }
    public class AnimCompress_RemoveLinearKeys : AnimCompress
    {
        public AnimCompress_RemoveLinearKeys(nint addr) : base(addr) { }
        public float MaxPosDiff { get { return this[nameof(MaxPosDiff)].GetValue<float>(); } set { this[nameof(MaxPosDiff)].SetValue<float>(value); } }
        public float MaxAngleDiff { get { return this[nameof(MaxAngleDiff)].GetValue<float>(); } set { this[nameof(MaxAngleDiff)].SetValue<float>(value); } }
        public float MaxScaleDiff { get { return this[nameof(MaxScaleDiff)].GetValue<float>(); } set { this[nameof(MaxScaleDiff)].SetValue<float>(value); } }
        public float MaxEffectorDiff { get { return this[nameof(MaxEffectorDiff)].GetValue<float>(); } set { this[nameof(MaxEffectorDiff)].SetValue<float>(value); } }
        public float MinEffectorDiff { get { return this[nameof(MinEffectorDiff)].GetValue<float>(); } set { this[nameof(MinEffectorDiff)].SetValue<float>(value); } }
        public float EffectorDiffSocket { get { return this[nameof(EffectorDiffSocket)].GetValue<float>(); } set { this[nameof(EffectorDiffSocket)].SetValue<float>(value); } }
        public float ParentKeyScale { get { return this[nameof(ParentKeyScale)].GetValue<float>(); } set { this[nameof(ParentKeyScale)].SetValue<float>(value); } }
        public bool bRetarget { get { return this[nameof(bRetarget)].Flag; } set { this[nameof(bRetarget)].Flag = value; } }
        public bool bActuallyFilterLinearKeys { get { return this[nameof(bActuallyFilterLinearKeys)].Flag; } set { this[nameof(bActuallyFilterLinearKeys)].Flag = value; } }
    }
    public class AnimCompress_PerTrackCompression : AnimCompress_RemoveLinearKeys
    {
        public AnimCompress_PerTrackCompression(nint addr) : base(addr) { }
        public float MaxZeroingThreshold { get { return this[nameof(MaxZeroingThreshold)].GetValue<float>(); } set { this[nameof(MaxZeroingThreshold)].SetValue<float>(value); } }
        public float MaxPosDiffBitwise { get { return this[nameof(MaxPosDiffBitwise)].GetValue<float>(); } set { this[nameof(MaxPosDiffBitwise)].SetValue<float>(value); } }
        public float MaxAngleDiffBitwise { get { return this[nameof(MaxAngleDiffBitwise)].GetValue<float>(); } set { this[nameof(MaxAngleDiffBitwise)].SetValue<float>(value); } }
        public float MaxScaleDiffBitwise { get { return this[nameof(MaxScaleDiffBitwise)].GetValue<float>(); } set { this[nameof(MaxScaleDiffBitwise)].SetValue<float>(value); } }
        public Array<byte> AllowedRotationFormats { get { return new Array<byte>(this[nameof(AllowedRotationFormats)].Address); } }
        public Array<byte> AllowedTranslationFormats { get { return new Array<byte>(this[nameof(AllowedTranslationFormats)].Address); } }
        public Array<byte> AllowedScaleFormats { get { return new Array<byte>(this[nameof(AllowedScaleFormats)].Address); } }
        public bool bResampleAnimation { get { return this[nameof(bResampleAnimation)].Flag; } set { this[nameof(bResampleAnimation)].Flag = value; } }
        public float ResampledFramerate { get { return this[nameof(ResampledFramerate)].GetValue<float>(); } set { this[nameof(ResampledFramerate)].SetValue<float>(value); } }
        public int MinKeysForResampling { get { return this[nameof(MinKeysForResampling)].GetValue<int>(); } set { this[nameof(MinKeysForResampling)].SetValue<int>(value); } }
        public bool bUseAdaptiveError { get { return this[nameof(bUseAdaptiveError)].Flag; } set { this[nameof(bUseAdaptiveError)].Flag = value; } }
        public bool bUseOverrideForEndEffectors { get { return this[nameof(bUseOverrideForEndEffectors)].Flag; } set { this[nameof(bUseOverrideForEndEffectors)].Flag = value; } }
        public int TrackHeightBias { get { return this[nameof(TrackHeightBias)].GetValue<int>(); } set { this[nameof(TrackHeightBias)].SetValue<int>(value); } }
        public float ParentingDivisor { get { return this[nameof(ParentingDivisor)].GetValue<float>(); } set { this[nameof(ParentingDivisor)].SetValue<float>(value); } }
        public float ParentingDivisorExponent { get { return this[nameof(ParentingDivisorExponent)].GetValue<float>(); } set { this[nameof(ParentingDivisorExponent)].SetValue<float>(value); } }
        public bool bUseAdaptiveError2 { get { return this[nameof(bUseAdaptiveError2)].Flag; } set { this[nameof(bUseAdaptiveError2)].Flag = value; } }
        public float RotationErrorSourceRatio { get { return this[nameof(RotationErrorSourceRatio)].GetValue<float>(); } set { this[nameof(RotationErrorSourceRatio)].SetValue<float>(value); } }
        public float TranslationErrorSourceRatio { get { return this[nameof(TranslationErrorSourceRatio)].GetValue<float>(); } set { this[nameof(TranslationErrorSourceRatio)].SetValue<float>(value); } }
        public float ScaleErrorSourceRatio { get { return this[nameof(ScaleErrorSourceRatio)].GetValue<float>(); } set { this[nameof(ScaleErrorSourceRatio)].SetValue<float>(value); } }
        public float MaxErrorPerTrackRatio { get { return this[nameof(MaxErrorPerTrackRatio)].GetValue<float>(); } set { this[nameof(MaxErrorPerTrackRatio)].SetValue<float>(value); } }
        public float PerturbationProbeSize { get { return this[nameof(PerturbationProbeSize)].GetValue<float>(); } set { this[nameof(PerturbationProbeSize)].SetValue<float>(value); } }
    }
    public class AnimCompress_RemoveEverySecondKey : AnimCompress
    {
        public AnimCompress_RemoveEverySecondKey(nint addr) : base(addr) { }
        public int MinKeys { get { return this[nameof(MinKeys)].GetValue<int>(); } set { this[nameof(MinKeys)].SetValue<int>(value); } }
        public bool bStartAtSecondKey { get { return this[nameof(bStartAtSecondKey)].Flag; } set { this[nameof(bStartAtSecondKey)].Flag = value; } }
    }
    public class AnimCompress_RemoveTrivialKeys : AnimCompress
    {
        public AnimCompress_RemoveTrivialKeys(nint addr) : base(addr) { }
        public float MaxPosDiff { get { return this[nameof(MaxPosDiff)].GetValue<float>(); } set { this[nameof(MaxPosDiff)].SetValue<float>(value); } }
        public float MaxAngleDiff { get { return this[nameof(MaxAngleDiff)].GetValue<float>(); } set { this[nameof(MaxAngleDiff)].SetValue<float>(value); } }
        public float MaxScaleDiff { get { return this[nameof(MaxScaleDiff)].GetValue<float>(); } set { this[nameof(MaxScaleDiff)].SetValue<float>(value); } }
    }
    public class AnimCurveCompressionCodec : Object
    {
        public AnimCurveCompressionCodec(nint addr) : base(addr) { }
    }
    public class AnimCurveCompressionCodec_CompressedRichCurve : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_CompressedRichCurve(nint addr) : base(addr) { }
    }
    public class AnimCurveCompressionCodec_UniformIndexable : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_UniformIndexable(nint addr) : base(addr) { }
    }
    public class AnimCurveCompressionCodec_UniformlySampled : AnimCurveCompressionCodec
    {
        public AnimCurveCompressionCodec_UniformlySampled(nint addr) : base(addr) { }
    }
    public class AnimCurveCompressionSettings : Object
    {
        public AnimCurveCompressionSettings(nint addr) : base(addr) { }
        public AnimCurveCompressionCodec Codec { get { return this[nameof(Codec)].As<AnimCurveCompressionCodec>(); } set { this["Codec"] = value; } }
    }
    public class AnimDataModel : Object
    {
        public AnimDataModel(nint addr) : base(addr) { }
        public int BracketCounter { get { return this[nameof(BracketCounter)].GetValue<int>(); } set { this[nameof(BracketCounter)].SetValue<int>(value); } }
        public Object ModifiedEventDynamic { get { return this[nameof(ModifiedEventDynamic)]; } set { this[nameof(ModifiedEventDynamic)] = value; } }
        public Array<BoneAnimationTrack> BoneAnimationTracks { get { return new Array<BoneAnimationTrack>(this[nameof(BoneAnimationTracks)].Address); } }
        public float PlayLength { get { return this[nameof(PlayLength)].GetValue<float>(); } set { this[nameof(PlayLength)].SetValue<float>(value); } }
        public FrameRate FrameRate { get { return this[nameof(FrameRate)].As<FrameRate>(); } set { this["FrameRate"] = value; } }
        public int NumberOfFrames { get { return this[nameof(NumberOfFrames)].GetValue<int>(); } set { this[nameof(NumberOfFrames)].SetValue<int>(value); } }
        public int NumberOfKeys { get { return this[nameof(NumberOfKeys)].GetValue<int>(); } set { this[nameof(NumberOfKeys)].SetValue<int>(value); } }
        public AnimationCurveData CurveData { get { return this[nameof(CurveData)].As<AnimationCurveData>(); } set { this["CurveData"] = value; } }
        public Array<AnimatedBoneAttribute> AnimatedBoneAttributes { get { return new Array<AnimatedBoneAttribute>(this[nameof(AnimatedBoneAttributes)].Address); } }
        public bool IsValidBoneTrackIndex(int TrackIndex) { return Invoke<bool>(nameof(IsValidBoneTrackIndex), TrackIndex); }
        public float GetPlayLength() { return Invoke<float>(nameof(GetPlayLength)); }
        public int GetNumBoneTracks() { return Invoke<int>(nameof(GetNumBoneTracks)); }
        public int GetNumberOfTransformCurves() { return Invoke<int>(nameof(GetNumberOfTransformCurves)); }
        public int GetNumberOfKeys() { return Invoke<int>(nameof(GetNumberOfKeys)); }
        public int GetNumberOfFrames() { return Invoke<int>(nameof(GetNumberOfFrames)); }
        public int GetNumberOfFloatCurves() { return Invoke<int>(nameof(GetNumberOfFloatCurves)); }
        public FrameRate GetFrameRate() { return Invoke<FrameRate>(nameof(GetFrameRate)); }
        public void GetBoneTrackNames(Array<Object> OutNames) { Invoke(nameof(GetBoneTrackNames), OutNames); }
        public int GetBoneTrackIndexByName(Object TrackName) { return Invoke<int>(nameof(GetBoneTrackIndexByName), TrackName); }
        public int GetBoneTrackIndex(BoneAnimationTrack Track) { return Invoke<int>(nameof(GetBoneTrackIndex), Track); }
        public BoneAnimationTrack GetBoneTrackByName(Object TrackName) { return Invoke<BoneAnimationTrack>(nameof(GetBoneTrackByName), TrackName); }
        public BoneAnimationTrack GetBoneTrackByIndex(int TrackIndex) { return Invoke<BoneAnimationTrack>(nameof(GetBoneTrackByIndex), TrackIndex); }
        public Array<BoneAnimationTrack> GetBoneAnimationTracks() { return Invoke<Array<BoneAnimationTrack>>(nameof(GetBoneAnimationTracks)); }
        public AnimSequence GetAnimationSequence() { return Invoke<AnimSequence>(nameof(GetAnimationSequence)); }
    }
    public class AnimMetaData : Object
    {
        public AnimMetaData(nint addr) : base(addr) { }
    }
    public class AnimMontage : AnimCompositeBase
    {
        public AnimMontage(nint addr) : base(addr) { }
        public EMontageBlendMode BlendModeIn { get { return (EMontageBlendMode)this[nameof(BlendModeIn)].GetValue<int>(); } set { this[nameof(BlendModeIn)].SetValue<int>((int)value); } }
        public EMontageBlendMode BlendModeOut { get { return (EMontageBlendMode)this[nameof(BlendModeOut)].GetValue<int>(); } set { this[nameof(BlendModeOut)].SetValue<int>((int)value); } }
        public AlphaBlend BlendIn { get { return this[nameof(BlendIn)].As<AlphaBlend>(); } set { this["BlendIn"] = value; } }
        public float BlendInTime { get { return this[nameof(BlendInTime)].GetValue<float>(); } set { this[nameof(BlendInTime)].SetValue<float>(value); } }
        public AlphaBlend BlendOut { get { return this[nameof(BlendOut)].As<AlphaBlend>(); } set { this["BlendOut"] = value; } }
        public float BlendOutTime { get { return this[nameof(BlendOutTime)].GetValue<float>(); } set { this[nameof(BlendOutTime)].SetValue<float>(value); } }
        public float BlendOutTriggerTime { get { return this[nameof(BlendOutTriggerTime)].GetValue<float>(); } set { this[nameof(BlendOutTriggerTime)].SetValue<float>(value); } }
        public Object SyncGroup { get { return this[nameof(SyncGroup)]; } set { this[nameof(SyncGroup)] = value; } }
        public int SyncSlotIndex { get { return this[nameof(SyncSlotIndex)].GetValue<int>(); } set { this[nameof(SyncSlotIndex)].SetValue<int>(value); } }
        public MarkerSyncData MarkerData { get { return this[nameof(MarkerData)].As<MarkerSyncData>(); } set { this["MarkerData"] = value; } }
        public Array<CompositeSection> CompositeSections { get { return new Array<CompositeSection>(this[nameof(CompositeSections)].Address); } }
        public Array<SlotAnimationTrack> SlotAnimTracks { get { return new Array<SlotAnimationTrack>(this[nameof(SlotAnimTracks)].Address); } }
        public Array<BranchingPoint> BranchingPoints { get { return new Array<BranchingPoint>(this[nameof(BranchingPoints)].Address); } }
        public bool bEnableRootMotionTranslation { get { return this[nameof(bEnableRootMotionTranslation)].Flag; } set { this[nameof(bEnableRootMotionTranslation)].Flag = value; } }
        public bool bEnableRootMotionRotation { get { return this[nameof(bEnableRootMotionRotation)].Flag; } set { this[nameof(bEnableRootMotionRotation)].Flag = value; } }
        public bool bEnableAutoBlendOut { get { return this[nameof(bEnableAutoBlendOut)].Flag; } set { this[nameof(bEnableAutoBlendOut)].Flag = value; } }
        public BlendProfile BlendProfileIn { get { return this[nameof(BlendProfileIn)].As<BlendProfile>(); } set { this["BlendProfileIn"] = value; } }
        public BlendProfile BlendProfileOut { get { return this[nameof(BlendProfileOut)].As<BlendProfile>(); } set { this["BlendProfileOut"] = value; } }
        public byte RootMotionRootLock { get { return this[nameof(RootMotionRootLock)].GetValue<byte>(); } set { this[nameof(RootMotionRootLock)].SetValue<byte>(value); } }
        public Array<BranchingPointMarker> BranchingPointMarkers { get { return new Array<BranchingPointMarker>(this[nameof(BranchingPointMarkers)].Address); } }
        public Array<int> BranchingPointStateNotifyIndices { get { return new Array<int>(this[nameof(BranchingPointStateNotifyIndices)].Address); } }
        public TimeStretchCurve TimeStretchCurve { get { return this[nameof(TimeStretchCurve)].As<TimeStretchCurve>(); } set { this["TimeStretchCurve"] = value; } }
        public Object TimeStretchCurveName { get { return this[nameof(TimeStretchCurveName)]; } set { this[nameof(TimeStretchCurveName)] = value; } }
        public bool IsValidSectionName(Object InSectionName) { return Invoke<bool>(nameof(IsValidSectionName), InSectionName); }
        public Object GetSectionName(int SectionIndex) { return Invoke<Object>(nameof(GetSectionName), SectionIndex); }
        public int GetSectionIndex(Object InSectionName) { return Invoke<int>(nameof(GetSectionIndex), InSectionName); }
        public int GetNumSections() { return Invoke<int>(nameof(GetNumSections)); }
        public float GetDefaultBlendOutTime() { return Invoke<float>(nameof(GetDefaultBlendOutTime)); }
        public float GetDefaultBlendInTime() { return Invoke<float>(nameof(GetDefaultBlendInTime)); }
        public AlphaBlendArgs GetBlendOutArgs() { return Invoke<AlphaBlendArgs>(nameof(GetBlendOutArgs)); }
        public AlphaBlendArgs GetBlendInArgs() { return Invoke<AlphaBlendArgs>(nameof(GetBlendInArgs)); }
        public AnimMontage CreateSlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase Asset, Object SlotNodeName, MontageBlendSettings BlendInSettings, MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float InBlendOutTriggerTime) { return Invoke<AnimMontage>(nameof(CreateSlotAnimationAsDynamicMontage_WithBlendSettings), Asset, SlotNodeName, BlendInSettings, BlendOutSettings, InPlayRate, LoopCount, InBlendOutTriggerTime); }
    }
    public class AnimNotifyLibrary : BlueprintFunctionLibrary
    {
        public AnimNotifyLibrary(nint addr) : base(addr) { }
        public bool NotifyStateReachedEnd(AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(NotifyStateReachedEnd), EventReference); }
    }
    public class AnimNotifyMirrorInspectionLibrary : BlueprintFunctionLibrary
    {
        public AnimNotifyMirrorInspectionLibrary(nint addr) : base(addr) { }
        public bool IsTriggeredByMirroredAnimation(AnimNotifyEventReference EventReference) { return Invoke<bool>(nameof(IsTriggeredByMirroredAnimation), EventReference); }
        public MirrorDataTable GetMirrorDataTable(AnimNotifyEventReference EventReference) { return Invoke<MirrorDataTable>(nameof(GetMirrorDataTable), EventReference); }
    }
    public class AnimNotifyStateMachineInspectionLibrary : BlueprintFunctionLibrary
    {
        public AnimNotifyStateMachineInspectionLibrary(nint addr) : base(addr) { }
        public bool IsTriggeredByStateMachine(AnimNotifyEventReference EventReference, AnimInstance AnimInstance, Object StateMachineName) { return Invoke<bool>(nameof(IsTriggeredByStateMachine), EventReference, AnimInstance, StateMachineName); }
        public bool IsTriggeredByStateInStateMachine(AnimNotifyEventReference EventReference, AnimInstance AnimInstance, Object StateMachineName, Object StateName) { return Invoke<bool>(nameof(IsTriggeredByStateInStateMachine), EventReference, AnimInstance, StateMachineName, StateName); }
        public bool IsTriggeredByState(AnimNotifyEventReference EventReference, AnimInstance AnimInstance, Object StateName) { return Invoke<bool>(nameof(IsTriggeredByState), EventReference, AnimInstance, StateName); }
    }
    public class AnimNotifyState_DisableRootMotion : AnimNotifyState
    {
        public AnimNotifyState_DisableRootMotion(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_TimedParticleEffect : AnimNotifyState
    {
        public AnimNotifyState_TimedParticleEffect(nint addr) : base(addr) { }
        public ParticleSystem PSTemplate { get { return this[nameof(PSTemplate)].As<ParticleSystem>(); } set { this["PSTemplate"] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool bDestroyAtEnd { get { return this[nameof(bDestroyAtEnd)].Flag; } set { this[nameof(bDestroyAtEnd)].Flag = value; } }
    }
    public class AnimNotifyState_Trail : AnimNotifyState
    {
        public AnimNotifyState_Trail(nint addr) : base(addr) { }
        public ParticleSystem PSTemplate { get { return this[nameof(PSTemplate)].As<ParticleSystem>(); } set { this["PSTemplate"] = value; } }
        public Object FirstSocketName { get { return this[nameof(FirstSocketName)]; } set { this[nameof(FirstSocketName)] = value; } }
        public Object SecondSocketName { get { return this[nameof(SecondSocketName)]; } set { this[nameof(SecondSocketName)] = value; } }
        public byte WidthScaleMode { get { return this[nameof(WidthScaleMode)].GetValue<byte>(); } set { this[nameof(WidthScaleMode)].SetValue<byte>(value); } }
        public Object WidthScaleCurve { get { return this[nameof(WidthScaleCurve)]; } set { this[nameof(WidthScaleCurve)] = value; } }
        public bool bRecycleSpawnedSystems { get { return this[nameof(bRecycleSpawnedSystems)].Flag; } set { this[nameof(bRecycleSpawnedSystems)].Flag = value; } }
        public ParticleSystem OverridePSTemplate(SkeletalMeshComponent MeshComp, AnimSequenceBase Animation) { return Invoke<ParticleSystem>(nameof(OverridePSTemplate), MeshComp, Animation); }
    }
    public class AnimNotify_PauseClothingSimulation : AnimNotify
    {
        public AnimNotify_PauseClothingSimulation(nint addr) : base(addr) { }
    }
    public class AnimNotify_PlayParticleEffect : AnimNotify
    {
        public AnimNotify_PlayParticleEffect(nint addr) : base(addr) { }
        public ParticleSystem PSTemplate { get { return this[nameof(PSTemplate)].As<ParticleSystem>(); } set { this["PSTemplate"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
    }
    public class AnimNotify_PlaySound : AnimNotify
    {
        public AnimNotify_PlaySound(nint addr) : base(addr) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public bool bFollow { get { return this[nameof(bFollow)].Flag; } set { this[nameof(bFollow)].Flag = value; } }
        public Object AttachName { get { return this[nameof(AttachName)]; } set { this[nameof(AttachName)] = value; } }
    }
    public class AnimNotify_ResetClothingSimulation : AnimNotify
    {
        public AnimNotify_ResetClothingSimulation(nint addr) : base(addr) { }
    }
    public class AnimNotify_ResetDynamics : AnimNotify
    {
        public AnimNotify_ResetDynamics(nint addr) : base(addr) { }
    }
    public class AnimNotify_ResumeClothingSimulation : AnimNotify
    {
        public AnimNotify_ResumeClothingSimulation(nint addr) : base(addr) { }
    }
    public class AnimSequence : AnimSequenceBase
    {
        public AnimSequence(nint addr) : base(addr) { }
        public AnimBoneCompressionSettings BoneCompressionSettings { get { return this[nameof(BoneCompressionSettings)].As<AnimBoneCompressionSettings>(); } set { this["BoneCompressionSettings"] = value; } }
        public AnimCurveCompressionSettings CurveCompressionSettings { get { return this[nameof(CurveCompressionSettings)].As<AnimCurveCompressionSettings>(); } set { this["CurveCompressionSettings"] = value; } }
        public byte AdditiveAnimType { get { return this[nameof(AdditiveAnimType)].GetValue<byte>(); } set { this[nameof(AdditiveAnimType)].SetValue<byte>(value); } }
        public byte RefPoseType { get { return this[nameof(RefPoseType)].GetValue<byte>(); } set { this[nameof(RefPoseType)].SetValue<byte>(value); } }
        public int RefFrameIndex { get { return this[nameof(RefFrameIndex)].GetValue<int>(); } set { this[nameof(RefFrameIndex)].SetValue<int>(value); } }
        public AnimSequence RefPoseSeq { get { return this[nameof(RefPoseSeq)].As<AnimSequence>(); } set { this["RefPoseSeq"] = value; } }
        public Object RetargetSource { get { return this[nameof(RetargetSource)]; } set { this[nameof(RetargetSource)] = value; } }
        public Array<Transform> RetargetSourceAssetReferencePose { get { return new Array<Transform>(this[nameof(RetargetSourceAssetReferencePose)].Address); } }
        public EAnimInterpolationType Interpolation { get { return (EAnimInterpolationType)this[nameof(Interpolation)].GetValue<int>(); } set { this[nameof(Interpolation)].SetValue<int>((int)value); } }
        public bool bEnableRootMotion { get { return this[nameof(bEnableRootMotion)].Flag; } set { this[nameof(bEnableRootMotion)].Flag = value; } }
        public byte RootMotionRootLock { get { return this[nameof(RootMotionRootLock)].GetValue<byte>(); } set { this[nameof(RootMotionRootLock)].SetValue<byte>(value); } }
        public bool bForceRootLock { get { return this[nameof(bForceRootLock)].Flag; } set { this[nameof(bForceRootLock)].Flag = value; } }
        public bool bUseNormalizedRootMotionScale { get { return this[nameof(bUseNormalizedRootMotionScale)].Flag; } set { this[nameof(bUseNormalizedRootMotionScale)].Flag = value; } }
        public bool bRootMotionSettingsCopiedFromMontage { get { return this[nameof(bRootMotionSettingsCopiedFromMontage)].Flag; } set { this[nameof(bRootMotionSettingsCopiedFromMontage)].Flag = value; } }
        public Array<AnimSyncMarker> AuthoredSyncMarkers { get { return new Array<AnimSyncMarker>(this[nameof(AuthoredSyncMarkers)].Address); } }
        public FrameRate TargetFrameRate { get { return this[nameof(TargetFrameRate)].As<FrameRate>(); } set { this["TargetFrameRate"] = value; } }
        public Object AttributeCurves { get { return this[nameof(AttributeCurves)]; } set { this[nameof(AttributeCurves)] = value; } }
    }
    public class AnimSet : Object
    {
        public AnimSet(nint addr) : base(addr) { }
        public bool bAnimRotationOnly { get { return this[nameof(bAnimRotationOnly)].Flag; } set { this[nameof(bAnimRotationOnly)].Flag = value; } }
        public Array<Object> TrackBoneNames { get { return new Array<Object>(this[nameof(TrackBoneNames)].Address); } }
        public Array<AnimSetMeshLinkup> LinkupCache { get { return new Array<AnimSetMeshLinkup>(this[nameof(LinkupCache)].Address); } }
        public Array<byte> BoneUseAnimTranslation { get { return new Array<byte>(this[nameof(BoneUseAnimTranslation)].Address); } }
        public Array<byte> ForceUseMeshTranslation { get { return new Array<byte>(this[nameof(ForceUseMeshTranslation)].Address); } }
        public Array<Object> UseTranslationBoneNames { get { return new Array<Object>(this[nameof(UseTranslationBoneNames)].Address); } }
        public Array<Object> ForceMeshTranslationBoneNames { get { return new Array<Object>(this[nameof(ForceMeshTranslationBoneNames)].Address); } }
        public Object PreviewSkelMeshName { get { return this[nameof(PreviewSkelMeshName)]; } set { this[nameof(PreviewSkelMeshName)] = value; } }
        public Object BestRatioSkelMeshName { get { return this[nameof(BestRatioSkelMeshName)]; } set { this[nameof(BestRatioSkelMeshName)] = value; } }
    }
    public class AnimSingleNodeInstance : AnimInstance
    {
        public AnimSingleNodeInstance(nint addr) : base(addr) { }
        public AnimationAsset CurrentAsset { get { return this[nameof(CurrentAsset)].As<AnimationAsset>(); } set { this["CurrentAsset"] = value; } }
        public Object PostEvaluateAnimEvent { get { return this[nameof(PostEvaluateAnimEvent)]; } set { this[nameof(PostEvaluateAnimEvent)] = value; } }
        public void StopAnim() { Invoke(nameof(StopAnim)); }
        public void SetReverse(bool bInReverse) { Invoke(nameof(SetReverse), bInReverse); }
        public void SetPreviewCurveOverride(Object PoseName, float Value, bool bRemoveIfZero) { Invoke(nameof(SetPreviewCurveOverride), PoseName, Value, bRemoveIfZero); }
        public void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies) { Invoke(nameof(SetPositionWithPreviousTime), InPosition, InPreviousTime, bFireNotifies); }
        public void SetPosition(float InPosition, bool bFireNotifies) { Invoke(nameof(SetPosition), InPosition, bFireNotifies); }
        public void SetPlayRate(float InPlayRate) { Invoke(nameof(SetPlayRate), InPlayRate); }
        public void SetPlaying(bool bIsPlaying) { Invoke(nameof(SetPlaying), bIsPlaying); }
        public void SetMirrorDataTable(MirrorDataTable MirrorDataTable) { Invoke(nameof(SetMirrorDataTable), MirrorDataTable); }
        public void SetLooping(bool bIsLooping) { Invoke(nameof(SetLooping), bIsLooping); }
        public void SetBlendSpacePosition(Vector InPosition) { Invoke(nameof(SetBlendSpacePosition), InPosition); }
        public void SetAnimationAsset(AnimationAsset NewAsset, bool bIsLooping, float InPlayRate) { Invoke(nameof(SetAnimationAsset), NewAsset, bIsLooping, InPlayRate); }
        public void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition) { Invoke(nameof(PlayAnim), bIsLooping, InPlayRate, InStartPosition); }
        public MirrorDataTable GetMirrorDataTable() { return Invoke<MirrorDataTable>(nameof(GetMirrorDataTable)); }
        public float GetLength() { return Invoke<float>(nameof(GetLength)); }
        public AnimationAsset GetAnimationAsset() { return Invoke<AnimationAsset>(nameof(GetAnimationAsset)); }
    }
    public class AnimStateMachineTypes : Object
    {
        public AnimStateMachineTypes(nint addr) : base(addr) { }
    }
    public class AnimStreamable : AnimSequenceBase
    {
        public AnimStreamable(nint addr) : base(addr) { }
        public int NumberOfKeys { get { return this[nameof(NumberOfKeys)].GetValue<int>(); } set { this[nameof(NumberOfKeys)].SetValue<int>(value); } }
        public EAnimInterpolationType Interpolation { get { return (EAnimInterpolationType)this[nameof(Interpolation)].GetValue<int>(); } set { this[nameof(Interpolation)].SetValue<int>((int)value); } }
        public Object RetargetSource { get { return this[nameof(RetargetSource)]; } set { this[nameof(RetargetSource)] = value; } }
        public AnimBoneCompressionSettings BoneCompressionSettings { get { return this[nameof(BoneCompressionSettings)].As<AnimBoneCompressionSettings>(); } set { this["BoneCompressionSettings"] = value; } }
        public AnimCurveCompressionSettings CurveCompressionSettings { get { return this[nameof(CurveCompressionSettings)].As<AnimCurveCompressionSettings>(); } set { this["CurveCompressionSettings"] = value; } }
        public bool bEnableRootMotion { get { return this[nameof(bEnableRootMotion)].Flag; } set { this[nameof(bEnableRootMotion)].Flag = value; } }
        public byte RootMotionRootLock { get { return this[nameof(RootMotionRootLock)].GetValue<byte>(); } set { this[nameof(RootMotionRootLock)].SetValue<byte>(value); } }
        public bool bForceRootLock { get { return this[nameof(bForceRootLock)].Flag; } set { this[nameof(bForceRootLock)].Flag = value; } }
        public bool bUseNormalizedRootMotionScale { get { return this[nameof(bUseNormalizedRootMotionScale)].Flag; } set { this[nameof(bUseNormalizedRootMotionScale)].Flag = value; } }
    }
    public class AssetMappingTable : Object
    {
        public AssetMappingTable(nint addr) : base(addr) { }
        public Array<AssetMapping> MappedAssets { get { return new Array<AssetMapping>(this[nameof(MappedAssets)].Address); } }
    }
    public class AnimationAttributeIdentifierExtensions : BlueprintFunctionLibrary
    {
        public AnimationAttributeIdentifierExtensions(nint addr) : base(addr) { }
        public bool IsValid(AnimationAttributeIdentifier Identifier) { return Invoke<bool>(nameof(IsValid), Identifier); }
    }
    public class Skeleton : Object
    {
        public Skeleton(nint addr) : base(addr) { }
        public Array<BoneNode> BoneTree { get { return new Array<BoneNode>(this[nameof(BoneTree)].Address); } }
        public Array<Transform> RefLocalPoses { get { return new Array<Transform>(this[nameof(RefLocalPoses)].Address); } }
        public Guid VirtualBoneGuid { get { return this[nameof(VirtualBoneGuid)].As<Guid>(); } set { this["VirtualBoneGuid"] = value; } }
        public Array<VirtualBone> VirtualBones { get { return new Array<VirtualBone>(this[nameof(VirtualBones)].Address); } }
        public Array<Object> CompatibleSkeletons { get { return new Array<Object>(this[nameof(CompatibleSkeletons)].Address); } }
        public Array<SkeletalMeshSocket> Sockets { get { return new Array<SkeletalMeshSocket>(this[nameof(Sockets)].Address); } }
        public SmartNameContainer SmartNames { get { return this[nameof(SmartNames)].As<SmartNameContainer>(); } set { this["SmartNames"] = value; } }
        public Array<BlendProfile> BlendProfiles { get { return new Array<BlendProfile>(this[nameof(BlendProfiles)].Address); } }
        public Array<AnimSlotGroup> SlotGroups { get { return new Array<AnimSlotGroup>(this[nameof(SlotGroups)].Address); } }
        public Array<AssetUserData> AssetUserData { get { return new Array<AssetUserData>(this[nameof(AssetUserData)].Address); } }
        public BlendProfile GetBlendProfile(Object InProfileName) { return Invoke<BlendProfile>(nameof(GetBlendProfile), InProfileName); }
        public void AddCompatibleSkeleton(Skeleton SourceSkeleton) { Invoke(nameof(AddCompatibleSkeleton), SourceSkeleton); }
    }
    public class BlendProfile : Object
    {
        public BlendProfile(nint addr) : base(addr) { }
        public Skeleton OwningSkeleton { get { return this[nameof(OwningSkeleton)].As<Skeleton>(); } set { this["OwningSkeleton"] = value; } }
        public Array<BlendProfileBoneEntry> ProfileEntries { get { return new Array<BlendProfileBoneEntry>(this[nameof(ProfileEntries)].Address); } }
        public EBlendProfileMode Mode { get { return (EBlendProfileMode)this[nameof(Mode)].GetValue<int>(); } set { this[nameof(Mode)].SetValue<int>((int)value); } }
    }
    public class BoneMaskFilter : Object
    {
        public BoneMaskFilter(nint addr) : base(addr) { }
        public Array<InputBlendPose> BlendPoses { get { return new Array<InputBlendPose>(this[nameof(BlendPoses)].Address); } }
    }
    public class CachedAnimDataLibrary : BlueprintFunctionLibrary
    {
        public CachedAnimDataLibrary(nint addr) : base(addr) { }
        public bool StateMachine_IsStateRelevant(AnimInstance InAnimInstance, CachedAnimStateData CachedAnimStateData) { return Invoke<bool>(nameof(StateMachine_IsStateRelevant), InAnimInstance, CachedAnimStateData); }
        public float StateMachine_GetLocalWeight(AnimInstance InAnimInstance, CachedAnimStateData CachedAnimStateData) { return Invoke<float>(nameof(StateMachine_GetLocalWeight), InAnimInstance, CachedAnimStateData); }
        public float StateMachine_GetGlobalWeight(AnimInstance InAnimInstance, CachedAnimStateData CachedAnimStateData) { return Invoke<float>(nameof(StateMachine_GetGlobalWeight), InAnimInstance, CachedAnimStateData); }
    }
    public class AnimationCurveIdentifierExtensions : BlueprintFunctionLibrary
    {
        public AnimationCurveIdentifierExtensions(nint addr) : base(addr) { }
        public bool IsValid(AnimationCurveIdentifier Identifier) { return Invoke<bool>(nameof(IsValid), Identifier); }
        public ERawCurveTrackTypes GetType(AnimationCurveIdentifier Identifier) { return Invoke<ERawCurveTrackTypes>(nameof(GetType), Identifier); }
        public Object GetName(AnimationCurveIdentifier Identifier) { return Invoke<Object>(nameof(GetName), Identifier); }
    }
    public class CurveSourceInterface : Interface
    {
        public CurveSourceInterface(nint addr) : base(addr) { }
        public float GetCurveValue(Object CurveName) { return Invoke<float>(nameof(GetCurveValue), CurveName); }
        public void GetCurves(Array<NamedCurveValue> OutValues) { Invoke(nameof(GetCurves), OutValues); }
        public Object GetBindingName() { return Invoke<Object>(nameof(GetBindingName)); }
    }
    public class MirrorDataTable : DataTable
    {
        public MirrorDataTable(nint addr) : base(addr) { }
        public Array<MirrorFindReplaceExpression> MirrorFindReplaceExpressions { get { return new Array<MirrorFindReplaceExpression>(this[nameof(MirrorFindReplaceExpressions)].Address); } }
        public byte MirrorAxis { get { return this[nameof(MirrorAxis)].GetValue<byte>(); } set { this[nameof(MirrorAxis)].SetValue<byte>(value); } }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
    }
    public class NodeMappingContainer : Object
    {
        public NodeMappingContainer(nint addr) : base(addr) { }
        public Object SourceItems { get { return this[nameof(SourceItems)]; } set { this[nameof(SourceItems)] = value; } }
        public Object TargetItems { get { return this[nameof(TargetItems)]; } set { this[nameof(TargetItems)] = value; } }
        public Object SourceToTarget { get { return this[nameof(SourceToTarget)]; } set { this[nameof(SourceToTarget)] = value; } }
        public Object SourceAsset { get { return this[nameof(SourceAsset)]; } set { this[nameof(SourceAsset)] = value; } }
        public Object TargetAsset { get { return this[nameof(TargetAsset)]; } set { this[nameof(TargetAsset)] = value; } }
    }
    public class NodeMappingProviderInterface : Interface
    {
        public NodeMappingProviderInterface(nint addr) : base(addr) { }
    }
    public class PoseAsset : AnimationAsset
    {
        public PoseAsset(nint addr) : base(addr) { }
        public PoseDataContainer PoseContainer { get { return this[nameof(PoseContainer)].As<PoseDataContainer>(); } set { this["PoseContainer"] = value; } }
        public bool bAdditivePose { get { return this[nameof(bAdditivePose)].Flag; } set { this[nameof(bAdditivePose)].Flag = value; } }
        public int BasePoseIndex { get { return this[nameof(BasePoseIndex)].GetValue<int>(); } set { this[nameof(BasePoseIndex)].SetValue<int>(value); } }
        public Object RetargetSource { get { return this[nameof(RetargetSource)]; } set { this[nameof(RetargetSource)] = value; } }
        public Array<Transform> RetargetSourceAssetReferencePose { get { return new Array<Transform>(this[nameof(RetargetSourceAssetReferencePose)].Address); } }
    }
    public class PreviewCollectionInterface : Interface
    {
        public PreviewCollectionInterface(nint addr) : base(addr) { }
    }
    public class PreviewMeshCollection : DataAsset
    {
        public PreviewMeshCollection(nint addr) : base(addr) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public Array<PreviewMeshCollectionEntry> SkeletalMeshes { get { return new Array<PreviewMeshCollectionEntry>(this[nameof(SkeletalMeshes)].Address); } }
    }
    public class Rig : Object
    {
        public Rig(nint addr) : base(addr) { }
        public Array<TransformBase> TransformBases { get { return new Array<TransformBase>(this[nameof(TransformBases)].Address); } }
        public Array<Node> Nodes { get { return new Array<Node>(this[nameof(Nodes)].Address); } }
    }
    public class SkeletalMeshActor : Actor
    {
        public SkeletalMeshActor(nint addr) : base(addr) { }
        public bool bShouldDoAnimNotifies { get { return this[nameof(bShouldDoAnimNotifies)].Flag; } set { this[nameof(bShouldDoAnimNotifies)].Flag = value; } }
        public bool bWakeOnLevelStart { get { return this[nameof(bWakeOnLevelStart)].Flag; } set { this[nameof(bWakeOnLevelStart)].Flag = value; } }
        public SkeletalMeshComponent SkeletalMeshComponent { get { return this[nameof(SkeletalMeshComponent)].As<SkeletalMeshComponent>(); } set { this["SkeletalMeshComponent"] = value; } }
        public SkeletalMesh ReplicatedMesh { get { return this[nameof(ReplicatedMesh)].As<SkeletalMesh>(); } set { this["ReplicatedMesh"] = value; } }
        public PhysicsAsset ReplicatedPhysAsset { get { return this[nameof(ReplicatedPhysAsset)].As<PhysicsAsset>(); } set { this["ReplicatedPhysAsset"] = value; } }
        public MaterialInterface ReplicatedMaterial0 { get { return this[nameof(ReplicatedMaterial0)].As<MaterialInterface>(); } set { this["ReplicatedMaterial0"] = value; } }
        public MaterialInterface ReplicatedMaterial1 { get { return this[nameof(ReplicatedMaterial1)].As<MaterialInterface>(); } set { this["ReplicatedMaterial1"] = value; } }
        public void OnRep_ReplicatedPhysAsset() { Invoke(nameof(OnRep_ReplicatedPhysAsset)); }
        public void OnRep_ReplicatedMesh() { Invoke(nameof(OnRep_ReplicatedMesh)); }
        public void OnRep_ReplicatedMaterial1() { Invoke(nameof(OnRep_ReplicatedMaterial1)); }
        public void OnRep_ReplicatedMaterial0() { Invoke(nameof(OnRep_ReplicatedMaterial0)); }
    }
    public class AnimBlueprint : Blueprint
    {
        public AnimBlueprint(nint addr) : base(addr) { }
        public Skeleton TargetSkeleton { get { return this[nameof(TargetSkeleton)].As<Skeleton>(); } set { this["TargetSkeleton"] = value; } }
        public Array<AnimGroupInfo> Groups { get { return new Array<AnimGroupInfo>(this[nameof(Groups)].Address); } }
        public bool bIsTemplate { get { return this[nameof(bIsTemplate)].Flag; } set { this[nameof(bIsTemplate)].Flag = value; } }
        public bool bUseMultiThreadedAnimationUpdate { get { return this[nameof(bUseMultiThreadedAnimationUpdate)].Flag; } set { this[nameof(bUseMultiThreadedAnimationUpdate)].Flag = value; } }
        public bool bWarnAboutBlueprintUsage { get { return this[nameof(bWarnAboutBlueprintUsage)].Flag; } set { this[nameof(bWarnAboutBlueprintUsage)].Flag = value; } }
    }
    public class AssetManager : Object
    {
        public AssetManager(nint addr) : base(addr) { }
        public Array<Object> ObjectReferenceList { get { return new Array<Object>(this[nameof(ObjectReferenceList)].Address); } }
        public bool bIsGlobalAsyncScanEnvironment { get { return this[nameof(bIsGlobalAsyncScanEnvironment)].Flag; } set { this[nameof(bIsGlobalAsyncScanEnvironment)].Flag = value; } }
        public bool bShouldGuessTypeAndName { get { return this[nameof(bShouldGuessTypeAndName)].Flag; } set { this[nameof(bShouldGuessTypeAndName)].Flag = value; } }
        public bool bShouldUseSynchronousLoad { get { return this[nameof(bShouldUseSynchronousLoad)].Flag; } set { this[nameof(bShouldUseSynchronousLoad)].Flag = value; } }
        public bool bIsLoadingFromPakFiles { get { return this[nameof(bIsLoadingFromPakFiles)].Flag; } set { this[nameof(bIsLoadingFromPakFiles)].Flag = value; } }
        public bool bShouldAcquireMissingChunksOnLoad { get { return this[nameof(bShouldAcquireMissingChunksOnLoad)].Flag; } set { this[nameof(bShouldAcquireMissingChunksOnLoad)].Flag = value; } }
        public bool bOnlyCookProductionAssets { get { return this[nameof(bOnlyCookProductionAssets)].Flag; } set { this[nameof(bOnlyCookProductionAssets)].Flag = value; } }
        public int NumBulkScanRequests { get { return this[nameof(NumBulkScanRequests)].GetValue<int>(); } set { this[nameof(NumBulkScanRequests)].SetValue<int>(value); } }
        public bool bIsPrimaryAssetDirectoryCurrent { get { return this[nameof(bIsPrimaryAssetDirectoryCurrent)].Flag; } set { this[nameof(bIsPrimaryAssetDirectoryCurrent)].Flag = value; } }
        public bool bIsManagementDatabaseCurrent { get { return this[nameof(bIsManagementDatabaseCurrent)].Flag; } set { this[nameof(bIsManagementDatabaseCurrent)].Flag = value; } }
        public bool bUpdateManagementDatabaseAfterScan { get { return this[nameof(bUpdateManagementDatabaseAfterScan)].Flag; } set { this[nameof(bUpdateManagementDatabaseAfterScan)].Flag = value; } }
        public bool bIncludeOnlyOnDiskAssets { get { return this[nameof(bIncludeOnlyOnDiskAssets)].Flag; } set { this[nameof(bIncludeOnlyOnDiskAssets)].Flag = value; } }
        public bool bHasCompletedInitialScan { get { return this[nameof(bHasCompletedInitialScan)].Flag; } set { this[nameof(bHasCompletedInitialScan)].Flag = value; } }
        public int NumberOfSpawnedNotifications { get { return this[nameof(NumberOfSpawnedNotifications)].GetValue<int>(); } set { this[nameof(NumberOfSpawnedNotifications)].SetValue<int>(value); } }
    }
    public class AsyncActionLoadPrimaryAssetBase : BlueprintAsyncActionBase
    {
        public AsyncActionLoadPrimaryAssetBase(nint addr) : base(addr) { }
    }
    public class AsyncActionLoadPrimaryAsset : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAsset(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public AsyncActionLoadPrimaryAsset AsyncLoadPrimaryAsset(Object WorldContextObject, PrimaryAssetId PrimaryAsset, Array<Object> LoadBundles) { return Invoke<AsyncActionLoadPrimaryAsset>(nameof(AsyncLoadPrimaryAsset), WorldContextObject, PrimaryAsset, LoadBundles); }
    }
    public class AsyncActionLoadPrimaryAssetClass : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetClass(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public AsyncActionLoadPrimaryAssetClass AsyncLoadPrimaryAssetClass(Object WorldContextObject, PrimaryAssetId PrimaryAsset, Array<Object> LoadBundles) { return Invoke<AsyncActionLoadPrimaryAssetClass>(nameof(AsyncLoadPrimaryAssetClass), WorldContextObject, PrimaryAsset, LoadBundles); }
    }
    public class AsyncActionLoadPrimaryAssetList : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetList(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public AsyncActionLoadPrimaryAssetList AsyncLoadPrimaryAssetList(Object WorldContextObject, Array<PrimaryAssetId> PrimaryAssetList, Array<Object> LoadBundles) { return Invoke<AsyncActionLoadPrimaryAssetList>(nameof(AsyncLoadPrimaryAssetList), WorldContextObject, PrimaryAssetList, LoadBundles); }
    }
    public class AsyncActionLoadPrimaryAssetClassList : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionLoadPrimaryAssetClassList(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public AsyncActionLoadPrimaryAssetClassList AsyncLoadPrimaryAssetClassList(Object WorldContextObject, Array<PrimaryAssetId> PrimaryAssetList, Array<Object> LoadBundles) { return Invoke<AsyncActionLoadPrimaryAssetClassList>(nameof(AsyncLoadPrimaryAssetClassList), WorldContextObject, PrimaryAssetList, LoadBundles); }
    }
    public class AsyncActionChangePrimaryAssetBundles : AsyncActionLoadPrimaryAssetBase
    {
        public AsyncActionChangePrimaryAssetBundles(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public AsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForPrimaryAssetList(Object WorldContextObject, Array<PrimaryAssetId> PrimaryAssetList, Array<Object> AddBundles, Array<Object> RemoveBundles) { return Invoke<AsyncActionChangePrimaryAssetBundles>(nameof(AsyncChangeBundleStateForPrimaryAssetList), WorldContextObject, PrimaryAssetList, AddBundles, RemoveBundles); }
        public AsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForMatchingPrimaryAssets(Object WorldContextObject, Array<Object> NewBundles, Array<Object> OldBundles) { return Invoke<AsyncActionChangePrimaryAssetBundles>(nameof(AsyncChangeBundleStateForMatchingPrimaryAssets), WorldContextObject, NewBundles, OldBundles); }
    }
    public class AtmosphericFog : Info
    {
        public AtmosphericFog(nint addr) : base(addr) { }
        public AtmosphericFogComponent AtmosphericFogComponent { get { return this[nameof(AtmosphericFogComponent)].As<AtmosphericFogComponent>(); } set { this["AtmosphericFogComponent"] = value; } }
    }
    public class SkyAtmosphereComponent : SceneComponent
    {
        public SkyAtmosphereComponent(nint addr) : base(addr) { }
        public ESkyAtmosphereTransformMode TransformMode { get { return (ESkyAtmosphereTransformMode)this[nameof(TransformMode)].GetValue<int>(); } set { this[nameof(TransformMode)].SetValue<int>((int)value); } }
        public float BottomRadius { get { return this[nameof(BottomRadius)].GetValue<float>(); } set { this[nameof(BottomRadius)].SetValue<float>(value); } }
        public Color GroundAlbedo { get { return this[nameof(GroundAlbedo)].As<Color>(); } set { this["GroundAlbedo"] = value; } }
        public float AtmosphereHeight { get { return this[nameof(AtmosphereHeight)].GetValue<float>(); } set { this[nameof(AtmosphereHeight)].SetValue<float>(value); } }
        public float MultiScatteringFactor { get { return this[nameof(MultiScatteringFactor)].GetValue<float>(); } set { this[nameof(MultiScatteringFactor)].SetValue<float>(value); } }
        public float TraceSampleCountScale { get { return this[nameof(TraceSampleCountScale)].GetValue<float>(); } set { this[nameof(TraceSampleCountScale)].SetValue<float>(value); } }
        public float RayleighScatteringScale { get { return this[nameof(RayleighScatteringScale)].GetValue<float>(); } set { this[nameof(RayleighScatteringScale)].SetValue<float>(value); } }
        public LinearColor RayleighScattering { get { return this[nameof(RayleighScattering)].As<LinearColor>(); } set { this["RayleighScattering"] = value; } }
        public float RayleighExponentialDistribution { get { return this[nameof(RayleighExponentialDistribution)].GetValue<float>(); } set { this[nameof(RayleighExponentialDistribution)].SetValue<float>(value); } }
        public float MieScatteringScale { get { return this[nameof(MieScatteringScale)].GetValue<float>(); } set { this[nameof(MieScatteringScale)].SetValue<float>(value); } }
        public LinearColor MieScattering { get { return this[nameof(MieScattering)].As<LinearColor>(); } set { this["MieScattering"] = value; } }
        public float MieAbsorptionScale { get { return this[nameof(MieAbsorptionScale)].GetValue<float>(); } set { this[nameof(MieAbsorptionScale)].SetValue<float>(value); } }
        public LinearColor MieAbsorption { get { return this[nameof(MieAbsorption)].As<LinearColor>(); } set { this["MieAbsorption"] = value; } }
        public float MieAnisotropy { get { return this[nameof(MieAnisotropy)].GetValue<float>(); } set { this[nameof(MieAnisotropy)].SetValue<float>(value); } }
        public float MieExponentialDistribution { get { return this[nameof(MieExponentialDistribution)].GetValue<float>(); } set { this[nameof(MieExponentialDistribution)].SetValue<float>(value); } }
        public float OtherAbsorptionScale { get { return this[nameof(OtherAbsorptionScale)].GetValue<float>(); } set { this[nameof(OtherAbsorptionScale)].SetValue<float>(value); } }
        public LinearColor OtherAbsorption { get { return this[nameof(OtherAbsorption)].As<LinearColor>(); } set { this["OtherAbsorption"] = value; } }
        public TentDistribution OtherTentDistribution { get { return this[nameof(OtherTentDistribution)].As<TentDistribution>(); } set { this["OtherTentDistribution"] = value; } }
        public LinearColor SkyLuminanceFactor { get { return this[nameof(SkyLuminanceFactor)].As<LinearColor>(); } set { this["SkyLuminanceFactor"] = value; } }
        public float AerialPespectiveViewDistanceScale { get { return this[nameof(AerialPespectiveViewDistanceScale)].GetValue<float>(); } set { this[nameof(AerialPespectiveViewDistanceScale)].SetValue<float>(value); } }
        public float HeightFogContribution { get { return this[nameof(HeightFogContribution)].GetValue<float>(); } set { this[nameof(HeightFogContribution)].SetValue<float>(value); } }
        public float TransmittanceMinLightElevationAngle { get { return this[nameof(TransmittanceMinLightElevationAngle)].GetValue<float>(); } set { this[nameof(TransmittanceMinLightElevationAngle)].SetValue<float>(value); } }
        public float AerialPerspectiveStartDepth { get { return this[nameof(AerialPerspectiveStartDepth)].GetValue<float>(); } set { this[nameof(AerialPerspectiveStartDepth)].SetValue<float>(value); } }
        public Guid bStaticLightingBuiltGUID { get { return this[nameof(bStaticLightingBuiltGUID)].As<Guid>(); } set { this["bStaticLightingBuiltGUID"] = value; } }
        public void SetSkyLuminanceFactor(LinearColor NewValue) { Invoke(nameof(SetSkyLuminanceFactor), NewValue); }
        public void SetRayleighScatteringScale(float NewValue) { Invoke(nameof(SetRayleighScatteringScale), NewValue); }
        public void SetRayleighScattering(LinearColor NewValue) { Invoke(nameof(SetRayleighScattering), NewValue); }
        public void SetRayleighExponentialDistribution(float NewValue) { Invoke(nameof(SetRayleighExponentialDistribution), NewValue); }
        public void SetOtherAbsorptionScale(float NewValue) { Invoke(nameof(SetOtherAbsorptionScale), NewValue); }
        public void SetOtherAbsorption(LinearColor NewValue) { Invoke(nameof(SetOtherAbsorption), NewValue); }
        public void SetMultiScatteringFactor(float NewValue) { Invoke(nameof(SetMultiScatteringFactor), NewValue); }
        public void SetMieScatteringScale(float NewValue) { Invoke(nameof(SetMieScatteringScale), NewValue); }
        public void SetMieScattering(LinearColor NewValue) { Invoke(nameof(SetMieScattering), NewValue); }
        public void SetMieExponentialDistribution(float NewValue) { Invoke(nameof(SetMieExponentialDistribution), NewValue); }
        public void SetMieAnisotropy(float NewValue) { Invoke(nameof(SetMieAnisotropy), NewValue); }
        public void SetMieAbsorptionScale(float NewValue) { Invoke(nameof(SetMieAbsorptionScale), NewValue); }
        public void SetMieAbsorption(LinearColor NewValue) { Invoke(nameof(SetMieAbsorption), NewValue); }
        public void SetHeightFogContribution(float NewValue) { Invoke(nameof(SetHeightFogContribution), NewValue); }
        public void SetAtmosphereHeight(float NewValue) { Invoke(nameof(SetAtmosphereHeight), NewValue); }
        public void SetAerialPespectiveViewDistanceScale(float NewValue) { Invoke(nameof(SetAerialPespectiveViewDistanceScale), NewValue); }
        public void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, Vector LightDirection) { Invoke(nameof(OverrideAtmosphereLightDirection), AtmosphereLightIndex, LightDirection); }
        public LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLightComponent DirectionalLight) { return Invoke<LinearColor>(nameof(GetAtmosphereTransmitanceOnGroundAtPlanetTop), DirectionalLight); }
    }
    public class AtmosphericFogComponent : SkyAtmosphereComponent
    {
        public AtmosphericFogComponent(nint addr) : base(addr) { }
        public void SetSunMultiplier(float NewSunMultiplier) { Invoke(nameof(SetSunMultiplier), NewSunMultiplier); }
        public void SetStartDistance(float NewStartDistance) { Invoke(nameof(SetStartDistance), NewStartDistance); }
        public void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum) { Invoke(nameof(SetPrecomputeParams), DensityHeight, MaxScatteringOrder, InscatterAltitudeSampleNum); }
        public void SetFogMultiplier(float NewFogMultiplier) { Invoke(nameof(SetFogMultiplier), NewFogMultiplier); }
        public void SetDistanceScale(float NewDistanceScale) { Invoke(nameof(SetDistanceScale), NewDistanceScale); }
        public void SetDistanceOffset(float NewDistanceOffset) { Invoke(nameof(SetDistanceOffset), NewDistanceOffset); }
        public void SetDensityOffset(float NewDensityOffset) { Invoke(nameof(SetDensityOffset), NewDensityOffset); }
        public void SetDensityMultiplier(float NewDensityMultiplier) { Invoke(nameof(SetDensityMultiplier), NewDensityMultiplier); }
        public void SetDefaultLightColor(LinearColor NewLightColor) { Invoke(nameof(SetDefaultLightColor), NewLightColor); }
        public void SetDefaultBrightness(float NewBrightness) { Invoke(nameof(SetDefaultBrightness), NewBrightness); }
        public void SetAltitudeScale(float NewAltitudeScale) { Invoke(nameof(SetAltitudeScale), NewAltitudeScale); }
        public void DisableSunDisk(bool NewSunDisk) { Invoke(nameof(DisableSunDisk), NewSunDisk); }
        public void DisableGroundScattering(bool NewGroundScattering) { Invoke(nameof(DisableGroundScattering), NewGroundScattering); }
    }
    public class AudioBus : Object
    {
        public AudioBus(nint addr) : base(addr) { }
        public EAudioBusChannels AudioBusChannels { get { return (EAudioBusChannels)this[nameof(AudioBusChannels)].GetValue<int>(); } set { this[nameof(AudioBusChannels)].SetValue<int>((int)value); } }
    }
    public class AudioSettings : DeveloperSettings
    {
        public AudioSettings(nint addr) : base(addr) { }
        public SoftObjectPath DefaultSoundClassName { get { return this[nameof(DefaultSoundClassName)].As<SoftObjectPath>(); } set { this["DefaultSoundClassName"] = value; } }
        public SoftObjectPath DefaultMediaSoundClassName { get { return this[nameof(DefaultMediaSoundClassName)].As<SoftObjectPath>(); } set { this["DefaultMediaSoundClassName"] = value; } }
        public SoftObjectPath DefaultSoundConcurrencyName { get { return this[nameof(DefaultSoundConcurrencyName)].As<SoftObjectPath>(); } set { this["DefaultSoundConcurrencyName"] = value; } }
        public SoftObjectPath DefaultBaseSoundMix { get { return this[nameof(DefaultBaseSoundMix)].As<SoftObjectPath>(); } set { this["DefaultBaseSoundMix"] = value; } }
        public SoftObjectPath VoiPSoundClass { get { return this[nameof(VoiPSoundClass)].As<SoftObjectPath>(); } set { this["VoiPSoundClass"] = value; } }
        public SoftObjectPath MasterSubmix { get { return this[nameof(MasterSubmix)].As<SoftObjectPath>(); } set { this["MasterSubmix"] = value; } }
        public SoftObjectPath BaseDefaultSubmix { get { return this[nameof(BaseDefaultSubmix)].As<SoftObjectPath>(); } set { this["BaseDefaultSubmix"] = value; } }
        public SoftObjectPath ReverbSubmix { get { return this[nameof(ReverbSubmix)].As<SoftObjectPath>(); } set { this["ReverbSubmix"] = value; } }
        public SoftObjectPath EQSubmix { get { return this[nameof(EQSubmix)].As<SoftObjectPath>(); } set { this["EQSubmix"] = value; } }
        public EVoiceSampleRate VoiPSampleRate { get { return (EVoiceSampleRate)this[nameof(VoiPSampleRate)].GetValue<int>(); } set { this[nameof(VoiPSampleRate)].SetValue<int>((int)value); } }
        public EDefaultAudioCompressionType DefaultAudioCompressionType { get { return (EDefaultAudioCompressionType)this[nameof(DefaultAudioCompressionType)].GetValue<int>(); } set { this[nameof(DefaultAudioCompressionType)].SetValue<int>((int)value); } }
        public float DefaultReverbSendLevel { get { return this[nameof(DefaultReverbSendLevel)].GetValue<float>(); } set { this[nameof(DefaultReverbSendLevel)].SetValue<float>(value); } }
        public int MaximumConcurrentStreams { get { return this[nameof(MaximumConcurrentStreams)].GetValue<int>(); } set { this[nameof(MaximumConcurrentStreams)].SetValue<int>(value); } }
        public float GlobalMinPitchScale { get { return this[nameof(GlobalMinPitchScale)].GetValue<float>(); } set { this[nameof(GlobalMinPitchScale)].SetValue<float>(value); } }
        public float GlobalMaxPitchScale { get { return this[nameof(GlobalMaxPitchScale)].GetValue<float>(); } set { this[nameof(GlobalMaxPitchScale)].SetValue<float>(value); } }
        public Array<AudioQualitySettings> QualityLevels { get { return new Array<AudioQualitySettings>(this[nameof(QualityLevels)].Address); } }
        public bool bAllowPlayWhenSilent { get { return this[nameof(bAllowPlayWhenSilent)].Flag; } set { this[nameof(bAllowPlayWhenSilent)].Flag = value; } }
        public bool bDisableMasterEQ { get { return this[nameof(bDisableMasterEQ)].Flag; } set { this[nameof(bDisableMasterEQ)].Flag = value; } }
        public bool bAllowCenterChannel3DPanning { get { return this[nameof(bAllowCenterChannel3DPanning)].Flag; } set { this[nameof(bAllowCenterChannel3DPanning)].Flag = value; } }
        public uint NumStoppingSources { get { return this[nameof(NumStoppingSources)].GetValue<uint>(); } set { this[nameof(NumStoppingSources)].SetValue<uint>(value); } }
        public EPanningMethod PanningMethod { get { return (EPanningMethod)this[nameof(PanningMethod)].GetValue<int>(); } set { this[nameof(PanningMethod)].SetValue<int>((int)value); } }
        public EMonoChannelUpmixMethod MonoChannelUpmixMethod { get { return (EMonoChannelUpmixMethod)this[nameof(MonoChannelUpmixMethod)].GetValue<int>(); } set { this[nameof(MonoChannelUpmixMethod)].SetValue<int>((int)value); } }
        public Object DialogueFilenameFormat { get { return this[nameof(DialogueFilenameFormat)]; } set { this[nameof(DialogueFilenameFormat)] = value; } }
        public Array<SoundDebugEntry> DebugSounds { get { return new Array<SoundDebugEntry>(this[nameof(DebugSounds)].Address); } }
        public Array<DefaultAudioBusSettings> DefaultAudioBuses { get { return new Array<DefaultAudioBusSettings>(this[nameof(DefaultAudioBuses)].Address); } }
        public SoundClass DefaultSoundClass { get { return this[nameof(DefaultSoundClass)].As<SoundClass>(); } set { this["DefaultSoundClass"] = value; } }
        public SoundClass DefaultMediaSoundClass { get { return this[nameof(DefaultMediaSoundClass)].As<SoundClass>(); } set { this["DefaultMediaSoundClass"] = value; } }
        public SoundConcurrency DefaultSoundConcurrency { get { return this[nameof(DefaultSoundConcurrency)].As<SoundConcurrency>(); } set { this["DefaultSoundConcurrency"] = value; } }
    }
    public class AudioVolume : Volume
    {
        public AudioVolume(nint addr) : base(addr) { }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public ReverbSettings Settings { get { return this[nameof(Settings)].As<ReverbSettings>(); } set { this["Settings"] = value; } }
        public InteriorSettings AmbientZoneSettings { get { return this[nameof(AmbientZoneSettings)].As<InteriorSettings>(); } set { this["AmbientZoneSettings"] = value; } }
        public Array<AudioVolumeSubmixSendSettings> SubmixSendSettings { get { return new Array<AudioVolumeSubmixSendSettings>(this[nameof(SubmixSendSettings)].Address); } }
        public Array<AudioVolumeSubmixOverrideSettings> SubmixOverrideSettings { get { return new Array<AudioVolumeSubmixOverrideSettings>(this[nameof(SubmixOverrideSettings)].Address); } }
        public void SetSubmixSendSettings(Array<AudioVolumeSubmixSendSettings> NewSubmixSendSettings) { Invoke(nameof(SetSubmixSendSettings), NewSubmixSendSettings); }
        public void SetSubmixOverrideSettings(Array<AudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings) { Invoke(nameof(SetSubmixOverrideSettings), NewSubmixOverrideSettings); }
        public void SetReverbSettings(ReverbSettings NewReverbSettings) { Invoke(nameof(SetReverbSettings), NewReverbSettings); }
        public void SetPriority(float NewPriority) { Invoke(nameof(SetPriority), NewPriority); }
        public void SetInteriorSettings(InteriorSettings NewInteriorSettings) { Invoke(nameof(SetInteriorSettings), NewInteriorSettings); }
        public void SetEnabled(bool bNewEnabled) { Invoke(nameof(SetEnabled), bNewEnabled); }
        public void OnRep_bEnabled() { Invoke(nameof(OnRep_bEnabled)); }
    }
    public class ActorSoundParameterInterface : Interface
    {
        public ActorSoundParameterInterface(nint addr) : base(addr) { }
        public void GetActorSoundParams(Array<AudioParameter> Params) { Invoke(nameof(GetActorSoundParams), Params); }
    }
    public class AudioWidgetSubsystem : EngineSubsystem
    {
        public AudioWidgetSubsystem(nint addr) : base(addr) { }
    }
    public class SoundParameterControllerInterface : AudioParameterControllerInterface
    {
        public SoundParameterControllerInterface(nint addr) : base(addr) { }
    }
    public class AudioParameterConversionStatics : BlueprintFunctionLibrary
    {
        public AudioParameterConversionStatics(nint addr) : base(addr) { }
        public AudioParameter StringToAudioParameter(Object Name, Object String) { return Invoke<AudioParameter>(nameof(StringToAudioParameter), Name, String); }
        public AudioParameter StringArrayToAudioParameter(Object Name, Array<Object> Strings) { return Invoke<AudioParameter>(nameof(StringArrayToAudioParameter), Name, Strings); }
        public AudioParameter ObjectToAudioParameter(Object Name, Object Object) { return Invoke<AudioParameter>(nameof(ObjectToAudioParameter), Name, Object); }
        public AudioParameter ObjectArrayToAudioParameter(Object Name, Array<Object> Objects) { return Invoke<AudioParameter>(nameof(ObjectArrayToAudioParameter), Name, Objects); }
        public AudioParameter IntegerToAudioParameter(Object Name, int Integer) { return Invoke<AudioParameter>(nameof(IntegerToAudioParameter), Name, Integer); }
        public AudioParameter IntegerArrayToAudioParameter(Object Name, Array<int> Integers) { return Invoke<AudioParameter>(nameof(IntegerArrayToAudioParameter), Name, Integers); }
        //public AudioParameter FloatToAudioParameter(Object Name, float float) { return Invoke<AudioParameter>(nameof(FloatToAudioParameter), Name, float); }
        public AudioParameter FloatArrayToAudioParameter(Object Name, Array<float> Floats) { return Invoke<AudioParameter>(nameof(FloatArrayToAudioParameter), Name, Floats); }
        //public AudioParameter BooleanToAudioParameter(Object Name, bool bool) { return Invoke<AudioParameter>(nameof(BooleanToAudioParameter), Name, bool); }
        public AudioParameter BooleanArrayToAudioParameter(Object Name, Array<bool> Bools) { return Invoke<AudioParameter>(nameof(BooleanArrayToAudioParameter), Name, Bools); }
    }
    public class BlockingVolume : Volume
    {
        public BlockingVolume(nint addr) : base(addr) { }
    }
    public class BlueprintMapLibrary : BlueprintFunctionLibrary
    {
        public BlueprintMapLibrary(nint addr) : base(addr) { }
        public void SetMapPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetMapPropertyByName), Object, PropertyName, Value); }
        public void Map_Values(Object TargetMap, Array<int> Values) { Invoke(nameof(Map_Values), TargetMap, Values); }
        public bool Map_Remove(Object TargetMap, int Key) { return Invoke<bool>(nameof(Map_Remove), TargetMap, Key); }
        public int Map_Length(Object TargetMap) { return Invoke<int>(nameof(Map_Length), TargetMap); }
        public void Map_Keys(Object TargetMap, Array<int> Keys) { Invoke(nameof(Map_Keys), TargetMap, Keys); }
        public bool Map_IsNotEmpty(Object TargetMap) { return Invoke<bool>(nameof(Map_IsNotEmpty), TargetMap); }
        public bool Map_IsEmpty(Object TargetMap) { return Invoke<bool>(nameof(Map_IsEmpty), TargetMap); }
        public bool Map_Find(Object TargetMap, int Key, int Value) { return Invoke<bool>(nameof(Map_Find), TargetMap, Key, Value); }
        public bool Map_Contains(Object TargetMap, int Key) { return Invoke<bool>(nameof(Map_Contains), TargetMap, Key); }
        public void Map_Clear(Object TargetMap) { Invoke(nameof(Map_Clear), TargetMap); }
        public void Map_Add(Object TargetMap, int Key, int Value) { Invoke(nameof(Map_Add), TargetMap, Key, Value); }
    }
    public class BlueprintSetLibrary : BlueprintFunctionLibrary
    {
        public BlueprintSetLibrary(nint addr) : base(addr) { }
        public void SetSetPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetSetPropertyByName), Object, PropertyName, Value); }
        public void Set_Union(Object A, Object B, Object Result) { Invoke(nameof(Set_Union), A, B, Result); }
        public void Set_ToArray(Object A, Array<int> Result) { Invoke(nameof(Set_ToArray), A, Result); }
        public void Set_RemoveItems(Object TargetSet, Array<int> Items) { Invoke(nameof(Set_RemoveItems), TargetSet, Items); }
        public bool Set_Remove(Object TargetSet, int Item) { return Invoke<bool>(nameof(Set_Remove), TargetSet, Item); }
        public int Set_Length(Object TargetSet) { return Invoke<int>(nameof(Set_Length), TargetSet); }
        public bool Set_IsNotEmpty(Object TargetSet) { return Invoke<bool>(nameof(Set_IsNotEmpty), TargetSet); }
        public bool Set_IsEmpty(Object TargetSet) { return Invoke<bool>(nameof(Set_IsEmpty), TargetSet); }
        public void Set_Intersection(Object A, Object B, Object Result) { Invoke(nameof(Set_Intersection), A, B, Result); }
        public void Set_Difference(Object A, Object B, Object Result) { Invoke(nameof(Set_Difference), A, B, Result); }
        public bool Set_Contains(Object TargetSet, int ItemToFind) { return Invoke<bool>(nameof(Set_Contains), TargetSet, ItemToFind); }
        public void Set_Clear(Object TargetSet) { Invoke(nameof(Set_Clear), TargetSet); }
        public void Set_AddItems(Object TargetSet, Array<int> NewItems) { Invoke(nameof(Set_AddItems), TargetSet, NewItems); }
        public void Set_Add(Object TargetSet, int NewItem) { Invoke(nameof(Set_Add), TargetSet, NewItem); }
    }
    public class BookMark : BookmarkBase
    {
        public BookMark(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Array<Object> HiddenLevels { get { return new Array<Object>(this[nameof(HiddenLevels)].Address); } }
    }
    public class BrushBuilder : Object
    {
        public BrushBuilder(nint addr) : base(addr) { }
        public Object BitmapFilename { get { return this[nameof(BitmapFilename)]; } set { this[nameof(BitmapFilename)] = value; } }
        public Object Tooltip { get { return this[nameof(Tooltip)]; } set { this[nameof(Tooltip)] = value; } }
        public bool NotifyBadParams { get { return this[nameof(NotifyBadParams)].Flag; } set { this[nameof(NotifyBadParams)].Flag = value; } }
        public Array<Vector> Vertices { get { return new Array<Vector>(this[nameof(Vertices)].Address); } }
        public Array<BuilderPoly> Polys { get { return new Array<BuilderPoly>(this[nameof(Polys)].Address); } }
        public Object Layer { get { return this[nameof(Layer)]; } set { this[nameof(Layer)] = value; } }
        public bool MergeCoplanars { get { return this[nameof(MergeCoplanars)].Flag; } set { this[nameof(MergeCoplanars)].Flag = value; } }
    }
    public class BrushShape : Brush
    {
        public BrushShape(nint addr) : base(addr) { }
    }
    public class CameraBlockingVolume : Volume
    {
        public CameraBlockingVolume(nint addr) : base(addr) { }
    }
    public class CameraLensEffectInterface : Interface
    {
        public CameraLensEffectInterface(nint addr) : base(addr) { }
        public FXSystemComponent GetPrimaryParticleComponent() { return Invoke<FXSystemComponent>(nameof(GetPrimaryParticleComponent)); }
        public Array<FXSystemComponent> GetParticleComponents() { return Invoke<Array<FXSystemComponent>>(nameof(GetParticleComponents)); }
    }
    public class CameraLensEffectInterfaceClassSupportLibrary : BlueprintFunctionLibrary
    {
        public CameraLensEffectInterfaceClassSupportLibrary(nint addr) : base(addr) { }
        public void SetInterfaceClass(Object Class, CameraLensInterfaceClassSupport Var, EInterfaceValidResult Result) { Invoke(nameof(SetInterfaceClass), Class, Var, Result); }
        public void IsInterfaceValid(Object CameraLens, EInterfaceValidResult Result) { Invoke(nameof(IsInterfaceValid), CameraLens, Result); }
        public void IsInterfaceClassValid(CameraLensInterfaceClassSupport CameraLens, EInterfaceValidResult Result) { Invoke(nameof(IsInterfaceClassValid), CameraLens, Result); }
        public Object GetInterfaceClass(CameraLensInterfaceClassSupport CameraLens) { return Invoke<Object>(nameof(GetInterfaceClass), CameraLens); }
    }
    public class CameraModifier_CameraShake : CameraModifier
    {
        public CameraModifier_CameraShake(nint addr) : base(addr) { }
        public Array<ActiveCameraShakeInfo> ActiveShakes { get { return new Array<ActiveCameraShakeInfo>(this[nameof(ActiveShakes)].Address); } }
        public Object ExpiredPooledShakesMap { get { return this[nameof(ExpiredPooledShakesMap)]; } set { this[nameof(ExpiredPooledShakesMap)] = value; } }
        public float SplitScreenShakeScale { get { return this[nameof(SplitScreenShakeScale)].GetValue<float>(); } set { this[nameof(SplitScreenShakeScale)].SetValue<float>(value); } }
    }
    public class CameraShakeSourceActor : Actor
    {
        public CameraShakeSourceActor(nint addr) : base(addr) { }
        public CameraShakeSourceComponent CameraShakeSourceComponent { get { return this[nameof(CameraShakeSourceComponent)].As<CameraShakeSourceComponent>(); } set { this["CameraShakeSourceComponent"] = value; } }
    }
    public class CameraShakeSourceComponent : SceneComponent
    {
        public CameraShakeSourceComponent(nint addr) : base(addr) { }
        public ECameraShakeAttenuation Attenuation { get { return (ECameraShakeAttenuation)this[nameof(Attenuation)].GetValue<int>(); } set { this[nameof(Attenuation)].SetValue<int>((int)value); } }
        public float InnerAttenuationRadius { get { return this[nameof(InnerAttenuationRadius)].GetValue<float>(); } set { this[nameof(InnerAttenuationRadius)].SetValue<float>(value); } }
        public float OuterAttenuationRadius { get { return this[nameof(OuterAttenuationRadius)].GetValue<float>(); } set { this[nameof(OuterAttenuationRadius)].SetValue<float>(value); } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public bool bAutoStart { get { return this[nameof(bAutoStart)].Flag; } set { this[nameof(bAutoStart)].Flag = value; } }
        public void StopAllCameraShakesOfType(Object InCameraShake, bool bImmediately) { Invoke(nameof(StopAllCameraShakesOfType), InCameraShake, bImmediately); }
        public void StopAllCameraShakes(bool bImmediately) { Invoke(nameof(StopAllCameraShakes), bImmediately); }
        public void StartCameraShake(Object InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, Rotator UserPlaySpaceRot) { Invoke(nameof(StartCameraShake), InCameraShake, Scale, PlaySpace, UserPlaySpaceRot); }
        public void Start() { Invoke(nameof(Start)); }
        public float GetAttenuationFactor(Vector Location) { return Invoke<float>(nameof(GetAttenuationFactor), Location); }
    }
    public class CanvasRenderTarget2D : TextureRenderTarget2D
    {
        public CanvasRenderTarget2D(nint addr) : base(addr) { }
        public Object OnCanvasRenderTargetUpdate { get { return this[nameof(OnCanvasRenderTargetUpdate)]; } set { this[nameof(OnCanvasRenderTargetUpdate)] = value; } }
        public Object World { get { return this[nameof(World)]; } set { this[nameof(World)] = value; } }
        public bool bShouldClearRenderTargetOnReceiveUpdate { get { return this[nameof(bShouldClearRenderTargetOnReceiveUpdate)].Flag; } set { this[nameof(bShouldClearRenderTargetOnReceiveUpdate)].Flag = value; } }
        public void UpdateResource() { Invoke(nameof(UpdateResource)); }
        public void ReceiveUpdate(Canvas Canvas, int Width, int Height) { Invoke(nameof(ReceiveUpdate), Canvas, Width, Height); }
        public void GetSize(int Width, int Height) { Invoke(nameof(GetSize), Width, Height); }
        public CanvasRenderTarget2D CreateCanvasRenderTarget2D(Object WorldContextObject, Object CanvasRenderTarget2DClass, int Width, int Height) { return Invoke<CanvasRenderTarget2D>(nameof(CreateCanvasRenderTarget2D), WorldContextObject, CanvasRenderTarget2DClass, Width, Height); }
    }
    public class CheatManagerExtension : Object
    {
        public CheatManagerExtension(nint addr) : base(addr) { }
        public void RemovedFromCheatManager() { Invoke(nameof(RemovedFromCheatManager)); }
        public PlayerController GetPlayerController() { return Invoke<PlayerController>(nameof(GetPlayerController)); }
        public void AddedToCheatManager() { Invoke(nameof(AddedToCheatManager)); }
    }
    public class CollisionProfile : DeveloperSettings
    {
        public CollisionProfile(nint addr) : base(addr) { }
        public Array<CollisionResponseTemplate> Profiles { get { return new Array<CollisionResponseTemplate>(this[nameof(Profiles)].Address); } }
        public Array<CustomChannelSetup> DefaultChannelResponses { get { return new Array<CustomChannelSetup>(this[nameof(DefaultChannelResponses)].Address); } }
        public Array<CustomProfile> EditProfiles { get { return new Array<CustomProfile>(this[nameof(EditProfiles)].Address); } }
        public Array<Redirector> ProfileRedirects { get { return new Array<Redirector>(this[nameof(ProfileRedirects)].Address); } }
        public Array<Redirector> CollisionChannelRedirects { get { return new Array<Redirector>(this[nameof(CollisionChannelRedirects)].Address); } }
    }
    public class PluginCommandlet : Commandlet
    {
        public PluginCommandlet(nint addr) : base(addr) { }
    }
    public class SmokeTestCommandlet : Commandlet
    {
        public SmokeTestCommandlet(nint addr) : base(addr) { }
    }
    public class ComponentDelegateBinding : DynamicBlueprintBinding
    {
        public ComponentDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintComponentDelegateBinding> ComponentDelegateBindings { get { return new Array<BlueprintComponentDelegateBinding>(this[nameof(ComponentDelegateBindings)].Address); } }
    }
    public class ActorComponentInstanceDataTransientOuter : Object
    {
        public ActorComponentInstanceDataTransientOuter(nint addr) : base(addr) { }
    }
    public class ApplicationLifecycleComponent : ActorComponent
    {
        public ApplicationLifecycleComponent(nint addr) : base(addr) { }
        public Object ApplicationWillDeactivateDelegate { get { return this[nameof(ApplicationWillDeactivateDelegate)]; } set { this[nameof(ApplicationWillDeactivateDelegate)] = value; } }
        public Object ApplicationHasReactivatedDelegate { get { return this[nameof(ApplicationHasReactivatedDelegate)]; } set { this[nameof(ApplicationHasReactivatedDelegate)] = value; } }
        public Object ApplicationWillEnterBackgroundDelegate { get { return this[nameof(ApplicationWillEnterBackgroundDelegate)]; } set { this[nameof(ApplicationWillEnterBackgroundDelegate)] = value; } }
        public Object ApplicationHasEnteredForegroundDelegate { get { return this[nameof(ApplicationHasEnteredForegroundDelegate)]; } set { this[nameof(ApplicationHasEnteredForegroundDelegate)] = value; } }
        public Object ApplicationWillTerminateDelegate { get { return this[nameof(ApplicationWillTerminateDelegate)]; } set { this[nameof(ApplicationWillTerminateDelegate)] = value; } }
        public Object ApplicationShouldUnloadResourcesDelegate { get { return this[nameof(ApplicationShouldUnloadResourcesDelegate)]; } set { this[nameof(ApplicationShouldUnloadResourcesDelegate)] = value; } }
        public Object ApplicationReceivedStartupArgumentsDelegate { get { return this[nameof(ApplicationReceivedStartupArgumentsDelegate)]; } set { this[nameof(ApplicationReceivedStartupArgumentsDelegate)] = value; } }
        public Object OnTemperatureChangeDelegate { get { return this[nameof(OnTemperatureChangeDelegate)]; } set { this[nameof(OnTemperatureChangeDelegate)] = value; } }
        public Object OnLowPowerModeDelegate { get { return this[nameof(OnLowPowerModeDelegate)]; } set { this[nameof(OnLowPowerModeDelegate)] = value; } }
    }
    public class InitialActiveSoundParams : Object
    {
        public InitialActiveSoundParams(nint addr) : base(addr) { }
        public Array<AudioParameter> AudioParams { get { return new Array<AudioParameter>(this[nameof(AudioParams)].Address); } }
    }
    public class BillboardComponent : PrimitiveComponent
    {
        public BillboardComponent(nint addr) : base(addr) { }
        public Texture2D Sprite { get { return this[nameof(Sprite)].As<Texture2D>(); } set { this["Sprite"] = value; } }
        public bool bIsScreenSizeScaled { get { return this[nameof(bIsScreenSizeScaled)].Flag; } set { this[nameof(bIsScreenSizeScaled)].Flag = value; } }
        public float ScreenSize { get { return this[nameof(ScreenSize)].GetValue<float>(); } set { this[nameof(ScreenSize)].SetValue<float>(value); } }
        public float U { get { return this[nameof(U)].GetValue<float>(); } set { this[nameof(U)].SetValue<float>(value); } }
        public float UL { get { return this[nameof(UL)].GetValue<float>(); } set { this[nameof(UL)].SetValue<float>(value); } }
        public float V { get { return this[nameof(V)].GetValue<float>(); } set { this[nameof(V)].SetValue<float>(value); } }
        public float VL { get { return this[nameof(VL)].GetValue<float>(); } set { this[nameof(VL)].SetValue<float>(value); } }
        public float OpacityMaskRefVal { get { return this[nameof(OpacityMaskRefVal)].GetValue<float>(); } set { this[nameof(OpacityMaskRefVal)].SetValue<float>(value); } }
        public void SetUV(int NewU, int NewUL, int NewV, int NewVL) { Invoke(nameof(SetUV), NewU, NewUL, NewV, NewVL); }
        public void SetSpriteAndUV(Texture2D NewSprite, int NewU, int NewUL, int NewV, int NewVL) { Invoke(nameof(SetSpriteAndUV), NewSprite, NewU, NewUL, NewV, NewVL); }
        public void SetSprite(Texture2D NewSprite) { Invoke(nameof(SetSprite), NewSprite); }
        public void SetOpacityMaskRefVal(float RefVal) { Invoke(nameof(SetOpacityMaskRefVal), RefVal); }
    }
    public class BoundsCopyComponent : ActorComponent
    {
        public BoundsCopyComponent(nint addr) : base(addr) { }
        public Object BoundsSourceActor { get { return this[nameof(BoundsSourceActor)]; } set { this[nameof(BoundsSourceActor)] = value; } }
        public bool bUseCollidingComponentsForSourceBounds { get { return this[nameof(bUseCollidingComponentsForSourceBounds)].Flag; } set { this[nameof(bUseCollidingComponentsForSourceBounds)].Flag = value; } }
        public bool bKeepOwnBoundsScale { get { return this[nameof(bKeepOwnBoundsScale)].Flag; } set { this[nameof(bKeepOwnBoundsScale)].Flag = value; } }
        public bool bUseCollidingComponentsForOwnBounds { get { return this[nameof(bUseCollidingComponentsForOwnBounds)].Flag; } set { this[nameof(bUseCollidingComponentsForOwnBounds)].Flag = value; } }
        public Transform PostTransform { get { return this[nameof(PostTransform)].As<Transform>(); } set { this["PostTransform"] = value; } }
        public bool bCopyXBounds { get { return this[nameof(bCopyXBounds)].Flag; } set { this[nameof(bCopyXBounds)].Flag = value; } }
        public bool bCopyYBounds { get { return this[nameof(bCopyYBounds)].Flag; } set { this[nameof(bCopyYBounds)].Flag = value; } }
        public bool bCopyZBounds { get { return this[nameof(bCopyZBounds)].Flag; } set { this[nameof(bCopyZBounds)].Flag = value; } }
    }
    public class BrushComponent : PrimitiveComponent
    {
        public BrushComponent(nint addr) : base(addr) { }
        public Model Brush { get { return this[nameof(Brush)].As<Model>(); } set { this["Brush"] = value; } }
        public BodySetup BrushBodySetup { get { return this[nameof(BrushBodySetup)].As<BodySetup>(); } set { this["BrushBodySetup"] = value; } }
    }
    public class ChildActorComponent : SceneComponent
    {
        public ChildActorComponent(nint addr) : base(addr) { }
        public Object ChildActorClass { get { return this[nameof(ChildActorClass)]; } set { this[nameof(ChildActorClass)] = value; } }
        public Actor ChildActor { get { return this[nameof(ChildActor)].As<Actor>(); } set { this["ChildActor"] = value; } }
        public Actor ChildActorTemplate { get { return this[nameof(ChildActorTemplate)].As<Actor>(); } set { this["ChildActorTemplate"] = value; } }
        public void SetChildActorClass(Object InClass) { Invoke(nameof(SetChildActorClass), InClass); }
        public void OnChildActorDestroyed(Actor DestroyedActor) { Invoke(nameof(OnChildActorDestroyed), DestroyedActor); }
    }
    public class DecalComponent : SceneComponent
    {
        public DecalComponent(nint addr) : base(addr) { }
        public MaterialInterface DecalMaterial { get { return this[nameof(DecalMaterial)].As<MaterialInterface>(); } set { this["DecalMaterial"] = value; } }
        public int SortOrder { get { return this[nameof(SortOrder)].GetValue<int>(); } set { this[nameof(SortOrder)].SetValue<int>(value); } }
        public float fadeScreenSize { get { return this[nameof(fadeScreenSize)].GetValue<float>(); } set { this[nameof(fadeScreenSize)].SetValue<float>(value); } }
        public float FadeStartDelay { get { return this[nameof(FadeStartDelay)].GetValue<float>(); } set { this[nameof(FadeStartDelay)].SetValue<float>(value); } }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
        public float FadeInDuration { get { return this[nameof(FadeInDuration)].GetValue<float>(); } set { this[nameof(FadeInDuration)].SetValue<float>(value); } }
        public float FadeInStartDelay { get { return this[nameof(FadeInStartDelay)].GetValue<float>(); } set { this[nameof(FadeInStartDelay)].SetValue<float>(value); } }
        public bool bDestroyOwnerAfterFade { get { return this[nameof(bDestroyOwnerAfterFade)].Flag; } set { this[nameof(bDestroyOwnerAfterFade)].Flag = value; } }
        public Vector DecalSize { get { return this[nameof(DecalSize)].As<Vector>(); } set { this["DecalSize"] = value; } }
        public void SetSortOrder(int Value) { Invoke(nameof(SetSortOrder), Value); }
        public void SetFadeScreenSize(float NewFadeScreenSize) { Invoke(nameof(SetFadeScreenSize), NewFadeScreenSize); }
        public void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade) { Invoke(nameof(SetFadeOut), StartDelay, Duration, DestroyOwnerAfterFade); }
        public void SetFadeIn(float StartDelay, float Duaration) { Invoke(nameof(SetFadeIn), StartDelay, Duaration); }
        public void SetDecalMaterial(MaterialInterface NewDecalMaterial) { Invoke(nameof(SetDecalMaterial), NewDecalMaterial); }
        public float GetFadeStartDelay() { return Invoke<float>(nameof(GetFadeStartDelay)); }
        public float GetFadeInStartDelay() { return Invoke<float>(nameof(GetFadeInStartDelay)); }
        public float GetFadeInDuration() { return Invoke<float>(nameof(GetFadeInDuration)); }
        public float GetFadeDuration() { return Invoke<float>(nameof(GetFadeDuration)); }
        public MaterialInterface GetDecalMaterial() { return Invoke<MaterialInterface>(nameof(GetDecalMaterial)); }
        public MaterialInstanceDynamic CreateDynamicMaterialInstance() { return Invoke<MaterialInstanceDynamic>(nameof(CreateDynamicMaterialInstance)); }
    }
    public class DirectionalLightComponent : LightComponent
    {
        public DirectionalLightComponent(nint addr) : base(addr) { }
        public float ShadowCascadeBiasDistribution { get { return this[nameof(ShadowCascadeBiasDistribution)].GetValue<float>(); } set { this[nameof(ShadowCascadeBiasDistribution)].SetValue<float>(value); } }
        public bool bEnableLightShaftOcclusion { get { return this[nameof(bEnableLightShaftOcclusion)].Flag; } set { this[nameof(bEnableLightShaftOcclusion)].Flag = value; } }
        public float OcclusionMaskDarkness { get { return this[nameof(OcclusionMaskDarkness)].GetValue<float>(); } set { this[nameof(OcclusionMaskDarkness)].SetValue<float>(value); } }
        public float OcclusionDepthRange { get { return this[nameof(OcclusionDepthRange)].GetValue<float>(); } set { this[nameof(OcclusionDepthRange)].SetValue<float>(value); } }
        public Vector LightShaftOverrideDirection { get { return this[nameof(LightShaftOverrideDirection)].As<Vector>(); } set { this["LightShaftOverrideDirection"] = value; } }
        public float WholeSceneDynamicShadowRadius { get { return this[nameof(WholeSceneDynamicShadowRadius)].GetValue<float>(); } set { this[nameof(WholeSceneDynamicShadowRadius)].SetValue<float>(value); } }
        public float DynamicShadowDistanceMovableLight { get { return this[nameof(DynamicShadowDistanceMovableLight)].GetValue<float>(); } set { this[nameof(DynamicShadowDistanceMovableLight)].SetValue<float>(value); } }
        public float DynamicShadowDistanceStationaryLight { get { return this[nameof(DynamicShadowDistanceStationaryLight)].GetValue<float>(); } set { this[nameof(DynamicShadowDistanceStationaryLight)].SetValue<float>(value); } }
        public int DynamicShadowCascades { get { return this[nameof(DynamicShadowCascades)].GetValue<int>(); } set { this[nameof(DynamicShadowCascades)].SetValue<int>(value); } }
        public float CascadeDistributionExponent { get { return this[nameof(CascadeDistributionExponent)].GetValue<float>(); } set { this[nameof(CascadeDistributionExponent)].SetValue<float>(value); } }
        public float CascadeTransitionFraction { get { return this[nameof(CascadeTransitionFraction)].GetValue<float>(); } set { this[nameof(CascadeTransitionFraction)].SetValue<float>(value); } }
        public float ShadowDistanceFadeoutFraction { get { return this[nameof(ShadowDistanceFadeoutFraction)].GetValue<float>(); } set { this[nameof(ShadowDistanceFadeoutFraction)].SetValue<float>(value); } }
        public bool bUseInsetShadowsForMovableObjects { get { return this[nameof(bUseInsetShadowsForMovableObjects)].Flag; } set { this[nameof(bUseInsetShadowsForMovableObjects)].Flag = value; } }
        public int FarShadowCascadeCount { get { return this[nameof(FarShadowCascadeCount)].GetValue<int>(); } set { this[nameof(FarShadowCascadeCount)].SetValue<int>(value); } }
        public float FarShadowDistance { get { return this[nameof(FarShadowDistance)].GetValue<float>(); } set { this[nameof(FarShadowDistance)].SetValue<float>(value); } }
        public float DistanceFieldShadowDistance { get { return this[nameof(DistanceFieldShadowDistance)].GetValue<float>(); } set { this[nameof(DistanceFieldShadowDistance)].SetValue<float>(value); } }
        public int ForwardShadingPriority { get { return this[nameof(ForwardShadingPriority)].GetValue<int>(); } set { this[nameof(ForwardShadingPriority)].SetValue<int>(value); } }
        public float LightSourceAngle { get { return this[nameof(LightSourceAngle)].GetValue<float>(); } set { this[nameof(LightSourceAngle)].SetValue<float>(value); } }
        public float LightSourceSoftAngle { get { return this[nameof(LightSourceSoftAngle)].GetValue<float>(); } set { this[nameof(LightSourceSoftAngle)].SetValue<float>(value); } }
        public float ShadowSourceAngleFactor { get { return this[nameof(ShadowSourceAngleFactor)].GetValue<float>(); } set { this[nameof(ShadowSourceAngleFactor)].SetValue<float>(value); } }
        public float TraceDistance { get { return this[nameof(TraceDistance)].GetValue<float>(); } set { this[nameof(TraceDistance)].SetValue<float>(value); } }
        public bool bUsedAsAtmosphereSunLight { get { return this[nameof(bUsedAsAtmosphereSunLight)].Flag; } set { this[nameof(bUsedAsAtmosphereSunLight)].Flag = value; } }
        public bool bAtmosphereSunLight { get { return this[nameof(bAtmosphereSunLight)].Flag; } set { this[nameof(bAtmosphereSunLight)].Flag = value; } }
        public int AtmosphereSunLightIndex { get { return this[nameof(AtmosphereSunLightIndex)].GetValue<int>(); } set { this[nameof(AtmosphereSunLightIndex)].SetValue<int>(value); } }
        public LinearColor AtmosphereSunDiskColorScale { get { return this[nameof(AtmosphereSunDiskColorScale)].As<LinearColor>(); } set { this["AtmosphereSunDiskColorScale"] = value; } }
        public bool bPerPixelAtmosphereTransmittance { get { return this[nameof(bPerPixelAtmosphereTransmittance)].Flag; } set { this[nameof(bPerPixelAtmosphereTransmittance)].Flag = value; } }
        public bool bCastShadowsOnClouds { get { return this[nameof(bCastShadowsOnClouds)].Flag; } set { this[nameof(bCastShadowsOnClouds)].Flag = value; } }
        public bool bCastShadowsOnAtmosphere { get { return this[nameof(bCastShadowsOnAtmosphere)].Flag; } set { this[nameof(bCastShadowsOnAtmosphere)].Flag = value; } }
        public bool bCastCloudShadows { get { return this[nameof(bCastCloudShadows)].Flag; } set { this[nameof(bCastCloudShadows)].Flag = value; } }
        public float CloudShadowStrength { get { return this[nameof(CloudShadowStrength)].GetValue<float>(); } set { this[nameof(CloudShadowStrength)].SetValue<float>(value); } }
        public float CloudShadowOnAtmosphereStrength { get { return this[nameof(CloudShadowOnAtmosphereStrength)].GetValue<float>(); } set { this[nameof(CloudShadowOnAtmosphereStrength)].SetValue<float>(value); } }
        public float CloudShadowOnSurfaceStrength { get { return this[nameof(CloudShadowOnSurfaceStrength)].GetValue<float>(); } set { this[nameof(CloudShadowOnSurfaceStrength)].SetValue<float>(value); } }
        public float CloudShadowDepthBias { get { return this[nameof(CloudShadowDepthBias)].GetValue<float>(); } set { this[nameof(CloudShadowDepthBias)].SetValue<float>(value); } }
        public float CloudShadowExtent { get { return this[nameof(CloudShadowExtent)].GetValue<float>(); } set { this[nameof(CloudShadowExtent)].SetValue<float>(value); } }
        public float CloudShadowMapResolutionScale { get { return this[nameof(CloudShadowMapResolutionScale)].GetValue<float>(); } set { this[nameof(CloudShadowMapResolutionScale)].SetValue<float>(value); } }
        public float CloudShadowRaySampleCountScale { get { return this[nameof(CloudShadowRaySampleCountScale)].GetValue<float>(); } set { this[nameof(CloudShadowRaySampleCountScale)].SetValue<float>(value); } }
        public LinearColor CloudScatteredLuminanceScale { get { return this[nameof(CloudScatteredLuminanceScale)].As<LinearColor>(); } set { this["CloudScatteredLuminanceScale"] = value; } }
        public LightmassDirectionalLightSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassDirectionalLightSettings>(); } set { this["LightmassSettings"] = value; } }
        public bool bCastModulatedShadows { get { return this[nameof(bCastModulatedShadows)].Flag; } set { this[nameof(bCastModulatedShadows)].Flag = value; } }
        public Color ModulatedShadowColor { get { return this[nameof(ModulatedShadowColor)].As<Color>(); } set { this["ModulatedShadowColor"] = value; } }
        public float ShadowAmount { get { return this[nameof(ShadowAmount)].GetValue<float>(); } set { this[nameof(ShadowAmount)].SetValue<float>(value); } }
        public void SetShadowSourceAngleFactor(float NewValue) { Invoke(nameof(SetShadowSourceAngleFactor), NewValue); }
        public void SetShadowDistanceFadeoutFraction(float NewValue) { Invoke(nameof(SetShadowDistanceFadeoutFraction), NewValue); }
        public void SetShadowCascadeBiasDistribution(float NewValue) { Invoke(nameof(SetShadowCascadeBiasDistribution), NewValue); }
        public void SetShadowAmount(float NewValue) { Invoke(nameof(SetShadowAmount), NewValue); }
        public void SetOcclusionMaskDarkness(float NewValue) { Invoke(nameof(SetOcclusionMaskDarkness), NewValue); }
        public void SetOcclusionDepthRange(float NewValue) { Invoke(nameof(SetOcclusionDepthRange), NewValue); }
        public void SetLightSourceSoftAngle(float NewValue) { Invoke(nameof(SetLightSourceSoftAngle), NewValue); }
        public void SetLightSourceAngle(float NewValue) { Invoke(nameof(SetLightSourceAngle), NewValue); }
        public void SetLightShaftOverrideDirection(Vector NewValue) { Invoke(nameof(SetLightShaftOverrideDirection), NewValue); }
        public void SetEnableLightShaftOcclusion(bool bNewValue) { Invoke(nameof(SetEnableLightShaftOcclusion), bNewValue); }
        public void SetDynamicShadowDistanceStationaryLight(float NewValue) { Invoke(nameof(SetDynamicShadowDistanceStationaryLight), NewValue); }
        public void SetDynamicShadowDistanceMovableLight(float NewValue) { Invoke(nameof(SetDynamicShadowDistanceMovableLight), NewValue); }
        public void SetDynamicShadowCascades(int NewValue) { Invoke(nameof(SetDynamicShadowCascades), NewValue); }
        public void SetCascadeTransitionFraction(float NewValue) { Invoke(nameof(SetCascadeTransitionFraction), NewValue); }
        public void SetCascadeDistributionExponent(float NewValue) { Invoke(nameof(SetCascadeDistributionExponent), NewValue); }
        public void SetAtmosphereSunLightIndex(int NewValue) { Invoke(nameof(SetAtmosphereSunLightIndex), NewValue); }
        public void SetAtmosphereSunLight(bool bNewValue) { Invoke(nameof(SetAtmosphereSunLight), bNewValue); }
    }
    public class DrawFrustumComponent : PrimitiveComponent
    {
        public DrawFrustumComponent(nint addr) : base(addr) { }
        public bool bFrustumEnabled { get { return this[nameof(bFrustumEnabled)].Flag; } set { this[nameof(bFrustumEnabled)].Flag = value; } }
        public Color FrustumColor { get { return this[nameof(FrustumColor)].As<Color>(); } set { this["FrustumColor"] = value; } }
        public float FrustumAngle { get { return this[nameof(FrustumAngle)].GetValue<float>(); } set { this[nameof(FrustumAngle)].SetValue<float>(value); } }
        public float FrustumAspectRatio { get { return this[nameof(FrustumAspectRatio)].GetValue<float>(); } set { this[nameof(FrustumAspectRatio)].SetValue<float>(value); } }
        public float FrustumStartDist { get { return this[nameof(FrustumStartDist)].GetValue<float>(); } set { this[nameof(FrustumStartDist)].SetValue<float>(value); } }
        public float FrustumEndDist { get { return this[nameof(FrustumEndDist)].GetValue<float>(); } set { this[nameof(FrustumEndDist)].SetValue<float>(value); } }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
    }
    public class DrawSphereComponent : SphereComponent
    {
        public DrawSphereComponent(nint addr) : base(addr) { }
    }
    public class ForceFeedbackComponent : SceneComponent
    {
        public ForceFeedbackComponent(nint addr) : base(addr) { }
        public ForceFeedbackEffect ForceFeedbackEffect { get { return this[nameof(ForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["ForceFeedbackEffect"] = value; } }
        public bool bAutoDestroy { get { return this[nameof(bAutoDestroy)].Flag; } set { this[nameof(bAutoDestroy)].Flag = value; } }
        public bool bStopWhenOwnerDestroyed { get { return this[nameof(bStopWhenOwnerDestroyed)].Flag; } set { this[nameof(bStopWhenOwnerDestroyed)].Flag = value; } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
        public bool bOverrideAttenuation { get { return this[nameof(bOverrideAttenuation)].Flag; } set { this[nameof(bOverrideAttenuation)].Flag = value; } }
        public float IntensityMultiplier { get { return this[nameof(IntensityMultiplier)].GetValue<float>(); } set { this[nameof(IntensityMultiplier)].SetValue<float>(value); } }
        public ForceFeedbackAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<ForceFeedbackAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public ForceFeedbackAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<ForceFeedbackAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public Object OnForceFeedbackFinished { get { return this[nameof(OnForceFeedbackFinished)]; } set { this[nameof(OnForceFeedbackFinished)] = value; } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void SetIntensityMultiplier(float NewIntensityMultiplier) { Invoke(nameof(SetIntensityMultiplier), NewIntensityMultiplier); }
        public void SetForceFeedbackEffect(ForceFeedbackEffect NewForceFeedbackEffect) { Invoke(nameof(SetForceFeedbackEffect), NewForceFeedbackEffect); }
        public void Play(float StartTime) { Invoke(nameof(Play), StartTime); }
        public bool BP_GetAttenuationSettingsToApply(ForceFeedbackAttenuationSettings OutAttenuationSettings) { return Invoke<bool>(nameof(BP_GetAttenuationSettingsToApply), OutAttenuationSettings); }
        public void AdjustAttenuation(ForceFeedbackAttenuationSettings InAttenuationSettings) { Invoke(nameof(AdjustAttenuation), InAttenuationSettings); }
    }
    public class InterpToMovementComponent : MovementComponent
    {
        public InterpToMovementComponent(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool bPauseOnImpact { get { return this[nameof(bPauseOnImpact)].Flag; } set { this[nameof(bPauseOnImpact)].Flag = value; } }
        public bool bSweep { get { return this[nameof(bSweep)].Flag; } set { this[nameof(bSweep)].Flag = value; } }
        public ETeleportType TeleportType { get { return (ETeleportType)this[nameof(TeleportType)].GetValue<int>(); } set { this[nameof(TeleportType)].SetValue<int>((int)value); } }
        public EInterpToBehaviourType BehaviourType { get { return (EInterpToBehaviourType)this[nameof(BehaviourType)].GetValue<int>(); } set { this[nameof(BehaviourType)].SetValue<int>((int)value); } }
        public bool bCheckIfStillInWorld { get { return this[nameof(bCheckIfStillInWorld)].Flag; } set { this[nameof(bCheckIfStillInWorld)].Flag = value; } }
        public bool bForceSubStepping { get { return this[nameof(bForceSubStepping)].Flag; } set { this[nameof(bForceSubStepping)].Flag = value; } }
        public Object OnInterpToReverse { get { return this[nameof(OnInterpToReverse)]; } set { this[nameof(OnInterpToReverse)] = value; } }
        public Object OnInterpToStop { get { return this[nameof(OnInterpToStop)]; } set { this[nameof(OnInterpToStop)] = value; } }
        public Object OnWaitBeginDelegate { get { return this[nameof(OnWaitBeginDelegate)]; } set { this[nameof(OnWaitBeginDelegate)] = value; } }
        public Object OnWaitEndDelegate { get { return this[nameof(OnWaitEndDelegate)]; } set { this[nameof(OnWaitEndDelegate)] = value; } }
        public Object OnResetDelegate { get { return this[nameof(OnResetDelegate)]; } set { this[nameof(OnResetDelegate)] = value; } }
        public float MaxSimulationTimeStep { get { return this[nameof(MaxSimulationTimeStep)].GetValue<float>(); } set { this[nameof(MaxSimulationTimeStep)].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this[nameof(MaxSimulationIterations)].GetValue<int>(); } set { this[nameof(MaxSimulationIterations)].SetValue<int>(value); } }
        public Array<InterpControlPoint> ControlPoints { get { return new Array<InterpControlPoint>(this[nameof(ControlPoints)].Address); } }
        public void StopSimulating(HitResult HitResult) { Invoke(nameof(StopSimulating), HitResult); }
        public void RestartMovement(float InitialDirection) { Invoke(nameof(RestartMovement), InitialDirection); }
        public void ResetControlPoints() { Invoke(nameof(ResetControlPoints)); }
        public void OnInterpToWaitEndDelegate__DelegateSignature(HitResult ImpactResult, float Time) { Invoke(nameof(OnInterpToWaitEndDelegate__DelegateSignature), ImpactResult, Time); }
        public void OnInterpToWaitBeginDelegate__DelegateSignature(HitResult ImpactResult, float Time) { Invoke(nameof(OnInterpToWaitBeginDelegate__DelegateSignature), ImpactResult, Time); }
        public void OnInterpToStopDelegate__DelegateSignature(HitResult ImpactResult, float Time) { Invoke(nameof(OnInterpToStopDelegate__DelegateSignature), ImpactResult, Time); }
        public void OnInterpToReverseDelegate__DelegateSignature(HitResult ImpactResult, float Time) { Invoke(nameof(OnInterpToReverseDelegate__DelegateSignature), ImpactResult, Time); }
        public void OnInterpToResetDelegate__DelegateSignature(HitResult ImpactResult, float Time) { Invoke(nameof(OnInterpToResetDelegate__DelegateSignature), ImpactResult, Time); }
        public void FinaliseControlPoints() { Invoke(nameof(FinaliseControlPoints)); }
        public void AddControlPointPosition(Vector Pos, bool bPositionIsRelative) { Invoke(nameof(AddControlPointPosition), Pos, bPositionIsRelative); }
    }
    public class LineBatchComponent : PrimitiveComponent
    {
        public LineBatchComponent(nint addr) : base(addr) { }
    }
    public class LODSyncComponent : ActorComponent
    {
        public LODSyncComponent(nint addr) : base(addr) { }
        public int NumLODs { get { return this[nameof(NumLODs)].GetValue<int>(); } set { this[nameof(NumLODs)].SetValue<int>(value); } }
        public int ForcedLOD { get { return this[nameof(ForcedLOD)].GetValue<int>(); } set { this[nameof(ForcedLOD)].SetValue<int>(value); } }
        public int MinLOD { get { return this[nameof(MinLOD)].GetValue<int>(); } set { this[nameof(MinLOD)].SetValue<int>(value); } }
        public Array<ComponentSync> ComponentsToSync { get { return new Array<ComponentSync>(this[nameof(ComponentsToSync)].Address); } }
        public Object CustomLODMapping { get { return this[nameof(CustomLODMapping)]; } set { this[nameof(CustomLODMapping)] = value; } }
        public int CurrentLOD { get { return this[nameof(CurrentLOD)].GetValue<int>(); } set { this[nameof(CurrentLOD)].SetValue<int>(value); } }
        public int CurrentNumLODs { get { return this[nameof(CurrentNumLODs)].GetValue<int>(); } set { this[nameof(CurrentNumLODs)].SetValue<int>(value); } }
        public Array<PrimitiveComponent> DriveComponents { get { return new Array<PrimitiveComponent>(this[nameof(DriveComponents)].Address); } }
        public Array<PrimitiveComponent> SubComponents { get { return new Array<PrimitiveComponent>(this[nameof(SubComponents)].Address); } }
        public Object GetLODSyncDebugText() { return Invoke<Object>(nameof(GetLODSyncDebugText)); }
    }
    public class MaterialBillboardComponent : PrimitiveComponent
    {
        public MaterialBillboardComponent(nint addr) : base(addr) { }
        public Array<MaterialSpriteElement> Elements { get { return new Array<MaterialSpriteElement>(this[nameof(Elements)].Address); } }
        public void SetElements(Array<MaterialSpriteElement> NewElements) { Invoke(nameof(SetElements), NewElements); }
        public void AddElement(MaterialInterface Material, CurveFloat DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat DistanceToSizeCurve) { Invoke(nameof(AddElement), Material, DistanceToOpacityCurve, bSizeIsInScreenSpace, BaseSizeX, BaseSizeY, DistanceToSizeCurve); }
    }
    public class ModelComponent : PrimitiveComponent
    {
        public ModelComponent(nint addr) : base(addr) { }
        public BodySetup ModelBodySetup { get { return this[nameof(ModelBodySetup)].As<BodySetup>(); } set { this["ModelBodySetup"] = value; } }
    }
    public class PawnNoiseEmitterComponent : ActorComponent
    {
        public PawnNoiseEmitterComponent(nint addr) : base(addr) { }
        public bool bAIPerceptionSystemCompatibilityMode { get { return this[nameof(bAIPerceptionSystemCompatibilityMode)].Flag; } set { this[nameof(bAIPerceptionSystemCompatibilityMode)].Flag = value; } }
        public Vector LastRemoteNoisePosition { get { return this[nameof(LastRemoteNoisePosition)].As<Vector>(); } set { this["LastRemoteNoisePosition"] = value; } }
        public float NoiseLifetime { get { return this[nameof(NoiseLifetime)].GetValue<float>(); } set { this[nameof(NoiseLifetime)].SetValue<float>(value); } }
        public float LastRemoteNoiseVolume { get { return this[nameof(LastRemoteNoiseVolume)].GetValue<float>(); } set { this[nameof(LastRemoteNoiseVolume)].SetValue<float>(value); } }
        public float LastRemoteNoiseTime { get { return this[nameof(LastRemoteNoiseTime)].GetValue<float>(); } set { this[nameof(LastRemoteNoiseTime)].SetValue<float>(value); } }
        public float LastLocalNoiseVolume { get { return this[nameof(LastLocalNoiseVolume)].GetValue<float>(); } set { this[nameof(LastLocalNoiseVolume)].SetValue<float>(value); } }
        public float LastLocalNoiseTime { get { return this[nameof(LastLocalNoiseTime)].GetValue<float>(); } set { this[nameof(LastLocalNoiseTime)].SetValue<float>(value); } }
        public void MakeNoise(Actor NoiseMaker, float Loudness, Vector NoiseLocation) { Invoke(nameof(MakeNoise), NoiseMaker, Loudness, NoiseLocation); }
    }
    public class PlatformEventsComponent : ActorComponent
    {
        public PlatformEventsComponent(nint addr) : base(addr) { }
        public Object PlatformChangedToLaptopModeDelegate { get { return this[nameof(PlatformChangedToLaptopModeDelegate)]; } set { this[nameof(PlatformChangedToLaptopModeDelegate)] = value; } }
        public Object PlatformChangedToTabletModeDelegate { get { return this[nameof(PlatformChangedToTabletModeDelegate)]; } set { this[nameof(PlatformChangedToTabletModeDelegate)] = value; } }
        public bool SupportsConvertibleLaptops() { return Invoke<bool>(nameof(SupportsConvertibleLaptops)); }
        public void PlatformEventDelegate__DelegateSignature() { Invoke(nameof(PlatformEventDelegate__DelegateSignature)); }
        public bool IsInTabletMode() { return Invoke<bool>(nameof(IsInTabletMode)); }
        public bool IsInLaptopMode() { return Invoke<bool>(nameof(IsInLaptopMode)); }
    }
    public class PoseableMeshComponent : SkinnedMeshComponent
    {
        public PoseableMeshComponent(nint addr) : base(addr) { }
        public void SetBoneTransformByName(Object BoneName, Transform InTransform, byte BoneSpace) { Invoke(nameof(SetBoneTransformByName), BoneName, InTransform, BoneSpace); }
        public void SetBoneScaleByName(Object BoneName, Vector InScale3D, byte BoneSpace) { Invoke(nameof(SetBoneScaleByName), BoneName, InScale3D, BoneSpace); }
        public void SetBoneRotationByName(Object BoneName, Rotator InRotation, byte BoneSpace) { Invoke(nameof(SetBoneRotationByName), BoneName, InRotation, BoneSpace); }
        public void SetBoneLocationByName(Object BoneName, Vector InLocation, byte BoneSpace) { Invoke(nameof(SetBoneLocationByName), BoneName, InLocation, BoneSpace); }
        public void ResetBoneTransformByName(Object BoneName) { Invoke(nameof(ResetBoneTransformByName), BoneName); }
        public Transform GetBoneTransformByName(Object BoneName, byte BoneSpace) { return Invoke<Transform>(nameof(GetBoneTransformByName), BoneName, BoneSpace); }
        public Vector GetBoneScaleByName(Object BoneName, byte BoneSpace) { return Invoke<Vector>(nameof(GetBoneScaleByName), BoneName, BoneSpace); }
        public Rotator GetBoneRotationByName(Object BoneName, byte BoneSpace) { return Invoke<Rotator>(nameof(GetBoneRotationByName), BoneName, BoneSpace); }
        public Vector GetBoneLocationByName(Object BoneName, byte BoneSpace) { return Invoke<Vector>(nameof(GetBoneLocationByName), BoneName, BoneSpace); }
        public void CopyPoseFromSkeletalComponent(SkeletalMeshComponent InComponentToCopy) { Invoke(nameof(CopyPoseFromSkeletalComponent), InComponentToCopy); }
    }
    public class PostProcessComponent : SceneComponent
    {
        public PostProcessComponent(nint addr) : base(addr) { }
        public PostProcessSettings Settings { get { return this[nameof(Settings)].As<PostProcessSettings>(); } set { this["Settings"] = value; } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public float BlendRadius { get { return this[nameof(BlendRadius)].GetValue<float>(); } set { this[nameof(BlendRadius)].SetValue<float>(value); } }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bUnbound { get { return this[nameof(bUnbound)].Flag; } set { this[nameof(bUnbound)].Flag = value; } }
        public void AddOrUpdateBlendable(Object InBlendableObject, float InWeight) { Invoke(nameof(AddOrUpdateBlendable), InBlendableObject, InWeight); }
    }
    public class ProjectileMovementComponent : MovementComponent
    {
        public ProjectileMovementComponent(nint addr) : base(addr) { }
        public float InitialSpeed { get { return this[nameof(InitialSpeed)].GetValue<float>(); } set { this[nameof(InitialSpeed)].SetValue<float>(value); } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public bool bRotationFollowsVelocity { get { return this[nameof(bRotationFollowsVelocity)].Flag; } set { this[nameof(bRotationFollowsVelocity)].Flag = value; } }
        public bool bRotationRemainsVertical { get { return this[nameof(bRotationRemainsVertical)].Flag; } set { this[nameof(bRotationRemainsVertical)].Flag = value; } }
        public bool bShouldBounce { get { return this[nameof(bShouldBounce)].Flag; } set { this[nameof(bShouldBounce)].Flag = value; } }
        public bool bInitialVelocityInLocalSpace { get { return this[nameof(bInitialVelocityInLocalSpace)].Flag; } set { this[nameof(bInitialVelocityInLocalSpace)].Flag = value; } }
        public bool bForceSubStepping { get { return this[nameof(bForceSubStepping)].Flag; } set { this[nameof(bForceSubStepping)].Flag = value; } }
        public bool bSimulationEnabled { get { return this[nameof(bSimulationEnabled)].Flag; } set { this[nameof(bSimulationEnabled)].Flag = value; } }
        public bool bSweepCollision { get { return this[nameof(bSweepCollision)].Flag; } set { this[nameof(bSweepCollision)].Flag = value; } }
        public bool bIsHomingProjectile { get { return this[nameof(bIsHomingProjectile)].Flag; } set { this[nameof(bIsHomingProjectile)].Flag = value; } }
        public bool bBounceAngleAffectsFriction { get { return this[nameof(bBounceAngleAffectsFriction)].Flag; } set { this[nameof(bBounceAngleAffectsFriction)].Flag = value; } }
        public bool bIsSliding { get { return this[nameof(bIsSliding)].Flag; } set { this[nameof(bIsSliding)].Flag = value; } }
        public bool bInterpMovement { get { return this[nameof(bInterpMovement)].Flag; } set { this[nameof(bInterpMovement)].Flag = value; } }
        public bool bInterpRotation { get { return this[nameof(bInterpRotation)].Flag; } set { this[nameof(bInterpRotation)].Flag = value; } }
        public float PreviousHitTime { get { return this[nameof(PreviousHitTime)].GetValue<float>(); } set { this[nameof(PreviousHitTime)].SetValue<float>(value); } }
        public Vector PreviousHitNormal { get { return this[nameof(PreviousHitNormal)].As<Vector>(); } set { this["PreviousHitNormal"] = value; } }
        public float ProjectileGravityScale { get { return this[nameof(ProjectileGravityScale)].GetValue<float>(); } set { this[nameof(ProjectileGravityScale)].SetValue<float>(value); } }
        public float Buoyancy { get { return this[nameof(Buoyancy)].GetValue<float>(); } set { this[nameof(Buoyancy)].SetValue<float>(value); } }
        public float Bounciness { get { return this[nameof(Bounciness)].GetValue<float>(); } set { this[nameof(Bounciness)].SetValue<float>(value); } }
        public float Friction { get { return this[nameof(Friction)].GetValue<float>(); } set { this[nameof(Friction)].SetValue<float>(value); } }
        public float BounceVelocityStopSimulatingThreshold { get { return this[nameof(BounceVelocityStopSimulatingThreshold)].GetValue<float>(); } set { this[nameof(BounceVelocityStopSimulatingThreshold)].SetValue<float>(value); } }
        public float MinFrictionFraction { get { return this[nameof(MinFrictionFraction)].GetValue<float>(); } set { this[nameof(MinFrictionFraction)].SetValue<float>(value); } }
        public Object OnProjectileBounce { get { return this[nameof(OnProjectileBounce)]; } set { this[nameof(OnProjectileBounce)] = value; } }
        public Object OnProjectileStop { get { return this[nameof(OnProjectileStop)]; } set { this[nameof(OnProjectileStop)] = value; } }
        public float HomingAccelerationMagnitude { get { return this[nameof(HomingAccelerationMagnitude)].GetValue<float>(); } set { this[nameof(HomingAccelerationMagnitude)].SetValue<float>(value); } }
        public Object HomingTargetComponent { get { return this[nameof(HomingTargetComponent)]; } set { this[nameof(HomingTargetComponent)] = value; } }
        public float MaxSimulationTimeStep { get { return this[nameof(MaxSimulationTimeStep)].GetValue<float>(); } set { this[nameof(MaxSimulationTimeStep)].SetValue<float>(value); } }
        public int MaxSimulationIterations { get { return this[nameof(MaxSimulationIterations)].GetValue<int>(); } set { this[nameof(MaxSimulationIterations)].SetValue<int>(value); } }
        public int BounceAdditionalIterations { get { return this[nameof(BounceAdditionalIterations)].GetValue<int>(); } set { this[nameof(BounceAdditionalIterations)].SetValue<int>(value); } }
        public float InterpLocationTime { get { return this[nameof(InterpLocationTime)].GetValue<float>(); } set { this[nameof(InterpLocationTime)].SetValue<float>(value); } }
        public float InterpRotationTime { get { return this[nameof(InterpRotationTime)].GetValue<float>(); } set { this[nameof(InterpRotationTime)].SetValue<float>(value); } }
        public float InterpLocationMaxLagDistance { get { return this[nameof(InterpLocationMaxLagDistance)].GetValue<float>(); } set { this[nameof(InterpLocationMaxLagDistance)].SetValue<float>(value); } }
        public float InterpLocationSnapToTargetDistance { get { return this[nameof(InterpLocationSnapToTargetDistance)].GetValue<float>(); } set { this[nameof(InterpLocationSnapToTargetDistance)].SetValue<float>(value); } }
        public void StopSimulating(HitResult HitResult) { Invoke(nameof(StopSimulating), HitResult); }
        public void SetVelocityInLocalSpace(Vector NewVelocity) { Invoke(nameof(SetVelocityInLocalSpace), NewVelocity); }
        public void SetInterpolatedComponent(SceneComponent Component) { Invoke(nameof(SetInterpolatedComponent), Component); }
        public void ResetInterpolation() { Invoke(nameof(ResetInterpolation)); }
        public void OnProjectileStopDelegate__DelegateSignature(HitResult ImpactResult) { Invoke(nameof(OnProjectileStopDelegate__DelegateSignature), ImpactResult); }
        public void OnProjectileBounceDelegate__DelegateSignature(HitResult ImpactResult, Vector ImpactVelocity) { Invoke(nameof(OnProjectileBounceDelegate__DelegateSignature), ImpactResult, ImpactVelocity); }
        public void MoveInterpolationTarget(Vector NewLocation, Rotator NewRotation) { Invoke(nameof(MoveInterpolationTarget), NewLocation, NewRotation); }
        public Vector LimitVelocity(Vector NewVelocity) { return Invoke<Vector>(nameof(LimitVelocity), NewVelocity); }
        public bool IsVelocityUnderSimulationThreshold() { return Invoke<bool>(nameof(IsVelocityUnderSimulationThreshold)); }
        public bool IsInterpolationComplete() { return Invoke<bool>(nameof(IsInterpolationComplete)); }
    }
    public class RectLightComponent : LocalLightComponent
    {
        public RectLightComponent(nint addr) : base(addr) { }
        public float SourceWidth { get { return this[nameof(SourceWidth)].GetValue<float>(); } set { this[nameof(SourceWidth)].SetValue<float>(value); } }
        public float SourceHeight { get { return this[nameof(SourceHeight)].GetValue<float>(); } set { this[nameof(SourceHeight)].SetValue<float>(value); } }
        public float BarnDoorAngle { get { return this[nameof(BarnDoorAngle)].GetValue<float>(); } set { this[nameof(BarnDoorAngle)].SetValue<float>(value); } }
        public float BarnDoorLength { get { return this[nameof(BarnDoorLength)].GetValue<float>(); } set { this[nameof(BarnDoorLength)].SetValue<float>(value); } }
        public Texture SourceTexture { get { return this[nameof(SourceTexture)].As<Texture>(); } set { this["SourceTexture"] = value; } }
        public void SetSourceWidth(float NewValue) { Invoke(nameof(SetSourceWidth), NewValue); }
        public void SetSourceTexture(Texture NewValue) { Invoke(nameof(SetSourceTexture), NewValue); }
        public void SetSourceHeight(float NewValue) { Invoke(nameof(SetSourceHeight), NewValue); }
        public void SetBarnDoorLength(float NewValue) { Invoke(nameof(SetBarnDoorLength), NewValue); }
        public void SetBarnDoorAngle(float NewValue) { Invoke(nameof(SetBarnDoorAngle), NewValue); }
    }
    public class RotatingMovementComponent : MovementComponent
    {
        public RotatingMovementComponent(nint addr) : base(addr) { }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public Vector PivotTranslation { get { return this[nameof(PivotTranslation)].As<Vector>(); } set { this["PivotTranslation"] = value; } }
        public bool bRotationInLocalSpace { get { return this[nameof(bRotationInLocalSpace)].Flag; } set { this[nameof(bRotationInLocalSpace)].Flag = value; } }
    }
    public class RuntimeVirtualTextureComponent : SceneComponent
    {
        public RuntimeVirtualTextureComponent(nint addr) : base(addr) { }
        public Object BoundsAlignActor { get { return this[nameof(BoundsAlignActor)]; } set { this[nameof(BoundsAlignActor)] = value; } }
        public bool bSetBoundsButton { get { return this[nameof(bSetBoundsButton)].Flag; } set { this[nameof(bSetBoundsButton)].Flag = value; } }
        public bool bSnapBoundsToLandscape { get { return this[nameof(bSnapBoundsToLandscape)].Flag; } set { this[nameof(bSnapBoundsToLandscape)].Flag = value; } }
        public RuntimeVirtualTexture VirtualTexture { get { return this[nameof(VirtualTexture)].As<RuntimeVirtualTexture>(); } set { this["VirtualTexture"] = value; } }
        public bool bEnableScalability { get { return this[nameof(bEnableScalability)].Flag; } set { this[nameof(bEnableScalability)].Flag = value; } }
        public uint ScalabilityGroup { get { return this[nameof(ScalabilityGroup)].GetValue<uint>(); } set { this[nameof(ScalabilityGroup)].SetValue<uint>(value); } }
        public bool bHidePrimitives { get { return this[nameof(bHidePrimitives)].Flag; } set { this[nameof(bHidePrimitives)].Flag = value; } }
        public VirtualTextureBuilder StreamingTexture { get { return this[nameof(StreamingTexture)].As<VirtualTextureBuilder>(); } set { this["StreamingTexture"] = value; } }
        public int StreamLowMips { get { return this[nameof(StreamLowMips)].GetValue<int>(); } set { this[nameof(StreamLowMips)].SetValue<int>(value); } }
        public bool bBuildStreamingMipsButton { get { return this[nameof(bBuildStreamingMipsButton)].Flag; } set { this[nameof(bBuildStreamingMipsButton)].Flag = value; } }
        public byte LossyCompressionAmount { get { return this[nameof(LossyCompressionAmount)].GetValue<byte>(); } set { this[nameof(LossyCompressionAmount)].SetValue<byte>(value); } }
        public bool bUseStreamingLowMipsInEditor { get { return this[nameof(bUseStreamingLowMipsInEditor)].Flag; } set { this[nameof(bUseStreamingLowMipsInEditor)].Flag = value; } }
        public bool bBuildDebugStreamingMips { get { return this[nameof(bBuildDebugStreamingMips)].Flag; } set { this[nameof(bBuildDebugStreamingMips)].Flag = value; } }
        public void Invalidate(BoxSphereBounds WorldBounds) { Invoke(nameof(Invalidate), WorldBounds); }
    }
    public class SkyAtmosphere : Info
    {
        public SkyAtmosphere(nint addr) : base(addr) { }
        public SkyAtmosphereComponent SkyAtmosphereComponent { get { return this[nameof(SkyAtmosphereComponent)].As<SkyAtmosphereComponent>(); } set { this["SkyAtmosphereComponent"] = value; } }
    }
    public class SplineMeshComponent : StaticMeshComponent
    {
        public SplineMeshComponent(nint addr) : base(addr) { }
        public SplineMeshParams SplineParams { get { return this[nameof(SplineParams)].As<SplineMeshParams>(); } set { this["SplineParams"] = value; } }
        public Vector SplineUpDir { get { return this[nameof(SplineUpDir)].As<Vector>(); } set { this["SplineUpDir"] = value; } }
        public float SplineBoundaryMin { get { return this[nameof(SplineBoundaryMin)].GetValue<float>(); } set { this[nameof(SplineBoundaryMin)].SetValue<float>(value); } }
        public Guid CachedMeshBodySetupGuid { get { return this[nameof(CachedMeshBodySetupGuid)].As<Guid>(); } set { this["CachedMeshBodySetupGuid"] = value; } }
        public BodySetup BodySetup { get { return this[nameof(BodySetup)].As<BodySetup>(); } set { this["BodySetup"] = value; } }
        public float SplineBoundaryMax { get { return this[nameof(SplineBoundaryMax)].GetValue<float>(); } set { this[nameof(SplineBoundaryMax)].SetValue<float>(value); } }
        public bool bAllowSplineEditingPerInstance { get { return this[nameof(bAllowSplineEditingPerInstance)].Flag; } set { this[nameof(bAllowSplineEditingPerInstance)].Flag = value; } }
        public bool bSmoothInterpRollScale { get { return this[nameof(bSmoothInterpRollScale)].Flag; } set { this[nameof(bSmoothInterpRollScale)].Flag = value; } }
        public bool bMeshDirty { get { return this[nameof(bMeshDirty)].Flag; } set { this[nameof(bMeshDirty)].Flag = value; } }
        public byte ForwardAxis { get { return this[nameof(ForwardAxis)].GetValue<byte>(); } set { this[nameof(ForwardAxis)].SetValue<byte>(value); } }
        public float VirtualTextureMainPassMaxDrawDistance { get { return this[nameof(VirtualTextureMainPassMaxDrawDistance)].GetValue<float>(); } set { this[nameof(VirtualTextureMainPassMaxDrawDistance)].SetValue<float>(value); } }
        public void UpdateMesh() { Invoke(nameof(UpdateMesh)); }
        public void SetStartTangent(Vector StartTangent, bool bUpdateMesh) { Invoke(nameof(SetStartTangent), StartTangent, bUpdateMesh); }
        public void SetStartScale(Vector2D StartScale, bool bUpdateMesh) { Invoke(nameof(SetStartScale), StartScale, bUpdateMesh); }
        public void SetStartRoll(float StartRoll, bool bUpdateMesh) { Invoke(nameof(SetStartRoll), StartRoll, bUpdateMesh); }
        public void SetStartPosition(Vector StartPos, bool bUpdateMesh) { Invoke(nameof(SetStartPosition), StartPos, bUpdateMesh); }
        public void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh) { Invoke(nameof(SetStartOffset), StartOffset, bUpdateMesh); }
        public void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh) { Invoke(nameof(SetStartAndEnd), StartPos, StartTangent, EndPos, EndTangent, bUpdateMesh); }
        public void SetSplineUpDir(Vector InSplineUpDir, bool bUpdateMesh) { Invoke(nameof(SetSplineUpDir), InSplineUpDir, bUpdateMesh); }
        public void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh) { Invoke(nameof(SetForwardAxis), InForwardAxis, bUpdateMesh); }
        public void SetEndTangent(Vector EndTangent, bool bUpdateMesh) { Invoke(nameof(SetEndTangent), EndTangent, bUpdateMesh); }
        public void SetEndScale(Vector2D EndScale, bool bUpdateMesh) { Invoke(nameof(SetEndScale), EndScale, bUpdateMesh); }
        public void SetEndRoll(float EndRoll, bool bUpdateMesh) { Invoke(nameof(SetEndRoll), EndRoll, bUpdateMesh); }
        public void SetEndPosition(Vector EndPos, bool bUpdateMesh) { Invoke(nameof(SetEndPosition), EndPos, bUpdateMesh); }
        public void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh) { Invoke(nameof(SetEndOffset), EndOffset, bUpdateMesh); }
        public void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh) { Invoke(nameof(SetBoundaryMin), InBoundaryMin, bUpdateMesh); }
        public void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh) { Invoke(nameof(SetBoundaryMax), InBoundaryMax, bUpdateMesh); }
        public Vector GetStartTangent() { return Invoke<Vector>(nameof(GetStartTangent)); }
        public Vector2D GetStartScale() { return Invoke<Vector2D>(nameof(GetStartScale)); }
        public float GetStartRoll() { return Invoke<float>(nameof(GetStartRoll)); }
        public Vector GetStartPosition() { return Invoke<Vector>(nameof(GetStartPosition)); }
        public Vector2D GetStartOffset() { return Invoke<Vector2D>(nameof(GetStartOffset)); }
        public Vector GetSplineUpDir() { return Invoke<Vector>(nameof(GetSplineUpDir)); }
        public byte GetForwardAxis() { return Invoke<byte>(nameof(GetForwardAxis)); }
        public Vector GetEndTangent() { return Invoke<Vector>(nameof(GetEndTangent)); }
        public Vector2D GetEndScale() { return Invoke<Vector2D>(nameof(GetEndScale)); }
        public float GetEndRoll() { return Invoke<float>(nameof(GetEndRoll)); }
        public Vector GetEndPosition() { return Invoke<Vector>(nameof(GetEndPosition)); }
        public Vector2D GetEndOffset() { return Invoke<Vector2D>(nameof(GetEndOffset)); }
        public float GetBoundaryMin() { return Invoke<float>(nameof(GetBoundaryMin)); }
        public float GetBoundaryMax() { return Invoke<float>(nameof(GetBoundaryMax)); }
    }
    public class SpotLightComponent : PointLightComponent
    {
        public SpotLightComponent(nint addr) : base(addr) { }
        public float InnerConeAngle { get { return this[nameof(InnerConeAngle)].GetValue<float>(); } set { this[nameof(InnerConeAngle)].SetValue<float>(value); } }
        public float OuterConeAngle { get { return this[nameof(OuterConeAngle)].GetValue<float>(); } set { this[nameof(OuterConeAngle)].SetValue<float>(value); } }
        public void SetOuterConeAngle(float NewOuterConeAngle) { Invoke(nameof(SetOuterConeAngle), NewOuterConeAngle); }
        public void SetInnerConeAngle(float NewInnerConeAngle) { Invoke(nameof(SetInnerConeAngle), NewInnerConeAngle); }
    }
    public class VolumetricCloudComponent : SceneComponent
    {
        public VolumetricCloudComponent(nint addr) : base(addr) { }
        public float LayerBottomAltitude { get { return this[nameof(LayerBottomAltitude)].GetValue<float>(); } set { this[nameof(LayerBottomAltitude)].SetValue<float>(value); } }
        public float LayerHeight { get { return this[nameof(LayerHeight)].GetValue<float>(); } set { this[nameof(LayerHeight)].SetValue<float>(value); } }
        public float TracingStartMaxDistance { get { return this[nameof(TracingStartMaxDistance)].GetValue<float>(); } set { this[nameof(TracingStartMaxDistance)].SetValue<float>(value); } }
        public EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode { get { return (EVolumetricCloudTracingMaxDistanceMode)this[nameof(TracingMaxDistanceMode)].GetValue<int>(); } set { this[nameof(TracingMaxDistanceMode)].SetValue<int>((int)value); } }
        public float TracingMaxDistance { get { return this[nameof(TracingMaxDistance)].GetValue<float>(); } set { this[nameof(TracingMaxDistance)].SetValue<float>(value); } }
        public float PlanetRadius { get { return this[nameof(PlanetRadius)].GetValue<float>(); } set { this[nameof(PlanetRadius)].SetValue<float>(value); } }
        public Color GroundAlbedo { get { return this[nameof(GroundAlbedo)].As<Color>(); } set { this["GroundAlbedo"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public bool bUsePerSampleAtmosphericLightTransmittance { get { return this[nameof(bUsePerSampleAtmosphericLightTransmittance)].Flag; } set { this[nameof(bUsePerSampleAtmosphericLightTransmittance)].Flag = value; } }
        public float SkyLightCloudBottomOcclusion { get { return this[nameof(SkyLightCloudBottomOcclusion)].GetValue<float>(); } set { this[nameof(SkyLightCloudBottomOcclusion)].SetValue<float>(value); } }
        public float ViewSampleCountScale { get { return this[nameof(ViewSampleCountScale)].GetValue<float>(); } set { this[nameof(ViewSampleCountScale)].SetValue<float>(value); } }
        public float ReflectionViewSampleCountScaleValue { get { return this[nameof(ReflectionViewSampleCountScaleValue)].GetValue<float>(); } set { this[nameof(ReflectionViewSampleCountScaleValue)].SetValue<float>(value); } }
        public float ReflectionViewSampleCountScale { get { return this[nameof(ReflectionViewSampleCountScale)].GetValue<float>(); } set { this[nameof(ReflectionViewSampleCountScale)].SetValue<float>(value); } }
        public float ReflectionSampleCountScale { get { return this[nameof(ReflectionSampleCountScale)].GetValue<float>(); } set { this[nameof(ReflectionSampleCountScale)].SetValue<float>(value); } }
        public float ShadowViewSampleCountScale { get { return this[nameof(ShadowViewSampleCountScale)].GetValue<float>(); } set { this[nameof(ShadowViewSampleCountScale)].SetValue<float>(value); } }
        public float ShadowReflectionViewSampleCountScaleValue { get { return this[nameof(ShadowReflectionViewSampleCountScaleValue)].GetValue<float>(); } set { this[nameof(ShadowReflectionViewSampleCountScaleValue)].SetValue<float>(value); } }
        public float ShadowReflectionViewSampleCountScale { get { return this[nameof(ShadowReflectionViewSampleCountScale)].GetValue<float>(); } set { this[nameof(ShadowReflectionViewSampleCountScale)].SetValue<float>(value); } }
        public float ShadowReflectionSampleCountScale { get { return this[nameof(ShadowReflectionSampleCountScale)].GetValue<float>(); } set { this[nameof(ShadowReflectionSampleCountScale)].SetValue<float>(value); } }
        public float ShadowTracingDistance { get { return this[nameof(ShadowTracingDistance)].GetValue<float>(); } set { this[nameof(ShadowTracingDistance)].SetValue<float>(value); } }
        public float StopTracingTransmittanceThreshold { get { return this[nameof(StopTracingTransmittanceThreshold)].GetValue<float>(); } set { this[nameof(StopTracingTransmittanceThreshold)].SetValue<float>(value); } }
        public void SetViewSampleCountScale(float NewValue) { Invoke(nameof(SetViewSampleCountScale), NewValue); }
        public void SetTracingStartMaxDistance(float NewValue) { Invoke(nameof(SetTracingStartMaxDistance), NewValue); }
        public void SetTracingMaxDistance(float NewValue) { Invoke(nameof(SetTracingMaxDistance), NewValue); }
        public void SetStopTracingTransmittanceThreshold(float NewValue) { Invoke(nameof(SetStopTracingTransmittanceThreshold), NewValue); }
        public void SetSkyLightCloudBottomOcclusion(float NewValue) { Invoke(nameof(SetSkyLightCloudBottomOcclusion), NewValue); }
        public void SetShadowViewSampleCountScale(float NewValue) { Invoke(nameof(SetShadowViewSampleCountScale), NewValue); }
        public void SetShadowTracingDistance(float NewValue) { Invoke(nameof(SetShadowTracingDistance), NewValue); }
        public void SetShadowReflectionViewSampleCountScale(float NewValue) { Invoke(nameof(SetShadowReflectionViewSampleCountScale), NewValue); }
        public void SetShadowReflectionSampleCountScale(float NewValue) { Invoke(nameof(SetShadowReflectionSampleCountScale), NewValue); }
        public void SetReflectionViewSampleCountScale(float NewValue) { Invoke(nameof(SetReflectionViewSampleCountScale), NewValue); }
        public void SetReflectionSampleCountScale(float NewValue) { Invoke(nameof(SetReflectionSampleCountScale), NewValue); }
        public void SetPlanetRadius(float NewValue) { Invoke(nameof(SetPlanetRadius), NewValue); }
        public void SetMaterial(MaterialInterface NewValue) { Invoke(nameof(SetMaterial), NewValue); }
        public void SetLayerHeight(float NewValue) { Invoke(nameof(SetLayerHeight), NewValue); }
        public void SetLayerBottomAltitude(float NewValue) { Invoke(nameof(SetLayerBottomAltitude), NewValue); }
        public void SetGroundAlbedo(Color NewValue) { Invoke(nameof(SetGroundAlbedo), NewValue); }
        public void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue) { Invoke(nameof(SetbUsePerSampleAtmosphericLightTransmittance), NewValue); }
    }
    public class VolumetricCloud : Info
    {
        public VolumetricCloud(nint addr) : base(addr) { }
        public VolumetricCloudComponent VolumetricCloudComponent { get { return this[nameof(VolumetricCloudComponent)].As<VolumetricCloudComponent>(); } set { this["VolumetricCloudComponent"] = value; } }
    }
    public class WorldPartitionStreamingSourceComponent : ActorComponent
    {
        public WorldPartitionStreamingSourceComponent(nint addr) : base(addr) { }
        public Object TargetGrid { get { return this[nameof(TargetGrid)]; } set { this[nameof(TargetGrid)] = value; } }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
        public HLODLayer TargetHLODLayer { get { return this[nameof(TargetHLODLayer)].As<HLODLayer>(); } set { this["TargetHLODLayer"] = value; } }
        public Array<StreamingSourceShape> Shapes { get { return new Array<StreamingSourceShape>(this[nameof(Shapes)].Address); } }
        public EStreamingSourcePriority Priority { get { return (EStreamingSourcePriority)this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>((int)value); } }
        public bool bStreamingSourceEnabled { get { return this[nameof(bStreamingSourceEnabled)].Flag; } set { this[nameof(bStreamingSourceEnabled)].Flag = value; } }
        public EStreamingSourceTargetState TargetState { get { return (EStreamingSourceTargetState)this[nameof(TargetState)].GetValue<int>(); } set { this[nameof(TargetState)].SetValue<int>((int)value); } }
        public bool IsStreamingSourceEnabled() { return Invoke<bool>(nameof(IsStreamingSourceEnabled)); }
        public bool IsStreamingCompleted() { return Invoke<bool>(nameof(IsStreamingCompleted)); }
        public void EnableStreamingSource() { Invoke(nameof(EnableStreamingSource)); }
        public void DisableStreamingSource() { Invoke(nameof(DisableStreamingSource)); }
    }
    public class CurveTable : Object
    {
        public CurveTable(nint addr) : base(addr) { }
    }
    public class CompositeCurveTable : CurveTable
    {
        public CompositeCurveTable(nint addr) : base(addr) { }
        public Array<CurveTable> ParentTables { get { return new Array<CurveTable>(this[nameof(ParentTables)].Address); } }
        public Array<CurveTable> OldParentTables { get { return new Array<CurveTable>(this[nameof(OldParentTables)].Address); } }
    }
    public class CompositeDataTable : DataTable
    {
        public CompositeDataTable(nint addr) : base(addr) { }
        public Array<DataTable> ParentTables { get { return new Array<DataTable>(this[nameof(ParentTables)].Address); } }
        public Array<DataTable> OldParentTables { get { return new Array<DataTable>(this[nameof(OldParentTables)].Address); } }
    }
    public class EnumCookedMetaData : Object
    {
        public EnumCookedMetaData(nint addr) : base(addr) { }
        public ObjectCookedMetaDataStore EnumMetaData { get { return this[nameof(EnumMetaData)].As<ObjectCookedMetaDataStore>(); } set { this["EnumMetaData"] = value; } }
    }
    public class StructCookedMetaData : Object
    {
        public StructCookedMetaData(nint addr) : base(addr) { }
        public StructCookedMetaDataStore StructMetaData { get { return this[nameof(StructMetaData)].As<StructCookedMetaDataStore>(); } set { this["StructMetaData"] = value; } }
    }
    public class ClassCookedMetaData : Object
    {
        public ClassCookedMetaData(nint addr) : base(addr) { }
        public StructCookedMetaDataStore ClassMetaData { get { return this[nameof(ClassMetaData)].As<StructCookedMetaDataStore>(); } set { this["ClassMetaData"] = value; } }
        public Object FunctionsMetaData { get { return this[nameof(FunctionsMetaData)]; } set { this[nameof(FunctionsMetaData)] = value; } }
    }
    public class StreamingSettings : DeveloperSettings
    {
        public StreamingSettings(nint addr) : base(addr) { }
        public bool AsyncLoadingThreadEnabled { get { return this[nameof(AsyncLoadingThreadEnabled)].Flag; } set { this[nameof(AsyncLoadingThreadEnabled)].Flag = value; } }
        public bool WarnIfTimeLimitExceeded { get { return this[nameof(WarnIfTimeLimitExceeded)].Flag; } set { this[nameof(WarnIfTimeLimitExceeded)].Flag = value; } }
        public float TimeLimitExceededMultiplier { get { return this[nameof(TimeLimitExceededMultiplier)].GetValue<float>(); } set { this[nameof(TimeLimitExceededMultiplier)].SetValue<float>(value); } }
        public float TimeLimitExceededMinTime { get { return this[nameof(TimeLimitExceededMinTime)].GetValue<float>(); } set { this[nameof(TimeLimitExceededMinTime)].SetValue<float>(value); } }
        public int MinBulkDataSizeForAsyncLoading { get { return this[nameof(MinBulkDataSizeForAsyncLoading)].GetValue<int>(); } set { this[nameof(MinBulkDataSizeForAsyncLoading)].SetValue<int>(value); } }
        public bool UseBackgroundLevelStreaming { get { return this[nameof(UseBackgroundLevelStreaming)].Flag; } set { this[nameof(UseBackgroundLevelStreaming)].Flag = value; } }
        public bool AsyncLoadingUseFullTimeLimit { get { return this[nameof(AsyncLoadingUseFullTimeLimit)].Flag; } set { this[nameof(AsyncLoadingUseFullTimeLimit)].Flag = value; } }
        public float AsyncLoadingTimeLimit { get { return this[nameof(AsyncLoadingTimeLimit)].GetValue<float>(); } set { this[nameof(AsyncLoadingTimeLimit)].SetValue<float>(value); } }
        public float PriorityAsyncLoadingExtraTime { get { return this[nameof(PriorityAsyncLoadingExtraTime)].GetValue<float>(); } set { this[nameof(PriorityAsyncLoadingExtraTime)].SetValue<float>(value); } }
        public float LevelStreamingActorsUpdateTimeLimit { get { return this[nameof(LevelStreamingActorsUpdateTimeLimit)].GetValue<float>(); } set { this[nameof(LevelStreamingActorsUpdateTimeLimit)].SetValue<float>(value); } }
        public float PriorityLevelStreamingActorsUpdateExtraTime { get { return this[nameof(PriorityLevelStreamingActorsUpdateExtraTime)].GetValue<float>(); } set { this[nameof(PriorityLevelStreamingActorsUpdateExtraTime)].SetValue<float>(value); } }
        public int LevelStreamingComponentsRegistrationGranularity { get { return this[nameof(LevelStreamingComponentsRegistrationGranularity)].GetValue<int>(); } set { this[nameof(LevelStreamingComponentsRegistrationGranularity)].SetValue<int>(value); } }
        public int LevelStreamingAddPrimitiveGranularity { get { return this[nameof(LevelStreamingAddPrimitiveGranularity)].GetValue<int>(); } set { this[nameof(LevelStreamingAddPrimitiveGranularity)].SetValue<int>(value); } }
        public float LevelStreamingUnregisterComponentsTimeLimit { get { return this[nameof(LevelStreamingUnregisterComponentsTimeLimit)].GetValue<float>(); } set { this[nameof(LevelStreamingUnregisterComponentsTimeLimit)].SetValue<float>(value); } }
        public int LevelStreamingComponentsUnregistrationGranularity { get { return this[nameof(LevelStreamingComponentsUnregistrationGranularity)].GetValue<int>(); } set { this[nameof(LevelStreamingComponentsUnregistrationGranularity)].SetValue<int>(value); } }
        public bool FlushStreamingOnExit { get { return this[nameof(FlushStreamingOnExit)].Flag; } set { this[nameof(FlushStreamingOnExit)].Flag = value; } }
        public bool EventDrivenLoaderEnabled { get { return this[nameof(EventDrivenLoaderEnabled)].Flag; } set { this[nameof(EventDrivenLoaderEnabled)].Flag = value; } }
    }
    public class GarbageCollectionSettings : DeveloperSettings
    {
        public GarbageCollectionSettings(nint addr) : base(addr) { }
        public float TimeBetweenPurgingPendingKillObjects { get { return this[nameof(TimeBetweenPurgingPendingKillObjects)].GetValue<float>(); } set { this[nameof(TimeBetweenPurgingPendingKillObjects)].SetValue<float>(value); } }
        public bool FlushStreamingOnGC { get { return this[nameof(FlushStreamingOnGC)].Flag; } set { this[nameof(FlushStreamingOnGC)].Flag = value; } }
        public bool AllowParallelGC { get { return this[nameof(AllowParallelGC)].Flag; } set { this[nameof(AllowParallelGC)].Flag = value; } }
        public bool IncrementalBeginDestroyEnabled { get { return this[nameof(IncrementalBeginDestroyEnabled)].Flag; } set { this[nameof(IncrementalBeginDestroyEnabled)].Flag = value; } }
        public bool MultithreadedDestructionEnabled { get { return this[nameof(MultithreadedDestructionEnabled)].Flag; } set { this[nameof(MultithreadedDestructionEnabled)].Flag = value; } }
        public bool CreateGCClusters { get { return this[nameof(CreateGCClusters)].Flag; } set { this[nameof(CreateGCClusters)].Flag = value; } }
        public bool AssetClusteringEnabled { get { return this[nameof(AssetClusteringEnabled)].Flag; } set { this[nameof(AssetClusteringEnabled)].Flag = value; } }
        public bool ActorClusteringEnabled { get { return this[nameof(ActorClusteringEnabled)].Flag; } set { this[nameof(ActorClusteringEnabled)].Flag = value; } }
        public bool BlueprintClusteringEnabled { get { return this[nameof(BlueprintClusteringEnabled)].Flag; } set { this[nameof(BlueprintClusteringEnabled)].Flag = value; } }
        public bool UseDisregardForGCOnDedicatedServers { get { return this[nameof(UseDisregardForGCOnDedicatedServers)].Flag; } set { this[nameof(UseDisregardForGCOnDedicatedServers)].Flag = value; } }
        public bool VerifyGCObjectNames { get { return this[nameof(VerifyGCObjectNames)].Flag; } set { this[nameof(VerifyGCObjectNames)].Flag = value; } }
        public bool VerifyUObjectsAreNotFGCObjects { get { return this[nameof(VerifyUObjectsAreNotFGCObjects)].Flag; } set { this[nameof(VerifyUObjectsAreNotFGCObjects)].Flag = value; } }
        public bool PendingKillEnabled { get { return this[nameof(PendingKillEnabled)].Flag; } set { this[nameof(PendingKillEnabled)].Flag = value; } }
        public int MinGCClusterSize { get { return this[nameof(MinGCClusterSize)].GetValue<int>(); } set { this[nameof(MinGCClusterSize)].SetValue<int>(value); } }
        public int NumRetriesBeforeForcingGC { get { return this[nameof(NumRetriesBeforeForcingGC)].GetValue<int>(); } set { this[nameof(NumRetriesBeforeForcingGC)].SetValue<int>(value); } }
        public int MaxObjectsNotConsideredByGC { get { return this[nameof(MaxObjectsNotConsideredByGC)].GetValue<int>(); } set { this[nameof(MaxObjectsNotConsideredByGC)].SetValue<int>(value); } }
        public int SizeOfPermanentObjectPool { get { return this[nameof(SizeOfPermanentObjectPool)].GetValue<int>(); } set { this[nameof(SizeOfPermanentObjectPool)].SetValue<int>(value); } }
        public int MaxObjectsInGame { get { return this[nameof(MaxObjectsInGame)].GetValue<int>(); } set { this[nameof(MaxObjectsInGame)].SetValue<int>(value); } }
        public int MaxObjectsInEditor { get { return this[nameof(MaxObjectsInEditor)].GetValue<int>(); } set { this[nameof(MaxObjectsInEditor)].SetValue<int>(value); } }
    }
    public class CullDistanceVolume : Volume
    {
        public CullDistanceVolume(nint addr) : base(addr) { }
        public Array<CullDistanceSizePair> CullDistances { get { return new Array<CullDistanceSizePair>(this[nameof(CullDistances)].Address); } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
    }
    public class CurveBase : Object
    {
        public CurveBase(nint addr) : base(addr) { }
        public void GetValueRange(float MinValue, float MaxValue) { Invoke(nameof(GetValueRange), MinValue, MaxValue); }
        public void GetTimeRange(float MinTime, float MaxTime) { Invoke(nameof(GetTimeRange), MinTime, MaxTime); }
    }
    public class CurveEdPresetCurve : Object
    {
        public CurveEdPresetCurve(nint addr) : base(addr) { }
    }
    public class CurveFloat : CurveBase
    {
        public CurveFloat(nint addr) : base(addr) { }
        //public RichCurve FloatCurve { get { return this[nameof(FloatCurve)].As<RichCurve>(); } set { this["FloatCurve"] = value; } }
        public bool bIsEventCurve { get { return this[nameof(bIsEventCurve)].Flag; } set { this[nameof(bIsEventCurve)].Flag = value; } }
        public float GetFloatValue(float InTime) { return Invoke<float>(nameof(GetFloatValue), InTime); }
    }
    public class CurveLinearColor : CurveBase
    {
        public CurveLinearColor(nint addr) : base(addr) { }
        //public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
        public float AdjustHue { get { return this[nameof(AdjustHue)].GetValue<float>(); } set { this[nameof(AdjustHue)].SetValue<float>(value); } }
        public float AdjustSaturation { get { return this[nameof(AdjustSaturation)].GetValue<float>(); } set { this[nameof(AdjustSaturation)].SetValue<float>(value); } }
        public float AdjustBrightness { get { return this[nameof(AdjustBrightness)].GetValue<float>(); } set { this[nameof(AdjustBrightness)].SetValue<float>(value); } }
        public float AdjustBrightnessCurve { get { return this[nameof(AdjustBrightnessCurve)].GetValue<float>(); } set { this[nameof(AdjustBrightnessCurve)].SetValue<float>(value); } }
        public float AdjustVibrance { get { return this[nameof(AdjustVibrance)].GetValue<float>(); } set { this[nameof(AdjustVibrance)].SetValue<float>(value); } }
        public float AdjustMinAlpha { get { return this[nameof(AdjustMinAlpha)].GetValue<float>(); } set { this[nameof(AdjustMinAlpha)].SetValue<float>(value); } }
        public float AdjustMaxAlpha { get { return this[nameof(AdjustMaxAlpha)].GetValue<float>(); } set { this[nameof(AdjustMaxAlpha)].SetValue<float>(value); } }
        public LinearColor GetUnadjustedLinearColorValue(float InTime) { return Invoke<LinearColor>(nameof(GetUnadjustedLinearColorValue), InTime); }
        public LinearColor GetLinearColorValue(float InTime) { return Invoke<LinearColor>(nameof(GetLinearColorValue), InTime); }
        public LinearColor GetClampedLinearColorValue(float InTime) { return Invoke<LinearColor>(nameof(GetClampedLinearColorValue), InTime); }
    }
    public class CurveLinearColorAtlas : Texture2D
    {
        public CurveLinearColorAtlas(nint addr) : base(addr) { }
        public uint TextureSize { get { return this[nameof(TextureSize)].GetValue<uint>(); } set { this[nameof(TextureSize)].SetValue<uint>(value); } }
        public bool bSquareResolution { get { return this[nameof(bSquareResolution)].Flag; } set { this[nameof(bSquareResolution)].Flag = value; } }
        public uint TextureHeight { get { return this[nameof(TextureHeight)].GetValue<uint>(); } set { this[nameof(TextureHeight)].SetValue<uint>(value); } }
        public Array<CurveLinearColor> GradientCurves { get { return new Array<CurveLinearColor>(this[nameof(GradientCurves)].Address); } }
        public bool GetCurvePosition(CurveLinearColor InCurve, float Position) { return Invoke<bool>(nameof(GetCurvePosition), InCurve, Position); }
    }
    public class CurveVector : CurveBase
    {
        public CurveVector(nint addr) : base(addr) { }
        //public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
        public Vector GetVectorValue(float InTime) { return Invoke<Vector>(nameof(GetVectorValue), InTime); }
    }
    public class DamageType : Object
    {
        public DamageType(nint addr) : base(addr) { }
        public bool bCausedByWorld { get { return this[nameof(bCausedByWorld)].Flag; } set { this[nameof(bCausedByWorld)].Flag = value; } }
        public bool bScaleMomentumByMass { get { return this[nameof(bScaleMomentumByMass)].Flag; } set { this[nameof(bScaleMomentumByMass)].Flag = value; } }
        public bool bRadialDamageVelChange { get { return this[nameof(bRadialDamageVelChange)].Flag; } set { this[nameof(bRadialDamageVelChange)].Flag = value; } }
        public float DamageImpulse { get { return this[nameof(DamageImpulse)].GetValue<float>(); } set { this[nameof(DamageImpulse)].SetValue<float>(value); } }
        public float DestructibleImpulse { get { return this[nameof(DestructibleImpulse)].GetValue<float>(); } set { this[nameof(DestructibleImpulse)].SetValue<float>(value); } }
        public float DestructibleDamageSpreadScale { get { return this[nameof(DestructibleDamageSpreadScale)].GetValue<float>(); } set { this[nameof(DestructibleDamageSpreadScale)].SetValue<float>(value); } }
        public float DamageFalloff { get { return this[nameof(DamageFalloff)].GetValue<float>(); } set { this[nameof(DamageFalloff)].SetValue<float>(value); } }
    }
    public class DataDrivenCVarEngineSubsystem : EngineSubsystem
    {
        public DataDrivenCVarEngineSubsystem(nint addr) : base(addr) { }
        public Object OnDataDrivenCVarDelegate { get { return this[nameof(OnDataDrivenCVarDelegate)]; } set { this[nameof(OnDataDrivenCVarDelegate)] = value; } }
    }
    public class DataDrivenConsoleVariableSettings : DeveloperSettings
    {
        public DataDrivenConsoleVariableSettings(nint addr) : base(addr) { }
        public Array<DataDrivenConsoleVariable> CVarsArray { get { return new Array<DataDrivenConsoleVariable>(this[nameof(CVarsArray)].Address); } }
    }
    public class DataTableFunctionLibrary : BlueprintFunctionLibrary
    {
        public DataTableFunctionLibrary(nint addr) : base(addr) { }
        public void GetDataTableRowNames(DataTable Table, Array<Object> OutRowNames) { Invoke(nameof(GetDataTableRowNames), Table, OutRowNames); }
        public bool GetDataTableRowFromName(DataTable Table, Object RowName, TableRowBase OutRow) { return Invoke<bool>(nameof(GetDataTableRowFromName), Table, RowName, OutRow); }
        public Array<Object> GetDataTableColumnAsString(DataTable DataTable, Object PropertyName) { return Invoke<Array<Object>>(nameof(GetDataTableColumnAsString), DataTable, PropertyName); }
        public void EvaluateCurveTableRow(CurveTable CurveTable, Object RowName, float InXY, byte OutResult, float OutXY, Object ContextString) { Invoke(nameof(EvaluateCurveTableRow), CurveTable, RowName, InXY, OutResult, OutXY, ContextString); }
        public bool DoesDataTableRowExist(DataTable Table, Object RowName) { return Invoke<bool>(nameof(DoesDataTableRowExist), Table, RowName); }
    }
    public class DebugCameraController : PlayerController
    {
        public DebugCameraController(nint addr) : base(addr) { }
        public bool bShowSelectedInfo { get { return this[nameof(bShowSelectedInfo)].Flag; } set { this[nameof(bShowSelectedInfo)].Flag = value; } }
        public bool bIsFrozenRendering { get { return this[nameof(bIsFrozenRendering)].Flag; } set { this[nameof(bIsFrozenRendering)].Flag = value; } }
        public bool bIsOrbitingSelectedActor { get { return this[nameof(bIsOrbitingSelectedActor)].Flag; } set { this[nameof(bIsOrbitingSelectedActor)].Flag = value; } }
        public bool bOrbitPivotUseCenter { get { return this[nameof(bOrbitPivotUseCenter)].Flag; } set { this[nameof(bOrbitPivotUseCenter)].Flag = value; } }
        public bool bEnableBufferVisualization { get { return this[nameof(bEnableBufferVisualization)].Flag; } set { this[nameof(bEnableBufferVisualization)].Flag = value; } }
        public bool bEnableBufferVisualizationFullMode { get { return this[nameof(bEnableBufferVisualizationFullMode)].Flag; } set { this[nameof(bEnableBufferVisualizationFullMode)].Flag = value; } }
        public bool bIsBufferVisualizationInputSetup { get { return this[nameof(bIsBufferVisualizationInputSetup)].Flag; } set { this[nameof(bIsBufferVisualizationInputSetup)].Flag = value; } }
        public bool bLastDisplayEnabled { get { return this[nameof(bLastDisplayEnabled)].Flag; } set { this[nameof(bLastDisplayEnabled)].Flag = value; } }
        public DrawFrustumComponent DrawFrustum { get { return this[nameof(DrawFrustum)].As<DrawFrustumComponent>(); } set { this["DrawFrustum"] = value; } }
        public Object SelectedActor { get { return this[nameof(SelectedActor)]; } set { this[nameof(SelectedActor)] = value; } }
        public Object SelectedComponent { get { return this[nameof(SelectedComponent)]; } set { this[nameof(SelectedComponent)] = value; } }
        public HitResult SelectedHitPoint { get { return this[nameof(SelectedHitPoint)].As<HitResult>(); } set { this["SelectedHitPoint"] = value; } }
        public PlayerController OriginalControllerRef { get { return this[nameof(OriginalControllerRef)].As<PlayerController>(); } set { this["OriginalControllerRef"] = value; } }
        public Player OriginalPlayer { get { return this[nameof(OriginalPlayer)].As<Player>(); } set { this["OriginalPlayer"] = value; } }
        public float SpeedScale { get { return this[nameof(SpeedScale)].GetValue<float>(); } set { this[nameof(SpeedScale)].SetValue<float>(value); } }
        public float InitialMaxSpeed { get { return this[nameof(InitialMaxSpeed)].GetValue<float>(); } set { this[nameof(InitialMaxSpeed)].SetValue<float>(value); } }
        public float InitialAccel { get { return this[nameof(InitialAccel)].GetValue<float>(); } set { this[nameof(InitialAccel)].SetValue<float>(value); } }
        public float InitialDecel { get { return this[nameof(InitialDecel)].GetValue<float>(); } set { this[nameof(InitialDecel)].SetValue<float>(value); } }
        public void ToggleDisplay() { Invoke(nameof(ToggleDisplay)); }
        public void ShowDebugSelectedInfo() { Invoke(nameof(ShowDebugSelectedInfo)); }
        public void SetPawnMovementSpeedScale(float NewSpeedScale) { Invoke(nameof(SetPawnMovementSpeedScale), NewSpeedScale); }
        public void ReceiveOnDeactivate(PlayerController RestoredPC) { Invoke(nameof(ReceiveOnDeactivate), RestoredPC); }
        public void ReceiveOnActorSelected(Actor NewSelectedActor, Vector SelectHitLocation, Vector SelectHitNormal, HitResult Hit) { Invoke(nameof(ReceiveOnActorSelected), NewSelectedActor, SelectHitLocation, SelectHitNormal, Hit); }
        public void ReceiveOnActivate(PlayerController OriginalPC) { Invoke(nameof(ReceiveOnActivate), OriginalPC); }
        public Actor GetSelectedActor() { return Invoke<Actor>(nameof(GetSelectedActor)); }
    }
    public class DebugCameraControllerSettings : DeveloperSettings
    {
        public DebugCameraControllerSettings(nint addr) : base(addr) { }
        public Array<DebugCameraControllerSettingsViewModeIndex> CycleViewModes { get { return new Array<DebugCameraControllerSettingsViewModeIndex>(this[nameof(CycleViewModes)].Address); } }
    }
    public class DebugCameraHUD : HUD
    {
        public DebugCameraHUD(nint addr) : base(addr) { }
    }
    public class DebugDrawComponent : PrimitiveComponent
    {
        public DebugDrawComponent(nint addr) : base(addr) { }
    }
    public class DebugDrawService : BlueprintFunctionLibrary
    {
        public DebugDrawService(nint addr) : base(addr) { }
    }
    public class ReporterBase : Object
    {
        public ReporterBase(nint addr) : base(addr) { }
    }
    public class ReporterGraph : ReporterBase
    {
        public ReporterGraph(nint addr) : base(addr) { }
    }
    public class DecalActor : Actor
    {
        public DecalActor(nint addr) : base(addr) { }
        public DecalComponent Decal { get { return this[nameof(Decal)].As<DecalComponent>(); } set { this["Decal"] = value; } }
        public void SetDecalMaterial(MaterialInterface NewDecalMaterial) { Invoke(nameof(SetDecalMaterial), NewDecalMaterial); }
        public MaterialInterface GetDecalMaterial() { return Invoke<MaterialInterface>(nameof(GetDecalMaterial)); }
        public MaterialInstanceDynamic CreateDynamicMaterialInstance() { return Invoke<MaterialInstanceDynamic>(nameof(CreateDynamicMaterialInstance)); }
    }
    public class DefaultPawn : Pawn
    {
        public DefaultPawn(nint addr) : base(addr) { }
        public float BaseTurnRate { get { return this[nameof(BaseTurnRate)].GetValue<float>(); } set { this[nameof(BaseTurnRate)].SetValue<float>(value); } }
        public float BaseLookUpRate { get { return this[nameof(BaseLookUpRate)].GetValue<float>(); } set { this[nameof(BaseLookUpRate)].SetValue<float>(value); } }
        public PawnMovementComponent MovementComponent { get { return this[nameof(MovementComponent)].As<PawnMovementComponent>(); } set { this["MovementComponent"] = value; } }
        public SphereComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<SphereComponent>(); } set { this["CollisionComponent"] = value; } }
        public StaticMeshComponent MeshComponent { get { return this[nameof(MeshComponent)].As<StaticMeshComponent>(); } set { this["MeshComponent"] = value; } }
        public bool bAddDefaultMovementBindings { get { return this[nameof(bAddDefaultMovementBindings)].Flag; } set { this[nameof(bAddDefaultMovementBindings)].Flag = value; } }
        public void TurnAtRate(float Rate) { Invoke(nameof(TurnAtRate), Rate); }
        public void MoveUp_World(float Val) { Invoke(nameof(MoveUp_World), Val); }
        public void MoveRight(float Val) { Invoke(nameof(MoveRight), Val); }
        public void MoveForward(float Val) { Invoke(nameof(MoveForward), Val); }
        public void LookUpAtRate(float Rate) { Invoke(nameof(LookUpAtRate), Rate); }
    }
    public class DefaultPhysicsVolume : PhysicsVolume
    {
        public DefaultPhysicsVolume(nint addr) : base(addr) { }
    }
    public class DemoNetDriver : NetDriver
    {
        public DemoNetDriver(nint addr) : base(addr) { }
        public Object RollbackNetStartupActors { get { return this[nameof(RollbackNetStartupActors)]; } set { this[nameof(RollbackNetStartupActors)] = value; } }
        public float CheckpointSaveMaxMSPerFrame { get { return this[nameof(CheckpointSaveMaxMSPerFrame)].GetValue<float>(); } set { this[nameof(CheckpointSaveMaxMSPerFrame)].SetValue<float>(value); } }
        public Array<MulticastRecordOptions> MulticastRecordOptions { get { return new Array<MulticastRecordOptions>(this[nameof(MulticastRecordOptions)].Address); } }
        public Array<PlayerController> SpectatorControllers { get { return new Array<PlayerController>(this[nameof(SpectatorControllers)].Address); } }
    }
    public class DestructibleInterface : Interface
    {
        public DestructibleInterface(nint addr) : base(addr) { }
    }
    public class TextureLODSettings : Object
    {
        public TextureLODSettings(nint addr) : base(addr) { }
        public Array<TextureLODGroup> TextureLODGroups { get { return new Array<TextureLODGroup>(this[nameof(TextureLODGroups)].Address); } }
    }
    public class DeviceProfile : TextureLODSettings
    {
        public DeviceProfile(nint addr) : base(addr) { }
        public Object DeviceType { get { return this[nameof(DeviceType)]; } set { this[nameof(DeviceType)] = value; } }
        public Object BaseProfileName { get { return this[nameof(BaseProfileName)]; } set { this[nameof(BaseProfileName)] = value; } }
        public bool bIsVisibleForAssets { get { return this[nameof(bIsVisibleForAssets)].Flag; } set { this[nameof(bIsVisibleForAssets)].Flag = value; } }
        public DeviceProfile Parent { get { return this[nameof(Parent)].As<DeviceProfile>(); } set { this["Parent"] = value; } }
        public Array<Object> CVars { get { return new Array<Object>(this[nameof(CVars)].Address); } }
        public Array<DPMatchingRulestruct> MatchingRules { get { return new Array<DPMatchingRulestruct>(this[nameof(MatchingRules)].Address); } }
    }
    public class DeviceProfileManager : Object
    {
        public DeviceProfileManager(nint addr) : base(addr) { }
        public Array<DeviceProfile> Profiles { get { return new Array<DeviceProfile>(this[nameof(Profiles)].Address); } }
        public Array<DeviceProfile> BackupProfiles { get { return new Array<DeviceProfile>(this[nameof(BackupProfiles)].Address); } }
    }
    public class DialogueVoice : Object
    {
        public DialogueVoice(nint addr) : base(addr) { }
        public byte Gender { get { return this[nameof(Gender)].GetValue<byte>(); } set { this[nameof(Gender)].SetValue<byte>(value); } }
        public byte Plurality { get { return this[nameof(Plurality)].GetValue<byte>(); } set { this[nameof(Plurality)].SetValue<byte>(value); } }
        public Guid LocalizationGUID { get { return this[nameof(LocalizationGUID)].As<Guid>(); } set { this["LocalizationGUID"] = value; } }
    }
    public class DialogueWave : Object
    {
        public DialogueWave(nint addr) : base(addr) { }
        public bool bMature { get { return this[nameof(bMature)].Flag; } set { this[nameof(bMature)].Flag = value; } }
        public bool bOverride_SubtitleOverride { get { return this[nameof(bOverride_SubtitleOverride)].Flag; } set { this[nameof(bOverride_SubtitleOverride)].Flag = value; } }
        public Object SpokenText { get { return this[nameof(SpokenText)]; } set { this[nameof(SpokenText)] = value; } }
        public Object SubtitleOverride { get { return this[nameof(SubtitleOverride)]; } set { this[nameof(SubtitleOverride)] = value; } }
        public Array<DialogueContextMapping> ContextMappings { get { return new Array<DialogueContextMapping>(this[nameof(ContextMappings)].Address); } }
        public Guid LocalizationGUID { get { return this[nameof(LocalizationGUID)].As<Guid>(); } set { this["LocalizationGUID"] = value; } }
    }
    public class DocumentationActor : Actor
    {
        public DocumentationActor(nint addr) : base(addr) { }
    }
    public class DPICustomScalingRule : Object
    {
        public DPICustomScalingRule(nint addr) : base(addr) { }
    }
    public class EdGraphNode_Documentation : EdGraphNode
    {
        public EdGraphNode_Documentation(nint addr) : base(addr) { }
        public Object Link { get { return this[nameof(Link)]; } set { this[nameof(Link)] = value; } }
        public Object Excerpt { get { return this[nameof(Excerpt)]; } set { this[nameof(Excerpt)] = value; } }
    }
    public class ThumbnailInfo : Object
    {
        public ThumbnailInfo(nint addr) : base(addr) { }
    }
    public class ActorElementAssetDataInterface : Object
    {
        public ActorElementAssetDataInterface(nint addr) : base(addr) { }
    }
    public class ActorElementCounterInterface : Object
    {
        public ActorElementCounterInterface(nint addr) : base(addr) { }
    }
    public class ActorElementHierarchyInterface : Object
    {
        public ActorElementHierarchyInterface(nint addr) : base(addr) { }
    }
    public class ActorElementObjectInterface : Object
    {
        public ActorElementObjectInterface(nint addr) : base(addr) { }
    }
    public class ActorElementSelectionInterface : Object
    {
        public ActorElementSelectionInterface(nint addr) : base(addr) { }
    }
    public class ActorElementWorldInterface : Object
    {
        public ActorElementWorldInterface(nint addr) : base(addr) { }
    }
    public class ComponentElementCounterInterface : Object
    {
        public ComponentElementCounterInterface(nint addr) : base(addr) { }
    }
    public class ComponentElementHierarchyInterface : Object
    {
        public ComponentElementHierarchyInterface(nint addr) : base(addr) { }
    }
    public class ComponentElementObjectInterface : Object
    {
        public ComponentElementObjectInterface(nint addr) : base(addr) { }
    }
    public class ComponentElementSelectionInterface : Object
    {
        public ComponentElementSelectionInterface(nint addr) : base(addr) { }
    }
    public class ComponentElementWorldInterface : Object
    {
        public ComponentElementWorldInterface(nint addr) : base(addr) { }
    }
    public class EngineElementsLibrary : BlueprintFunctionLibrary
    {
        public EngineElementsLibrary(nint addr) : base(addr) { }
    }
    public class TypedElementCommonActions : Object
    {
        public TypedElementCommonActions(nint addr) : base(addr) { }
        //public Array<ScriptTypedElementHandle> K2_DuplicateSelectedElements(TypedElementSelectionSet SelectionSet, World World, Vector LocationOffset) { return Invoke<Array<ScriptTypedElementHandle>>(nameof(K2_DuplicateSelectedElements), SelectionSet, World, LocationOffset); }
        //public Array<ScriptTypedElementHandle> DuplicateNormalizedElements(ScriptTypedElementListProxy ElementList, World World, Vector LocationOffset) { return Invoke<Array<ScriptTypedElementHandle>>(nameof(DuplicateNormalizedElements), ElementList, World, LocationOffset); }
        public bool DeleteSelectedElements(TypedElementSelectionSet SelectionSet, World World, TypedElementDeletionOptions DeletionOptions) { return Invoke<bool>(nameof(DeleteSelectedElements), SelectionSet, World, DeletionOptions); }
        //public bool DeleteNormalizedElements(ScriptTypedElementListProxy ElementList, World World, TypedElementSelectionSet InSelectionSet, TypedElementDeletionOptions DeletionOptions) { return Invoke<bool>(nameof(DeleteNormalizedElements), ElementList, World, InSelectionSet, DeletionOptions); }
    }
    public class TypedElementWorldInterface : Interface
    {
        public TypedElementWorldInterface(nint addr) : base(addr) { }
        //public bool SetWorldTransform(ScriptTypedElementHandle InElementHandle, Transform InTransform) { return Invoke<bool>(nameof(SetWorldTransform), InElementHandle, InTransform); }
        //public bool SetRelativeTransform(ScriptTypedElementHandle InElementHandle, Transform InTransform) { return Invoke<bool>(nameof(SetRelativeTransform), InElementHandle, InTransform); }
        //public bool SetPivotOffset(ScriptTypedElementHandle InElementHandle, Vector InPivotOffset) { return Invoke<bool>(nameof(SetPivotOffset), InElementHandle, InPivotOffset); }
        //public ScriptTypedElementHandle PromoteElement(ScriptTypedElementHandle InElementHandle, World OverrideWorld) { return Invoke<ScriptTypedElementHandle>(nameof(PromoteElement), InElementHandle, OverrideWorld); }
        //public void NotifyMovementStarted(ScriptTypedElementHandle InElementHandle) { Invoke(nameof(NotifyMovementStarted), InElementHandle); }
        //public void NotifyMovementOngoing(ScriptTypedElementHandle InElementHandle) { Invoke(nameof(NotifyMovementOngoing), InElementHandle); }
        //public void NotifyMovementEnded(ScriptTypedElementHandle InElementHandle) { Invoke(nameof(NotifyMovementEnded), InElementHandle); }
        //public bool IsTemplateElement(ScriptTypedElementHandle InElementHandle) { return Invoke<bool>(nameof(IsTemplateElement), InElementHandle); }
        //public bool GetWorldTransform(ScriptTypedElementHandle InElementHandle, Transform OutTransform) { return Invoke<bool>(nameof(GetWorldTransform), InElementHandle, OutTransform); }
        //public bool GetRelativeTransform(ScriptTypedElementHandle InElementHandle, Transform OutTransform) { return Invoke<bool>(nameof(GetRelativeTransform), InElementHandle, OutTransform); }
        //public bool GetPivotOffset(ScriptTypedElementHandle InElementHandle, Vector OutPivotOffset) { return Invoke<bool>(nameof(GetPivotOffset), InElementHandle, OutPivotOffset); }
        //public World GetOwnerWorld(ScriptTypedElementHandle InElementHandle) { return Invoke<World>(nameof(GetOwnerWorld), InElementHandle); }
        //public Level GetOwnerLevel(ScriptTypedElementHandle InElementHandle) { return Invoke<Level>(nameof(GetOwnerLevel), InElementHandle); }
        //public bool GetBounds(ScriptTypedElementHandle InElementHandle, BoxSphereBounds OutBounds) { return Invoke<bool>(nameof(GetBounds), InElementHandle, OutBounds); }
        //public ScriptTypedElementHandle DuplicateElement(ScriptTypedElementHandle InElementHandle, World InWorld, Vector InLocationOffset) { return Invoke<ScriptTypedElementHandle>(nameof(DuplicateElement), InElementHandle, InWorld, InLocationOffset); }
        //public bool DeleteElement(ScriptTypedElementHandle InElementHandle, World InWorld, TypedElementSelectionSet InSelectionSet, TypedElementDeletionOptions InDeletionOptions) { return Invoke<bool>(nameof(DeleteElement), InElementHandle, InWorld, InSelectionSet, InDeletionOptions); }
        //public bool CanPromoteElement(ScriptTypedElementHandle InElementHandle) { return Invoke<bool>(nameof(CanPromoteElement), InElementHandle); }
        //public bool CanMoveElement(ScriptTypedElementHandle InElementHandle, ETypedElementWorldType InWorldType) { return Invoke<bool>(nameof(CanMoveElement), InElementHandle, InWorldType); }
        //public bool CanEditElement(ScriptTypedElementHandle InElementHandle) { return Invoke<bool>(nameof(CanEditElement), InElementHandle); }
        //public bool CanDuplicateElement(ScriptTypedElementHandle InElementHandle) { return Invoke<bool>(nameof(CanDuplicateElement), InElementHandle); }
        //public bool CanDeleteElement(ScriptTypedElementHandle InElementHandle) { return Invoke<bool>(nameof(CanDeleteElement), InElementHandle); }
    }
    public class ObjectElementAssetDataInterface : Object
    {
        public ObjectElementAssetDataInterface(nint addr) : base(addr) { }
    }
    public class ObjectElementCounterInterface : Object
    {
        public ObjectElementCounterInterface(nint addr) : base(addr) { }
    }
    public class ObjectElementObjectInterface : Object
    {
        public ObjectElementObjectInterface(nint addr) : base(addr) { }
    }
    public class ObjectElementSelectionInterface : Object
    {
        public ObjectElementSelectionInterface(nint addr) : base(addr) { }
    }
    public class SMInstanceElementAssetDataInterface : Object
    {
        public SMInstanceElementAssetDataInterface(nint addr) : base(addr) { }
    }
    public class SMInstanceElementHierarchyInterface : Object
    {
        public SMInstanceElementHierarchyInterface(nint addr) : base(addr) { }
    }
    public class SMInstanceElementIdMapTransactor : Object
    {
        public SMInstanceElementIdMapTransactor(nint addr) : base(addr) { }
    }
    public class SMInstanceElementSelectionInterface : Object
    {
        public SMInstanceElementSelectionInterface(nint addr) : base(addr) { }
    }
    public class SMInstanceElementWorldInterface : Object
    {
        public SMInstanceElementWorldInterface(nint addr) : base(addr) { }
    }
    public class LocalMessage : Object
    {
        public LocalMessage(nint addr) : base(addr) { }
    }
    public class EngineMessage : LocalMessage
    {
        public EngineMessage(nint addr) : base(addr) { }
        public Object FailedPlaceMessage { get { return this[nameof(FailedPlaceMessage)]; } set { this[nameof(FailedPlaceMessage)] = value; } }
        public Object MaxedOutMessage { get { return this[nameof(MaxedOutMessage)]; } set { this[nameof(MaxedOutMessage)] = value; } }
        public Object EnteredMessage { get { return this[nameof(EnteredMessage)]; } set { this[nameof(EnteredMessage)] = value; } }
        public Object LeftMessage { get { return this[nameof(LeftMessage)]; } set { this[nameof(LeftMessage)] = value; } }
        public Object GlobalNameChange { get { return this[nameof(GlobalNameChange)]; } set { this[nameof(GlobalNameChange)] = value; } }
        public Object SpecEnteredMessage { get { return this[nameof(SpecEnteredMessage)]; } set { this[nameof(SpecEnteredMessage)] = value; } }
        public Object NewPlayerMessage { get { return this[nameof(NewPlayerMessage)]; } set { this[nameof(NewPlayerMessage)] = value; } }
        public Object NewSpecMessage { get { return this[nameof(NewSpecMessage)]; } set { this[nameof(NewSpecMessage)] = value; } }
    }
    public class AutoDestroySubsystem : TickableWorldSubsystem
    {
        public AutoDestroySubsystem(nint addr) : base(addr) { }
        public Array<Actor> ActorsToPoll { get { return new Array<Actor>(this[nameof(ActorsToPoll)].Address); } }
        public void OnActorEndPlay(Actor Actor, byte EndPlayReason) { Invoke(nameof(OnActorEndPlay), Actor, EndPlayReason); }
    }
    public class LODSyncInterface : Interface
    {
        public LODSyncInterface(nint addr) : base(addr) { }
    }
    public class PoseWatchFolder : Object
    {
        public PoseWatchFolder(nint addr) : base(addr) { }
    }
    public class PoseWatchElement : Object
    {
        public PoseWatchElement(nint addr) : base(addr) { }
    }
    public class PoseWatchPoseElement : PoseWatchElement
    {
        public PoseWatchPoseElement(nint addr) : base(addr) { }
    }
    public class PoseWatch : Object
    {
        public PoseWatch(nint addr) : base(addr) { }
    }
    public class ServerStatReplicator : Info
    {
        public ServerStatReplicator(nint addr) : base(addr) { }
        public bool bUpdateStatNet { get { return this[nameof(bUpdateStatNet)].Flag; } set { this[nameof(bUpdateStatNet)].Flag = value; } }
        public bool bOverwriteClientStats { get { return this[nameof(bOverwriteClientStats)].Flag; } set { this[nameof(bOverwriteClientStats)].Flag = value; } }
        public uint Channels { get { return this[nameof(Channels)].GetValue<uint>(); } set { this[nameof(Channels)].SetValue<uint>(value); } }
        public uint InRate { get { return this[nameof(InRate)].GetValue<uint>(); } set { this[nameof(InRate)].SetValue<uint>(value); } }
        public uint OutRate { get { return this[nameof(OutRate)].GetValue<uint>(); } set { this[nameof(OutRate)].SetValue<uint>(value); } }
        public uint MaxPacketOverhead { get { return this[nameof(MaxPacketOverhead)].GetValue<uint>(); } set { this[nameof(MaxPacketOverhead)].SetValue<uint>(value); } }
        public uint InRateClientMax { get { return this[nameof(InRateClientMax)].GetValue<uint>(); } set { this[nameof(InRateClientMax)].SetValue<uint>(value); } }
        public uint InRateClientMin { get { return this[nameof(InRateClientMin)].GetValue<uint>(); } set { this[nameof(InRateClientMin)].SetValue<uint>(value); } }
        public uint InRateClientAvg { get { return this[nameof(InRateClientAvg)].GetValue<uint>(); } set { this[nameof(InRateClientAvg)].SetValue<uint>(value); } }
        public uint InPacketsClientMax { get { return this[nameof(InPacketsClientMax)].GetValue<uint>(); } set { this[nameof(InPacketsClientMax)].SetValue<uint>(value); } }
        public uint InPacketsClientMin { get { return this[nameof(InPacketsClientMin)].GetValue<uint>(); } set { this[nameof(InPacketsClientMin)].SetValue<uint>(value); } }
        public uint InPacketsClientAvg { get { return this[nameof(InPacketsClientAvg)].GetValue<uint>(); } set { this[nameof(InPacketsClientAvg)].SetValue<uint>(value); } }
        public uint OutRateClientMax { get { return this[nameof(OutRateClientMax)].GetValue<uint>(); } set { this[nameof(OutRateClientMax)].SetValue<uint>(value); } }
        public uint OutRateClientMin { get { return this[nameof(OutRateClientMin)].GetValue<uint>(); } set { this[nameof(OutRateClientMin)].SetValue<uint>(value); } }
        public uint OutRateClientAvg { get { return this[nameof(OutRateClientAvg)].GetValue<uint>(); } set { this[nameof(OutRateClientAvg)].SetValue<uint>(value); } }
        public uint OutPacketsClientMax { get { return this[nameof(OutPacketsClientMax)].GetValue<uint>(); } set { this[nameof(OutPacketsClientMax)].SetValue<uint>(value); } }
        public uint OutPacketsClientMin { get { return this[nameof(OutPacketsClientMin)].GetValue<uint>(); } set { this[nameof(OutPacketsClientMin)].SetValue<uint>(value); } }
        public uint OutPacketsClientAvg { get { return this[nameof(OutPacketsClientAvg)].GetValue<uint>(); } set { this[nameof(OutPacketsClientAvg)].SetValue<uint>(value); } }
        public uint NetNumClients { get { return this[nameof(NetNumClients)].GetValue<uint>(); } set { this[nameof(NetNumClients)].SetValue<uint>(value); } }
        public uint InPackets { get { return this[nameof(InPackets)].GetValue<uint>(); } set { this[nameof(InPackets)].SetValue<uint>(value); } }
        public uint OutPackets { get { return this[nameof(OutPackets)].GetValue<uint>(); } set { this[nameof(OutPackets)].SetValue<uint>(value); } }
        public uint InBunches { get { return this[nameof(InBunches)].GetValue<uint>(); } set { this[nameof(InBunches)].SetValue<uint>(value); } }
        public uint OutBunches { get { return this[nameof(OutBunches)].GetValue<uint>(); } set { this[nameof(OutBunches)].SetValue<uint>(value); } }
        public uint OutLoss { get { return this[nameof(OutLoss)].GetValue<uint>(); } set { this[nameof(OutLoss)].SetValue<uint>(value); } }
        public uint InLoss { get { return this[nameof(InLoss)].GetValue<uint>(); } set { this[nameof(InLoss)].SetValue<uint>(value); } }
        public uint VoiceBytesSent { get { return this[nameof(VoiceBytesSent)].GetValue<uint>(); } set { this[nameof(VoiceBytesSent)].SetValue<uint>(value); } }
        public uint VoiceBytesRecv { get { return this[nameof(VoiceBytesRecv)].GetValue<uint>(); } set { this[nameof(VoiceBytesRecv)].SetValue<uint>(value); } }
        public uint VoicePacketsSent { get { return this[nameof(VoicePacketsSent)].GetValue<uint>(); } set { this[nameof(VoicePacketsSent)].SetValue<uint>(value); } }
        public uint VoicePacketsRecv { get { return this[nameof(VoicePacketsRecv)].GetValue<uint>(); } set { this[nameof(VoicePacketsRecv)].SetValue<uint>(value); } }
        public uint PercentInVoice { get { return this[nameof(PercentInVoice)].GetValue<uint>(); } set { this[nameof(PercentInVoice)].SetValue<uint>(value); } }
        public uint PercentOutVoice { get { return this[nameof(PercentOutVoice)].GetValue<uint>(); } set { this[nameof(PercentOutVoice)].SetValue<uint>(value); } }
        public uint NumActorChannels { get { return this[nameof(NumActorChannels)].GetValue<uint>(); } set { this[nameof(NumActorChannels)].SetValue<uint>(value); } }
        public uint NumConsideredActors { get { return this[nameof(NumConsideredActors)].GetValue<uint>(); } set { this[nameof(NumConsideredActors)].SetValue<uint>(value); } }
        public uint PrioritizedActors { get { return this[nameof(PrioritizedActors)].GetValue<uint>(); } set { this[nameof(PrioritizedActors)].SetValue<uint>(value); } }
        public uint NumRelevantActors { get { return this[nameof(NumRelevantActors)].GetValue<uint>(); } set { this[nameof(NumRelevantActors)].SetValue<uint>(value); } }
        public uint NumRelevantDeletedActors { get { return this[nameof(NumRelevantDeletedActors)].GetValue<uint>(); } set { this[nameof(NumRelevantDeletedActors)].SetValue<uint>(value); } }
        public uint NumReplicatedActorAttempts { get { return this[nameof(NumReplicatedActorAttempts)].GetValue<uint>(); } set { this[nameof(NumReplicatedActorAttempts)].SetValue<uint>(value); } }
        public uint NumReplicatedActors { get { return this[nameof(NumReplicatedActors)].GetValue<uint>(); } set { this[nameof(NumReplicatedActors)].SetValue<uint>(value); } }
        public uint NumActors { get { return this[nameof(NumActors)].GetValue<uint>(); } set { this[nameof(NumActors)].SetValue<uint>(value); } }
        public uint NumNetActors { get { return this[nameof(NumNetActors)].GetValue<uint>(); } set { this[nameof(NumNetActors)].SetValue<uint>(value); } }
        public uint NumDormantActors { get { return this[nameof(NumDormantActors)].GetValue<uint>(); } set { this[nameof(NumDormantActors)].SetValue<uint>(value); } }
        public uint NumInitiallyDormantActors { get { return this[nameof(NumInitiallyDormantActors)].GetValue<uint>(); } set { this[nameof(NumInitiallyDormantActors)].SetValue<uint>(value); } }
        public uint NumNetGUIDsAckd { get { return this[nameof(NumNetGUIDsAckd)].GetValue<uint>(); } set { this[nameof(NumNetGUIDsAckd)].SetValue<uint>(value); } }
        public uint NumNetGUIDsPending { get { return this[nameof(NumNetGUIDsPending)].GetValue<uint>(); } set { this[nameof(NumNetGUIDsPending)].SetValue<uint>(value); } }
        public uint NumNetGUIDsUnAckd { get { return this[nameof(NumNetGUIDsUnAckd)].GetValue<uint>(); } set { this[nameof(NumNetGUIDsUnAckd)].SetValue<uint>(value); } }
        public uint ObjPathBytes { get { return this[nameof(ObjPathBytes)].GetValue<uint>(); } set { this[nameof(ObjPathBytes)].SetValue<uint>(value); } }
        public uint NetGUIDOutRate { get { return this[nameof(NetGUIDOutRate)].GetValue<uint>(); } set { this[nameof(NetGUIDOutRate)].SetValue<uint>(value); } }
        public uint NetGUIDInRate { get { return this[nameof(NetGUIDInRate)].GetValue<uint>(); } set { this[nameof(NetGUIDInRate)].SetValue<uint>(value); } }
        public uint NetSaturated { get { return this[nameof(NetSaturated)].GetValue<uint>(); } set { this[nameof(NetSaturated)].SetValue<uint>(value); } }
    }
    public class SystemTimeTimecodeProvider : TimecodeProvider
    {
        public SystemTimeTimecodeProvider(nint addr) : base(addr) { }
        public FrameRate FrameRate { get { return this[nameof(FrameRate)].As<FrameRate>(); } set { this["FrameRate"] = value; } }
        public bool bGenerateFullFrame { get { return this[nameof(bGenerateFullFrame)].Flag; } set { this[nameof(bGenerateFullFrame)].Flag = value; } }
        public bool bUseHighPerformanceClock { get { return this[nameof(bUseHighPerformanceClock)].Flag; } set { this[nameof(bUseHighPerformanceClock)].Flag = value; } }
    }
    public class ViewportStatsSubsystem : WorldSubsystem
    {
        public ViewportStatsSubsystem(nint addr) : base(addr) { }
        public void RemoveDisplayDelegate(int IndexToRemove) { Invoke(nameof(RemoveDisplayDelegate), IndexToRemove); }
        public void AddTimedDisplay(Object Text, LinearColor Color, float Duration, Vector2D DisplayOffset) { Invoke(nameof(AddTimedDisplay), Text, Color, Duration, DisplayOffset); }
        public int AddDisplayDelegate(Object Delegate) { return Invoke<int>(nameof(AddDisplayDelegate), Delegate); }
    }
    public class FloatingPawnMovement : PawnMovementComponent
    {
        public FloatingPawnMovement(nint addr) : base(addr) { }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public float Deceleration { get { return this[nameof(Deceleration)].GetValue<float>(); } set { this[nameof(Deceleration)].SetValue<float>(value); } }
        public float TurningBoost { get { return this[nameof(TurningBoost)].GetValue<float>(); } set { this[nameof(TurningBoost)].SetValue<float>(value); } }
        public bool bPositionCorrected { get { return this[nameof(bPositionCorrected)].Flag; } set { this[nameof(bPositionCorrected)].Flag = value; } }
    }
    public class Font : Object
    {
        public Font(nint addr) : base(addr) { }
        public EFontCacheType FontCacheType { get { return (EFontCacheType)this[nameof(FontCacheType)].GetValue<int>(); } set { this[nameof(FontCacheType)].SetValue<int>((int)value); } }
        public Array<FontCharacter> Characters { get { return new Array<FontCharacter>(this[nameof(Characters)].Address); } }
        public Array<Texture2D> Textures { get { return new Array<Texture2D>(this[nameof(Textures)].Address); } }
        public int IsRemapped { get { return this[nameof(IsRemapped)].GetValue<int>(); } set { this[nameof(IsRemapped)].SetValue<int>(value); } }
        public float EmScale { get { return this[nameof(EmScale)].GetValue<float>(); } set { this[nameof(EmScale)].SetValue<float>(value); } }
        public float Ascent { get { return this[nameof(Ascent)].GetValue<float>(); } set { this[nameof(Ascent)].SetValue<float>(value); } }
        public float Descent { get { return this[nameof(Descent)].GetValue<float>(); } set { this[nameof(Descent)].SetValue<float>(value); } }
        public float Leading { get { return this[nameof(Leading)].GetValue<float>(); } set { this[nameof(Leading)].SetValue<float>(value); } }
        public int Kerning { get { return this[nameof(Kerning)].GetValue<int>(); } set { this[nameof(Kerning)].SetValue<int>(value); } }
        public FontImportOptionsData ImportOptions { get { return this[nameof(ImportOptions)].As<FontImportOptionsData>(); } set { this["ImportOptions"] = value; } }
        public int NumCharacters { get { return this[nameof(NumCharacters)].GetValue<int>(); } set { this[nameof(NumCharacters)].SetValue<int>(value); } }
        public Array<int> MaxCharHeight { get { return new Array<int>(this[nameof(MaxCharHeight)].Address); } }
        public float ScalingFactor { get { return this[nameof(ScalingFactor)].GetValue<float>(); } set { this[nameof(ScalingFactor)].SetValue<float>(value); } }
        public int LegacyFontSize { get { return this[nameof(LegacyFontSize)].GetValue<int>(); } set { this[nameof(LegacyFontSize)].SetValue<int>(value); } }
        public Object LegacyFontName { get { return this[nameof(LegacyFontName)]; } set { this[nameof(LegacyFontName)] = value; } }
        public CompositeFont CompositeFont { get { return this[nameof(CompositeFont)].As<CompositeFont>(); } set { this["CompositeFont"] = value; } }
    }
    public class FontFace : Object
    {
        public FontFace(nint addr) : base(addr) { }
        public Object sourceFileName { get { return this[nameof(sourceFileName)]; } set { this[nameof(sourceFileName)] = value; } }
        public EFontHinting Hinting { get { return (EFontHinting)this[nameof(Hinting)].GetValue<int>(); } set { this[nameof(Hinting)].SetValue<int>((int)value); } }
        public EFontLoadingPolicy LoadingPolicy { get { return (EFontLoadingPolicy)this[nameof(LoadingPolicy)].GetValue<int>(); } set { this[nameof(LoadingPolicy)].SetValue<int>((int)value); } }
        public EFontLayoutMethod LayoutMethod { get { return (EFontLayoutMethod)this[nameof(LayoutMethod)].GetValue<int>(); } set { this[nameof(LayoutMethod)].SetValue<int>((int)value); } }
    }
    public class GameEngine : Engine
    {
        public GameEngine(nint addr) : base(addr) { }
        public float MaxDeltaTime { get { return this[nameof(MaxDeltaTime)].GetValue<float>(); } set { this[nameof(MaxDeltaTime)].SetValue<float>(value); } }
        public float ServerFlushLogInterval { get { return this[nameof(ServerFlushLogInterval)].GetValue<float>(); } set { this[nameof(ServerFlushLogInterval)].SetValue<float>(value); } }
        public GameInstance GameInstance { get { return this[nameof(GameInstance)].As<GameInstance>(); } set { this["GameInstance"] = value; } }
    }
    public class AsyncActionHandleSaveGame : BlueprintAsyncActionBase
    {
        public AsyncActionHandleSaveGame(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public SaveGame SaveGameObject { get { return this[nameof(SaveGameObject)].As<SaveGame>(); } set { this["SaveGameObject"] = value; } }
        public AsyncActionHandleSaveGame AsyncSaveGameToSlot(Object WorldContextObject, SaveGame SaveGameObject, Object SlotName, int UserIndex) { return Invoke<AsyncActionHandleSaveGame>(nameof(AsyncSaveGameToSlot), WorldContextObject, SaveGameObject, SlotName, UserIndex); }
        public AsyncActionHandleSaveGame AsyncLoadGameFromSlot(Object WorldContextObject, Object SlotName, int UserIndex) { return Invoke<AsyncActionHandleSaveGame>(nameof(AsyncLoadGameFromSlot), WorldContextObject, SlotName, UserIndex); }
    }
    public class ForceFeedbackEffect : Object
    {
        public ForceFeedbackEffect(nint addr) : base(addr) { }
        public Array<ForceFeedbackChannelDetails> ChannelDetails { get { return new Array<ForceFeedbackChannelDetails>(this[nameof(ChannelDetails)].Address); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
    }
    public class TouchInterface : Object
    {
        public TouchInterface(nint addr) : base(addr) { }
        public Array<TouchInputControl> Controls { get { return new Array<TouchInputControl>(this[nameof(Controls)].Address); } }
        public float ActiveOpacity { get { return this[nameof(ActiveOpacity)].GetValue<float>(); } set { this[nameof(ActiveOpacity)].SetValue<float>(value); } }
        public float InactiveOpacity { get { return this[nameof(InactiveOpacity)].GetValue<float>(); } set { this[nameof(InactiveOpacity)].SetValue<float>(value); } }
        public float TimeUntilDeactive { get { return this[nameof(TimeUntilDeactive)].GetValue<float>(); } set { this[nameof(TimeUntilDeactive)].SetValue<float>(value); } }
        public float TimeUntilReset { get { return this[nameof(TimeUntilReset)].GetValue<float>(); } set { this[nameof(TimeUntilReset)].SetValue<float>(value); } }
        public float ActivationDelay { get { return this[nameof(ActivationDelay)].GetValue<float>(); } set { this[nameof(ActivationDelay)].SetValue<float>(value); } }
        public bool bPreventRecenter { get { return this[nameof(bPreventRecenter)].Flag; } set { this[nameof(bPreventRecenter)].Flag = value; } }
        public float StartupDelay { get { return this[nameof(StartupDelay)].GetValue<float>(); } set { this[nameof(StartupDelay)].SetValue<float>(value); } }
    }
    public class GameplayStatics : BlueprintFunctionLibrary
    {
        public GameplayStatics(nint addr) : base(addr) { }
        public void UnRetainAllSoundsInSoundClass(SoundClass InSoundClass) { Invoke(nameof(UnRetainAllSoundsInSoundClass), InSoundClass); }
        public void UnloadStreamLevelBySoftObjectPtr(Object WorldContextObject, Object Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload) { Invoke(nameof(UnloadStreamLevelBySoftObjectPtr), WorldContextObject, Level, LatentInfo, bShouldBlockOnUnload); }
        public void UnloadStreamLevel(Object WorldContextObject, Object LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload) { Invoke(nameof(UnloadStreamLevel), WorldContextObject, LevelName, LatentInfo, bShouldBlockOnUnload); }
        public bool SuggestProjectileVelocity_CustomArc(Object WorldContextObject, Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam) { return Invoke<bool>(nameof(SuggestProjectileVelocity_CustomArc), WorldContextObject, OutLaunchVelocity, StartPos, EndPos, OverrideGravityZ, ArcParam); }
        public AudioComponent SpawnSoundAttached(SoundBase Sound, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnSoundAttached), Sound, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy); }
        public AudioComponent SpawnSoundAtLocation(Object WorldContextObject, SoundBase Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnSoundAtLocation), WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy); }
        public AudioComponent SpawnSound2D(Object WorldContextObject, SoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnSound2D), WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy); }
        public Object SpawnObject(Object ObjectClass, Object Outer) { return Invoke<Object>(nameof(SpawnObject), ObjectClass, Outer); }
        public ForceFeedbackComponent SpawnForceFeedbackAttached(ForceFeedbackEffect ForceFeedbackEffect, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation AttenuationSettings, bool bAutoDestroy) { return Invoke<ForceFeedbackComponent>(nameof(SpawnForceFeedbackAttached), ForceFeedbackEffect, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy); }
        public ForceFeedbackComponent SpawnForceFeedbackAtLocation(Object WorldContextObject, ForceFeedbackEffect ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation AttenuationSettings, bool bAutoDestroy) { return Invoke<ForceFeedbackComponent>(nameof(SpawnForceFeedbackAtLocation), WorldContextObject, ForceFeedbackEffect, Location, Rotation, bLooping, IntensityMultiplier, StartTime, AttenuationSettings, bAutoDestroy); }
        public ParticleSystemComponent SpawnEmitterAttached(ParticleSystem EmitterTemplate, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate) { return Invoke<ParticleSystemComponent>(nameof(SpawnEmitterAttached), EmitterTemplate, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, bAutoDestroy, PoolingMethod, bAutoActivate); }
        public ParticleSystemComponent SpawnEmitterAtLocation(Object WorldContextObject, ParticleSystem EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem) { return Invoke<ParticleSystemComponent>(nameof(SpawnEmitterAtLocation), WorldContextObject, EmitterTemplate, Location, Rotation, Scale, bAutoDestroy, PoolingMethod, bAutoActivateSystem); }
        public AudioComponent SpawnDialogueAttached(DialogueWave Dialogue, DialogueContext Context, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnDialogueAttached), Dialogue, Context, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy); }
        public AudioComponent SpawnDialogueAtLocation(Object WorldContextObject, DialogueWave Dialogue, DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnDialogueAtLocation), WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, bAutoDestroy); }
        public AudioComponent SpawnDialogue2D(Object WorldContextObject, DialogueWave Dialogue, DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(SpawnDialogue2D), WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime, bAutoDestroy); }
        public DecalComponent SpawnDecalAttached(MaterialInterface DecalMaterial, Vector DecalSize, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan) { return Invoke<DecalComponent>(nameof(SpawnDecalAttached), DecalMaterial, DecalSize, AttachToComponent, AttachPointName, Location, Rotation, LocationType, LifeSpan); }
        public DecalComponent SpawnDecalAtLocation(Object WorldContextObject, MaterialInterface DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan) { return Invoke<DecalComponent>(nameof(SpawnDecalAtLocation), WorldContextObject, DecalMaterial, DecalSize, Location, Rotation, LifeSpan); }
        public void SetWorldOriginLocation(Object WorldContextObject, IntVector NewLocation) { Invoke(nameof(SetWorldOriginLocation), WorldContextObject, NewLocation); }
        public void SetViewportMouseCaptureMode(Object WorldContextObject, EMouseCaptureMode MouseCaptureMode) { Invoke(nameof(SetViewportMouseCaptureMode), WorldContextObject, MouseCaptureMode); }
        public void SetSubtitlesEnabled(bool bEnabled) { Invoke(nameof(SetSubtitlesEnabled), bEnabled); }
        public void SetSoundMixClassOverride(Object WorldContextObject, SoundMix InSoundMixModifier, SoundClass InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren) { Invoke(nameof(SetSoundMixClassOverride), WorldContextObject, InSoundMixModifier, InSoundClass, Volume, Pitch, FadeInTime, bApplyToChildren); }
        public void SetSoundClassDistanceScale(Object WorldContextObject, SoundClass SoundClass, float DistanceAttenuationScale, float TimeSec) { Invoke(nameof(SetSoundClassDistanceScale), WorldContextObject, SoundClass, DistanceAttenuationScale, TimeSec); }
        public void SetPlayerPlatformUserId(PlayerController PlayerController, PlatformUserId UserId) { Invoke(nameof(SetPlayerPlatformUserId), PlayerController, UserId); }
        public void SetPlayerControllerID(PlayerController Player, int ControllerId) { Invoke(nameof(SetPlayerControllerID), Player, ControllerId); }
        public void SetMaxAudioChannelsScaled(Object WorldContextObject, float MaxChannelCountScale) { Invoke(nameof(SetMaxAudioChannelsScaled), WorldContextObject, MaxChannelCountScale); }
        public void SetGlobalTimeDilation(Object WorldContextObject, float TimeDilation) { Invoke(nameof(SetGlobalTimeDilation), WorldContextObject, TimeDilation); }
        public void SetGlobalPitchModulation(Object WorldContextObject, float PitchModulation, float TimeSec) { Invoke(nameof(SetGlobalPitchModulation), WorldContextObject, PitchModulation, TimeSec); }
        public void SetGlobalListenerFocusParameters(Object WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale) { Invoke(nameof(SetGlobalListenerFocusParameters), WorldContextObject, FocusAzimuthScale, NonFocusAzimuthScale, FocusDistanceScale, NonFocusDistanceScale, FocusVolumeScale, NonFocusVolumeScale, FocusPriorityScale, NonFocusPriorityScale); }
        public bool SetGamePaused(Object WorldContextObject, bool bPaused) { return Invoke<bool>(nameof(SetGamePaused), WorldContextObject, bPaused); }
        public void SetForceDisableSplitscreen(Object WorldContextObject, bool bDisable) { Invoke(nameof(SetForceDisableSplitscreen), WorldContextObject, bDisable); }
        public void SetEnableWorldRendering(Object WorldContextObject, bool bEnable) { Invoke(nameof(SetEnableWorldRendering), WorldContextObject, bEnable); }
        public void SetBaseSoundMix(Object WorldContextObject, SoundMix InSoundMix) { Invoke(nameof(SetBaseSoundMix), WorldContextObject, InSoundMix); }
        public bool SetActiveSpatialPluginByName(Object WorldContextObject, Object InPluginName) { return Invoke<bool>(nameof(SetActiveSpatialPluginByName), WorldContextObject, InPluginName); }
        public bool SaveGameToSlot(SaveGame SaveGameObject, Object SlotName, int UserIndex) { return Invoke<bool>(nameof(SaveGameToSlot), SaveGameObject, SlotName, UserIndex); }
        public void RemovePlayer(PlayerController Player, bool bDestroyPawn) { Invoke(nameof(RemovePlayer), Player, bDestroyPawn); }
        public Vector RebaseZeroOriginOntoLocal(Object WorldContextObject, Vector WorldLocation) { return Invoke<Vector>(nameof(RebaseZeroOriginOntoLocal), WorldContextObject, WorldLocation); }
        public Vector RebaseLocalOriginOntoZero(Object WorldContextObject, Vector WorldLocation) { return Invoke<Vector>(nameof(RebaseLocalOriginOntoZero), WorldContextObject, WorldLocation); }
        public void PushSoundMixModifier(Object WorldContextObject, SoundMix InSoundMixModifier) { Invoke(nameof(PushSoundMixModifier), WorldContextObject, InSoundMixModifier); }
        public bool ProjectWorldToScreen(PlayerController Player, Vector WorldPosition, Vector2D ScreenPosition, bool bPlayerViewportRelative) { return Invoke<bool>(nameof(ProjectWorldToScreen), Player, WorldPosition, ScreenPosition, bPlayerViewportRelative); }
        public void PrimeSound(SoundBase InSound) { Invoke(nameof(PrimeSound), InSound); }
        public void PrimeAllSoundsInSoundClass(SoundClass InSoundClass) { Invoke(nameof(PrimeAllSoundsInSoundClass), InSoundClass); }
        public void PopSoundMixModifier(Object WorldContextObject, SoundMix InSoundMixModifier) { Invoke(nameof(PopSoundMixModifier), WorldContextObject, InSoundMixModifier); }
        public void PlayWorldCameraShake(Object WorldContextObject, Object Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter) { Invoke(nameof(PlayWorldCameraShake), WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff, bOrientShakeTowardsEpicenter); }
        public void PlaySoundAtLocation(Object WorldContextObject, SoundBase Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, Actor OwningActor, InitialActiveSoundParams InitialParams) { Invoke(nameof(PlaySoundAtLocation), WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor, InitialParams); }
        public void PlaySound2D(Object WorldContextObject, SoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency ConcurrencySettings, Actor OwningActor, bool bIsUISound) { Invoke(nameof(PlaySound2D), WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, OwningActor, bIsUISound); }
        public void PlayDialogueAtLocation(Object WorldContextObject, DialogueWave Dialogue, DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings) { Invoke(nameof(PlayDialogueAtLocation), WorldContextObject, Dialogue, Context, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings); }
        public void PlayDialogue2D(Object WorldContextObject, DialogueWave Dialogue, DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime) { Invoke(nameof(PlayDialogue2D), WorldContextObject, Dialogue, Context, VolumeMultiplier, PitchMultiplier, StartTime); }
        public Object ParseOption(Object Options, Object Key) { return Invoke<Object>(nameof(ParseOption), Options, Key); }
        public void OpenLevelBySoftObjectPtr(Object WorldContextObject, Object Level, bool bAbsolute, Object Options) { Invoke(nameof(OpenLevelBySoftObjectPtr), WorldContextObject, Level, bAbsolute, Options); }
        public void OpenLevel(Object WorldContextObject, Object LevelName, bool bAbsolute, Object Options) { Invoke(nameof(OpenLevel), WorldContextObject, LevelName, bAbsolute, Options); }
        public bool ObjectIsA(Object Object, Object ObjectClass) { return Invoke<bool>(nameof(ObjectIsA), Object, ObjectClass); }
        public HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial PhysMat, Actor HitActor, PrimitiveComponent HitComponent, Object HitBoneName, Object BoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd) { return Invoke<HitResult>(nameof(MakeHitResult), bBlockingHit, bInitialOverlap, Time, Distance, Location, ImpactPoint, Normal, ImpactNormal, PhysMat, HitActor, HitComponent, HitBoneName, BoneName, HitItem, ElementIndex, FaceIndex, TraceStart, TraceEnd); }
        public void LoadStreamLevelBySoftObjectPtr(Object WorldContextObject, Object Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo) { Invoke(nameof(LoadStreamLevelBySoftObjectPtr), WorldContextObject, Level, bMakeVisibleAfterLoad, bShouldBlockOnLoad, LatentInfo); }
        public void LoadStreamLevel(Object WorldContextObject, Object LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo) { Invoke(nameof(LoadStreamLevel), WorldContextObject, LevelName, bMakeVisibleAfterLoad, bShouldBlockOnLoad, LatentInfo); }
        public SaveGame LoadGameFromSlot(Object SlotName, int UserIndex) { return Invoke<SaveGame>(nameof(LoadGameFromSlot), SlotName, UserIndex); }
        public bool IsSplitscreenForceDisabled(Object WorldContextObject) { return Invoke<bool>(nameof(IsSplitscreenForceDisabled), WorldContextObject); }
        public bool IsGamePaused(Object WorldContextObject) { return Invoke<bool>(nameof(IsGamePaused), WorldContextObject); }
        public bool HasOption(Object Options, Object InKey) { return Invoke<bool>(nameof(HasOption), Options, InKey); }
        public bool HasLaunchOption(Object OptionToCheck) { return Invoke<bool>(nameof(HasLaunchOption), OptionToCheck); }
        public int GrassOverlappingSphereCount(Object WorldContextObject, StaticMesh StaticMesh, Vector CenterPosition, float Radius) { return Invoke<int>(nameof(GrassOverlappingSphereCount), WorldContextObject, StaticMesh, CenterPosition, Radius); }
        public IntVector GetWorldOriginLocation(Object WorldContextObject) { return Invoke<IntVector>(nameof(GetWorldOriginLocation), WorldContextObject); }
        public double GetWorldDeltaSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetWorldDeltaSeconds), WorldContextObject); }
        public void GetViewProjectionMatrix(MinimalViewInfo DesiredView, Matrix ViewMatrix, Matrix ProjectionMatrix, Matrix ViewProjectionMatrix) { Invoke(nameof(GetViewProjectionMatrix), DesiredView, ViewMatrix, ProjectionMatrix, ViewProjectionMatrix); }
        public EMouseCaptureMode GetViewportMouseCaptureMode(Object WorldContextObject) { return Invoke<EMouseCaptureMode>(nameof(GetViewportMouseCaptureMode), WorldContextObject); }
        public double GetUnpausedTimeSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetUnpausedTimeSeconds), WorldContextObject); }
        public double GetTimeSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetTimeSeconds), WorldContextObject); }
        public byte GetSurfaceType(HitResult Hit) { return Invoke<byte>(nameof(GetSurfaceType), Hit); }
        public LevelStreaming GetStreamingLevel(Object WorldContextObject, Object PackageName) { return Invoke<LevelStreaming>(nameof(GetStreamingLevel), WorldContextObject, PackageName); }
        public double GetRealTimeSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetRealTimeSeconds), WorldContextObject); }
        public PlayerState GetPlayerStateFromUniqueNetId(Object WorldContextObject, UniqueNetIdRepl UniqueId) { return Invoke<PlayerState>(nameof(GetPlayerStateFromUniqueNetId), WorldContextObject, UniqueId); }
        public PlayerState GetPlayerState(Object WorldContextObject, int PlayerStateIndex) { return Invoke<PlayerState>(nameof(GetPlayerState), WorldContextObject, PlayerStateIndex); }
        public Pawn GetPlayerPawn(Object WorldContextObject, int PlayerIndex) { return Invoke<Pawn>(nameof(GetPlayerPawn), WorldContextObject, PlayerIndex); }
        public int GetPlayerControllerID(PlayerController Player) { return Invoke<int>(nameof(GetPlayerControllerID), Player); }
        public PlayerController GetPlayerControllerFromPlatformUser(Object WorldContextObject, PlatformUserId UserId) { return Invoke<PlayerController>(nameof(GetPlayerControllerFromPlatformUser), WorldContextObject, UserId); }
        public PlayerController GetPlayerControllerFromID(Object WorldContextObject, int ControllerId) { return Invoke<PlayerController>(nameof(GetPlayerControllerFromID), WorldContextObject, ControllerId); }
        public PlayerController GetPlayerController(Object WorldContextObject, int PlayerIndex) { return Invoke<PlayerController>(nameof(GetPlayerController), WorldContextObject, PlayerIndex); }
        public Character GetPlayerCharacter(Object WorldContextObject, int PlayerIndex) { return Invoke<Character>(nameof(GetPlayerCharacter), WorldContextObject, PlayerIndex); }
        public PlayerCameraManager GetPlayerCameraManager(Object WorldContextObject, int PlayerIndex) { return Invoke<PlayerCameraManager>(nameof(GetPlayerCameraManager), WorldContextObject, PlayerIndex); }
        public Object GetPlatformName() { return Invoke<Object>(nameof(GetPlatformName)); }
        public Object GetObjectClass(Object Object) { return Invoke<Object>(nameof(GetObjectClass), Object); }
        public int GetNumPlayerStates(Object WorldContextObject) { return Invoke<int>(nameof(GetNumPlayerStates), WorldContextObject); }
        public int GetNumPlayerControllers(Object WorldContextObject) { return Invoke<int>(nameof(GetNumPlayerControllers), WorldContextObject); }
        public int GetNumLocalPlayerControllers(Object WorldContextObject) { return Invoke<int>(nameof(GetNumLocalPlayerControllers), WorldContextObject); }
        public int GetMaxAudioChannelCount(Object WorldContextObject) { return Invoke<int>(nameof(GetMaxAudioChannelCount), WorldContextObject); }
        public void GetKeyValue(Object Pair, Object Key, Object Value) { Invoke(nameof(GetKeyValue), Pair, Key, Value); }
        public int GetIntOption(Object Options, Object Key, int DefaultValue) { return Invoke<int>(nameof(GetIntOption), Options, Key, DefaultValue); }
        public float GetGlobalTimeDilation(Object WorldContextObject) { return Invoke<float>(nameof(GetGlobalTimeDilation), WorldContextObject); }
        public GameStateBase GetGameState(Object WorldContextObject) { return Invoke<GameStateBase>(nameof(GetGameState), WorldContextObject); }
        public GameModeBase GetGameMode(Object WorldContextObject) { return Invoke<GameModeBase>(nameof(GetGameMode), WorldContextObject); }
        public GameInstance GetGameInstance(Object WorldContextObject) { return Invoke<GameInstance>(nameof(GetGameInstance), WorldContextObject); }
        public bool GetEnableWorldRendering(Object WorldContextObject) { return Invoke<bool>(nameof(GetEnableWorldRendering), WorldContextObject); }
        public ReverbEffect GetCurrentReverbEffect(Object WorldContextObject) { return Invoke<ReverbEffect>(nameof(GetCurrentReverbEffect), WorldContextObject); }
        public Object GetCurrentLevelName(Object WorldContextObject, bool bRemovePrefixString) { return Invoke<Object>(nameof(GetCurrentLevelName), WorldContextObject, bRemovePrefixString); }
        public bool GetClosestListenerLocation(Object WorldContextObject, Vector Location, float MaximumRange, bool bAllowAttenuationOverride, Vector ListenerPosition) { return Invoke<bool>(nameof(GetClosestListenerLocation), WorldContextObject, Location, MaximumRange, bAllowAttenuationOverride, ListenerPosition); }
        public Array<Object> GetAvailableSpatialPluginNames(Object WorldContextObject) { return Invoke<Array<Object>>(nameof(GetAvailableSpatialPluginNames), WorldContextObject); }
        public double GetAudioTimeSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetAudioTimeSeconds), WorldContextObject); }
        public void GetAllActorsWithTag(Object WorldContextObject, Object Tag, Array<Actor> OutActors) { Invoke(nameof(GetAllActorsWithTag), WorldContextObject, Tag, OutActors); }
        public void GetAllActorsWithInterface(Object WorldContextObject, Object Interface, Array<Actor> OutActors) { Invoke(nameof(GetAllActorsWithInterface), WorldContextObject, Interface, OutActors); }
        public void GetAllActorsOfClassWithTag(Object WorldContextObject, Object actorClass, Object Tag, Array<Actor> OutActors) { Invoke(nameof(GetAllActorsOfClassWithTag), WorldContextObject, actorClass, Tag, OutActors); }
        public void GetAllActorsOfClass(Object WorldContextObject, Object actorClass, Array<Actor> OutActors) { Invoke(nameof(GetAllActorsOfClass), WorldContextObject, actorClass, OutActors); }
        public Actor GetActorOfClass(Object WorldContextObject, Object actorClass) { return Invoke<Actor>(nameof(GetActorOfClass), WorldContextObject, actorClass); }
        public void GetActorArrayBounds(Array<Actor> Actors, bool bOnlyCollidingComponents, Vector Center, Vector BoxExtent) { Invoke(nameof(GetActorArrayBounds), Actors, bOnlyCollidingComponents, Center, BoxExtent); }
        public Vector GetActorArrayAverageLocation(Array<Actor> Actors) { return Invoke<Vector>(nameof(GetActorArrayAverageLocation), Actors); }
        public Object GetActiveSpatialPluginName(Object WorldContextObject) { return Invoke<Object>(nameof(GetActiveSpatialPluginName), WorldContextObject); }
        public void GetAccurateRealTime(int Seconds, double PartialSeconds) { Invoke(nameof(GetAccurateRealTime), Seconds, PartialSeconds); }
        public void FlushLevelStreaming(Object WorldContextObject) { Invoke(nameof(FlushLevelStreaming), WorldContextObject); }
        public Actor FinishSpawningActor(Actor Actor, Transform SpawnTransform) { return Invoke<Actor>(nameof(FinishSpawningActor), Actor, SpawnTransform); }
        public Actor FindNearestActor(Vector Origin, Array<Actor> ActorsToCheck, float Distance) { return Invoke<Actor>(nameof(FindNearestActor), Origin, ActorsToCheck, Distance); }
        public bool FindCollisionUV(HitResult Hit, int UVChannel, Vector2D UV) { return Invoke<bool>(nameof(FindCollisionUV), Hit, UVChannel, UV); }
        public void EnableLiveStreaming(bool Enable) { Invoke(nameof(EnableLiveStreaming), Enable); }
        public bool DoesSaveGameExist(Object SlotName, int UserIndex) { return Invoke<bool>(nameof(DoesSaveGameExist), SlotName, UserIndex); }
        public bool DeprojectScreenToWorld(PlayerController Player, Vector2D ScreenPosition, Vector WorldPosition, Vector WorldDirection) { return Invoke<bool>(nameof(DeprojectScreenToWorld), Player, ScreenPosition, WorldPosition, WorldDirection); }
        public bool DeprojectSceneCaptureToWorld(SceneCapture2D SceneCapture2D, Vector2D TargetUV, Vector WorldPosition, Vector WorldDirection) { return Invoke<bool>(nameof(DeprojectSceneCaptureToWorld), SceneCapture2D, TargetUV, WorldPosition, WorldDirection); }
        public bool DeleteGameInSlot(Object SlotName, int UserIndex) { return Invoke<bool>(nameof(DeleteGameInSlot), SlotName, UserIndex); }
        public void DeactivateReverbEffect(Object WorldContextObject, Object TagName) { Invoke(nameof(DeactivateReverbEffect), WorldContextObject, TagName); }
        public AudioComponent CreateSound2D(Object WorldContextObject, SoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy) { return Invoke<AudioComponent>(nameof(CreateSound2D), WorldContextObject, Sound, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy); }
        public SaveGame CreateSaveGameObject(Object SaveGameClass) { return Invoke<SaveGame>(nameof(CreateSaveGameObject), SaveGameClass); }
        public PlayerController CreatePlayerFromPlatformUser(Object WorldContextObject, PlatformUserId UserId, bool bSpawnPlayerController) { return Invoke<PlayerController>(nameof(CreatePlayerFromPlatformUser), WorldContextObject, UserId, bSpawnPlayerController); }
        public PlayerController CreatePlayer(Object WorldContextObject, int ControllerId, bool bSpawnPlayerController) { return Invoke<PlayerController>(nameof(CreatePlayer), WorldContextObject, ControllerId, bSpawnPlayerController); }
        public void ClearSoundMixModifiers(Object WorldContextObject) { Invoke(nameof(ClearSoundMixModifiers), WorldContextObject); }
        public void ClearSoundMixClassOverride(Object WorldContextObject, SoundMix InSoundMixModifier, SoundClass InSoundClass, float FadeOutTime) { Invoke(nameof(ClearSoundMixClassOverride), WorldContextObject, InSoundMixModifier, InSoundClass, FadeOutTime); }
        public void CancelAsyncLoading() { Invoke(nameof(CancelAsyncLoading)); }
        public void BreakHitResult(HitResult Hit, bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial PhysMat, Actor HitActor, PrimitiveComponent HitComponent, Object HitBoneName, Object BoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd) { Invoke(nameof(BreakHitResult), Hit, bBlockingHit, bInitialOverlap, Time, Distance, Location, ImpactPoint, Normal, ImpactNormal, PhysMat, HitActor, HitComponent, HitBoneName, BoneName, HitItem, ElementIndex, FaceIndex, TraceStart, TraceEnd); }
        public bool BlueprintSuggestProjectileVelocity(Object WorldContextObject, Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug) { return Invoke<bool>(nameof(BlueprintSuggestProjectileVelocity), WorldContextObject, TossVelocity, StartLocation, EndLocation, LaunchSpeed, OverrideGravityZ, TraceOption, CollisionRadius, bFavorHighArc, bDrawDebug); }
        public bool Blueprint_PredictProjectilePath_ByTraceChannel(Object WorldContextObject, HitResult OutHit, Array<Vector> OutPathPositions, Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ) { return Invoke<bool>(nameof(Blueprint_PredictProjectilePath_ByTraceChannel), WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ); }
        public bool Blueprint_PredictProjectilePath_ByObjectType(Object WorldContextObject, HitResult OutHit, Array<Vector> OutPathPositions, Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ) { return Invoke<bool>(nameof(Blueprint_PredictProjectilePath_ByObjectType), WorldContextObject, OutHit, OutPathPositions, OutLastTraceDestination, StartPos, LaunchVelocity, bTracePath, ProjectileRadius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, DrawDebugTime, SimFrequency, MaxSimTime, OverrideGravityZ); }
        public bool Blueprint_PredictProjectilePath_Advanced(Object WorldContextObject, PredictProjectilePathParams PredictParams, PredictProjectilePathResult PredictResult) { return Invoke<bool>(nameof(Blueprint_PredictProjectilePath_Advanced), WorldContextObject, PredictParams, PredictResult); }
        public Actor BeginSpawningActorFromBlueprint(Object WorldContextObject, Blueprint Blueprint, Transform SpawnTransform, bool bNoCollisionFail) { return Invoke<Actor>(nameof(BeginSpawningActorFromBlueprint), WorldContextObject, Blueprint, SpawnTransform, bNoCollisionFail); }
        public Actor BeginDeferredActorSpawnFromClass(Object WorldContextObject, Object actorClass, Transform SpawnTransform, ESpawnActorCollisionHandlingMethod collisionHandlingOverride, Actor Owner) { return Invoke<Actor>(nameof(BeginDeferredActorSpawnFromClass), WorldContextObject, actorClass, SpawnTransform, collisionHandlingOverride, Owner); }
        public bool AreSubtitlesEnabled() { return Invoke<bool>(nameof(AreSubtitlesEnabled)); }
        public bool AreAnyListenersWithinRange(Object WorldContextObject, Vector Location, float MaximumRange) { return Invoke<bool>(nameof(AreAnyListenersWithinRange), WorldContextObject, Location, MaximumRange); }
        public bool ApplyRadialDamageWithFalloff(Object WorldContextObject, float BaseDamage, float MinimumDamage, Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, Object DamageTypeClass, Array<Actor> IgnoreActors, Actor DamageCauser, Controller InstigatedByController, byte DamagePreventionChannel) { return Invoke<bool>(nameof(ApplyRadialDamageWithFalloff), WorldContextObject, BaseDamage, MinimumDamage, Origin, DamageInnerRadius, DamageOuterRadius, DamageFalloff, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, DamagePreventionChannel); }
        public bool ApplyRadialDamage(Object WorldContextObject, float BaseDamage, Vector Origin, float DamageRadius, Object DamageTypeClass, Array<Actor> IgnoreActors, Actor DamageCauser, Controller InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel) { return Invoke<bool>(nameof(ApplyRadialDamage), WorldContextObject, BaseDamage, Origin, DamageRadius, DamageTypeClass, IgnoreActors, DamageCauser, InstigatedByController, bDoFullDamage, DamagePreventionChannel); }
        public float ApplyPointDamage(Actor DamagedActor, float BaseDamage, Vector HitFromDirection, HitResult HitInfo, Controller EventInstigator, Actor DamageCauser, Object DamageTypeClass) { return Invoke<float>(nameof(ApplyPointDamage), DamagedActor, BaseDamage, HitFromDirection, HitInfo, EventInstigator, DamageCauser, DamageTypeClass); }
        public float ApplyDamage(Actor DamagedActor, float BaseDamage, Controller EventInstigator, Actor DamageCauser, Object DamageTypeClass) { return Invoke<float>(nameof(ApplyDamage), DamagedActor, BaseDamage, EventInstigator, DamageCauser, DamageTypeClass); }
        public void AnnounceAccessibleString(Object AnnouncementString) { Invoke(nameof(AnnounceAccessibleString), AnnouncementString); }
        public void ActivateReverbEffect(Object WorldContextObject, ReverbEffect ReverbEffect, Object TagName, float Priority, float Volume, float FadeTime) { Invoke(nameof(ActivateReverbEffect), WorldContextObject, ReverbEffect, TagName, Priority, Volume, FadeTime); }
    }
    public class GameSession : Info
    {
        public GameSession(nint addr) : base(addr) { }
        public int MaxSpectators { get { return this[nameof(MaxSpectators)].GetValue<int>(); } set { this[nameof(MaxSpectators)].SetValue<int>(value); } }
        public int MaxPlayers { get { return this[nameof(MaxPlayers)].GetValue<int>(); } set { this[nameof(MaxPlayers)].SetValue<int>(value); } }
        public int MaxPartySize { get { return this[nameof(MaxPartySize)].GetValue<int>(); } set { this[nameof(MaxPartySize)].SetValue<int>(value); } }
        public byte MaxSplitscreensPerConnection { get { return this[nameof(MaxSplitscreensPerConnection)].GetValue<byte>(); } set { this[nameof(MaxSplitscreensPerConnection)].SetValue<byte>(value); } }
        public bool bRequiresPushToTalk { get { return this[nameof(bRequiresPushToTalk)].Flag; } set { this[nameof(bRequiresPushToTalk)].Flag = value; } }
        public Object SessionName { get { return this[nameof(SessionName)]; } set { this[nameof(SessionName)] = value; } }
    }
    public class GameUserSettings : Object
    {
        public GameUserSettings(nint addr) : base(addr) { }
        public bool bUseVSync { get { return this[nameof(bUseVSync)].Flag; } set { this[nameof(bUseVSync)].Flag = value; } }
        public bool bUseDynamicResolution { get { return this[nameof(bUseDynamicResolution)].Flag; } set { this[nameof(bUseDynamicResolution)].Flag = value; } }
        public uint ResolutionSizeX { get { return this[nameof(ResolutionSizeX)].GetValue<uint>(); } set { this[nameof(ResolutionSizeX)].SetValue<uint>(value); } }
        public uint ResolutionSizeY { get { return this[nameof(ResolutionSizeY)].GetValue<uint>(); } set { this[nameof(ResolutionSizeY)].SetValue<uint>(value); } }
        public uint LastUserConfirmedResolutionSizeX { get { return this[nameof(LastUserConfirmedResolutionSizeX)].GetValue<uint>(); } set { this[nameof(LastUserConfirmedResolutionSizeX)].SetValue<uint>(value); } }
        public uint LastUserConfirmedResolutionSizeY { get { return this[nameof(LastUserConfirmedResolutionSizeY)].GetValue<uint>(); } set { this[nameof(LastUserConfirmedResolutionSizeY)].SetValue<uint>(value); } }
        public int WindowPosX { get { return this[nameof(WindowPosX)].GetValue<int>(); } set { this[nameof(WindowPosX)].SetValue<int>(value); } }
        public int WindowPosY { get { return this[nameof(WindowPosY)].GetValue<int>(); } set { this[nameof(WindowPosY)].SetValue<int>(value); } }
        public int FullscreenMode { get { return this[nameof(FullscreenMode)].GetValue<int>(); } set { this[nameof(FullscreenMode)].SetValue<int>(value); } }
        public int LastConfirmedFullscreenMode { get { return this[nameof(LastConfirmedFullscreenMode)].GetValue<int>(); } set { this[nameof(LastConfirmedFullscreenMode)].SetValue<int>(value); } }
        public int PreferredFullscreenMode { get { return this[nameof(PreferredFullscreenMode)].GetValue<int>(); } set { this[nameof(PreferredFullscreenMode)].SetValue<int>(value); } }
        public uint Version { get { return this[nameof(Version)].GetValue<uint>(); } set { this[nameof(Version)].SetValue<uint>(value); } }
        public int AudioQualityLevel { get { return this[nameof(AudioQualityLevel)].GetValue<int>(); } set { this[nameof(AudioQualityLevel)].SetValue<int>(value); } }
        public int LastConfirmedAudioQualityLevel { get { return this[nameof(LastConfirmedAudioQualityLevel)].GetValue<int>(); } set { this[nameof(LastConfirmedAudioQualityLevel)].SetValue<int>(value); } }
        public float FrameRateLimit { get { return this[nameof(FrameRateLimit)].GetValue<float>(); } set { this[nameof(FrameRateLimit)].SetValue<float>(value); } }
        public int DesiredScreenWidth { get { return this[nameof(DesiredScreenWidth)].GetValue<int>(); } set { this[nameof(DesiredScreenWidth)].SetValue<int>(value); } }
        public bool bUseDesiredScreenHeight { get { return this[nameof(bUseDesiredScreenHeight)].Flag; } set { this[nameof(bUseDesiredScreenHeight)].Flag = value; } }
        public int DesiredScreenHeight { get { return this[nameof(DesiredScreenHeight)].GetValue<int>(); } set { this[nameof(DesiredScreenHeight)].SetValue<int>(value); } }
        public int LastUserConfirmedDesiredScreenWidth { get { return this[nameof(LastUserConfirmedDesiredScreenWidth)].GetValue<int>(); } set { this[nameof(LastUserConfirmedDesiredScreenWidth)].SetValue<int>(value); } }
        public int LastUserConfirmedDesiredScreenHeight { get { return this[nameof(LastUserConfirmedDesiredScreenHeight)].GetValue<int>(); } set { this[nameof(LastUserConfirmedDesiredScreenHeight)].SetValue<int>(value); } }
        public float LastRecommendedScreenWidth { get { return this[nameof(LastRecommendedScreenWidth)].GetValue<float>(); } set { this[nameof(LastRecommendedScreenWidth)].SetValue<float>(value); } }
        public float LastRecommendedScreenHeight { get { return this[nameof(LastRecommendedScreenHeight)].GetValue<float>(); } set { this[nameof(LastRecommendedScreenHeight)].SetValue<float>(value); } }
        public float LastCPUBenchmarkResult { get { return this[nameof(LastCPUBenchmarkResult)].GetValue<float>(); } set { this[nameof(LastCPUBenchmarkResult)].SetValue<float>(value); } }
        public float LastGPUBenchmarkResult { get { return this[nameof(LastGPUBenchmarkResult)].GetValue<float>(); } set { this[nameof(LastGPUBenchmarkResult)].SetValue<float>(value); } }
        public Array<float> LastCPUBenchmarkSteps { get { return new Array<float>(this[nameof(LastCPUBenchmarkSteps)].Address); } }
        public Array<float> LastGPUBenchmarkSteps { get { return new Array<float>(this[nameof(LastGPUBenchmarkSteps)].Address); } }
        public float LastGPUBenchmarkMultiplier { get { return this[nameof(LastGPUBenchmarkMultiplier)].GetValue<float>(); } set { this[nameof(LastGPUBenchmarkMultiplier)].SetValue<float>(value); } }
        public bool bUseHDRDisplayOutput { get { return this[nameof(bUseHDRDisplayOutput)].Flag; } set { this[nameof(bUseHDRDisplayOutput)].Flag = value; } }
        public int HDRDisplayOutputNits { get { return this[nameof(HDRDisplayOutputNits)].GetValue<int>(); } set { this[nameof(HDRDisplayOutputNits)].SetValue<int>(value); } }
        public Object OnGameUserSettingsUINeedsUpdate { get { return this[nameof(OnGameUserSettingsUINeedsUpdate)]; } set { this[nameof(OnGameUserSettingsUINeedsUpdate)] = value; } }
        public void ValidateSettings() { Invoke(nameof(ValidateSettings)); }
        public bool SupportsHDRDisplayOutput() { return Invoke<bool>(nameof(SupportsHDRDisplayOutput)); }
        public void SetVSyncEnabled(bool bEnable) { Invoke(nameof(SetVSyncEnabled), bEnable); }
        public void SetVisualEffectQuality(int Value) { Invoke(nameof(SetVisualEffectQuality), Value); }
        public void SetViewDistanceQuality(int Value) { Invoke(nameof(SetViewDistanceQuality), Value); }
        public void SetToDefaults() { Invoke(nameof(SetToDefaults)); }
        public void SetTextureQuality(int Value) { Invoke(nameof(SetTextureQuality), Value); }
        public void SetShadowQuality(int Value) { Invoke(nameof(SetShadowQuality), Value); }
        public void SetShadingQuality(int Value) { Invoke(nameof(SetShadingQuality), Value); }
        public void SetScreenResolution(IntPoint Resolution) { Invoke(nameof(SetScreenResolution), Resolution); }
        public void SetResolutionScaleValueEx(float NewScaleValue) { Invoke(nameof(SetResolutionScaleValueEx), NewScaleValue); }
        public void SetResolutionScaleValue(int NewScaleValue) { Invoke(nameof(SetResolutionScaleValue), NewScaleValue); }
        public void SetResolutionScaleNormalized(float NewScaleNormalized) { Invoke(nameof(SetResolutionScaleNormalized), NewScaleNormalized); }
        public void SetReflectionQuality(int Value) { Invoke(nameof(SetReflectionQuality), Value); }
        public void SetPostProcessingQuality(int Value) { Invoke(nameof(SetPostProcessingQuality), Value); }
        public void SetOverallScalabilityLevel(int Value) { Invoke(nameof(SetOverallScalabilityLevel), Value); }
        public void SetGlobalIlluminationQuality(int Value) { Invoke(nameof(SetGlobalIlluminationQuality), Value); }
        public void SetFullscreenMode(byte InFullscreenMode) { Invoke(nameof(SetFullscreenMode), InFullscreenMode); }
        public void SetFrameRateLimit(float NewLimit) { Invoke(nameof(SetFrameRateLimit), NewLimit); }
        public void SetFoliageQuality(int Value) { Invoke(nameof(SetFoliageQuality), Value); }
        public void SetDynamicResolutionEnabled(bool bEnable) { Invoke(nameof(SetDynamicResolutionEnabled), bEnable); }
        public void SetBenchmarkFallbackValues() { Invoke(nameof(SetBenchmarkFallbackValues)); }
        public void SetAudioQualityLevel(int QualityLevel) { Invoke(nameof(SetAudioQualityLevel), QualityLevel); }
        public void SetAntiAliasingQuality(int Value) { Invoke(nameof(SetAntiAliasingQuality), Value); }
        public void SaveSettings() { Invoke(nameof(SaveSettings)); }
        public void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier) { Invoke(nameof(RunHardwareBenchmark), WorkScale, CPUMultiplier, GPUMultiplier); }
        public void RevertVideoMode() { Invoke(nameof(RevertVideoMode)); }
        public void ResetToCurrentSettings() { Invoke(nameof(ResetToCurrentSettings)); }
        public void LoadSettings(bool bForceReload) { Invoke(nameof(LoadSettings), bForceReload); }
        public bool IsVSyncEnabled() { return Invoke<bool>(nameof(IsVSyncEnabled)); }
        public bool IsVSyncDirty() { return Invoke<bool>(nameof(IsVSyncDirty)); }
        public bool IsScreenResolutionDirty() { return Invoke<bool>(nameof(IsScreenResolutionDirty)); }
        public bool IsHDREnabled() { return Invoke<bool>(nameof(IsHDREnabled)); }
        public bool IsFullscreenModeDirty() { return Invoke<bool>(nameof(IsFullscreenModeDirty)); }
        public bool IsDynamicResolutionEnabled() { return Invoke<bool>(nameof(IsDynamicResolutionEnabled)); }
        public bool IsDynamicResolutionDirty() { return Invoke<bool>(nameof(IsDynamicResolutionDirty)); }
        public bool IsDirty() { return Invoke<bool>(nameof(IsDirty)); }
        public int GetVisualEffectQuality() { return Invoke<int>(nameof(GetVisualEffectQuality)); }
        public int GetViewDistanceQuality() { return Invoke<int>(nameof(GetViewDistanceQuality)); }
        public int GetTextureQuality() { return Invoke<int>(nameof(GetTextureQuality)); }
        public int GetSyncInterval() { return Invoke<int>(nameof(GetSyncInterval)); }
        public int GetShadowQuality() { return Invoke<int>(nameof(GetShadowQuality)); }
        public int GetShadingQuality() { return Invoke<int>(nameof(GetShadingQuality)); }
        public IntPoint GetScreenResolution() { return Invoke<IntPoint>(nameof(GetScreenResolution)); }
        public float GetResolutionScaleNormalized() { return Invoke<float>(nameof(GetResolutionScaleNormalized)); }
        public void GetResolutionScaleInformationEx(float CurrentScaleNormalized, float CurrentScaleValue, float MinScaleValue, float MaxScaleValue) { Invoke(nameof(GetResolutionScaleInformationEx), CurrentScaleNormalized, CurrentScaleValue, MinScaleValue, MaxScaleValue); }
        public void GetResolutionScaleInformation(float CurrentScaleNormalized, int CurrentScaleValue, int MinScaleValue, int MaxScaleValue) { Invoke(nameof(GetResolutionScaleInformation), CurrentScaleNormalized, CurrentScaleValue, MinScaleValue, MaxScaleValue); }
        public int GetReflectionQuality() { return Invoke<int>(nameof(GetReflectionQuality)); }
        public float GetRecommendedResolutionScale() { return Invoke<float>(nameof(GetRecommendedResolutionScale)); }
        public byte GetPreferredFullscreenMode() { return Invoke<byte>(nameof(GetPreferredFullscreenMode)); }
        public int GetPostProcessingQuality() { return Invoke<int>(nameof(GetPostProcessingQuality)); }
        public int GetOverallScalabilityLevel() { return Invoke<int>(nameof(GetOverallScalabilityLevel)); }
        public IntPoint GetLastConfirmedScreenResolution() { return Invoke<IntPoint>(nameof(GetLastConfirmedScreenResolution)); }
        public byte GetLastConfirmedFullscreenMode() { return Invoke<byte>(nameof(GetLastConfirmedFullscreenMode)); }
        public int GetGlobalIlluminationQuality() { return Invoke<int>(nameof(GetGlobalIlluminationQuality)); }
        public GameUserSettings GetGameUserSettings() { return Invoke<GameUserSettings>(nameof(GetGameUserSettings)); }
        public byte GetFullscreenMode() { return Invoke<byte>(nameof(GetFullscreenMode)); }
        public float GetFrameRateLimit() { return Invoke<float>(nameof(GetFrameRateLimit)); }
        public int GetFramePace() { return Invoke<int>(nameof(GetFramePace)); }
        public int GetFoliageQuality() { return Invoke<int>(nameof(GetFoliageQuality)); }
        public IntPoint GetDesktopResolution() { return Invoke<IntPoint>(nameof(GetDesktopResolution)); }
        public IntPoint GetDefaultWindowPosition() { return Invoke<IntPoint>(nameof(GetDefaultWindowPosition)); }
        public byte GetDefaultWindowMode() { return Invoke<byte>(nameof(GetDefaultWindowMode)); }
        public float GetDefaultResolutionScale() { return Invoke<float>(nameof(GetDefaultResolutionScale)); }
        public IntPoint GetDefaultResolution() { return Invoke<IntPoint>(nameof(GetDefaultResolution)); }
        public int GetCurrentHDRDisplayNits() { return Invoke<int>(nameof(GetCurrentHDRDisplayNits)); }
        public int GetAudioQualityLevel() { return Invoke<int>(nameof(GetAudioQualityLevel)); }
        public int GetAntiAliasingQuality() { return Invoke<int>(nameof(GetAntiAliasingQuality)); }
        public void EnableHDRDisplayOutput(bool bEnable, int DisplayNits) { Invoke(nameof(EnableHDRDisplayOutput), bEnable, DisplayNits); }
        public void ConfirmVideoMode() { Invoke(nameof(ConfirmVideoMode)); }
        public void ApplySettings(bool bCheckForCommandLineOverrides) { Invoke(nameof(ApplySettings), bCheckForCommandLineOverrides); }
        public void ApplyResolutionSettings(bool bCheckForCommandLineOverrides) { Invoke(nameof(ApplyResolutionSettings), bCheckForCommandLineOverrides); }
        public void ApplyNonResolutionSettings() { Invoke(nameof(ApplyNonResolutionSettings)); }
        public void ApplyHardwareBenchmarkResults() { Invoke(nameof(ApplyHardwareBenchmarkResults)); }
    }
    public class HLODProxy : Object
    {
        public HLODProxy(nint addr) : base(addr) { }
        public Array<HLODProxyMesh> ProxyMeshes { get { return new Array<HLODProxyMesh>(this[nameof(ProxyMeshes)].Address); } }
        public Object HLODActors { get { return this[nameof(HLODActors)]; } set { this[nameof(HLODActors)] = value; } }
    }
    public class HLODEngineSubsystem : EngineSubsystem
    {
        public HLODEngineSubsystem(nint addr) : base(addr) { }
    }
    public class HLODProxyDesc : Object
    {
        public HLODProxyDesc(nint addr) : base(addr) { }
    }
    public class ImportantToggleSettingInterface : Interface
    {
        public ImportantToggleSettingInterface(nint addr) : base(addr) { }
    }
    public class InheritableComponentHandler : Object
    {
        public InheritableComponentHandler(nint addr) : base(addr) { }
        public Array<ComponentOverrideRecord> Records { get { return new Array<ComponentOverrideRecord>(this[nameof(Records)].Address); } }
        public Array<ActorComponent> UnnecessaryComponents { get { return new Array<ActorComponent>(this[nameof(UnnecessaryComponents)].Address); } }
    }
    public class InputActionDelegateBinding : InputDelegateBinding
    {
        public InputActionDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintInputActionDelegateBinding> InputActionDelegateBindings { get { return new Array<BlueprintInputActionDelegateBinding>(this[nameof(InputActionDelegateBindings)].Address); } }
    }
    public class InputAxisDelegateBinding : InputDelegateBinding
    {
        public InputAxisDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintInputAxisDelegateBinding> InputAxisDelegateBindings { get { return new Array<BlueprintInputAxisDelegateBinding>(this[nameof(InputAxisDelegateBindings)].Address); } }
    }
    public class InputAxisKeyDelegateBinding : InputDelegateBinding
    {
        public InputAxisKeyDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings { get { return new Array<BlueprintInputAxisKeyDelegateBinding>(this[nameof(InputAxisKeyDelegateBindings)].Address); } }
    }
    public class InputKeyDelegateBinding : InputDelegateBinding
    {
        public InputKeyDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintInputKeyDelegateBinding> InputKeyDelegateBindings { get { return new Array<BlueprintInputKeyDelegateBinding>(this[nameof(InputKeyDelegateBindings)].Address); } }
    }
    public class InputTouchDelegateBinding : InputDelegateBinding
    {
        public InputTouchDelegateBinding(nint addr) : base(addr) { }
        public Array<BlueprintInputTouchDelegateBinding> InputTouchDelegateBindings { get { return new Array<BlueprintInputTouchDelegateBinding>(this[nameof(InputTouchDelegateBindings)].Address); } }
    }
    public class InputVectorAxisDelegateBinding : InputAxisKeyDelegateBinding
    {
        public InputVectorAxisDelegateBinding(nint addr) : base(addr) { }
    }
    public class InstancedPlacemenClientSettings : Object
    {
        public InstancedPlacemenClientSettings(nint addr) : base(addr) { }
    }
    public class InstancedPlacementPartitionActor : ISMPartitionActor
    {
        public InstancedPlacementPartitionActor(nint addr) : base(addr) { }
    }
    public class StringTable : Object
    {
        public StringTable(nint addr) : base(addr) { }
    }
    public class InterpCurveEdSetup : Object
    {
        public InterpCurveEdSetup(nint addr) : base(addr) { }
        public Array<CurveEdTab> Tabs { get { return new Array<CurveEdTab>(this[nameof(Tabs)].Address); } }
        public int ActiveTab { get { return this[nameof(ActiveTab)].GetValue<int>(); } set { this[nameof(ActiveTab)].SetValue<int>(value); } }
    }
    public class IntSerialization : Object
    {
        public IntSerialization(nint addr) : base(addr) { }
        public ushort UnsignedInt16Variable { get { return this[nameof(UnsignedInt16Variable)].GetValue<ushort>(); } set { this[nameof(UnsignedInt16Variable)].SetValue<ushort>(value); } }
        public uint UnsignedInt32Variable { get { return this[nameof(UnsignedInt32Variable)].GetValue<uint>(); } set { this[nameof(UnsignedInt32Variable)].SetValue<uint>(value); } }
        public ulong UnsignedInt64Variable { get { return this[nameof(UnsignedInt64Variable)].GetValue<ulong>(); } set { this[nameof(UnsignedInt64Variable)].SetValue<ulong>(value); } }
        public byte SignedInt8Variable { get { return this[nameof(SignedInt8Variable)].GetValue<byte>(); } set { this[nameof(SignedInt8Variable)].SetValue<byte>(value); } }
        public short SignedInt16Variable { get { return this[nameof(SignedInt16Variable)].GetValue<short>(); } set { this[nameof(SignedInt16Variable)].SetValue<short>(value); } }
        public long SignedInt64Variable { get { return this[nameof(SignedInt64Variable)].GetValue<long>(); } set { this[nameof(SignedInt64Variable)].SetValue<long>(value); } }
        public byte UnsignedInt8Variable { get { return this[nameof(UnsignedInt8Variable)].GetValue<byte>(); } set { this[nameof(UnsignedInt8Variable)].SetValue<byte>(value); } }
        public int SignedInt32Variable { get { return this[nameof(SignedInt32Variable)].GetValue<int>(); } set { this[nameof(SignedInt32Variable)].SetValue<int>(value); } }
    }
    public class KillZVolume : PhysicsVolume
    {
        public KillZVolume(nint addr) : base(addr) { }
    }
    public class KismetArrayLibrary : BlueprintFunctionLibrary
    {
        public KismetArrayLibrary(nint addr) : base(addr) { }
        public void SetArrayPropertyByName(Object Object, Object PropertyName, Array<int> Value) { Invoke(nameof(SetArrayPropertyByName), Object, PropertyName, Value); }
        public void FilterArray(Array<Actor> TargetArray, Object FilterClass, Array<Actor> FilteredArray) { Invoke(nameof(FilterArray), TargetArray, FilterClass, FilteredArray); }
        public void Array_Swap(Array<int> TargetArray, int FirstIndex, int SecondIndex) { Invoke(nameof(Array_Swap), TargetArray, FirstIndex, SecondIndex); }
        public void Array_Shuffle(Array<int> TargetArray) { Invoke(nameof(Array_Shuffle), TargetArray); }
        public void Array_Set(Array<int> TargetArray, int Index, int Item, bool bSizeToFit) { Invoke(nameof(Array_Set), TargetArray, Index, Item, bSizeToFit); }
        public void Array_Reverse(Array<int> TargetArray) { Invoke(nameof(Array_Reverse), TargetArray); }
        public void Array_Resize(Array<int> TargetArray, int Size) { Invoke(nameof(Array_Resize), TargetArray, Size); }
        public bool Array_RemoveItem(Array<int> TargetArray, int Item) { return Invoke<bool>(nameof(Array_RemoveItem), TargetArray, Item); }
        public void Array_Remove(Array<int> TargetArray, int IndexToRemove) { Invoke(nameof(Array_Remove), TargetArray, IndexToRemove); }
        public void Array_RandomFromStream(Array<int> TargetArray, RandomStream RandomStream, int OutItem, int OutIndex) { Invoke(nameof(Array_RandomFromStream), TargetArray, RandomStream, OutItem, OutIndex); }
        public void Array_Random(Array<int> TargetArray, int OutItem, int OutIndex) { Invoke(nameof(Array_Random), TargetArray, OutItem, OutIndex); }
        public int Array_Length(Array<int> TargetArray) { return Invoke<int>(nameof(Array_Length), TargetArray); }
        public int Array_LastIndex(Array<int> TargetArray) { return Invoke<int>(nameof(Array_LastIndex), TargetArray); }
        public bool Array_IsValidIndex(Array<int> TargetArray, int IndexToTest) { return Invoke<bool>(nameof(Array_IsValidIndex), TargetArray, IndexToTest); }
        public bool Array_IsNotEmpty(Array<int> TargetArray) { return Invoke<bool>(nameof(Array_IsNotEmpty), TargetArray); }
        public bool Array_IsEmpty(Array<int> TargetArray) { return Invoke<bool>(nameof(Array_IsEmpty), TargetArray); }
        public void Array_Insert(Array<int> TargetArray, int NewItem, int Index) { Invoke(nameof(Array_Insert), TargetArray, NewItem, Index); }
        public bool Array_Identical(Array<int> ArrayA, Array<int> ArrayB) { return Invoke<bool>(nameof(Array_Identical), ArrayA, ArrayB); }
        public void Array_Get(Array<int> TargetArray, int Index, int Item) { Invoke(nameof(Array_Get), TargetArray, Index, Item); }
        public int Array_Find(Array<int> TargetArray, int ItemToFind) { return Invoke<int>(nameof(Array_Find), TargetArray, ItemToFind); }
        public bool Array_Contains(Array<int> TargetArray, int ItemToFind) { return Invoke<bool>(nameof(Array_Contains), TargetArray, ItemToFind); }
        public void Array_Clear(Array<int> TargetArray) { Invoke(nameof(Array_Clear), TargetArray); }
        public void Array_Append(Array<int> TargetArray, Array<int> SourceArray) { Invoke(nameof(Array_Append), TargetArray, SourceArray); }
        public int Array_AddUnique(Array<int> TargetArray, int NewItem) { return Invoke<int>(nameof(Array_AddUnique), TargetArray, NewItem); }
        public int Array_Add(Array<int> TargetArray, int NewItem) { return Invoke<int>(nameof(Array_Add), TargetArray, NewItem); }
    }
    public class KismetGuidLibrary : BlueprintFunctionLibrary
    {
        public KismetGuidLibrary(nint addr) : base(addr) { }
        public void Parse_StringToGuid(Object GuidString, Guid OutGuid, bool Success) { Invoke(nameof(Parse_StringToGuid), GuidString, OutGuid, Success); }
        public bool NotEqual_GuidGuid(Guid A, Guid B) { return Invoke<bool>(nameof(NotEqual_GuidGuid), A, B); }
        public Guid NewGuid() { return Invoke<Guid>(nameof(NewGuid)); }
        public bool IsValid_Guid(Guid InGuid) { return Invoke<bool>(nameof(IsValid_Guid), InGuid); }
        public void Invalidate_Guid(Guid InGuid) { Invoke(nameof(Invalidate_Guid), InGuid); }
        public bool EqualEqual_GuidGuid(Guid A, Guid B) { return Invoke<bool>(nameof(EqualEqual_GuidGuid), A, B); }
        public Object Conv_GuidToString(Guid InGuid) { return Invoke<Object>(nameof(Conv_GuidToString), InGuid); }
    }
    public class KismetInputLibrary : BlueprintFunctionLibrary
    {
        public KismetInputLibrary(nint addr) : base(addr) { }
        public bool PointerEvent_IsTouchEvent(PointerEvent Input) { return Invoke<bool>(nameof(PointerEvent_IsTouchEvent), Input); }
        public bool PointerEvent_IsMouseButtonDown(PointerEvent Input, Key MouseButton) { return Invoke<bool>(nameof(PointerEvent_IsMouseButtonDown), Input, MouseButton); }
        public float PointerEvent_GetWheelDelta(PointerEvent Input) { return Invoke<float>(nameof(PointerEvent_GetWheelDelta), Input); }
        public int PointerEvent_GetUserIndex(PointerEvent Input) { return Invoke<int>(nameof(PointerEvent_GetUserIndex), Input); }
        public int PointerEvent_GetTouchpadIndex(PointerEvent Input) { return Invoke<int>(nameof(PointerEvent_GetTouchpadIndex), Input); }
        public Vector2D PointerEvent_GetScreenSpacePosition(PointerEvent Input) { return Invoke<Vector2D>(nameof(PointerEvent_GetScreenSpacePosition), Input); }
        public int PointerEvent_GetPointerIndex(PointerEvent Input) { return Invoke<int>(nameof(PointerEvent_GetPointerIndex), Input); }
        public Vector2D PointerEvent_GetLastScreenSpacePosition(PointerEvent Input) { return Invoke<Vector2D>(nameof(PointerEvent_GetLastScreenSpacePosition), Input); }
        public ESlateGesture PointerEvent_GetGestureType(PointerEvent Input) { return Invoke<ESlateGesture>(nameof(PointerEvent_GetGestureType), Input); }
        public Vector2D PointerEvent_GetGestureDelta(PointerEvent Input) { return Invoke<Vector2D>(nameof(PointerEvent_GetGestureDelta), Input); }
        public Key PointerEvent_GetEffectingButton(PointerEvent Input) { return Invoke<Key>(nameof(PointerEvent_GetEffectingButton), Input); }
        public Vector2D PointerEvent_GetCursorDelta(PointerEvent Input) { return Invoke<Vector2D>(nameof(PointerEvent_GetCursorDelta), Input); }
        public bool ModifierKeysState_IsShiftDown(SlateModifierKeysState KeysState) { return Invoke<bool>(nameof(ModifierKeysState_IsShiftDown), KeysState); }
        public bool ModifierKeysState_IsControlDown(SlateModifierKeysState KeysState) { return Invoke<bool>(nameof(ModifierKeysState_IsControlDown), KeysState); }
        public bool ModifierKeysState_IsCommandDown(SlateModifierKeysState KeysState) { return Invoke<bool>(nameof(ModifierKeysState_IsCommandDown), KeysState); }
        public bool ModifierKeysState_IsAltDown(SlateModifierKeysState KeysState) { return Invoke<bool>(nameof(ModifierKeysState_IsAltDown), KeysState); }
        public bool Key_IsVectorAxis(Key Key) { return Invoke<bool>(nameof(Key_IsVectorAxis), Key); }
        public bool Key_IsValid(Key Key) { return Invoke<bool>(nameof(Key_IsValid), Key); }
        public bool Key_IsMouseButton(Key Key) { return Invoke<bool>(nameof(Key_IsMouseButton), Key); }
        public bool Key_IsModifierKey(Key Key) { return Invoke<bool>(nameof(Key_IsModifierKey), Key); }
        public bool Key_IsKeyboardKey(Key Key) { return Invoke<bool>(nameof(Key_IsKeyboardKey), Key); }
        public bool Key_IsGamepadKey(Key Key) { return Invoke<bool>(nameof(Key_IsGamepadKey), Key); }
        public bool Key_IsDigital(Key Key) { return Invoke<bool>(nameof(Key_IsDigital), Key); }
        public bool Key_IsButtonAxis(Key Key) { return Invoke<bool>(nameof(Key_IsButtonAxis), Key); }
        public bool Key_IsAxis3D(Key Key) { return Invoke<bool>(nameof(Key_IsAxis3D), Key); }
        public bool Key_IsAxis2D(Key Key) { return Invoke<bool>(nameof(Key_IsAxis2D), Key); }
        public bool Key_IsAxis1D(Key Key) { return Invoke<bool>(nameof(Key_IsAxis1D), Key); }
        public bool Key_IsAnalog(Key Key) { return Invoke<bool>(nameof(Key_IsAnalog), Key); }
        public EUINavigation Key_GetNavigationDirectionFromKey(KeyEvent InKeyEvent) { return Invoke<EUINavigation>(nameof(Key_GetNavigationDirectionFromKey), InKeyEvent); }
        public EUINavigation Key_GetNavigationDirectionFromAnalog(AnalogInputEvent InAnalogEvent) { return Invoke<EUINavigation>(nameof(Key_GetNavigationDirectionFromAnalog), InAnalogEvent); }
        public EUINavigationAction Key_GetNavigationActionFromKey(KeyEvent InKeyEvent) { return Invoke<EUINavigationAction>(nameof(Key_GetNavigationActionFromKey), InKeyEvent); }
        public EUINavigationAction Key_GetNavigationAction(Key InKey) { return Invoke<EUINavigationAction>(nameof(Key_GetNavigationAction), InKey); }
        public Object Key_GetDisplayName(Key Key, bool bLongDisplayName) { return Invoke<Object>(nameof(Key_GetDisplayName), Key, bLongDisplayName); }
        public bool InputEvent_IsShiftDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsShiftDown), Input); }
        public bool InputEvent_IsRightShiftDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsRightShiftDown), Input); }
        public bool InputEvent_IsRightControlDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsRightControlDown), Input); }
        public bool InputEvent_IsRightCommandDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsRightCommandDown), Input); }
        public bool InputEvent_IsRightAltDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsRightAltDown), Input); }
        public bool InputEvent_IsRepeat(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsRepeat), Input); }
        public bool InputEvent_IsLeftShiftDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsLeftShiftDown), Input); }
        public bool InputEvent_IsLeftControlDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsLeftControlDown), Input); }
        public bool InputEvent_IsLeftCommandDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsLeftCommandDown), Input); }
        public bool InputEvent_IsLeftAltDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsLeftAltDown), Input); }
        public bool InputEvent_IsControlDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsControlDown), Input); }
        public bool InputEvent_IsCommandDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsCommandDown), Input); }
        public bool InputEvent_IsAltDown(InputEvent Input) { return Invoke<bool>(nameof(InputEvent_IsAltDown), Input); }
        public Object InputChord_GetDisplayName(InputChord Key) { return Invoke<Object>(nameof(InputChord_GetDisplayName), Key); }
        public int GetUserIndex(KeyEvent Input) { return Invoke<int>(nameof(GetUserIndex), Input); }
        public SlateModifierKeysState GetModifierKeysState() { return Invoke<SlateModifierKeysState>(nameof(GetModifierKeysState)); }
        public Key GetKey(KeyEvent Input) { return Invoke<Key>(nameof(GetKey), Input); }
        public float GetAnalogValue(AnalogInputEvent Input) { return Invoke<float>(nameof(GetAnalogValue), Input); }
        public bool EqualEqual_KeyKey(Key A, Key B) { return Invoke<bool>(nameof(EqualEqual_KeyKey), A, B); }
        public bool EqualEqual_InputChordInputChord(InputChord A, InputChord B) { return Invoke<bool>(nameof(EqualEqual_InputChordInputChord), A, B); }
        public void CalibrateTilt() { Invoke(nameof(CalibrateTilt)); }
    }
    public class KismetInternationalizationLibrary : BlueprintFunctionLibrary
    {
        public KismetInternationalizationLibrary(nint addr) : base(addr) { }
        public bool SetCurrentLocale(Object Culture, bool SaveToConfig) { return Invoke<bool>(nameof(SetCurrentLocale), Culture, SaveToConfig); }
        public bool SetCurrentLanguageAndLocale(Object Culture, bool SaveToConfig) { return Invoke<bool>(nameof(SetCurrentLanguageAndLocale), Culture, SaveToConfig); }
        public bool SetCurrentLanguage(Object Culture, bool SaveToConfig) { return Invoke<bool>(nameof(SetCurrentLanguage), Culture, SaveToConfig); }
        public bool SetCurrentCulture(Object Culture, bool SaveToConfig) { return Invoke<bool>(nameof(SetCurrentCulture), Culture, SaveToConfig); }
        public bool SetCurrentAssetGroupCulture(Object AssetGroup, Object Culture, bool SaveToConfig) { return Invoke<bool>(nameof(SetCurrentAssetGroupCulture), AssetGroup, Culture, SaveToConfig); }
        public Object GetSuitableCulture(Array<Object> AvailableCultures, Object CultureToMatch, Object FallbackCulture) { return Invoke<Object>(nameof(GetSuitableCulture), AvailableCultures, CultureToMatch, FallbackCulture); }
        public Object GetNativeCulture(ELocalizedTextSourceCategory TextCategory) { return Invoke<Object>(nameof(GetNativeCulture), TextCategory); }
        public Array<Object> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional) { return Invoke<Array<Object>>(nameof(GetLocalizedCultures), IncludeGame, IncludeEngine, IncludeEditor, IncludeAdditional); }
        public Object GetCurrentLocale() { return Invoke<Object>(nameof(GetCurrentLocale)); }
        public Object GetCurrentLanguage() { return Invoke<Object>(nameof(GetCurrentLanguage)); }
        public Object GetCurrentCulture() { return Invoke<Object>(nameof(GetCurrentCulture)); }
        public Object GetCurrentAssetGroupCulture(Object AssetGroup) { return Invoke<Object>(nameof(GetCurrentAssetGroupCulture), AssetGroup); }
        public Object GetCultureDisplayName(Object Culture, bool Localized) { return Invoke<Object>(nameof(GetCultureDisplayName), Culture, Localized); }
        public void ClearCurrentAssetGroupCulture(Object AssetGroup, bool SaveToConfig) { Invoke(nameof(ClearCurrentAssetGroupCulture), AssetGroup, SaveToConfig); }
    }
    public class KismetMaterialLibrary : BlueprintFunctionLibrary
    {
        public KismetMaterialLibrary(nint addr) : base(addr) { }
        public void SetVectorParameterValue(Object WorldContextObject, MaterialParameterCollection Collection, Object ParameterName, LinearColor ParameterValue) { Invoke(nameof(SetVectorParameterValue), WorldContextObject, Collection, ParameterName, ParameterValue); }
        public void SetScalarParameterValue(Object WorldContextObject, MaterialParameterCollection Collection, Object ParameterName, float ParameterValue) { Invoke(nameof(SetScalarParameterValue), WorldContextObject, Collection, ParameterName, ParameterValue); }
        public LinearColor GetVectorParameterValue(Object WorldContextObject, MaterialParameterCollection Collection, Object ParameterName) { return Invoke<LinearColor>(nameof(GetVectorParameterValue), WorldContextObject, Collection, ParameterName); }
        public float GetScalarParameterValue(Object WorldContextObject, MaterialParameterCollection Collection, Object ParameterName) { return Invoke<float>(nameof(GetScalarParameterValue), WorldContextObject, Collection, ParameterName); }
        public MaterialInstanceDynamic CreateDynamicMaterialInstance(Object WorldContextObject, MaterialInterface Parent, Object OptionalName, EMIDCreationFlags CreationFlags) { return Invoke<MaterialInstanceDynamic>(nameof(CreateDynamicMaterialInstance), WorldContextObject, Parent, OptionalName, CreationFlags); }
    }
    public class KismetMathLibrary : BlueprintFunctionLibrary
    {
        public KismetMathLibrary(nint addr) : base(addr) { }
        public int Xor_IntInt(int A, int B) { return Invoke<int>(nameof(Xor_IntInt), A, B); }
        public long Xor_Int64Int64(long A, long B) { return Invoke<long>(nameof(Xor_Int64Int64), A, B); }
        public int Wrap(int Value, int Min, int Max) { return Invoke<int>(nameof(Wrap), Value, Min, Max); }
        public Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight) { return Invoke<Vector>(nameof(WeightedMovingAverage_FVector), CurrentSample, PreviousSample, Weight); }
        public Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight) { return Invoke<Rotator>(nameof(WeightedMovingAverage_FRotator), CurrentSample, PreviousSample, Weight); }
        public float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight) { return Invoke<float>(nameof(WeightedMovingAverage_Float), CurrentSample, PreviousSample, Weight); }
        public double VSizeXYSquared(Vector A) { return Invoke<double>(nameof(VSizeXYSquared), A); }
        public double VSizeXY(Vector A) { return Invoke<double>(nameof(VSizeXY), A); }
        public double VSizeSquared(Vector A) { return Invoke<double>(nameof(VSizeSquared), A); }
        public double VSize2DSquared(Vector2D A) { return Invoke<double>(nameof(VSize2DSquared), A); }
        public double VSize2D(Vector2D A) { return Invoke<double>(nameof(VSize2D), A); }
        public double VSize(Vector A) { return Invoke<double>(nameof(VSize), A); }
        public Vector VLerp(Vector A, Vector B, float Alpha) { return Invoke<Vector>(nameof(VLerp), A, B, Alpha); }
        public Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed) { return Invoke<Vector>(nameof(VInterpTo_Constant), Current, Target, DeltaTime, InterpSpeed); }
        public Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed) { return Invoke<Vector>(nameof(VInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public Vector VectorSpringInterp(Vector Current, Vector Target, VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, Vector MinValue, Vector MaxValue, bool bInitializeFromTarget) { return Invoke<Vector>(nameof(VectorSpringInterp), Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass, TargetVelocityAmount, bClamp, MinValue, MaxValue, bInitializeFromTarget); }
        public Vector Vector_Zero() { return Invoke<Vector>(nameof(Vector_Zero)); }
        public Vector Vector_Up() { return Invoke<Vector>(nameof(Vector_Up)); }
        public void Vector_UnwindEuler(Vector A) { Invoke(nameof(Vector_UnwindEuler), A); }
        public Vector2D Vector_UnitCartesianToSpherical(Vector A) { return Invoke<Vector2D>(nameof(Vector_UnitCartesianToSpherical), A); }
        public Vector Vector_ToRadians(Vector A) { return Invoke<Vector>(nameof(Vector_ToRadians), A); }
        public Vector Vector_ToDegrees(Vector A) { return Invoke<Vector>(nameof(Vector_ToDegrees), A); }
        public Vector Vector_SnappedToGrid(Vector InVect, float InGridSize) { return Invoke<Vector>(nameof(Vector_SnappedToGrid), InVect, InGridSize); }
        public void Vector_Set(Vector A, double X, double Y, double Z) { Invoke(nameof(Vector_Set), A, X, Y, Z); }
        public Vector Vector_Right() { return Invoke<Vector>(nameof(Vector_Right)); }
        public Vector Vector_Reciprocal(Vector A) { return Invoke<Vector>(nameof(Vector_Reciprocal), A); }
        public Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal) { return Invoke<Vector>(nameof(Vector_ProjectOnToNormal), V, InNormal); }
        public Vector Vector_One() { return Invoke<Vector>(nameof(Vector_One)); }
        public Vector Vector_NormalUnsafe(Vector A) { return Invoke<Vector>(nameof(Vector_NormalUnsafe), A); }
        public void Vector_Normalize(Vector A, float Tolerance) { Invoke(nameof(Vector_Normalize), A, Tolerance); }
        public Vector Vector_Normal2D(Vector A, float Tolerance) { return Invoke<Vector>(nameof(Vector_Normal2D), A, Tolerance); }
        public Vector Vector_MirrorByPlane(Vector A, Plane InPlane) { return Invoke<Vector>(nameof(Vector_MirrorByPlane), A, InPlane); }
        public Vector Vector_Left() { return Invoke<Vector>(nameof(Vector_Left)); }
        public bool Vector_IsZero(Vector A) { return Invoke<bool>(nameof(Vector_IsZero), A); }
        public bool Vector_IsUnit(Vector A, float SquaredLenthTolerance) { return Invoke<bool>(nameof(Vector_IsUnit), A, SquaredLenthTolerance); }
        public bool Vector_IsUniform(Vector A, float Tolerance) { return Invoke<bool>(nameof(Vector_IsUniform), A, Tolerance); }
        public bool Vector_IsNormal(Vector A) { return Invoke<bool>(nameof(Vector_IsNormal), A); }
        public bool Vector_IsNearlyZero(Vector A, float Tolerance) { return Invoke<bool>(nameof(Vector_IsNearlyZero), A, Tolerance); }
        public bool Vector_IsNAN(Vector A) { return Invoke<bool>(nameof(Vector_IsNAN), A); }
        public double Vector_HeadingAngle(Vector A) { return Invoke<double>(nameof(Vector_HeadingAngle), A); }
        public Vector Vector_GetSignVector(Vector A) { return Invoke<Vector>(nameof(Vector_GetSignVector), A); }
        public Vector Vector_GetProjection(Vector A) { return Invoke<Vector>(nameof(Vector_GetProjection), A); }
        public double Vector_GetAbsMin(Vector A) { return Invoke<double>(nameof(Vector_GetAbsMin), A); }
        public double Vector_GetAbsMax(Vector A) { return Invoke<double>(nameof(Vector_GetAbsMax), A); }
        public Vector Vector_GetAbs(Vector A) { return Invoke<Vector>(nameof(Vector_GetAbs), A); }
        public Vector Vector_Forward() { return Invoke<Vector>(nameof(Vector_Forward)); }
        public Vector Vector_Down() { return Invoke<Vector>(nameof(Vector_Down)); }
        public double Vector_DistanceSquared(Vector v1, Vector v2) { return Invoke<double>(nameof(Vector_DistanceSquared), v1, v2); }
        public double Vector_Distance2DSquared(Vector v1, Vector v2) { return Invoke<double>(nameof(Vector_Distance2DSquared), v1, v2); }
        public double Vector_Distance2D(Vector v1, Vector v2) { return Invoke<double>(nameof(Vector_Distance2D), v1, v2); }
        public double Vector_Distance(Vector v1, Vector v2) { return Invoke<double>(nameof(Vector_Distance), v1, v2); }
        public double Vector_CosineAngle2D(Vector A, Vector B) { return Invoke<double>(nameof(Vector_CosineAngle2D), A, B); }
        public Vector Vector_ComponentMin(Vector A, Vector B) { return Invoke<Vector>(nameof(Vector_ComponentMin), A, B); }
        public Vector Vector_ComponentMax(Vector A, Vector B) { return Invoke<Vector>(nameof(Vector_ComponentMax), A, B); }
        public Vector Vector_ClampSizeMax2D(Vector A, double Max) { return Invoke<Vector>(nameof(Vector_ClampSizeMax2D), A, Max); }
        public Vector Vector_ClampSizeMax(Vector A, double Max) { return Invoke<Vector>(nameof(Vector_ClampSizeMax), A, Max); }
        public Vector Vector_ClampSize2D(Vector A, double Min, double Max) { return Invoke<Vector>(nameof(Vector_ClampSize2D), A, Min, Max); }
        public Vector Vector_BoundedToCube(Vector InVect, float InRadius) { return Invoke<Vector>(nameof(Vector_BoundedToCube), InVect, InRadius); }
        public Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax) { return Invoke<Vector>(nameof(Vector_BoundedToBox), InVect, InBoxMin, InBoxMax); }
        public Vector Vector_Backward() { return Invoke<Vector>(nameof(Vector_Backward)); }
        public void Vector_Assign(Vector A, Vector InVector) { Invoke(nameof(Vector_Assign), A, InVector); }
        public void Vector_AddBounded(Vector A, Vector InAddVect, float InRadius) { Invoke(nameof(Vector_AddBounded), A, InAddVect, InRadius); }
        public Vector4 Vector4_Zero() { return Invoke<Vector4>(nameof(Vector4_Zero)); }
        public double Vector4_SizeSquared3(Vector4 A) { return Invoke<double>(nameof(Vector4_SizeSquared3), A); }
        public double Vector4_SizeSquared(Vector4 A) { return Invoke<double>(nameof(Vector4_SizeSquared), A); }
        public double Vector4_Size3(Vector4 A) { return Invoke<double>(nameof(Vector4_Size3), A); }
        public double Vector4_Size(Vector4 A) { return Invoke<double>(nameof(Vector4_Size), A); }
        public void Vector4_Set(Vector4 A, double X, double Y, double Z, double W) { Invoke(nameof(Vector4_Set), A, X, Y, Z, W); }
        public Vector4 Vector4_NormalUnsafe3(Vector4 A) { return Invoke<Vector4>(nameof(Vector4_NormalUnsafe3), A); }
        public void Vector4_Normalize3(Vector4 A, float Tolerance) { Invoke(nameof(Vector4_Normalize3), A, Tolerance); }
        public Vector4 Vector4_Normal3(Vector4 A, float Tolerance) { return Invoke<Vector4>(nameof(Vector4_Normal3), A, Tolerance); }
        public Vector4 Vector4_Negated(Vector4 A) { return Invoke<Vector4>(nameof(Vector4_Negated), A); }
        public Vector4 Vector4_MirrorByVector3(Vector4 Direction, Vector4 SurfaceNormal) { return Invoke<Vector4>(nameof(Vector4_MirrorByVector3), Direction, SurfaceNormal); }
        public bool Vector4_IsZero(Vector4 A) { return Invoke<bool>(nameof(Vector4_IsZero), A); }
        public bool Vector4_IsUnit3(Vector4 A, float SquaredLenthTolerance) { return Invoke<bool>(nameof(Vector4_IsUnit3), A, SquaredLenthTolerance); }
        public bool Vector4_IsNormal3(Vector4 A) { return Invoke<bool>(nameof(Vector4_IsNormal3), A); }
        public bool Vector4_IsNearlyZero3(Vector4 A, float Tolerance) { return Invoke<bool>(nameof(Vector4_IsNearlyZero3), A, Tolerance); }
        public bool Vector4_IsNAN(Vector4 A) { return Invoke<bool>(nameof(Vector4_IsNAN), A); }
        public double Vector4_DotProduct3(Vector4 A, Vector4 B) { return Invoke<double>(nameof(Vector4_DotProduct3), A, B); }
        public double Vector4_DotProduct(Vector4 A, Vector4 B) { return Invoke<double>(nameof(Vector4_DotProduct), A, B); }
        public Vector4 Vector4_CrossProduct3(Vector4 A, Vector4 B) { return Invoke<Vector4>(nameof(Vector4_CrossProduct3), A, B); }
        public void Vector4_Assign(Vector4 A, Vector4 InVector) { Invoke(nameof(Vector4_Assign), A, InVector); }
        public Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed) { return Invoke<Vector2D>(nameof(Vector2DInterpTo_Constant), Current, Target, DeltaTime, InterpSpeed); }
        public Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed) { return Invoke<Vector2D>(nameof(Vector2DInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public Vector2D Vector2D_Zero() { return Invoke<Vector2D>(nameof(Vector2D_Zero)); }
        public Vector2D Vector2D_Unit45Deg() { return Invoke<Vector2D>(nameof(Vector2D_Unit45Deg)); }
        public Vector2D Vector2D_One() { return Invoke<Vector2D>(nameof(Vector2D_One)); }
        public Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps) { return Invoke<Vector>(nameof(VEase), A, B, Alpha, EasingFunc, BlendExp, Steps); }
        public DateTime UtcNow() { return Invoke<DateTime>(nameof(UtcNow)); }
        public Vector4 TransformVector4(Matrix Matrix, Vector4 Vec4) { return Invoke<Vector4>(nameof(TransformVector4), Matrix, Vec4); }
        public Rotator TransformRotation(Transform T, Rotator Rotation) { return Invoke<Rotator>(nameof(TransformRotation), T, Rotation); }
        public Vector TransformLocation(Transform T, Vector Location) { return Invoke<Vector>(nameof(TransformLocation), T, Location); }
        public Vector TransformDirection(Transform T, Vector Direction) { return Invoke<Vector>(nameof(TransformDirection), T, Direction); }
        public float Transform_Determinant(Transform Transform) { return Invoke<float>(nameof(Transform_Determinant), Transform); }
        public Vector2D ToSign2D(Vector2D A) { return Invoke<Vector2D>(nameof(ToSign2D), A); }
        public Vector2D ToRounded2D(Vector2D A) { return Invoke<Vector2D>(nameof(ToRounded2D), A); }
        public void ToDirectionAndLength2D(Vector2D A, Vector2D OutDir, double OutLength) { Invoke(nameof(ToDirectionAndLength2D), A, OutDir, OutLength); }
        public DateTime Today() { return Invoke<DateTime>(nameof(Today)); }
        public Transform TLerp(Transform A, Transform B, float Alpha, byte InterpMode) { return Invoke<Transform>(nameof(TLerp), A, B, Alpha, InterpMode); }
        public Transform TInterpTo(Transform Current, Transform Target, float DeltaTime, float InterpSpeed) { return Invoke<Transform>(nameof(TInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public Timespan TimespanZeroValue() { return Invoke<Timespan>(nameof(TimespanZeroValue)); }
        public float TimespanRatio(Timespan A, Timespan B) { return Invoke<float>(nameof(TimespanRatio), A, B); }
        public Timespan TimespanMinValue() { return Invoke<Timespan>(nameof(TimespanMinValue)); }
        public Timespan TimespanMaxValue() { return Invoke<Timespan>(nameof(TimespanMaxValue)); }
        public bool TimespanFromString(Object TimespanString, Timespan Result) { return Invoke<bool>(nameof(TimespanFromString), TimespanString, Result); }
        public Transform TEase(Transform A, Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps) { return Invoke<Transform>(nameof(TEase), A, B, Alpha, EasingFunc, BlendExp, Steps); }
        public double Tan(double A) { return Invoke<double>(nameof(Tan), A); }
        public Vector Subtract_VectorVector(Vector A, Vector B) { return Invoke<Vector>(nameof(Subtract_VectorVector), A, B); }
        public Vector Subtract_VectorInt(Vector A, int B) { return Invoke<Vector>(nameof(Subtract_VectorInt), A, B); }
        public Vector Subtract_VectorFloat(Vector A, double B) { return Invoke<Vector>(nameof(Subtract_VectorFloat), A, B); }
        public Vector4 Subtract_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<Vector4>(nameof(Subtract_Vector4Vector4), A, B); }
        public Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<Vector2D>(nameof(Subtract_Vector2DVector2D), A, B); }
        public Vector2D Subtract_Vector2DFloat(Vector2D A, double B) { return Invoke<Vector2D>(nameof(Subtract_Vector2DFloat), A, B); }
        public Timespan Subtract_TimespanTimespan(Timespan A, Timespan B) { return Invoke<Timespan>(nameof(Subtract_TimespanTimespan), A, B); }
        public Quat Subtract_QuatQuat(Quat A, Quat B) { return Invoke<Quat>(nameof(Subtract_QuatQuat), A, B); }
        public LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<LinearColor>(nameof(Subtract_LinearColorLinearColor), A, B); }
        public IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<IntPoint>(nameof(Subtract_IntPointIntPoint), A, B); }
        public IntPoint Subtract_IntPointInt(IntPoint A, int B) { return Invoke<IntPoint>(nameof(Subtract_IntPointInt), A, B); }
        public int Subtract_IntInt(int A, int B) { return Invoke<int>(nameof(Subtract_IntInt), A, B); }
        public long Subtract_Int64Int64(long A, long B) { return Invoke<long>(nameof(Subtract_Int64Int64), A, B); }
        public double Subtract_DoubleDouble(double A, double B) { return Invoke<double>(nameof(Subtract_DoubleDouble), A, B); }
        public DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B) { return Invoke<DateTime>(nameof(Subtract_DateTimeTimespan), A, B); }
        public Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<Timespan>(nameof(Subtract_DateTimeDateTime), A, B); }
        public byte Subtract_ByteByte(byte A, byte B) { return Invoke<byte>(nameof(Subtract_ByteByte), A, B); }
        public double Square(double A) { return Invoke<double>(nameof(Square), A); }
        public double Sqrt(double A) { return Invoke<double>(nameof(Sqrt), A); }
        public Vector Spherical2DToUnitCartesian(Vector2D A) { return Invoke<Vector>(nameof(Spherical2DToUnitCartesian), A); }
        public double Sin(double A) { return Invoke<double>(nameof(Sin), A); }
        public long SignOfInteger64(long A) { return Invoke<long>(nameof(SignOfInteger64), A); }
        public int SignOfInteger(int A) { return Invoke<int>(nameof(SignOfInteger), A); }
        public double SignOfFloat(double A) { return Invoke<double>(nameof(SignOfFloat), A); }
        public void SetVectorSpringStateVelocity(VectorSpringState SpringState, Vector Velocity) { Invoke(nameof(SetVectorSpringStateVelocity), SpringState, Velocity); }
        public void SetRandomStreamSeed(RandomStream Stream, int NewSeed) { Invoke(nameof(SetRandomStreamSeed), Stream, NewSeed); }
        public void SetQuaternionSpringStateAngularVelocity(QuaternionSpringState SpringState, Vector AngularVelocity) { Invoke(nameof(SetQuaternionSpringStateAngularVelocity), SpringState, AngularVelocity); }
        public void SetFloatSpringStateVelocity(FloatSpringState SpringState, float Velocity) { Invoke(nameof(SetFloatSpringStateVelocity), SpringState, Velocity); }
        public void Set2D(Vector2D A, double X, double Y) { Invoke(nameof(Set2D), A, X, Y); }
        public Vector SelectVector(Vector A, Vector B, bool bPickA) { return Invoke<Vector>(nameof(SelectVector), A, B, bPickA); }
        public Transform SelectTransform(Transform A, Transform B, bool bPickA) { return Invoke<Transform>(nameof(SelectTransform), A, B, bPickA); }
        public Object SelectString(Object A, Object B, bool bPickA) { return Invoke<Object>(nameof(SelectString), A, B, bPickA); }
        public Rotator SelectRotator(Rotator A, Rotator B, bool bPickA) { return Invoke<Rotator>(nameof(SelectRotator), A, B, bPickA); }
        public Object SelectObject(Object A, Object B, bool bSelectA) { return Invoke<Object>(nameof(SelectObject), A, B, bSelectA); }
        public int SelectInt(int A, int B, bool bPickA) { return Invoke<int>(nameof(SelectInt), A, B, bPickA); }
        public double SelectFloat(double A, double B, bool bPickA) { return Invoke<double>(nameof(SelectFloat), A, B, bPickA); }
        public LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA) { return Invoke<LinearColor>(nameof(SelectColor), A, B, bPickA); }
        public Object SelectClass(Object A, Object B, bool bSelectA) { return Invoke<Object>(nameof(SelectClass), A, B, bSelectA); }
        public void SeedRandomStream(RandomStream Stream) { Invoke(nameof(SeedRandomStream), Stream); }
        public double SafeDivide(double A, double B) { return Invoke<double>(nameof(SafeDivide), A, B); }
        public long Round64(double A) { return Invoke<long>(nameof(Round64), A); }
        public int Round(double A) { return Invoke<int>(nameof(Round), A); }
        public Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle) { return Invoke<Rotator>(nameof(RotatorFromAxisAndAngle), Axis, Angle); }
        public Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis) { return Invoke<Vector>(nameof(RotateAngleAxis), InVect, AngleDeg, Axis); }
        public Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath) { return Invoke<Rotator>(nameof(RLerp), A, B, Alpha, bShortestPath); }
        public Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed) { return Invoke<Rotator>(nameof(RInterpTo_Constant), Current, Target, DeltaTime, InterpSpeed); }
        public Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed) { return Invoke<Rotator>(nameof(RInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public void RGBToHSV_Vector(LinearColor RGB, LinearColor HSV) { Invoke(nameof(RGBToHSV_Vector), RGB, HSV); }
        public void RGBToHSV(LinearColor inColor, float H, float S, float V, float A) { Invoke(nameof(RGBToHSV), inColor, H, S, V, A); }
        public LinearColor RGBLinearToHSV(LinearColor RGB) { return Invoke<LinearColor>(nameof(RGBLinearToHSV), RGB); }
        public void ResetVectorSpringState(VectorSpringState SpringState) { Invoke(nameof(ResetVectorSpringState), SpringState); }
        public void ResetRandomStream(RandomStream Stream) { Invoke(nameof(ResetRandomStream), Stream); }
        public void ResetQuaternionSpringState(QuaternionSpringState SpringState) { Invoke(nameof(ResetQuaternionSpringState), SpringState); }
        public void ResetFloatSpringState(FloatSpringState SpringState) { Invoke(nameof(ResetFloatSpringState), SpringState); }
        public Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps) { return Invoke<Rotator>(nameof(REase), A, B, Alpha, bShortestPath, EasingFunc, BlendExp, Steps); }
        public Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, RandomStream Stream) { return Invoke<Vector>(nameof(RandomUnitVectorInEllipticalConeInRadiansFromStream), ConeDir, MaxYawInRadians, MaxPitchInRadians, Stream); }
        public Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians) { return Invoke<Vector>(nameof(RandomUnitVectorInEllipticalConeInRadians), ConeDir, MaxYawInRadians, MaxPitchInRadians); }
        public Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, RandomStream Stream) { return Invoke<Vector>(nameof(RandomUnitVectorInEllipticalConeInDegreesFromStream), ConeDir, MaxYawInDegrees, MaxPitchInDegrees, Stream); }
        public Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees) { return Invoke<Vector>(nameof(RandomUnitVectorInEllipticalConeInDegrees), ConeDir, MaxYawInDegrees, MaxPitchInDegrees); }
        public Vector RandomUnitVectorInConeInRadiansFromStream(Vector ConeDir, float ConeHalfAngleInRadians, RandomStream Stream) { return Invoke<Vector>(nameof(RandomUnitVectorInConeInRadiansFromStream), ConeDir, ConeHalfAngleInRadians, Stream); }
        public Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians) { return Invoke<Vector>(nameof(RandomUnitVectorInConeInRadians), ConeDir, ConeHalfAngleInRadians); }
        public Vector RandomUnitVectorInConeInDegreesFromStream(Vector ConeDir, float ConeHalfAngleInDegrees, RandomStream Stream) { return Invoke<Vector>(nameof(RandomUnitVectorInConeInDegreesFromStream), ConeDir, ConeHalfAngleInDegrees, Stream); }
        public Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees) { return Invoke<Vector>(nameof(RandomUnitVectorInConeInDegrees), ConeDir, ConeHalfAngleInDegrees); }
        public Vector RandomUnitVectorFromStream(RandomStream Stream) { return Invoke<Vector>(nameof(RandomUnitVectorFromStream), Stream); }
        public Vector RandomUnitVector() { return Invoke<Vector>(nameof(RandomUnitVector)); }
        public Rotator RandomRotatorFromStream(bool bRoll, RandomStream Stream) { return Invoke<Rotator>(nameof(RandomRotatorFromStream), bRoll, Stream); }
        public Rotator RandomRotator(bool bRoll) { return Invoke<Rotator>(nameof(RandomRotator), bRoll); }
        public Vector RandomPointInBoundingBoxFromStream_Box(Box Box, RandomStream Stream) { return Invoke<Vector>(nameof(RandomPointInBoundingBoxFromStream_Box), Box, Stream); }
        public Vector RandomPointInBoundingBoxFromStream(Vector Center, Vector HalfSize, RandomStream Stream) { return Invoke<Vector>(nameof(RandomPointInBoundingBoxFromStream), Center, HalfSize, Stream); }
        public Vector RandomPointInBoundingBox_Box(Box Box) { return Invoke<Vector>(nameof(RandomPointInBoundingBox_Box), Box); }
        public Vector RandomPointInBoundingBox(Vector Center, Vector HalfSize) { return Invoke<Vector>(nameof(RandomPointInBoundingBox), Center, HalfSize); }
        public int RandomIntegerInRangeFromStream(int Min, int Max, RandomStream Stream) { return Invoke<int>(nameof(RandomIntegerInRangeFromStream), Min, Max, Stream); }
        public int RandomIntegerInRange(int Min, int Max) { return Invoke<int>(nameof(RandomIntegerInRange), Min, Max); }
        public int RandomIntegerFromStream(int Max, RandomStream Stream) { return Invoke<int>(nameof(RandomIntegerFromStream), Max, Stream); }
        public long RandomInteger64InRange(long Min, long Max) { return Invoke<long>(nameof(RandomInteger64InRange), Min, Max); }
        public long RandomInteger64(long Max) { return Invoke<long>(nameof(RandomInteger64), Max); }
        public int RandomInteger(int Max) { return Invoke<int>(nameof(RandomInteger), Max); }
        public float RandomFloatInRangeFromStream(float Min, float Max, RandomStream Stream) { return Invoke<float>(nameof(RandomFloatInRangeFromStream), Min, Max, Stream); }
        public double RandomFloatInRange(double Min, double Max) { return Invoke<double>(nameof(RandomFloatInRange), Min, Max); }
        public float RandomFloatFromStream(RandomStream Stream) { return Invoke<float>(nameof(RandomFloatFromStream), Stream); }
        public double RandomFloat() { return Invoke<double>(nameof(RandomFloat)); }
        public bool RandomBoolWithWeightFromStream(float Weight, RandomStream RandomStream) { return Invoke<bool>(nameof(RandomBoolWithWeightFromStream), Weight, RandomStream); }
        public bool RandomBoolWithWeight(float Weight) { return Invoke<bool>(nameof(RandomBoolWithWeight), Weight); }
        public bool RandomBoolFromStream(RandomStream Stream) { return Invoke<bool>(nameof(RandomBoolFromStream), Stream); }
        public bool RandomBool() { return Invoke<bool>(nameof(RandomBool)); }
        public double RadiansToDegrees(double A) { return Invoke<double>(nameof(RadiansToDegrees), A); }
        public Quat QuaternionSpringInterp(Quat Current, Quat Target, QuaternionSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget) { return Invoke<Quat>(nameof(QuaternionSpringInterp), Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass, TargetVelocityAmount, bInitializeFromTarget); }
        public Vector Quat_VectorUp(Quat Q) { return Invoke<Vector>(nameof(Quat_VectorUp), Q); }
        public Vector Quat_VectorRight(Quat Q) { return Invoke<Vector>(nameof(Quat_VectorRight), Q); }
        public Vector Quat_VectorForward(Quat Q) { return Invoke<Vector>(nameof(Quat_VectorForward), Q); }
        public Vector Quat_UnrotateVector(Quat Q, Vector V) { return Invoke<Vector>(nameof(Quat_UnrotateVector), Q, V); }
        public float Quat_SizeSquared(Quat Q) { return Invoke<float>(nameof(Quat_SizeSquared), Q); }
        public float Quat_Size(Quat Q) { return Invoke<float>(nameof(Quat_Size), Q); }
        public void Quat_SetFromEuler(Quat Q, Vector Euler) { Invoke(nameof(Quat_SetFromEuler), Q, Euler); }
        public void Quat_SetComponents(Quat Q, float X, float Y, float Z, float W) { Invoke(nameof(Quat_SetComponents), Q, X, Y, Z, W); }
        public Rotator Quat_Rotator(Quat Q) { return Invoke<Rotator>(nameof(Quat_Rotator), Q); }
        public Vector Quat_RotateVector(Quat Q, Vector V) { return Invoke<Vector>(nameof(Quat_RotateVector), Q, V); }
        public Quat Quat_Normalized(Quat Q, float Tolerance) { return Invoke<Quat>(nameof(Quat_Normalized), Q, Tolerance); }
        public void Quat_Normalize(Quat Q, float Tolerance) { Invoke(nameof(Quat_Normalize), Q, Tolerance); }
        public Quat Quat_MakeFromEuler(Vector Euler) { return Invoke<Quat>(nameof(Quat_MakeFromEuler), Euler); }
        public Quat Quat_Log(Quat Q) { return Invoke<Quat>(nameof(Quat_Log), Q); }
        public bool Quat_IsNormalized(Quat Q) { return Invoke<bool>(nameof(Quat_IsNormalized), Q); }
        public bool Quat_IsNonFinite(Quat Q) { return Invoke<bool>(nameof(Quat_IsNonFinite), Q); }
        public bool Quat_IsIdentity(Quat Q, float Tolerance) { return Invoke<bool>(nameof(Quat_IsIdentity), Q, Tolerance); }
        public bool Quat_IsFinite(Quat Q) { return Invoke<bool>(nameof(Quat_IsFinite), Q); }
        public Quat Quat_Inversed(Quat Q) { return Invoke<Quat>(nameof(Quat_Inversed), Q); }
        public Quat Quat_Identity() { return Invoke<Quat>(nameof(Quat_Identity)); }
        public Vector Quat_GetRotationAxis(Quat Q) { return Invoke<Vector>(nameof(Quat_GetRotationAxis), Q); }
        public Vector Quat_GetAxisZ(Quat Q) { return Invoke<Vector>(nameof(Quat_GetAxisZ), Q); }
        public Vector Quat_GetAxisY(Quat Q) { return Invoke<Vector>(nameof(Quat_GetAxisY), Q); }
        public Vector Quat_GetAxisX(Quat Q) { return Invoke<Vector>(nameof(Quat_GetAxisX), Q); }
        public float Quat_GetAngle(Quat Q) { return Invoke<float>(nameof(Quat_GetAngle), Q); }
        public Quat Quat_Exp(Quat Q) { return Invoke<Quat>(nameof(Quat_Exp), Q); }
        public Vector Quat_Euler(Quat Q) { return Invoke<Vector>(nameof(Quat_Euler), Q); }
        public void Quat_EnforceShortestArcWith(Quat A, Quat B) { Invoke(nameof(Quat_EnforceShortestArcWith), A, B); }
        public float Quat_AngularDistance(Quat A, Quat B) { return Invoke<float>(nameof(Quat_AngularDistance), A, B); }
        public Vector ProjectVectorOnToVector(Vector V, Vector Target) { return Invoke<Vector>(nameof(ProjectVectorOnToVector), V, Target); }
        public Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal) { return Invoke<Vector>(nameof(ProjectVectorOnToPlane), V, PlaneNormal); }
        public Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal) { return Invoke<Vector>(nameof(ProjectPointOnToPlane), Point, PlaneBase, PlaneNormal); }
        public bool PointsAreCoplanar(Array<Vector> Points, float Tolerance) { return Invoke<bool>(nameof(PointsAreCoplanar), Points, Tolerance); }
        public float PerlinNoise1D(float Value) { return Invoke<float>(nameof(PerlinNoise1D), Value); }
        public int Percent_IntInt(int A, int B) { return Invoke<int>(nameof(Percent_IntInt), A, B); }
        public long Percent_Int64Int64(long A, long B) { return Invoke<long>(nameof(Percent_Int64Int64), A, B); }
        public double Percent_FloatFloat(double A, double B) { return Invoke<double>(nameof(Percent_FloatFloat), A, B); }
        public byte Percent_ByteByte(byte A, byte B) { return Invoke<byte>(nameof(Percent_ByteByte), A, B); }
        public int Or_IntInt(int A, int B) { return Invoke<int>(nameof(Or_IntInt), A, B); }
        public long Or_Int64Int64(long A, long B) { return Invoke<long>(nameof(Or_Int64Int64), A, B); }
        public DateTime Now() { return Invoke<DateTime>(nameof(Now)); }
        public bool NotEqualExactly_VectorVector(Vector A, Vector B) { return Invoke<bool>(nameof(NotEqualExactly_VectorVector), A, B); }
        public bool NotEqualExactly_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<bool>(nameof(NotEqualExactly_Vector4Vector4), A, B); }
        public bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<bool>(nameof(NotEqualExactly_Vector2DVector2D), A, B); }
        public bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance) { return Invoke<bool>(nameof(NotEqual_VectorVector), A, B, ErrorTolerance); }
        public bool NotEqual_Vector4Vector4(Vector4 A, Vector4 B, float ErrorTolerance) { return Invoke<bool>(nameof(NotEqual_Vector4Vector4), A, B, ErrorTolerance); }
        public bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance) { return Invoke<bool>(nameof(NotEqual_Vector2DVector2D), A, B, ErrorTolerance); }
        public bool NotEqual_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(NotEqual_TimespanTimespan), A, B); }
        public bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance) { return Invoke<bool>(nameof(NotEqual_RotatorRotator), A, B, ErrorTolerance); }
        public bool NotEqual_QuatQuat(Quat A, Quat B, float ErrorTolerance) { return Invoke<bool>(nameof(NotEqual_QuatQuat), A, B, ErrorTolerance); }
        public bool NotEqual_ObjectObject(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_ObjectObject), A, B); }
        public bool NotEqual_NameName(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_NameName), A, B); }
        public bool NotEqual_MatrixMatrix(Matrix A, Matrix B, float Tolerance) { return Invoke<bool>(nameof(NotEqual_MatrixMatrix), A, B, Tolerance); }
        public bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<bool>(nameof(NotEqual_LinearColorLinearColor), A, B); }
        public bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<bool>(nameof(NotEqual_IntPointIntPoint), A, B); }
        public bool NotEqual_IntInt(int A, int B) { return Invoke<bool>(nameof(NotEqual_IntInt), A, B); }
        public bool NotEqual_Int64Int64(long A, long B) { return Invoke<bool>(nameof(NotEqual_Int64Int64), A, B); }
        public bool NotEqual_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(NotEqual_DoubleDouble), A, B); }
        public bool NotEqual_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(NotEqual_DateTimeDateTime), A, B); }
        public bool NotEqual_ClassClass(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_ClassClass), A, B); }
        public bool NotEqual_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(NotEqual_ByteByte), A, B); }
        public bool NotEqual_BoolBool(bool A, bool B) { return Invoke<bool>(nameof(NotEqual_BoolBool), A, B); }
        public bool Not_PreBool(bool A) { return Invoke<bool>(nameof(Not_PreBool), A); }
        public long Not_Int64(long A) { return Invoke<long>(nameof(Not_Int64), A); }
        public int Not_Int(int A) { return Invoke<int>(nameof(Not_Int), A); }
        public Vector2D NormalSafe2D(Vector2D A, float Tolerance) { return Invoke<Vector2D>(nameof(NormalSafe2D), A, Tolerance); }
        public double NormalizeToRange(double Value, double RangeMin, double RangeMax) { return Invoke<double>(nameof(NormalizeToRange), Value, RangeMin, RangeMax); }
        public Rotator NormalizedDeltaRotator(Rotator A, Rotator B) { return Invoke<Rotator>(nameof(NormalizedDeltaRotator), A, B); }
        public float NormalizeAxis(float Angle) { return Invoke<float>(nameof(NormalizeAxis), Angle); }
        public void Normalize2D(Vector2D A, float Tolerance) { Invoke(nameof(Normalize2D), A, Tolerance); }
        public Vector2D Normal2D(Vector2D A) { return Invoke<Vector2D>(nameof(Normal2D), A); }
        public Vector Normal(Vector A, float Tolerance) { return Invoke<Vector>(nameof(Normal), A, Tolerance); }
        public Vector NegateVector(Vector A) { return Invoke<Vector>(nameof(NegateVector), A); }
        public Rotator NegateRotator(Rotator A) { return Invoke<Rotator>(nameof(NegateRotator), A); }
        public Vector2D Negated2D(Vector2D A) { return Invoke<Vector2D>(nameof(Negated2D), A); }
        public bool NearlyEqual_TransformTransform(Transform A, Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance) { return Invoke<bool>(nameof(NearlyEqual_TransformTransform), A, B, LocationTolerance, RotationTolerance, Scale3DTolerance); }
        public bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance) { return Invoke<bool>(nameof(NearlyEqual_FloatFloat), A, B, ErrorTolerance); }
        public double MultiplyMultiply_FloatFloat(double Base, double Exp) { return Invoke<double>(nameof(MultiplyMultiply_FloatFloat), Base, Exp); }
        public double MultiplyByPi(double Value) { return Invoke<double>(nameof(MultiplyByPi), Value); }
        public Vector Multiply_VectorVector(Vector A, Vector B) { return Invoke<Vector>(nameof(Multiply_VectorVector), A, B); }
        public Vector Multiply_VectorInt(Vector A, int B) { return Invoke<Vector>(nameof(Multiply_VectorInt), A, B); }
        public Vector Multiply_VectorFloat(Vector A, double B) { return Invoke<Vector>(nameof(Multiply_VectorFloat), A, B); }
        public Vector4 Multiply_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<Vector4>(nameof(Multiply_Vector4Vector4), A, B); }
        public Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<Vector2D>(nameof(Multiply_Vector2DVector2D), A, B); }
        public Vector2D Multiply_Vector2DFloat(Vector2D A, double B) { return Invoke<Vector2D>(nameof(Multiply_Vector2DFloat), A, B); }
        public Timespan Multiply_TimespanFloat(Timespan A, float Scalar) { return Invoke<Timespan>(nameof(Multiply_TimespanFloat), A, Scalar); }
        public Rotator Multiply_RotatorInt(Rotator A, int B) { return Invoke<Rotator>(nameof(Multiply_RotatorInt), A, B); }
        public Rotator Multiply_RotatorFloat(Rotator A, float B) { return Invoke<Rotator>(nameof(Multiply_RotatorFloat), A, B); }
        public Quat Multiply_QuatQuat(Quat A, Quat B) { return Invoke<Quat>(nameof(Multiply_QuatQuat), A, B); }
        public Matrix Multiply_MatrixMatrix(Matrix A, Matrix B) { return Invoke<Matrix>(nameof(Multiply_MatrixMatrix), A, B); }
        public Matrix Multiply_MatrixFloat(Matrix A, double B) { return Invoke<Matrix>(nameof(Multiply_MatrixFloat), A, B); }
        public LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<LinearColor>(nameof(Multiply_LinearColorLinearColor), A, B); }
        public LinearColor Multiply_LinearColorFloat(LinearColor A, float B) { return Invoke<LinearColor>(nameof(Multiply_LinearColorFloat), A, B); }
        public IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<IntPoint>(nameof(Multiply_IntPointIntPoint), A, B); }
        public IntPoint Multiply_IntPointInt(IntPoint A, int B) { return Invoke<IntPoint>(nameof(Multiply_IntPointInt), A, B); }
        public int Multiply_IntInt(int A, int B) { return Invoke<int>(nameof(Multiply_IntInt), A, B); }
        public double Multiply_IntFloat(int A, double B) { return Invoke<double>(nameof(Multiply_IntFloat), A, B); }
        public long Multiply_Int64Int64(long A, long B) { return Invoke<long>(nameof(Multiply_Int64Int64), A, B); }
        public double Multiply_DoubleDouble(double A, double B) { return Invoke<double>(nameof(Multiply_DoubleDouble), A, B); }
        public byte Multiply_ByteByte(byte A, byte B) { return Invoke<byte>(nameof(Multiply_ByteByte), A, B); }
        public Vector MirrorVectorByNormal(Vector InVect, Vector InNormal) { return Invoke<Vector>(nameof(MirrorVectorByNormal), InVect, InNormal); }
        public void MinOfIntArray(Array<int> IntArray, int IndexOfMinValue, int MinValue) { Invoke(nameof(MinOfIntArray), IntArray, IndexOfMinValue, MinValue); }
        public void MinOfFloatArray(Array<float> FloatArray, int IndexOfMinValue, float MinValue) { Invoke(nameof(MinOfFloatArray), FloatArray, IndexOfMinValue, MinValue); }
        public void MinOfByteArray(Array<byte> ByteArray, int IndexOfMinValue, byte MinValue) { Invoke(nameof(MinOfByteArray), ByteArray, IndexOfMinValue, MinValue); }
        public long MinInt64(long A, long B) { return Invoke<long>(nameof(MinInt64), A, B); }
        public void MinimumAreaRectangle(Object WorldContextObject, Array<Vector> InVerts, Vector SampleSurfaceNormal, Vector OutRectCenter, Rotator OutRectRotation, float OutSideLengthX, float OutSideLengthY, bool bDebugDraw) { Invoke(nameof(MinimumAreaRectangle), WorldContextObject, InVerts, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutSideLengthX, OutSideLengthY, bDebugDraw); }
        public void MinAreaRectangle(Object WorldContextObject, Array<Vector> InPoints, Vector SampleSurfaceNormal, Vector OutRectCenter, Rotator OutRectRotation, float OutRectLengthX, float OutRectLengthY, bool bDebugDraw) { Invoke(nameof(MinAreaRectangle), WorldContextObject, InPoints, SampleSurfaceNormal, OutRectCenter, OutRectRotation, OutRectLengthX, OutRectLengthY, bDebugDraw); }
        public int Min(int A, int B) { return Invoke<int>(nameof(Min), A, B); }
        public void MedianOfIntArray(Array<int> IntArray, float MedianValue) { Invoke(nameof(MedianOfIntArray), IntArray, MedianValue); }
        public void MaxOfIntArray(Array<int> IntArray, int IndexOfMaxValue, int MaxValue) { Invoke(nameof(MaxOfIntArray), IntArray, IndexOfMaxValue, MaxValue); }
        public void MaxOfFloatArray(Array<float> FloatArray, int IndexOfMaxValue, float MaxValue) { Invoke(nameof(MaxOfFloatArray), FloatArray, IndexOfMaxValue, MaxValue); }
        public void MaxOfByteArray(Array<byte> ByteArray, int IndexOfMaxValue, byte MaxValue) { Invoke(nameof(MaxOfByteArray), ByteArray, IndexOfMaxValue, MaxValue); }
        public long MaxInt64(long A, long B) { return Invoke<long>(nameof(MaxInt64), A, B); }
        public int Max(int A, int B) { return Invoke<int>(nameof(Max), A, B); }
        public Vector4 Matrix_TransformVector4(Matrix M, Vector4 V) { return Invoke<Vector4>(nameof(Matrix_TransformVector4), M, V); }
        public Vector4 Matrix_TransformVector(Matrix M, Vector V) { return Invoke<Vector4>(nameof(Matrix_TransformVector), M, V); }
        public Vector4 Matrix_TransformPosition(Matrix M, Vector V) { return Invoke<Vector4>(nameof(Matrix_TransformPosition), M, V); }
        public Quat Matrix_ToQuat(Matrix M) { return Invoke<Quat>(nameof(Matrix_ToQuat), M); }
        public void Matrix_SetOrigin(Matrix M, Vector NewOrigin) { Invoke(nameof(Matrix_SetOrigin), M, NewOrigin); }
        public void Matrix_SetColumn(Matrix M, byte Column, Vector Value) { Invoke(nameof(Matrix_SetColumn), M, Column, Value); }
        public void Matrix_SetAxis(Matrix M, byte Axis, Vector AxisVector) { Invoke(nameof(Matrix_SetAxis), M, Axis, AxisVector); }
        public Matrix Matrix_ScaleTranslation(Matrix M, Vector Scale3D) { return Invoke<Matrix>(nameof(Matrix_ScaleTranslation), M, Scale3D); }
        public Matrix Matrix_RemoveTranslation(Matrix M) { return Invoke<Matrix>(nameof(Matrix_RemoveTranslation), M); }
        public void Matrix_RemoveScaling(Matrix M, float Tolerance) { Invoke(nameof(Matrix_RemoveScaling), M, Tolerance); }
        public Matrix Matrix_Mirror(Matrix M, byte MirrorAxis, byte FlipAxis) { return Invoke<Matrix>(nameof(Matrix_Mirror), M, MirrorAxis, FlipAxis); }
        public Vector Matrix_InverseTransformVector(Matrix M, Vector V) { return Invoke<Vector>(nameof(Matrix_InverseTransformVector), M, V); }
        public Vector Matrix_InverseTransformPosition(Matrix M, Vector V) { return Invoke<Vector>(nameof(Matrix_InverseTransformPosition), M, V); }
        public Matrix Matrix_Identity() { return Invoke<Matrix>(nameof(Matrix_Identity)); }
        public Vector Matrix_GetUnitAxis(Matrix M, byte Axis) { return Invoke<Vector>(nameof(Matrix_GetUnitAxis), M, Axis); }
        public void Matrix_GetUnitAxes(Matrix M, Vector X, Vector Y, Vector Z) { Invoke(nameof(Matrix_GetUnitAxes), M, X, Y, Z); }
        public Matrix Matrix_GetTransposed(Matrix M) { return Invoke<Matrix>(nameof(Matrix_GetTransposed), M); }
        public Matrix Matrix_GetTransposeAdjoint(Matrix M) { return Invoke<Matrix>(nameof(Matrix_GetTransposeAdjoint), M); }
        public Vector Matrix_GetScaleVector(Matrix M, float Tolerance) { return Invoke<Vector>(nameof(Matrix_GetScaleVector), M, Tolerance); }
        public Vector Matrix_GetScaledAxis(Matrix M, byte Axis) { return Invoke<Vector>(nameof(Matrix_GetScaledAxis), M, Axis); }
        public void Matrix_GetScaledAxes(Matrix M, Vector X, Vector Y, Vector Z) { Invoke(nameof(Matrix_GetScaledAxes), M, X, Y, Z); }
        public float Matrix_GetRotDeterminant(Matrix M) { return Invoke<float>(nameof(Matrix_GetRotDeterminant), M); }
        public Rotator Matrix_GetRotator(Matrix M) { return Invoke<Rotator>(nameof(Matrix_GetRotator), M); }
        public Vector Matrix_GetOrigin(Matrix InMatrix) { return Invoke<Vector>(nameof(Matrix_GetOrigin), InMatrix); }
        public float Matrix_GetMaximumAxisScale(Matrix M) { return Invoke<float>(nameof(Matrix_GetMaximumAxisScale), M); }
        public Matrix Matrix_GetMatrixWithoutScale(Matrix M, float Tolerance) { return Invoke<Matrix>(nameof(Matrix_GetMatrixWithoutScale), M, Tolerance); }
        public Matrix Matrix_GetInverse(Matrix M) { return Invoke<Matrix>(nameof(Matrix_GetInverse), M); }
        public bool Matrix_GetFrustumTopPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumTopPlane), M, OutPlane); }
        public bool Matrix_GetFrustumRightPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumRightPlane), M, OutPlane); }
        public bool Matrix_GetFrustumNearPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumNearPlane), M, OutPlane); }
        public bool Matrix_GetFrustumLeftPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumLeftPlane), M, OutPlane); }
        public bool Matrix_GetFrustumFarPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumFarPlane), M, OutPlane); }
        public bool Matrix_GetFrustumBottomPlane(Matrix M, Plane OutPlane) { return Invoke<bool>(nameof(Matrix_GetFrustumBottomPlane), M, OutPlane); }
        public float Matrix_GetDeterminant(Matrix M) { return Invoke<float>(nameof(Matrix_GetDeterminant), M); }
        public Vector Matrix_GetColumn(Matrix M, byte Column) { return Invoke<Vector>(nameof(Matrix_GetColumn), M, Column); }
        public bool Matrix_ContainsNaN(Matrix M) { return Invoke<bool>(nameof(Matrix_ContainsNaN), M); }
        public Matrix Matrix_ConcatenateTranslation(Matrix M, Vector Translation) { return Invoke<Matrix>(nameof(Matrix_ConcatenateTranslation), M, Translation); }
        public Matrix Matrix_ApplyScale(Matrix M, float Scale) { return Invoke<Matrix>(nameof(Matrix_ApplyScale), M, Scale); }
        public double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB) { return Invoke<double>(nameof(MapRangeUnclamped), Value, InRangeA, InRangeB, OutRangeA, OutRangeB); }
        public double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB) { return Invoke<double>(nameof(MapRangeClamped), Value, InRangeA, InRangeB, OutRangeA, OutRangeB); }
        public Vector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z) { return Invoke<Vector_NetQuantizeNormal>(nameof(MakeVector_NetQuantizeNormal), X, Y, Z); }
        public Vector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z) { return Invoke<Vector_NetQuantize100>(nameof(MakeVector_NetQuantize100), X, Y, Z); }
        public Vector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z) { return Invoke<Vector_NetQuantize10>(nameof(MakeVector_NetQuantize10), X, Y, Z); }
        public Vector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z) { return Invoke<Vector_NetQuantize>(nameof(MakeVector_NetQuantize), X, Y, Z); }
        public Vector4 MakeVector4(double X, double Y, double Z, double W) { return Invoke<Vector4>(nameof(MakeVector4), X, Y, Z, W); }
        public Vector2D MakeVector2D(double X, double Y) { return Invoke<Vector2D>(nameof(MakeVector2D), X, Y); }
        public Vector MakeVector(double X, double Y, double Z) { return Invoke<Vector>(nameof(MakeVector), X, Y, Z); }
        public Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale) { return Invoke<Transform>(nameof(MakeTransform), Location, Rotation, Scale); }
        public Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano) { return Invoke<Timespan>(nameof(MakeTimespan2), Days, Hours, Minutes, Seconds, FractionNano); }
        public Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds) { return Invoke<Timespan>(nameof(MakeTimespan), Days, Hours, Minutes, Seconds, Milliseconds); }
        public Rotator MakeRotFromZY(Vector Z, Vector Y) { return Invoke<Rotator>(nameof(MakeRotFromZY), Z, Y); }
        public Rotator MakeRotFromZX(Vector Z, Vector X) { return Invoke<Rotator>(nameof(MakeRotFromZX), Z, X); }
        public Rotator MakeRotFromZ(Vector Z) { return Invoke<Rotator>(nameof(MakeRotFromZ), Z); }
        public Rotator MakeRotFromYZ(Vector Y, Vector Z) { return Invoke<Rotator>(nameof(MakeRotFromYZ), Y, Z); }
        public Rotator MakeRotFromYX(Vector Y, Vector X) { return Invoke<Rotator>(nameof(MakeRotFromYX), Y, X); }
        public Rotator MakeRotFromY(Vector Y) { return Invoke<Rotator>(nameof(MakeRotFromY), Y); }
        public Rotator MakeRotFromXZ(Vector X, Vector Z) { return Invoke<Rotator>(nameof(MakeRotFromXZ), X, Z); }
        public Rotator MakeRotFromXY(Vector X, Vector Y) { return Invoke<Rotator>(nameof(MakeRotFromXY), X, Y); }
        public Rotator MakeRotFromX(Vector X) { return Invoke<Rotator>(nameof(MakeRotFromX), X); }
        public Rotator MakeRotator(float Roll, float Pitch, float Yaw) { return Invoke<Rotator>(nameof(MakeRotator), Roll, Pitch, Yaw); }
        public Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up) { return Invoke<Rotator>(nameof(MakeRotationFromAxes), Forward, Right, Up); }
        public Transform MakeRelativeTransform(Transform A, Transform RelativeTo) { return Invoke<Transform>(nameof(MakeRelativeTransform), A, RelativeTo); }
        public RandomStream MakeRandomStream(int InitialSeed) { return Invoke<RandomStream>(nameof(MakeRandomStream), InitialSeed); }
        public Quat MakeQuat(float X, float Y, float Z, float W) { return Invoke<Quat>(nameof(MakeQuat), X, Y, Z, W); }
        public QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame) { return Invoke<QualifiedFrameTime>(nameof(MakeQualifiedFrameTime), Frame, FrameRate, SubFrame); }
        public float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase) { return Invoke<float>(nameof(MakePulsatingValue), InCurrentTime, InPulsesPerSecond, InPhase); }
        public Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal) { return Invoke<Plane>(nameof(MakePlaneFromPointAndNormal), Point, Normal); }
        public FrameRate MakeFrameRate(int Numerator, int Denominator) { return Invoke<FrameRate>(nameof(MakeFrameRate), Numerator, Denominator); }
        public DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond) { return Invoke<DateTime>(nameof(MakeDateTime), Year, Month, Day, Hour, Minute, Second, Millisecond); }
        public LinearColor MakeColor(float R, float G, float B, float A) { return Invoke<LinearColor>(nameof(MakeColor), R, G, B, A); }
        public BoxSphereBounds MakeBoxSphereBounds(Vector Origin, Vector BoxExtent, float SphereRadius) { return Invoke<BoxSphereBounds>(nameof(MakeBoxSphereBounds), Origin, BoxExtent, SphereRadius); }
        public Box2D MakeBox2D(Vector2D Min, Vector2D Max) { return Invoke<Box2D>(nameof(MakeBox2D), Min, Max); }
        public Box MakeBox(Vector Min, Vector Max) { return Invoke<Box>(nameof(MakeBox), Min, Max); }
        public double Loge(double A) { return Invoke<double>(nameof(Loge), A); }
        public double Log(double A, double Base) { return Invoke<double>(nameof(Log), A, Base); }
        public bool LinePlaneIntersection_OriginNormal(Vector LineStart, Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, float T, Vector Intersection) { return Invoke<bool>(nameof(LinePlaneIntersection_OriginNormal), LineStart, LineEnd, PlaneOrigin, PlaneNormal, T, Intersection); }
        public bool LinePlaneIntersection(Vector LineStart, Vector LineEnd, Plane APlane, float T, Vector Intersection) { return Invoke<bool>(nameof(LinePlaneIntersection), LineStart, LineEnd, APlane, T, Intersection); }
        public LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha) { return Invoke<LinearColor>(nameof(LinearColorLerpUsingHSV), A, B, Alpha); }
        public LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha) { return Invoke<LinearColor>(nameof(LinearColorLerp), A, B, Alpha); }
        public LinearColor LinearColor_Yellow() { return Invoke<LinearColor>(nameof(LinearColor_Yellow)); }
        public LinearColor LinearColor_White() { return Invoke<LinearColor>(nameof(LinearColor_White)); }
        public LinearColor LinearColor_Transparent() { return Invoke<LinearColor>(nameof(LinearColor_Transparent)); }
        public Color LinearColor_ToRGBE(LinearColor InLinearColor) { return Invoke<Color>(nameof(LinearColor_ToRGBE), InLinearColor); }
        public LinearColor LinearColor_ToNewOpacity(LinearColor inColor, float InOpacity) { return Invoke<LinearColor>(nameof(LinearColor_ToNewOpacity), inColor, InOpacity); }
        public void LinearColor_SetTemperature(LinearColor InOutColor, float InTemperature) { Invoke(nameof(LinearColor_SetTemperature), InOutColor, InTemperature); }
        public void LinearColor_SetRGBA(LinearColor InOutColor, float R, float G, float B, float A) { Invoke(nameof(LinearColor_SetRGBA), InOutColor, R, G, B, A); }
        public void LinearColor_SetRandomHue(LinearColor InOutColor) { Invoke(nameof(LinearColor_SetRandomHue), InOutColor); }
        public void LinearColor_SetFromSRGB(LinearColor InOutColor, Color InSRGB) { Invoke(nameof(LinearColor_SetFromSRGB), InOutColor, InSRGB); }
        public void LinearColor_SetFromPow22(LinearColor InOutColor, Color inColor) { Invoke(nameof(LinearColor_SetFromPow22), InOutColor, inColor); }
        public void LinearColor_SetFromHSV(LinearColor InOutColor, float H, float S, float V, float A) { Invoke(nameof(LinearColor_SetFromHSV), InOutColor, H, S, V, A); }
        public void LinearColor_Set(LinearColor InOutColor, LinearColor inColor) { Invoke(nameof(LinearColor_Set), InOutColor, inColor); }
        public LinearColor LinearColor_Red() { return Invoke<LinearColor>(nameof(LinearColor_Red)); }
        public Color LinearColor_QuantizeRound(LinearColor inColor) { return Invoke<Color>(nameof(LinearColor_QuantizeRound), inColor); }
        public Color LinearColor_Quantize(LinearColor inColor) { return Invoke<Color>(nameof(LinearColor_Quantize), inColor); }
        public bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance) { return Invoke<bool>(nameof(LinearColor_IsNearEqual), A, B, Tolerance); }
        public LinearColor LinearColor_Green() { return Invoke<LinearColor>(nameof(LinearColor_Green)); }
        public LinearColor LinearColor_Gray() { return Invoke<LinearColor>(nameof(LinearColor_Gray)); }
        public float LinearColor_GetMin(LinearColor inColor) { return Invoke<float>(nameof(LinearColor_GetMin), inColor); }
        public float LinearColor_GetMax(LinearColor inColor) { return Invoke<float>(nameof(LinearColor_GetMax), inColor); }
        public float LinearColor_GetLuminance(LinearColor inColor) { return Invoke<float>(nameof(LinearColor_GetLuminance), inColor); }
        public float LinearColor_Distance(LinearColor C1, LinearColor C2) { return Invoke<float>(nameof(LinearColor_Distance), C1, C2); }
        public LinearColor LinearColor_Desaturated(LinearColor inColor, float InDesaturation) { return Invoke<LinearColor>(nameof(LinearColor_Desaturated), inColor, InDesaturation); }
        public LinearColor LinearColor_Blue() { return Invoke<LinearColor>(nameof(LinearColor_Blue)); }
        public LinearColor LinearColor_Black() { return Invoke<LinearColor>(nameof(LinearColor_Black)); }
        public Vector LessLess_VectorRotator(Vector A, Rotator B) { return Invoke<Vector>(nameof(LessLess_VectorRotator), A, B); }
        public bool LessEqual_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(LessEqual_TimespanTimespan), A, B); }
        public bool LessEqual_IntInt(int A, int B) { return Invoke<bool>(nameof(LessEqual_IntInt), A, B); }
        public bool LessEqual_Int64Int64(long A, long B) { return Invoke<bool>(nameof(LessEqual_Int64Int64), A, B); }
        public bool LessEqual_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(LessEqual_DoubleDouble), A, B); }
        public bool LessEqual_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(LessEqual_DateTimeDateTime), A, B); }
        public bool LessEqual_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(LessEqual_ByteByte), A, B); }
        public bool Less_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(Less_TimespanTimespan), A, B); }
        public bool Less_IntInt(int A, int B) { return Invoke<bool>(nameof(Less_IntInt), A, B); }
        public bool Less_Int64Int64(long A, long B) { return Invoke<bool>(nameof(Less_Int64Int64), A, B); }
        public bool Less_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(Less_DoubleDouble), A, B); }
        public bool Less_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(Less_DateTimeDateTime), A, B); }
        public bool Less_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(Less_ByteByte), A, B); }
        public double Lerp(double A, double B, double Alpha) { return Invoke<double>(nameof(Lerp), A, B, Alpha); }
        public bool IsZero2D(Vector2D A) { return Invoke<bool>(nameof(IsZero2D), A); }
        public bool IsPointInBoxWithTransform_Box(Vector Point, Transform BoxWorldTransform, Box BoxExtent) { return Invoke<bool>(nameof(IsPointInBoxWithTransform_Box), Point, BoxWorldTransform, BoxExtent); }
        public bool IsPointInBoxWithTransform(Vector Point, Transform BoxWorldTransform, Vector BoxExtent) { return Invoke<bool>(nameof(IsPointInBoxWithTransform), Point, BoxWorldTransform, BoxExtent); }
        public bool IsPointInBox_Box(Vector Point, Box Box) { return Invoke<bool>(nameof(IsPointInBox_Box), Point, Box); }
        public bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent) { return Invoke<bool>(nameof(IsPointInBox), Point, BoxOrigin, BoxExtent); }
        public bool IsNearlyZero2D(Vector2D A, float Tolerance) { return Invoke<bool>(nameof(IsNearlyZero2D), A, Tolerance); }
        public bool IsMorning(DateTime A) { return Invoke<bool>(nameof(IsMorning), A); }
        public bool IsLeapYear(int Year) { return Invoke<bool>(nameof(IsLeapYear), Year); }
        public bool IsAfternoon(DateTime A) { return Invoke<bool>(nameof(IsAfternoon), A); }
        public Transform InvertTransform(Transform T) { return Invoke<Transform>(nameof(InvertTransform), T); }
        public Rotator InverseTransformRotation(Transform T, Rotator Rotation) { return Invoke<Rotator>(nameof(InverseTransformRotation), T, Rotation); }
        public Vector InverseTransformLocation(Transform T, Vector Location) { return Invoke<Vector>(nameof(InverseTransformLocation), T, Location); }
        public Vector InverseTransformDirection(Transform T, Vector Direction) { return Invoke<Vector>(nameof(InverseTransformDirection), T, Direction); }
        public IntPoint IntPoint_Zero() { return Invoke<IntPoint>(nameof(IntPoint_Zero)); }
        public IntPoint IntPoint_Up() { return Invoke<IntPoint>(nameof(IntPoint_Up)); }
        public IntPoint IntPoint_Right() { return Invoke<IntPoint>(nameof(IntPoint_Right)); }
        public IntPoint IntPoint_One() { return Invoke<IntPoint>(nameof(IntPoint_One)); }
        public IntPoint IntPoint_Left() { return Invoke<IntPoint>(nameof(IntPoint_Left)); }
        public IntPoint IntPoint_Down() { return Invoke<IntPoint>(nameof(IntPoint_Down)); }
        public bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax) { return Invoke<bool>(nameof(InRange_IntInt), Value, Min, Max, InclusiveMin, InclusiveMax); }
        public bool InRange_Int64Int64(long Value, long Min, long Max, bool InclusiveMin, bool InclusiveMax) { return Invoke<bool>(nameof(InRange_Int64Int64), Value, Min, Max, InclusiveMin, InclusiveMax); }
        public bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax) { return Invoke<bool>(nameof(InRange_FloatFloat), Value, Min, Max, InclusiveMin, InclusiveMax); }
        public double Hypotenuse(double Width, double Height) { return Invoke<double>(nameof(Hypotenuse), Width, Height); }
        public LinearColor HSVToRGBLinear(LinearColor HSV) { return Invoke<LinearColor>(nameof(HSVToRGBLinear), HSV); }
        public void HSVToRGB_Vector(LinearColor HSV, LinearColor RGB) { Invoke(nameof(HSVToRGB_Vector), HSV, RGB); }
        public LinearColor HSVToRGB(float H, float S, float V, float A) { return Invoke<LinearColor>(nameof(HSVToRGB), H, S, V, A); }
        public double GridSnap_Float(double Location, double GridSize) { return Invoke<double>(nameof(GridSnap_Float), Location, GridSize); }
        public Vector GreaterGreater_VectorRotator(Vector A, Rotator B) { return Invoke<Vector>(nameof(GreaterGreater_VectorRotator), A, B); }
        public bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(GreaterEqual_TimespanTimespan), A, B); }
        public bool GreaterEqual_IntInt(int A, int B) { return Invoke<bool>(nameof(GreaterEqual_IntInt), A, B); }
        public bool GreaterEqual_Int64Int64(long A, long B) { return Invoke<bool>(nameof(GreaterEqual_Int64Int64), A, B); }
        public bool GreaterEqual_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(GreaterEqual_DoubleDouble), A, B); }
        public bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(GreaterEqual_DateTimeDateTime), A, B); }
        public bool GreaterEqual_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(GreaterEqual_ByteByte), A, B); }
        public bool Greater_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(Greater_TimespanTimespan), A, B); }
        public bool Greater_IntInt(int A, int B) { return Invoke<bool>(nameof(Greater_IntInt), A, B); }
        public bool Greater_Int64Int64(long A, long B) { return Invoke<bool>(nameof(Greater_Int64Int64), A, B); }
        public bool Greater_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(Greater_DoubleDouble), A, B); }
        public bool Greater_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(Greater_DateTimeDateTime), A, B); }
        public bool Greater_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(Greater_ByteByte), A, B); }
        public int GetYear(DateTime A) { return Invoke<int>(nameof(GetYear), A); }
        public void GetYawPitchFromVector(Vector InVec, float Yaw, float Pitch) { Invoke(nameof(GetYawPitchFromVector), InVec, Yaw, Pitch); }
        public Vector GetVectorArrayAverage(Array<Vector> Vectors) { return Invoke<Vector>(nameof(GetVectorArrayAverage), Vectors); }
        public Vector GetUpVector(Rotator InRot) { return Invoke<Vector>(nameof(GetUpVector), InRot); }
        public float GetTotalSeconds(Timespan A) { return Invoke<float>(nameof(GetTotalSeconds), A); }
        public float GetTotalMinutes(Timespan A) { return Invoke<float>(nameof(GetTotalMinutes), A); }
        public float GetTotalMilliseconds(Timespan A) { return Invoke<float>(nameof(GetTotalMilliseconds), A); }
        public float GetTotalHours(Timespan A) { return Invoke<float>(nameof(GetTotalHours), A); }
        public float GetTotalDays(Timespan A) { return Invoke<float>(nameof(GetTotalDays), A); }
        public Timespan GetTimeOfDay(DateTime A) { return Invoke<Timespan>(nameof(GetTimeOfDay), A); }
        public double GetTAU() { return Invoke<double>(nameof(GetTAU)); }
        public void GetSlopeDegreeAngles(Vector MyRightYAxis, Vector FloorNormal, Vector UpVector, float OutSlopePitchDegreeAngle, float OutSlopeRollDegreeAngle) { Invoke(nameof(GetSlopeDegreeAngles), MyRightYAxis, FloorNormal, UpVector, OutSlopePitchDegreeAngle, OutSlopeRollDegreeAngle); }
        public int GetSeconds(Timespan A) { return Invoke<int>(nameof(GetSeconds), A); }
        public int GetSecond(DateTime A) { return Invoke<int>(nameof(GetSecond), A); }
        public Vector2D GetRotated2D(Vector2D A, float AngleDeg) { return Invoke<Vector2D>(nameof(GetRotated2D), A, AngleDeg); }
        public Vector GetRightVector(Rotator InRot) { return Invoke<Vector>(nameof(GetRightVector), InRot); }
        public Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal) { return Invoke<Vector>(nameof(GetReflectionVector), Direction, SurfaceNormal); }
        public float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd) { return Invoke<float>(nameof(GetPointDistanceToSegment), Point, SegmentStart, SegmentEnd); }
        public float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection) { return Invoke<float>(nameof(GetPointDistanceToLine), Point, LineOrigin, LineDirection); }
        public double GetPI() { return Invoke<double>(nameof(GetPI)); }
        public int GetMonth(DateTime A) { return Invoke<int>(nameof(GetMonth), A); }
        public int GetMinutes(Timespan A) { return Invoke<int>(nameof(GetMinutes), A); }
        public int GetMinute(DateTime A) { return Invoke<int>(nameof(GetMinute), A); }
        public double GetMinElement(Vector A) { return Invoke<double>(nameof(GetMinElement), A); }
        public double GetMin2D(Vector2D A) { return Invoke<double>(nameof(GetMin2D), A); }
        public int GetMilliseconds(Timespan A) { return Invoke<int>(nameof(GetMilliseconds), A); }
        public int GetMillisecond(DateTime A) { return Invoke<int>(nameof(GetMillisecond), A); }
        public double GetMaxElement(Vector A) { return Invoke<double>(nameof(GetMaxElement), A); }
        public double GetMax2D(Vector2D A) { return Invoke<double>(nameof(GetMax2D), A); }
        public int GetHours(Timespan A) { return Invoke<int>(nameof(GetHours), A); }
        public int GetHour12(DateTime A) { return Invoke<int>(nameof(GetHour12), A); }
        public int GetHour(DateTime A) { return Invoke<int>(nameof(GetHour), A); }
        public Vector GetForwardVector(Rotator InRot) { return Invoke<Vector>(nameof(GetForwardVector), InRot); }
        public Timespan GetDuration(Timespan A) { return Invoke<Timespan>(nameof(GetDuration), A); }
        public Vector GetDirectionUnitVector(Vector From, Vector To) { return Invoke<Vector>(nameof(GetDirectionUnitVector), From, To); }
        public int GetDays(Timespan A) { return Invoke<int>(nameof(GetDays), A); }
        public int GetDayOfYear(DateTime A) { return Invoke<int>(nameof(GetDayOfYear), A); }
        public int GetDay(DateTime A) { return Invoke<int>(nameof(GetDay), A); }
        public DateTime GetDate(DateTime A) { return Invoke<DateTime>(nameof(GetDate), A); }
        public void GetAzimuthAndElevation(Vector InDirection, Transform ReferenceFrame, float Azimuth, float Elevation) { Invoke(nameof(GetAzimuthAndElevation), InDirection, ReferenceFrame, Azimuth, Elevation); }
        public void GetAxes(Rotator A, Vector X, Vector Y, Vector Z) { Invoke(nameof(GetAxes), A, X, Y, Z); }
        public double GetAbsMax2D(Vector2D A) { return Invoke<double>(nameof(GetAbsMax2D), A); }
        public Vector2D GetAbs2D(Vector2D A) { return Invoke<Vector2D>(nameof(GetAbs2D), A); }
        public double FWrap(double Value, double Min, double Max) { return Invoke<double>(nameof(FWrap), Value, Min, Max); }
        public IntVector FTruncVector(Vector InVector) { return Invoke<IntVector>(nameof(FTruncVector), InVector); }
        public long FTrunc64(double A) { return Invoke<long>(nameof(FTrunc64), A); }
        public int FTrunc(double A) { return Invoke<int>(nameof(FTrunc), A); }
        public Timespan FromSeconds(float Seconds) { return Invoke<Timespan>(nameof(FromSeconds), Seconds); }
        public Timespan FromMinutes(float Minutes) { return Invoke<Timespan>(nameof(FromMinutes), Minutes); }
        public Timespan FromMilliseconds(float Milliseconds) { return Invoke<Timespan>(nameof(FromMilliseconds), Milliseconds); }
        public Timespan FromHours(float Hours) { return Invoke<Timespan>(nameof(FromHours), Hours); }
        public Timespan FromDays(float Days) { return Invoke<Timespan>(nameof(FromDays), Days); }
        public double Fraction(double A) { return Invoke<double>(nameof(Fraction), A); }
        public long FMod64(double Dividend, double Divisor, double Remainder) { return Invoke<long>(nameof(FMod64), Dividend, Divisor, Remainder); }
        public int FMod(double Dividend, double Divisor, double Remainder) { return Invoke<int>(nameof(FMod), Dividend, Divisor, Remainder); }
        public double FMin(double A, double B) { return Invoke<double>(nameof(FMin), A, B); }
        public double FMax(double A, double B) { return Invoke<double>(nameof(FMax), A, B); }
        public float FloatSpringInterp(float Current, float Target, FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget) { return Invoke<float>(nameof(FloatSpringInterp), Current, Target, SpringState, Stiffness, CriticalDampingFactor, DeltaTime, Mass, TargetVelocityAmount, bClamp, MinValue, MaxValue, bInitializeFromTarget); }
        public float FixedTurn(float InCurrent, float InDesired, float InDeltaRate) { return Invoke<float>(nameof(FixedTurn), InCurrent, InDesired, InDeltaRate); }
        public double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed) { return Invoke<double>(nameof(FInterpTo_Constant), Current, Target, DeltaTime, InterpSpeed); }
        public double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed) { return Invoke<double>(nameof(FInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public double FInterpEaseInOut(double A, double B, double Alpha, double Exponent) { return Invoke<double>(nameof(FInterpEaseInOut), A, B, Alpha, Exponent); }
        public Rotator FindRelativeLookAtRotation(Transform StartTransform, Vector TargetLocation) { return Invoke<Rotator>(nameof(FindRelativeLookAtRotation), StartTransform, TargetLocation); }
        public void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, Vector Segment1Point, Vector Segment2Point) { Invoke(nameof(FindNearestPointsOnLineSegments), Segment1Start, Segment1End, Segment2Start, Segment2End, Segment1Point, Segment2Point); }
        public Rotator FindLookAtRotation(Vector Start, Vector Target) { return Invoke<Rotator>(nameof(FindLookAtRotation), Start, Target); }
        public Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd) { return Invoke<Vector>(nameof(FindClosestPointOnSegment), Point, SegmentStart, SegmentEnd); }
        public Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection) { return Invoke<Vector>(nameof(FindClosestPointOnLine), Point, LineOrigin, LineDirection); }
        public long FFloor64(double A) { return Invoke<long>(nameof(FFloor64), A); }
        public int FFloor(double A) { return Invoke<int>(nameof(FFloor), A); }
        public double FClamp(double Value, double Min, double Max) { return Invoke<double>(nameof(FClamp), Value, Min, Max); }
        public long FCeil64(double A) { return Invoke<long>(nameof(FCeil64), A); }
        public int FCeil(double A) { return Invoke<int>(nameof(FCeil), A); }
        public double Exp(double A) { return Invoke<double>(nameof(Exp), A); }
        public bool EqualExactly_VectorVector(Vector A, Vector B) { return Invoke<bool>(nameof(EqualExactly_VectorVector), A, B); }
        public bool EqualExactly_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<bool>(nameof(EqualExactly_Vector4Vector4), A, B); }
        public bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<bool>(nameof(EqualExactly_Vector2DVector2D), A, B); }
        public bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance) { return Invoke<bool>(nameof(EqualEqual_VectorVector), A, B, ErrorTolerance); }
        public bool EqualEqual_Vector4Vector4(Vector4 A, Vector4 B, float ErrorTolerance) { return Invoke<bool>(nameof(EqualEqual_Vector4Vector4), A, B, ErrorTolerance); }
        public bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance) { return Invoke<bool>(nameof(EqualEqual_Vector2DVector2D), A, B, ErrorTolerance); }
        public bool EqualEqual_TransformTransform(Transform A, Transform B) { return Invoke<bool>(nameof(EqualEqual_TransformTransform), A, B); }
        public bool EqualEqual_TimespanTimespan(Timespan A, Timespan B) { return Invoke<bool>(nameof(EqualEqual_TimespanTimespan), A, B); }
        public bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance) { return Invoke<bool>(nameof(EqualEqual_RotatorRotator), A, B, ErrorTolerance); }
        public bool EqualEqual_QuatQuat(Quat A, Quat B, float Tolerance) { return Invoke<bool>(nameof(EqualEqual_QuatQuat), A, B, Tolerance); }
        public bool EqualEqual_ObjectObject(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_ObjectObject), A, B); }
        public bool EqualEqual_NameName(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_NameName), A, B); }
        public bool EqualEqual_MatrixMatrix(Matrix A, Matrix B, float Tolerance) { return Invoke<bool>(nameof(EqualEqual_MatrixMatrix), A, B, Tolerance); }
        public bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<bool>(nameof(EqualEqual_LinearColorLinearColor), A, B); }
        public bool EqualEqual_IntInt(int A, int B) { return Invoke<bool>(nameof(EqualEqual_IntInt), A, B); }
        public bool EqualEqual_Int64Int64(long A, long B) { return Invoke<bool>(nameof(EqualEqual_Int64Int64), A, B); }
        public bool EqualEqual_DoubleDouble(double A, double B) { return Invoke<bool>(nameof(EqualEqual_DoubleDouble), A, B); }
        public bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<bool>(nameof(EqualEqual_DateTimeDateTime), A, B); }
        public bool EqualEqual_ClassClass(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_ClassClass), A, B); }
        public bool EqualEqual_ByteByte(byte A, byte B) { return Invoke<bool>(nameof(EqualEqual_ByteByte), A, B); }
        public bool EqualEqual_BoolBool(bool A, bool B) { return Invoke<bool>(nameof(EqualEqual_BoolBool), A, B); }
        public bool Equal_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<bool>(nameof(Equal_IntPointIntPoint), A, B); }
        public double Ease(double A, double B, double Alpha, byte EasingFunc, double BlendExp, int Steps) { return Invoke<double>(nameof(Ease), A, B, Alpha, EasingFunc, BlendExp, Steps); }
        public Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float maxWeight) { return Invoke<Vector>(nameof(DynamicWeightedMovingAverage_FVector), CurrentSample, PreviousSample, MaxDistance, MinWeight, maxWeight); }
        public Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float maxWeight) { return Invoke<Rotator>(nameof(DynamicWeightedMovingAverage_FRotator), CurrentSample, PreviousSample, MaxDistance, MinWeight, maxWeight); }
        public float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float maxWeight) { return Invoke<float>(nameof(DynamicWeightedMovingAverage_Float), CurrentSample, PreviousSample, MaxDistance, MinWeight, maxWeight); }
        public double DotProduct2D(Vector2D A, Vector2D B) { return Invoke<double>(nameof(DotProduct2D), A, B); }
        public double Dot_VectorVector(Vector A, Vector B) { return Invoke<double>(nameof(Dot_VectorVector), A, B); }
        public Vector Divide_VectorVector(Vector A, Vector B) { return Invoke<Vector>(nameof(Divide_VectorVector), A, B); }
        public Vector Divide_VectorInt(Vector A, int B) { return Invoke<Vector>(nameof(Divide_VectorInt), A, B); }
        public Vector Divide_VectorFloat(Vector A, double B) { return Invoke<Vector>(nameof(Divide_VectorFloat), A, B); }
        public Vector4 Divide_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<Vector4>(nameof(Divide_Vector4Vector4), A, B); }
        public Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<Vector2D>(nameof(Divide_Vector2DVector2D), A, B); }
        public Vector2D Divide_Vector2DFloat(Vector2D A, double B) { return Invoke<Vector2D>(nameof(Divide_Vector2DFloat), A, B); }
        public Timespan Divide_TimespanFloat(Timespan A, float Scalar) { return Invoke<Timespan>(nameof(Divide_TimespanFloat), A, Scalar); }
        public LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<LinearColor>(nameof(Divide_LinearColorLinearColor), A, B); }
        public IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<IntPoint>(nameof(Divide_IntPointIntPoint), A, B); }
        public IntPoint Divide_IntPointInt(IntPoint A, int B) { return Invoke<IntPoint>(nameof(Divide_IntPointInt), A, B); }
        public int Divide_IntInt(int A, int B) { return Invoke<int>(nameof(Divide_IntInt), A, B); }
        public long Divide_Int64Int64(long A, long B) { return Invoke<long>(nameof(Divide_Int64Int64), A, B); }
        public double Divide_DoubleDouble(double A, double B) { return Invoke<double>(nameof(Divide_DoubleDouble), A, B); }
        public byte Divide_ByteByte(byte A, byte B) { return Invoke<byte>(nameof(Divide_ByteByte), A, B); }
        public double DistanceSquared2D(Vector2D v1, Vector2D v2) { return Invoke<double>(nameof(DistanceSquared2D), v1, v2); }
        public double Distance2D(Vector2D v1, Vector2D v2) { return Invoke<double>(nameof(Distance2D), v1, v2); }
        public double DegTan(double A) { return Invoke<double>(nameof(DegTan), A); }
        public double DegSin(double A) { return Invoke<double>(nameof(DegSin), A); }
        public double DegreesToRadians(double A) { return Invoke<double>(nameof(DegreesToRadians), A); }
        public double DegCos(double A) { return Invoke<double>(nameof(DegCos), A); }
        public double DegAtan2(double Y, double X) { return Invoke<double>(nameof(DegAtan2), Y, X); }
        public double DegAtan(double A) { return Invoke<double>(nameof(DegAtan), A); }
        public double DegAsin(double A) { return Invoke<double>(nameof(DegAsin), A); }
        public double DegAcos(double A) { return Invoke<double>(nameof(DegAcos), A); }
        public int DaysInYear(int Year) { return Invoke<int>(nameof(DaysInYear), Year); }
        public int DaysInMonth(int Year, int Month) { return Invoke<int>(nameof(DaysInMonth), Year, Month); }
        public DateTime DateTimeMinValue() { return Invoke<DateTime>(nameof(DateTimeMinValue)); }
        public DateTime DateTimeMaxValue() { return Invoke<DateTime>(nameof(DateTimeMaxValue)); }
        public bool DateTimeFromString(Object DateTimeString, DateTime Result) { return Invoke<bool>(nameof(DateTimeFromString), DateTimeString, Result); }
        public bool DateTimeFromIsoString(Object IsoString, DateTime Result) { return Invoke<bool>(nameof(DateTimeFromIsoString), IsoString, Result); }
        public double CrossProduct2D(Vector2D A, Vector2D B) { return Invoke<double>(nameof(CrossProduct2D), A, B); }
        public Vector Cross_VectorVector(Vector A, Vector B) { return Invoke<Vector>(nameof(Cross_VectorVector), A, B); }
        public Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length) { return Invoke<Vector>(nameof(CreateVectorFromYawPitch), Yaw, Pitch, Length); }
        public double Cos(double A) { return Invoke<double>(nameof(Cos), A); }
        public Transform ConvertTransformToRelative(Transform Transform, Transform ParentTransform) { return Invoke<Transform>(nameof(ConvertTransformToRelative), Transform, ParentTransform); }
        public Vector2D Conv_VectorToVector2D(Vector InVector) { return Invoke<Vector2D>(nameof(Conv_VectorToVector2D), InVector); }
        public Transform Conv_VectorToTransform(Vector InLocation) { return Invoke<Transform>(nameof(Conv_VectorToTransform), InLocation); }
        public Rotator Conv_VectorToRotator(Vector InVec) { return Invoke<Rotator>(nameof(Conv_VectorToRotator), InVec); }
        public Quat Conv_VectorToQuaternion(Vector InVec) { return Invoke<Quat>(nameof(Conv_VectorToQuaternion), InVec); }
        public LinearColor Conv_VectorToLinearColor(Vector InVec) { return Invoke<LinearColor>(nameof(Conv_VectorToLinearColor), InVec); }
        public Vector Conv_Vector4ToVector(Vector4 InVector4) { return Invoke<Vector>(nameof(Conv_Vector4ToVector), InVector4); }
        public Rotator Conv_Vector4ToRotator(Vector4 InVec) { return Invoke<Rotator>(nameof(Conv_Vector4ToRotator), InVec); }
        public Quat Conv_Vector4ToQuaternion(Vector4 InVec) { return Invoke<Quat>(nameof(Conv_Vector4ToQuaternion), InVec); }
        public Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z) { return Invoke<Vector>(nameof(Conv_Vector2DToVector), InVector2D, Z); }
        public IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D) { return Invoke<IntPoint>(nameof(Conv_Vector2DToIntPoint), InVector2D); }
        public Matrix Conv_TransformToMatrix(Transform Transform) { return Invoke<Matrix>(nameof(Conv_TransformToMatrix), Transform); }
        public Vector Conv_RotatorToVector(Rotator InRot) { return Invoke<Vector>(nameof(Conv_RotatorToVector), InRot); }
        public Transform Conv_RotatorToTransform(Rotator InRotator) { return Invoke<Transform>(nameof(Conv_RotatorToTransform), InRotator); }
        public Quat Conv_RotatorToQuaternion(Rotator InRot) { return Invoke<Quat>(nameof(Conv_RotatorToQuaternion), InRot); }
        public Transform Conv_MatrixToTransform(Matrix InMatrix) { return Invoke<Transform>(nameof(Conv_MatrixToTransform), InMatrix); }
        public Rotator Conv_MatrixToRotator(Matrix InMatrix) { return Invoke<Rotator>(nameof(Conv_MatrixToRotator), InMatrix); }
        public Vector Conv_LinearColorToVector(LinearColor InLinearColor) { return Invoke<Vector>(nameof(Conv_LinearColorToVector), InLinearColor); }
        public Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB) { return Invoke<Color>(nameof(Conv_LinearColorToColor), InLinearColor, InUseSRGB); }
        public Vector Conv_IntVectorToVector(IntVector InIntVector) { return Invoke<Vector>(nameof(Conv_IntVectorToVector), InIntVector); }
        public Vector Conv_IntToVector(int inInt) { return Invoke<Vector>(nameof(Conv_IntToVector), inInt); }
        public IntVector Conv_IntToIntVector(int inInt) { return Invoke<IntVector>(nameof(Conv_IntToIntVector), inInt); }
        public long Conv_IntToInt64(int inInt) { return Invoke<long>(nameof(Conv_IntToInt64), inInt); }
        public float Conv_IntToFloat(int inInt) { return Invoke<float>(nameof(Conv_IntToFloat), inInt); }
        public double Conv_IntToDouble(int inInt) { return Invoke<double>(nameof(Conv_IntToDouble), inInt); }
        public byte Conv_IntToByte(int inInt) { return Invoke<byte>(nameof(Conv_IntToByte), inInt); }
        public bool Conv_IntToBool(int inInt) { return Invoke<bool>(nameof(Conv_IntToBool), inInt); }
        public Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint) { return Invoke<Vector2D>(nameof(Conv_IntPointToVector2D), InIntPoint); }
        public int Conv_Int64ToInt(long inInt) { return Invoke<int>(nameof(Conv_Int64ToInt), inInt); }
        public double Conv_Int64ToDouble(long inInt) { return Invoke<double>(nameof(Conv_Int64ToDouble), inInt); }
        public byte Conv_Int64ToByte(long inInt) { return Invoke<byte>(nameof(Conv_Int64ToByte), inInt); }
        public Vector Conv_FloatToVector(float InFloat) { return Invoke<Vector>(nameof(Conv_FloatToVector), InFloat); }
        public LinearColor Conv_FloatToLinearColor(float InFloat) { return Invoke<LinearColor>(nameof(Conv_FloatToLinearColor), InFloat); }
        public double Conv_FloatToDouble(float InFloat) { return Invoke<double>(nameof(Conv_FloatToDouble), InFloat); }
        public Vector Conv_DoubleToVector(double InDouble) { return Invoke<Vector>(nameof(Conv_DoubleToVector), InDouble); }
        public LinearColor Conv_DoubleToLinearColor(double InDouble) { return Invoke<LinearColor>(nameof(Conv_DoubleToLinearColor), InDouble); }
        public long Conv_DoubleToInt64(double InDouble) { return Invoke<long>(nameof(Conv_DoubleToInt64), InDouble); }
        public float Conv_DoubleToFloat(double InDouble) { return Invoke<float>(nameof(Conv_DoubleToFloat), InDouble); }
        public LinearColor Conv_ColorToLinearColor(Color inColor) { return Invoke<LinearColor>(nameof(Conv_ColorToLinearColor), inColor); }
        public long Conv_ByteToInt64(byte InByte) { return Invoke<long>(nameof(Conv_ByteToInt64), InByte); }
        public int Conv_ByteToInt(byte InByte) { return Invoke<int>(nameof(Conv_ByteToInt), InByte); }
        public float Conv_ByteToFloat(byte InByte) { return Invoke<float>(nameof(Conv_ByteToFloat), InByte); }
        public double Conv_ByteToDouble(byte InByte) { return Invoke<double>(nameof(Conv_ByteToDouble), InByte); }
        public int Conv_BoolToInt(bool InBool) { return Invoke<int>(nameof(Conv_BoolToInt), InBool); }
        public float Conv_BoolToFloat(bool InBool) { return Invoke<float>(nameof(Conv_BoolToFloat), InBool); }
        public byte Conv_BoolToByte(bool InBool) { return Invoke<byte>(nameof(Conv_BoolToByte), InBool); }
        public Transform ComposeTransforms(Transform A, Transform B) { return Invoke<Transform>(nameof(ComposeTransforms), A, B); }
        public Rotator ComposeRotators(Rotator A, Rotator B) { return Invoke<Rotator>(nameof(ComposeRotators), A, B); }
        public bool ClassIsChildOf(Object TestClass, Object ParentClass) { return Invoke<bool>(nameof(ClassIsChildOf), TestClass, ParentClass); }
        public Vector ClampVectorSize(Vector A, double Min, double Max) { return Invoke<Vector>(nameof(ClampVectorSize), A, Min, Max); }
        public long ClampInt64(long Value, long Min, long Max) { return Invoke<long>(nameof(ClampInt64), Value, Min, Max); }
        public float ClampAxis(float Angle) { return Invoke<float>(nameof(ClampAxis), Angle); }
        public Vector2D ClampAxes2D(Vector2D A, double MinAxisVal, double MaxAxisVal) { return Invoke<Vector2D>(nameof(ClampAxes2D), A, MinAxisVal, MaxAxisVal); }
        public double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees) { return Invoke<double>(nameof(ClampAngle), AngleDegrees, MinAngleDegrees, MaxAngleDegrees); }
        public int Clamp(int Value, int Min, int Max) { return Invoke<int>(nameof(Clamp), Value, Min, Max); }
        public LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed) { return Invoke<LinearColor>(nameof(CInterpTo), Current, Target, DeltaTime, InterpSpeed); }
        public void BreakVector_NetQuantizeNormal(Vector_NetQuantizeNormal InVec, double X, double Y, double Z) { Invoke(nameof(BreakVector_NetQuantizeNormal), InVec, X, Y, Z); }
        public void BreakVector_NetQuantize100(Vector_NetQuantize100 InVec, double X, double Y, double Z) { Invoke(nameof(BreakVector_NetQuantize100), InVec, X, Y, Z); }
        public void BreakVector_NetQuantize10(Vector_NetQuantize10 InVec, double X, double Y, double Z) { Invoke(nameof(BreakVector_NetQuantize10), InVec, X, Y, Z); }
        public void BreakVector_NetQuantize(Vector_NetQuantize InVec, double X, double Y, double Z) { Invoke(nameof(BreakVector_NetQuantize), InVec, X, Y, Z); }
        public void BreakVector4(Vector4 InVec, double X, double Y, double Z, double W) { Invoke(nameof(BreakVector4), InVec, X, Y, Z, W); }
        public void BreakVector3f(Vector3f InVec, float X, float Y, float Z) { Invoke(nameof(BreakVector3f), InVec, X, Y, Z); }
        public void BreakVector2D(Vector2D InVec, double X, double Y) { Invoke(nameof(BreakVector2D), InVec, X, Y); }
        public void BreakVector(Vector InVec, double X, double Y, double Z) { Invoke(nameof(BreakVector), InVec, X, Y, Z); }
        public void BreakTransform(Transform InTransform, Vector Location, Rotator Rotation, Vector Scale) { Invoke(nameof(BreakTransform), InTransform, Location, Rotation, Scale); }
        public void BreakTimespan2(Timespan InTimespan, int Days, int Hours, int Minutes, int Seconds, int FractionNano) { Invoke(nameof(BreakTimespan2), InTimespan, Days, Hours, Minutes, Seconds, FractionNano); }
        public void BreakTimespan(Timespan InTimespan, int Days, int Hours, int Minutes, int Seconds, int Milliseconds) { Invoke(nameof(BreakTimespan), InTimespan, Days, Hours, Minutes, Seconds, Milliseconds); }
        public void BreakRotIntoAxes(Rotator InRot, Vector X, Vector Y, Vector Z) { Invoke(nameof(BreakRotIntoAxes), InRot, X, Y, Z); }
        public void BreakRotator(Rotator InRot, float Roll, float Pitch, float Yaw) { Invoke(nameof(BreakRotator), InRot, Roll, Pitch, Yaw); }
        public void BreakRandomStream(RandomStream InRandomStream, int InitialSeed) { Invoke(nameof(BreakRandomStream), InRandomStream, InitialSeed); }
        public void BreakQuat(Quat InQuat, float X, float Y, float Z, float W) { Invoke(nameof(BreakQuat), InQuat, X, Y, Z, W); }
        public void BreakQualifiedFrameTime(QualifiedFrameTime InFrameTime, FrameNumber Frame, FrameRate FrameRate, float SubFrame) { Invoke(nameof(BreakQualifiedFrameTime), InFrameTime, Frame, FrameRate, SubFrame); }
        public void BreakFrameRate(FrameRate InFrameRate, int Numerator, int Denominator) { Invoke(nameof(BreakFrameRate), InFrameRate, Numerator, Denominator); }
        public void BreakDateTime(DateTime InDateTime, int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond) { Invoke(nameof(BreakDateTime), InDateTime, Year, Month, Day, Hour, Minute, Second, Millisecond); }
        public void BreakColor(LinearColor inColor, float R, float G, float B, float A) { Invoke(nameof(BreakColor), inColor, R, G, B, A); }
        public void BreakBoxSphereBounds(BoxSphereBounds InBoxSphereBounds, Vector Origin, Vector BoxExtent, float SphereRadius) { Invoke(nameof(BreakBoxSphereBounds), InBoxSphereBounds, Origin, BoxExtent, SphereRadius); }
        public bool BooleanXOR(bool A, bool B) { return Invoke<bool>(nameof(BooleanXOR), A, B); }
        public bool BooleanOR(bool A, bool B) { return Invoke<bool>(nameof(BooleanOR), A, B); }
        public bool BooleanNOR(bool A, bool B) { return Invoke<bool>(nameof(BooleanNOR), A, B); }
        public bool BooleanNAND(bool A, bool B) { return Invoke<bool>(nameof(BooleanNAND), A, B); }
        public bool BooleanAND(bool A, bool B) { return Invoke<bool>(nameof(BooleanAND), A, B); }
        public byte BMin(byte A, byte B) { return Invoke<byte>(nameof(BMin), A, B); }
        public byte BMax(byte A, byte B) { return Invoke<byte>(nameof(BMax), A, B); }
        public void AverageOfIntArray(Array<int> IntArray, float AverageValue) { Invoke(nameof(AverageOfIntArray), IntArray, AverageValue); }
        public double Atan2(double Y, double X) { return Invoke<double>(nameof(Atan2), Y, X); }
        public double Atan(double A) { return Invoke<double>(nameof(Atan), A); }
        public double Asin(double A) { return Invoke<double>(nameof(Asin), A); }
        public int And_IntInt(int A, int B) { return Invoke<int>(nameof(And_IntInt), A, B); }
        public long And_Int64Int64(long A, long B) { return Invoke<long>(nameof(And_Int64Int64), A, B); }
        public Vector Add_VectorVector(Vector A, Vector B) { return Invoke<Vector>(nameof(Add_VectorVector), A, B); }
        public Vector Add_VectorInt(Vector A, int B) { return Invoke<Vector>(nameof(Add_VectorInt), A, B); }
        public Vector Add_VectorFloat(Vector A, double B) { return Invoke<Vector>(nameof(Add_VectorFloat), A, B); }
        public Vector4 Add_Vector4Vector4(Vector4 A, Vector4 B) { return Invoke<Vector4>(nameof(Add_Vector4Vector4), A, B); }
        public Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B) { return Invoke<Vector2D>(nameof(Add_Vector2DVector2D), A, B); }
        public Vector2D Add_Vector2DFloat(Vector2D A, double B) { return Invoke<Vector2D>(nameof(Add_Vector2DFloat), A, B); }
        public Timespan Add_TimespanTimespan(Timespan A, Timespan B) { return Invoke<Timespan>(nameof(Add_TimespanTimespan), A, B); }
        public Quat Add_QuatQuat(Quat A, Quat B) { return Invoke<Quat>(nameof(Add_QuatQuat), A, B); }
        public Matrix Add_MatrixMatrix(Matrix A, Matrix B) { return Invoke<Matrix>(nameof(Add_MatrixMatrix), A, B); }
        public LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B) { return Invoke<LinearColor>(nameof(Add_LinearColorLinearColor), A, B); }
        public IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B) { return Invoke<IntPoint>(nameof(Add_IntPointIntPoint), A, B); }
        public IntPoint Add_IntPointInt(IntPoint A, int B) { return Invoke<IntPoint>(nameof(Add_IntPointInt), A, B); }
        public int Add_IntInt(int A, int B) { return Invoke<int>(nameof(Add_IntInt), A, B); }
        public long Add_Int64Int64(long A, long B) { return Invoke<long>(nameof(Add_Int64Int64), A, B); }
        public double Add_DoubleDouble(double A, double B) { return Invoke<double>(nameof(Add_DoubleDouble), A, B); }
        public DateTime Add_DateTimeTimespan(DateTime A, Timespan B) { return Invoke<DateTime>(nameof(Add_DateTimeTimespan), A, B); }
        public DateTime Add_DateTimeDateTime(DateTime A, DateTime B) { return Invoke<DateTime>(nameof(Add_DateTimeDateTime), A, B); }
        public byte Add_ByteByte(byte A, byte B) { return Invoke<byte>(nameof(Add_ByteByte), A, B); }
        public double Acos(double A) { return Invoke<double>(nameof(Acos), A); }
        public long Abs_Int64(long A) { return Invoke<long>(nameof(Abs_Int64), A); }
        public int Abs_Int(int A) { return Invoke<int>(nameof(Abs_Int), A); }
        public double Abs(double A) { return Invoke<double>(nameof(Abs), A); }
    }
    public class KismetNodeHelperLibrary : BlueprintFunctionLibrary
    {
        public KismetNodeHelperLibrary(nint addr) : base(addr) { }
        public void MarkBit(int Data, int Index) { Invoke(nameof(MarkBit), Data, Index); }
        public bool HasUnmarkedBit(int Data, int NumBits) { return Invoke<bool>(nameof(HasUnmarkedBit), Data, NumBits); }
        public bool HasMarkedBit(int Data, int NumBits) { return Invoke<bool>(nameof(HasMarkedBit), Data, NumBits); }
        public byte GetValidValue(Enum Enum, byte EnumeratorValue) { return Invoke<byte>(nameof(GetValidValue), Enum, EnumeratorValue); }
        public int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom) { return Invoke<int>(nameof(GetUnmarkedBit), Data, StartIdx, NumBits, bRandom); }
        public int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits) { return Invoke<int>(nameof(GetRandomUnmarkedBit), Data, StartIdx, NumBits); }
        public int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits) { return Invoke<int>(nameof(GetFirstUnmarkedBit), Data, StartIdx, NumBits); }
        public byte GetEnumeratorValueFromIndex(Enum Enum, byte EnumeratorIndex) { return Invoke<byte>(nameof(GetEnumeratorValueFromIndex), Enum, EnumeratorIndex); }
        public Object GetEnumeratorUserFriendlyName(Enum Enum, byte EnumeratorValue) { return Invoke<Object>(nameof(GetEnumeratorUserFriendlyName), Enum, EnumeratorValue); }
        public Object GetEnumeratorName(Enum Enum, byte EnumeratorValue) { return Invoke<Object>(nameof(GetEnumeratorName), Enum, EnumeratorValue); }
        public void ClearBit(int Data, int Index) { Invoke(nameof(ClearBit), Data, Index); }
        public void ClearAllBits(int Data) { Invoke(nameof(ClearAllBits), Data); }
        public bool BitIsMarked(int Data, int Index) { return Invoke<bool>(nameof(BitIsMarked), Data, Index); }
    }
    public class KismetRenderingLibrary : BlueprintFunctionLibrary
    {
        public KismetRenderingLibrary(nint addr) : base(addr) { }
        public void SetCastInsetShadowForAllAttachments(PrimitiveComponent PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup) { Invoke(nameof(SetCastInsetShadowForAllAttachments), PrimitiveComponent, bCastInsetShadow, bLightAttachmentsAsGroup); }
        public void ResizeRenderTarget2D(TextureRenderTarget2D TextureRenderTarget, int Width, int Height) { Invoke(nameof(ResizeRenderTarget2D), TextureRenderTarget, Width, Height); }
        public Texture2D RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D RenderTarget, Object Name, byte CompressionSettings, byte MipSettings) { return Invoke<Texture2D>(nameof(RenderTargetCreateStaticTexture2DEditorOnly), RenderTarget, Name, CompressionSettings, MipSettings); }
        public void ReleaseRenderTarget2D(TextureRenderTarget2D TextureRenderTarget) { Invoke(nameof(ReleaseRenderTarget2D), TextureRenderTarget); }
        public Color ReadRenderTargetUV(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, float U, float V) { return Invoke<Color>(nameof(ReadRenderTargetUV), WorldContextObject, TextureRenderTarget, U, V); }
        public Array<LinearColor> ReadRenderTargetRawUVArea(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, Box2D Area, bool bNormalize) { return Invoke<Array<LinearColor>>(nameof(ReadRenderTargetRawUVArea), WorldContextObject, TextureRenderTarget, Area, bNormalize); }
        public LinearColor ReadRenderTargetRawUV(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, float U, float V, bool bNormalize) { return Invoke<LinearColor>(nameof(ReadRenderTargetRawUV), WorldContextObject, TextureRenderTarget, U, V, bNormalize); }
        public Array<LinearColor> ReadRenderTargetRawPixelArea(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, int MinX, int MinY, int MaxX, int MaxY, bool bNormalize) { return Invoke<Array<LinearColor>>(nameof(ReadRenderTargetRawPixelArea), WorldContextObject, TextureRenderTarget, MinX, MinY, MaxX, MaxY, bNormalize); }
        public LinearColor ReadRenderTargetRawPixel(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, int X, int Y, bool bNormalize) { return Invoke<LinearColor>(nameof(ReadRenderTargetRawPixel), WorldContextObject, TextureRenderTarget, X, Y, bNormalize); }
        public bool ReadRenderTargetRaw(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, Array<LinearColor> OutLinearSamples, bool bNormalize) { return Invoke<bool>(nameof(ReadRenderTargetRaw), WorldContextObject, TextureRenderTarget, OutLinearSamples, bNormalize); }
        public Color ReadRenderTargetPixel(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, int X, int Y) { return Invoke<Color>(nameof(ReadRenderTargetPixel), WorldContextObject, TextureRenderTarget, X, Y); }
        public bool ReadRenderTarget(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, Array<Color> OutSamples, bool bNormalize) { return Invoke<bool>(nameof(ReadRenderTarget), WorldContextObject, TextureRenderTarget, OutSamples, bNormalize); }
        public SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3) { return Invoke<SkelMeshSkinWeightInfo>(nameof(MakeSkinWeightInfo), Bone0, Weight0, Bone1, Weight1, Bone2, Weight2, Bone3, Weight3); }
        public Texture2D ImportFileAsTexture2D(Object WorldContextObject, Object Filename) { return Invoke<Texture2D>(nameof(ImportFileAsTexture2D), WorldContextObject, Filename); }
        public Texture2D ImportBufferAsTexture2D(Object WorldContextObject, Array<byte> Buffer) { return Invoke<Texture2D>(nameof(ImportBufferAsTexture2D), WorldContextObject, Buffer); }
        public void ExportTexture2D(Object WorldContextObject, Texture2D Texture, Object FilePath, Object Filename) { Invoke(nameof(ExportTexture2D), WorldContextObject, Texture, FilePath, Filename); }
        public void ExportRenderTarget(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, Object FilePath, Object Filename) { Invoke(nameof(ExportRenderTarget), WorldContextObject, TextureRenderTarget, FilePath, Filename); }
        public void EndDrawCanvasToRenderTarget(Object WorldContextObject, DrawToRenderTargetContext Context) { Invoke(nameof(EndDrawCanvasToRenderTarget), WorldContextObject, Context); }
        public void DrawMaterialToRenderTarget(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, MaterialInterface Material) { Invoke(nameof(DrawMaterialToRenderTarget), WorldContextObject, TextureRenderTarget, Material); }
        public TextureRenderTargetVolume CreateRenderTargetVolume(Object WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps) { return Invoke<TextureRenderTargetVolume>(nameof(CreateRenderTargetVolume), WorldContextObject, Width, Height, Depth, Format, ClearColor, bAutoGenerateMipMaps); }
        public TextureRenderTarget2DArray CreateRenderTarget2DArray(Object WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps) { return Invoke<TextureRenderTarget2DArray>(nameof(CreateRenderTarget2DArray), WorldContextObject, Width, Height, Slices, Format, ClearColor, bAutoGenerateMipMaps); }
        public TextureRenderTarget2D CreateRenderTarget2D(Object WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps) { return Invoke<TextureRenderTarget2D>(nameof(CreateRenderTarget2D), WorldContextObject, Width, Height, Format, ClearColor, bAutoGenerateMipMaps); }
        public void ConvertRenderTargetToTexture2DEditorOnly(Object WorldContextObject, TextureRenderTarget2D RenderTarget, Texture2D Texture) { Invoke(nameof(ConvertRenderTargetToTexture2DEditorOnly), WorldContextObject, RenderTarget, Texture); }
        public void ClearRenderTarget2D(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, LinearColor ClearColor) { Invoke(nameof(ClearRenderTarget2D), WorldContextObject, TextureRenderTarget, ClearColor); }
        public Matrix CalculateProjectionMatrix(MinimalViewInfo MinimalViewInfo) { return Invoke<Matrix>(nameof(CalculateProjectionMatrix), MinimalViewInfo); }
        public void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3) { Invoke(nameof(BreakSkinWeightInfo), InWeight, Bone0, Weight0, Bone1, Weight1, Bone2, Weight2, Bone3, Weight3); }
        public void BeginDrawCanvasToRenderTarget(Object WorldContextObject, TextureRenderTarget2D TextureRenderTarget, Canvas Canvas, Vector2D Size, DrawToRenderTargetContext Context) { Invoke(nameof(BeginDrawCanvasToRenderTarget), WorldContextObject, TextureRenderTarget, Canvas, Size, Context); }
    }
    public class KismetStringLibrary : BlueprintFunctionLibrary
    {
        public KismetStringLibrary(nint addr) : base(addr) { }
        public Object TrimTrailing(Object SourceString) { return Invoke<Object>(nameof(TrimTrailing), SourceString); }
        public Object Trim(Object SourceString) { return Invoke<Object>(nameof(Trim), SourceString); }
        public Object ToUpper(Object SourceString) { return Invoke<Object>(nameof(ToUpper), SourceString); }
        public Object ToLower(Object SourceString) { return Invoke<Object>(nameof(ToLower), SourceString); }
        public Object TimeSecondsToString(float InSeconds) { return Invoke<Object>(nameof(TimeSecondsToString), InSeconds); }
        public bool StartsWith(Object SourceString, Object InPrefix, byte SearchCase) { return Invoke<bool>(nameof(StartsWith), SourceString, InPrefix, SearchCase); }
        public bool Split(Object SourceString, Object InStr, Object LeftS, Object RightS, byte SearchCase, byte SearchDir) { return Invoke<bool>(nameof(Split), SourceString, InStr, LeftS, RightS, SearchCase, SearchDir); }
        public Object RightPad(Object SourceString, int ChCount) { return Invoke<Object>(nameof(RightPad), SourceString, ChCount); }
        public Object RightChop(Object SourceString, int Count) { return Invoke<Object>(nameof(RightChop), SourceString, Count); }
        public Object Right(Object SourceString, int Count) { return Invoke<Object>(nameof(Right), SourceString, Count); }
        public Object Reverse(Object SourceString) { return Invoke<Object>(nameof(Reverse), SourceString); }
        public int ReplaceInline(Object SourceString, Object SearchText, Object ReplacementText, byte SearchCase) { return Invoke<int>(nameof(ReplaceInline), SourceString, SearchText, ReplacementText, SearchCase); }
        public Object Replace(Object SourceString, Object From, Object To, byte SearchCase) { return Invoke<Object>(nameof(Replace), SourceString, From, To, SearchCase); }
        public Array<Object> ParseIntoArray(Object SourceString, Object Delimiter, bool CullEmptyStrings) { return Invoke<Array<Object>>(nameof(ParseIntoArray), SourceString, Delimiter, CullEmptyStrings); }
        public bool NotEqual_StrStr(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_StrStr), A, B); }
        public bool NotEqual_StriStri(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_StriStri), A, B); }
        public Object Mid(Object SourceString, int Start, int Count) { return Invoke<Object>(nameof(Mid), SourceString, Start, Count); }
        public bool MatchesWildcard(Object SourceString, Object Wildcard, byte SearchCase) { return Invoke<bool>(nameof(MatchesWildcard), SourceString, Wildcard, SearchCase); }
        public int Len(Object S) { return Invoke<int>(nameof(Len), S); }
        public Object LeftPad(Object SourceString, int ChCount) { return Invoke<Object>(nameof(LeftPad), SourceString, ChCount); }
        public Object LeftChop(Object SourceString, int Count) { return Invoke<Object>(nameof(LeftChop), SourceString, Count); }
        public Object Left(Object SourceString, int Count) { return Invoke<Object>(nameof(Left), SourceString, Count); }
        public Object JoinStringArray(Array<Object> SourceArray, Object Separator) { return Invoke<Object>(nameof(JoinStringArray), SourceArray, Separator); }
        public bool IsNumeric(Object SourceString) { return Invoke<bool>(nameof(IsNumeric), SourceString); }
        public bool IsEmpty(Object InString) { return Invoke<bool>(nameof(IsEmpty), InString); }
        public Object GetSubstring(Object SourceString, int StartIndex, int Length) { return Invoke<Object>(nameof(GetSubstring), SourceString, StartIndex, Length); }
        public int GetCharacterAsNumber(Object SourceString, int Index) { return Invoke<int>(nameof(GetCharacterAsNumber), SourceString, Index); }
        public Array<Object> GetCharacterArrayFromString(Object SourceString) { return Invoke<Array<Object>>(nameof(GetCharacterArrayFromString), SourceString); }
        public int FindSubstring(Object SearchIn, Object Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition) { return Invoke<int>(nameof(FindSubstring), SearchIn, Substring, bUseCase, bSearchFromEnd, StartPosition); }
        public bool EqualEqual_StrStr(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_StrStr), A, B); }
        public bool EqualEqual_StriStri(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_StriStri), A, B); }
        public bool EndsWith(Object SourceString, Object InSuffix, byte SearchCase) { return Invoke<bool>(nameof(EndsWith), SourceString, InSuffix, SearchCase); }
        public int CullArray(Object SourceString, Array<Object> inArray) { return Invoke<int>(nameof(CullArray), SourceString, inArray); }
        public Object Conv_VectorToString(Vector InVec) { return Invoke<Object>(nameof(Conv_VectorToString), InVec); }
        public Object Conv_Vector3fToString(Vector3f InVec) { return Invoke<Object>(nameof(Conv_Vector3fToString), InVec); }
        public Object Conv_Vector2dToString(Vector2D InVec) { return Invoke<Object>(nameof(Conv_Vector2dToString), InVec); }
        public Object Conv_TransformToString(Transform InTrans) { return Invoke<Object>(nameof(Conv_TransformToString), InTrans); }
        public void Conv_StringToVector3f(Object InString, Vector3f OutConvertedVector, bool OutIsValid) { Invoke(nameof(Conv_StringToVector3f), InString, OutConvertedVector, OutIsValid); }
        public void Conv_StringToVector2D(Object InString, Vector2D OutConvertedVector2D, bool OutIsValid) { Invoke(nameof(Conv_StringToVector2D), InString, OutConvertedVector2D, OutIsValid); }
        public void Conv_StringToVector(Object InString, Vector OutConvertedVector, bool OutIsValid) { Invoke(nameof(Conv_StringToVector), InString, OutConvertedVector, OutIsValid); }
        public void Conv_StringToRotator(Object InString, Rotator OutConvertedRotator, bool OutIsValid) { Invoke(nameof(Conv_StringToRotator), InString, OutConvertedRotator, OutIsValid); }
        public Object Conv_StringToName(Object InString) { return Invoke<Object>(nameof(Conv_StringToName), InString); }
        public long Conv_StringToInt64(Object InString) { return Invoke<long>(nameof(Conv_StringToInt64), InString); }
        public int Conv_StringToInt(Object InString) { return Invoke<int>(nameof(Conv_StringToInt), InString); }
        public double Conv_StringToDouble(Object InString) { return Invoke<double>(nameof(Conv_StringToDouble), InString); }
        public void Conv_StringToColor(Object InString, LinearColor OutConvertedColor, bool OutIsValid) { Invoke(nameof(Conv_StringToColor), InString, OutConvertedColor, OutIsValid); }
        public Object Conv_RotatorToString(Rotator InRot) { return Invoke<Object>(nameof(Conv_RotatorToString), InRot); }
        public Object Conv_PlatformUserIdToString(PlatformUserId InPlatformUserId) { return Invoke<Object>(nameof(Conv_PlatformUserIdToString), InPlatformUserId); }
        public Object Conv_ObjectToString(Object InObj) { return Invoke<Object>(nameof(Conv_ObjectToString), InObj); }
        public Object Conv_NameToString(Object InName) { return Invoke<Object>(nameof(Conv_NameToString), InName); }
        public Object Conv_MatrixToString(Matrix InMatrix) { return Invoke<Object>(nameof(Conv_MatrixToString), InMatrix); }
        public Object Conv_IntVectorToString(IntVector InIntVec) { return Invoke<Object>(nameof(Conv_IntVectorToString), InIntVec); }
        public Object Conv_IntToString(int inInt) { return Invoke<Object>(nameof(Conv_IntToString), inInt); }
        public Object Conv_IntPointToString(IntPoint InIntPoint) { return Invoke<Object>(nameof(Conv_IntPointToString), InIntPoint); }
        public Object Conv_Int64ToString(long inInt) { return Invoke<Object>(nameof(Conv_Int64ToString), inInt); }
        public Object Conv_InputDeviceIdToString(InputDeviceId InDeviceId) { return Invoke<Object>(nameof(Conv_InputDeviceIdToString), InDeviceId); }
        public Object Conv_DoubleToString(double InDouble) { return Invoke<Object>(nameof(Conv_DoubleToString), InDouble); }
        public Object Conv_ColorToString(LinearColor inColor) { return Invoke<Object>(nameof(Conv_ColorToString), inColor); }
        public Object Conv_ByteToString(byte InByte) { return Invoke<Object>(nameof(Conv_ByteToString), InByte); }
        public Object Conv_BoolToString(bool InBool) { return Invoke<Object>(nameof(Conv_BoolToString), InBool); }
        public bool Contains(Object SearchIn, Object Substring, bool bUseCase, bool bSearchFromEnd) { return Invoke<bool>(nameof(Contains), SearchIn, Substring, bUseCase, bSearchFromEnd); }
        public Object Concat_StrStr(Object A, Object B) { return Invoke<Object>(nameof(Concat_StrStr), A, B); }
        public Object BuildString_Vector2d(Object AppendTo, Object Prefix, Vector2D InVector2D, Object Suffix) { return Invoke<Object>(nameof(BuildString_Vector2d), AppendTo, Prefix, InVector2D, Suffix); }
        public Object BuildString_Vector(Object AppendTo, Object Prefix, Vector InVector, Object Suffix) { return Invoke<Object>(nameof(BuildString_Vector), AppendTo, Prefix, InVector, Suffix); }
        public Object BuildString_Rotator(Object AppendTo, Object Prefix, Rotator InRot, Object Suffix) { return Invoke<Object>(nameof(BuildString_Rotator), AppendTo, Prefix, InRot, Suffix); }
        public Object BuildString_Object(Object AppendTo, Object Prefix, Object InObj, Object Suffix) { return Invoke<Object>(nameof(BuildString_Object), AppendTo, Prefix, InObj, Suffix); }
        public Object BuildString_Name(Object AppendTo, Object Prefix, Object InName, Object Suffix) { return Invoke<Object>(nameof(BuildString_Name), AppendTo, Prefix, InName, Suffix); }
        public Object BuildString_IntVector(Object AppendTo, Object Prefix, IntVector InIntVector, Object Suffix) { return Invoke<Object>(nameof(BuildString_IntVector), AppendTo, Prefix, InIntVector, Suffix); }
        public Object BuildString_Int(Object AppendTo, Object Prefix, int inInt, Object Suffix) { return Invoke<Object>(nameof(BuildString_Int), AppendTo, Prefix, inInt, Suffix); }
        public Object BuildString_Double(Object AppendTo, Object Prefix, double InDouble, Object Suffix) { return Invoke<Object>(nameof(BuildString_Double), AppendTo, Prefix, InDouble, Suffix); }
        public Object BuildString_Color(Object AppendTo, Object Prefix, LinearColor inColor, Object Suffix) { return Invoke<Object>(nameof(BuildString_Color), AppendTo, Prefix, inColor, Suffix); }
        public Object BuildString_Bool(Object AppendTo, Object Prefix, bool InBool, Object Suffix) { return Invoke<Object>(nameof(BuildString_Bool), AppendTo, Prefix, InBool, Suffix); }
    }
    public class KismetStringTableLibrary : BlueprintFunctionLibrary
    {
        public KismetStringTableLibrary(nint addr) : base(addr) { }
        public bool IsRegisteredTableId(Object TableId) { return Invoke<bool>(nameof(IsRegisteredTableId), TableId); }
        public bool IsRegisteredTableEntry(Object TableId, Object Key) { return Invoke<bool>(nameof(IsRegisteredTableEntry), TableId, Key); }
        public Object GetTableNamespace(Object TableId) { return Invoke<Object>(nameof(GetTableNamespace), TableId); }
        public Object GetTableEntrySourceString(Object TableId, Object Key) { return Invoke<Object>(nameof(GetTableEntrySourceString), TableId, Key); }
        public Object GetTableEntryMetaData(Object TableId, Object Key, Object MetaDataId) { return Invoke<Object>(nameof(GetTableEntryMetaData), TableId, Key, MetaDataId); }
        public Array<Object> GetRegisteredStringTables() { return Invoke<Array<Object>>(nameof(GetRegisteredStringTables)); }
        public Array<Object> GetMetaDataIdsFromStringTableEntry(Object TableId, Object Key) { return Invoke<Array<Object>>(nameof(GetMetaDataIdsFromStringTableEntry), TableId, Key); }
        public Array<Object> GetKeysFromStringTable(Object TableId) { return Invoke<Array<Object>>(nameof(GetKeysFromStringTable), TableId); }
    }
    public class KismetSystemLibrary : BlueprintFunctionLibrary
    {
        public KismetSystemLibrary(nint addr) : base(addr) { }
        public void UnregisterForRemoteNotifications() { Invoke(nameof(UnregisterForRemoteNotifications)); }
        public void UnloadPrimaryAssetList(Array<PrimaryAssetId> PrimaryAssetIdList) { Invoke(nameof(UnloadPrimaryAssetList), PrimaryAssetIdList); }
        public void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId) { Invoke(nameof(UnloadPrimaryAsset), PrimaryAssetId); }
        public void TransactObject(Object Object) { Invoke(nameof(TransactObject), Object); }
        public void StackTrace() { Invoke(nameof(StackTrace)); }
        public bool SphereTraceSingleForObjects(Object WorldContextObject, Vector Start, Vector End, float Radius, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceSingleForObjects), WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereTraceSingleByProfile(Object WorldContextObject, Vector Start, Vector End, float Radius, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceSingleByProfile), WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereTraceSingle(Object WorldContextObject, Vector Start, Vector End, float Radius, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceSingle), WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereTraceMultiForObjects(Object WorldContextObject, Vector Start, Vector End, float Radius, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceMultiForObjects), WorldContextObject, Start, End, Radius, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereTraceMultiByProfile(Object WorldContextObject, Vector Start, Vector End, float Radius, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceMultiByProfile), WorldContextObject, Start, End, Radius, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereTraceMulti(Object WorldContextObject, Vector Start, Vector End, float Radius, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(SphereTraceMulti), WorldContextObject, Start, End, Radius, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool SphereOverlapComponents(Object WorldContextObject, Vector SpherePos, float SphereRadius, Array<byte> ObjectTypes, Object ComponentClassFilter, Array<Actor> ActorsToIgnore, Array<PrimitiveComponent> OutComponents) { return Invoke<bool>(nameof(SphereOverlapComponents), WorldContextObject, SpherePos, SphereRadius, ObjectTypes, ComponentClassFilter, ActorsToIgnore, OutComponents); }
        public bool SphereOverlapActors(Object WorldContextObject, Vector SpherePos, float SphereRadius, Array<byte> ObjectTypes, Object ActorClassFilter, Array<Actor> ActorsToIgnore, Array<Actor> OutActors) { return Invoke<bool>(nameof(SphereOverlapActors), WorldContextObject, SpherePos, SphereRadius, ObjectTypes, ActorClassFilter, ActorsToIgnore, OutActors); }
        public void SnapshotObject(Object Object) { Invoke(nameof(SnapshotObject), Object); }
        public void ShowPlatformSpecificLeaderboardScreen(Object CategoryName) { Invoke(nameof(ShowPlatformSpecificLeaderboardScreen), CategoryName); }
        public void ShowPlatformSpecificAchievementsScreen(PlayerController SpecificPlayer) { Invoke(nameof(ShowPlatformSpecificAchievementsScreen), SpecificPlayer); }
        public void ShowInterstitialAd() { Invoke(nameof(ShowInterstitialAd)); }
        public void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen) { Invoke(nameof(ShowAdBanner), AdIdIndex, bShowOnBottomOfScreen); }
        public void SetWindowTitle(Object Title) { Invoke(nameof(SetWindowTitle), Title); }
        public void SetVolumeButtonsHandledBySystem(bool bEnabled) { Invoke(nameof(SetVolumeButtonsHandledBySystem), bEnabled); }
        public void SetVectorPropertyByName(Object Object, Object PropertyName, Vector Value) { Invoke(nameof(SetVectorPropertyByName), Object, PropertyName, Value); }
        public void SetVector3fPropertyByName(Object Object, Object PropertyName, Vector3f Value) { Invoke(nameof(SetVector3fPropertyByName), Object, PropertyName, Value); }
        public void SetUserActivity(UserActivity UserActivity) { Invoke(nameof(SetUserActivity), UserActivity); }
        public void SetTransformPropertyByName(Object Object, Object PropertyName, Transform Value) { Invoke(nameof(SetTransformPropertyByName), Object, PropertyName, Value); }
        public void SetTextPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetTextPropertyByName), Object, PropertyName, Value); }
        public void SetSuppressViewportTransitionMessage(Object WorldContextObject, bool bState) { Invoke(nameof(SetSuppressViewportTransitionMessage), WorldContextObject, bState); }
        public void SetStructurePropertyByName(Object Object, Object PropertyName, GenericStruct Value) { Invoke(nameof(SetStructurePropertyByName), Object, PropertyName, Value); }
        public void SetStringPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetStringPropertyByName), Object, PropertyName, Value); }
        public void SetSoftObjectPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetSoftObjectPropertyByName), Object, PropertyName, Value); }
        public void SetSoftClassPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetSoftClassPropertyByName), Object, PropertyName, Value); }
        public void SetRotatorPropertyByName(Object Object, Object PropertyName, Rotator Value) { Invoke(nameof(SetRotatorPropertyByName), Object, PropertyName, Value); }
        public void SetObjectPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetObjectPropertyByName), Object, PropertyName, Value); }
        public void SetNamePropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetNamePropertyByName), Object, PropertyName, Value); }
        public void SetLinearColorPropertyByName(Object Object, Object PropertyName, LinearColor Value) { Invoke(nameof(SetLinearColorPropertyByName), Object, PropertyName, Value); }
        public void SetIntPropertyByName(Object Object, Object PropertyName, int Value) { Invoke(nameof(SetIntPropertyByName), Object, PropertyName, Value); }
        public void SetInterfacePropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetInterfacePropertyByName), Object, PropertyName, Value); }
        public void SetInt64PropertyByName(Object Object, Object PropertyName, long Value) { Invoke(nameof(SetInt64PropertyByName), Object, PropertyName, Value); }
        public void SetGamepadsBlockDeviceFeedback(bool bBlock) { Invoke(nameof(SetGamepadsBlockDeviceFeedback), bBlock); }
        public void SetFieldPathPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetFieldPathPropertyByName), Object, PropertyName, Value); }
        public void SetDoublePropertyByName(Object Object, Object PropertyName, double Value) { Invoke(nameof(SetDoublePropertyByName), Object, PropertyName, Value); }
        public void SetColorPropertyByName(Object Object, Object PropertyName, Color Value) { Invoke(nameof(SetColorPropertyByName), Object, PropertyName, Value); }
        public void SetCollisionProfileNameProperty(Object Object, Object PropertyName, CollisionProfileName Value) { Invoke(nameof(SetCollisionProfileNameProperty), Object, PropertyName, Value); }
        public void SetClassPropertyByName(Object Object, Object PropertyName, Object Value) { Invoke(nameof(SetClassPropertyByName), Object, PropertyName, Value); }
        public void SetBytePropertyByName(Object Object, Object PropertyName, byte Value) { Invoke(nameof(SetBytePropertyByName), Object, PropertyName, Value); }
        public void SetBoolPropertyByName(Object Object, Object PropertyName, bool Value) { Invoke(nameof(SetBoolPropertyByName), Object, PropertyName, Value); }
        public void RetriggerableDelay(Object WorldContextObject, float Duration, LatentActionInfo LatentInfo) { Invoke(nameof(RetriggerableDelay), WorldContextObject, Duration, LatentInfo); }
        public void ResetGamepadAssignmentToController(int ControllerId) { Invoke(nameof(ResetGamepadAssignmentToController), ControllerId); }
        public void ResetGamepadAssignments() { Invoke(nameof(ResetGamepadAssignments)); }
        public void RegisterForRemoteNotifications() { Invoke(nameof(RegisterForRemoteNotifications)); }
        public void QuitGame(Object WorldContextObject, PlayerController SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions) { Invoke(nameof(QuitGame), WorldContextObject, SpecificPlayer, QuitPreference, bIgnorePlatformRestrictions); }
        public void PrintWarning(Object InString) { Invoke(nameof(PrintWarning), InString); }
        public void PrintText(Object WorldContextObject, Object InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, Object Key) { Invoke(nameof(PrintText), WorldContextObject, InText, bPrintToScreen, bPrintToLog, TextColor, Duration, Key); }
        public void PrintString(Object WorldContextObject, Object InString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, Object Key) { Invoke(nameof(PrintString), WorldContextObject, InString, bPrintToScreen, bPrintToLog, TextColor, Duration, Key); }
        public bool ParseParamValue(Object InString, Object InParam, Object OutValue) { return Invoke<bool>(nameof(ParseParamValue), InString, InParam, OutValue); }
        public bool ParseParam(Object InString, Object InParam) { return Invoke<bool>(nameof(ParseParam), InString, InParam); }
        public void ParseCommandLine(Object InCmdLine, Array<Object> OutTokens, Array<Object> OutSwitches, Object OutParams) { Invoke(nameof(ParseCommandLine), InCmdLine, OutTokens, OutSwitches, OutParams); }
        public void OnAssetLoaded__DelegateSignature(Object Loaded) { Invoke(nameof(OnAssetLoaded__DelegateSignature), Loaded); }
        public void OnAssetClassLoaded__DelegateSignature(Object Loaded) { Invoke(nameof(OnAssetClassLoaded__DelegateSignature), Loaded); }
        public bool NotEqual_SoftObjectReference(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_SoftObjectReference), A, B); }
        public bool NotEqual_SoftClassReference(Object A, Object B) { return Invoke<bool>(nameof(NotEqual_SoftClassReference), A, B); }
        public bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B) { return Invoke<bool>(nameof(NotEqual_PrimaryAssetType), A, B); }
        public bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B) { return Invoke<bool>(nameof(NotEqual_PrimaryAssetId), A, B); }
        public Object NormalizeFilename(Object InFilename) { return Invoke<Object>(nameof(NormalizeFilename), InFilename); }
        public void MoveComponentTo(SceneComponent Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo) { Invoke(nameof(MoveComponentTo), Component, TargetRelativeLocation, TargetRelativeRotation, bEaseOut, bEaseIn, OverTime, bForceShortestRotationPath, MoveAction, LatentInfo); }
        public SoftObjectPath MakeSoftObjectPath(Object PathString) { return Invoke<SoftObjectPath>(nameof(MakeSoftObjectPath), PathString); }
        public SoftClassPath MakeSoftClassPath(Object PathString) { return Invoke<SoftClassPath>(nameof(MakeSoftClassPath), PathString); }
        public Object MakeLiteralText(Object Value) { return Invoke<Object>(nameof(MakeLiteralText), Value); }
        public Object MakeLiteralString(Object Value) { return Invoke<Object>(nameof(MakeLiteralString), Value); }
        public Object MakeLiteralName(Object Value) { return Invoke<Object>(nameof(MakeLiteralName), Value); }
        public long MakeLiteralInt64(long Value) { return Invoke<long>(nameof(MakeLiteralInt64), Value); }
        public int MakeLiteralInt(int Value) { return Invoke<int>(nameof(MakeLiteralInt), Value); }
        public double MakeLiteralDouble(double Value) { return Invoke<double>(nameof(MakeLiteralDouble), Value); }
        public byte MakeLiteralByte(byte Value) { return Invoke<byte>(nameof(MakeLiteralByte), Value); }
        public bool MakeLiteralBool(bool Value) { return Invoke<bool>(nameof(MakeLiteralBool), Value); }
        public ARFilter MakeARFilter(Array<Object> PackageNames, Array<Object> PackagePaths, Array<SoftObjectPath> SoftObjectPaths, Array<TopLevelAssetPath> ClassPaths, Object RecursiveClassPathsExclusionSet, Array<Object> ClassNames, Object RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets) { return Invoke<ARFilter>(nameof(MakeARFilter), PackageNames, PackagePaths, SoftObjectPaths, ClassPaths, RecursiveClassPathsExclusionSet, ClassNames, RecursiveClassesExclusionSet, bRecursivePaths, bRecursiveClasses, bIncludeOnlyOnDiskAssets); }
        public void LogString(Object InString, bool bPrintToLog) { Invoke(nameof(LogString), InString, bPrintToLog); }
        public void LoadInterstitialAd(int AdIdIndex) { Invoke(nameof(LoadInterstitialAd), AdIdIndex); }
        public Object LoadClassAsset_Blocking(Object AssetClass) { return Invoke<Object>(nameof(LoadClassAsset_Blocking), AssetClass); }
        public void LoadAssetClass(Object WorldContextObject, Object AssetClass, Object OnLoaded, LatentActionInfo LatentInfo) { Invoke(nameof(LoadAssetClass), WorldContextObject, AssetClass, OnLoaded, LatentInfo); }
        public Object LoadAsset_Blocking(Object Asset) { return Invoke<Object>(nameof(LoadAsset_Blocking), Asset); }
        public void LoadAsset(Object WorldContextObject, Object Asset, Object OnLoaded, LatentActionInfo LatentInfo) { Invoke(nameof(LoadAsset), WorldContextObject, Asset, OnLoaded, LatentInfo); }
        public bool LineTraceSingleForObjects(Object WorldContextObject, Vector Start, Vector End, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceSingleForObjects), WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool LineTraceSingleByProfile(Object WorldContextObject, Vector Start, Vector End, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceSingleByProfile), WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool LineTraceSingle(Object WorldContextObject, Vector Start, Vector End, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceSingle), WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool LineTraceMultiForObjects(Object WorldContextObject, Vector Start, Vector End, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceMultiForObjects), WorldContextObject, Start, End, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool LineTraceMultiByProfile(Object WorldContextObject, Vector Start, Vector End, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceMultiByProfile), WorldContextObject, Start, End, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool LineTraceMulti(Object WorldContextObject, Vector Start, Vector End, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(LineTraceMulti), WorldContextObject, Start, End, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public void LaunchURL(Object URL) { Invoke(nameof(LaunchURL), URL); }
        public void K2_UnPauseTimerHandle(Object WorldContextObject, TimerHandle Handle) { Invoke(nameof(K2_UnPauseTimerHandle), WorldContextObject, Handle); }
        public void K2_UnPauseTimerDelegate(Object Delegate) { Invoke(nameof(K2_UnPauseTimerDelegate), Delegate); }
        public void K2_UnPauseTimer(Object Object, Object FunctionName) { Invoke(nameof(K2_UnPauseTimer), Object, FunctionName); }
        public bool K2_TimerExistsHandle(Object WorldContextObject, TimerHandle Handle) { return Invoke<bool>(nameof(K2_TimerExistsHandle), WorldContextObject, Handle); }
        public bool K2_TimerExistsDelegate(Object Delegate) { return Invoke<bool>(nameof(K2_TimerExistsDelegate), Delegate); }
        public bool K2_TimerExists(Object Object, Object FunctionName) { return Invoke<bool>(nameof(K2_TimerExists), Object, FunctionName); }
        public TimerHandle K2_SetTimerForNextTickDelegate(Object Delegate) { return Invoke<TimerHandle>(nameof(K2_SetTimerForNextTickDelegate), Delegate); }
        public TimerHandle K2_SetTimerForNextTick(Object Object, Object FunctionName) { return Invoke<TimerHandle>(nameof(K2_SetTimerForNextTick), Object, FunctionName); }
        public TimerHandle K2_SetTimerDelegate(Object Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance) { return Invoke<TimerHandle>(nameof(K2_SetTimerDelegate), Delegate, Time, bLooping, InitialStartDelay, InitialStartDelayVariance); }
        public TimerHandle K2_SetTimer(Object Object, Object FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance) { return Invoke<TimerHandle>(nameof(K2_SetTimer), Object, FunctionName, Time, bLooping, InitialStartDelay, InitialStartDelayVariance); }
        public void K2_PauseTimerHandle(Object WorldContextObject, TimerHandle Handle) { Invoke(nameof(K2_PauseTimerHandle), WorldContextObject, Handle); }
        public void K2_PauseTimerDelegate(Object Delegate) { Invoke(nameof(K2_PauseTimerDelegate), Delegate); }
        public void K2_PauseTimer(Object Object, Object FunctionName) { Invoke(nameof(K2_PauseTimer), Object, FunctionName); }
        public bool K2_IsValidTimerHandle(TimerHandle Handle) { return Invoke<bool>(nameof(K2_IsValidTimerHandle), Handle); }
        public bool K2_IsTimerPausedHandle(Object WorldContextObject, TimerHandle Handle) { return Invoke<bool>(nameof(K2_IsTimerPausedHandle), WorldContextObject, Handle); }
        public bool K2_IsTimerPausedDelegate(Object Delegate) { return Invoke<bool>(nameof(K2_IsTimerPausedDelegate), Delegate); }
        public bool K2_IsTimerPaused(Object Object, Object FunctionName) { return Invoke<bool>(nameof(K2_IsTimerPaused), Object, FunctionName); }
        public bool K2_IsTimerActiveHandle(Object WorldContextObject, TimerHandle Handle) { return Invoke<bool>(nameof(K2_IsTimerActiveHandle), WorldContextObject, Handle); }
        public bool K2_IsTimerActiveDelegate(Object Delegate) { return Invoke<bool>(nameof(K2_IsTimerActiveDelegate), Delegate); }
        public bool K2_IsTimerActive(Object Object, Object FunctionName) { return Invoke<bool>(nameof(K2_IsTimerActive), Object, FunctionName); }
        public TimerHandle K2_InvalidateTimerHandle(TimerHandle Handle) { return Invoke<TimerHandle>(nameof(K2_InvalidateTimerHandle), Handle); }
        public float K2_GetTimerRemainingTimeHandle(Object WorldContextObject, TimerHandle Handle) { return Invoke<float>(nameof(K2_GetTimerRemainingTimeHandle), WorldContextObject, Handle); }
        public float K2_GetTimerRemainingTimeDelegate(Object Delegate) { return Invoke<float>(nameof(K2_GetTimerRemainingTimeDelegate), Delegate); }
        public float K2_GetTimerRemainingTime(Object Object, Object FunctionName) { return Invoke<float>(nameof(K2_GetTimerRemainingTime), Object, FunctionName); }
        public float K2_GetTimerElapsedTimeHandle(Object WorldContextObject, TimerHandle Handle) { return Invoke<float>(nameof(K2_GetTimerElapsedTimeHandle), WorldContextObject, Handle); }
        public float K2_GetTimerElapsedTimeDelegate(Object Delegate) { return Invoke<float>(nameof(K2_GetTimerElapsedTimeDelegate), Delegate); }
        public float K2_GetTimerElapsedTime(Object Object, Object FunctionName) { return Invoke<float>(nameof(K2_GetTimerElapsedTime), Object, FunctionName); }
        public void K2_ClearTimerHandle(Object WorldContextObject, TimerHandle Handle) { Invoke(nameof(K2_ClearTimerHandle), WorldContextObject, Handle); }
        public void K2_ClearTimerDelegate(Object Delegate) { Invoke(nameof(K2_ClearTimerDelegate), Delegate); }
        public void K2_ClearTimer(Object Object, Object FunctionName) { Invoke(nameof(K2_ClearTimer), Object, FunctionName); }
        public void K2_ClearAndInvalidateTimerHandle(Object WorldContextObject, TimerHandle Handle) { Invoke(nameof(K2_ClearAndInvalidateTimerHandle), WorldContextObject, Handle); }
        public bool IsValidSoftObjectReference(Object SoftObjectReference) { return Invoke<bool>(nameof(IsValidSoftObjectReference), SoftObjectReference); }
        public bool IsValidSoftClassReference(Object SoftClassReference) { return Invoke<bool>(nameof(IsValidSoftClassReference), SoftClassReference); }
        public bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType) { return Invoke<bool>(nameof(IsValidPrimaryAssetType), PrimaryAssetType); }
        public bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId) { return Invoke<bool>(nameof(IsValidPrimaryAssetId), PrimaryAssetId); }
        public bool IsValidClass(Object Class) { return Invoke<bool>(nameof(IsValidClass), Class); }
        public bool IsValid(Object Object) { return Invoke<bool>(nameof(IsValid), Object); }
        public bool IsUnattended() { return Invoke<bool>(nameof(IsUnattended)); }
        public bool IsStandalone(Object WorldContextObject) { return Invoke<bool>(nameof(IsStandalone), WorldContextObject); }
        public bool IsSplitScreen(Object WorldContextObject) { return Invoke<bool>(nameof(IsSplitScreen), WorldContextObject); }
        public bool IsServer(Object WorldContextObject) { return Invoke<bool>(nameof(IsServer), WorldContextObject); }
        public bool IsScreensaverEnabled() { return Invoke<bool>(nameof(IsScreensaverEnabled)); }
        public bool IsPackagedForDistribution() { return Invoke<bool>(nameof(IsPackagedForDistribution)); }
        public bool IsLoggedIn(PlayerController SpecificPlayer) { return Invoke<bool>(nameof(IsLoggedIn), SpecificPlayer); }
        public bool IsInterstitialAdRequested() { return Invoke<bool>(nameof(IsInterstitialAdRequested)); }
        public bool IsInterstitialAdAvailable() { return Invoke<bool>(nameof(IsInterstitialAdAvailable)); }
        public bool IsDedicatedServer(Object WorldContextObject) { return Invoke<bool>(nameof(IsDedicatedServer), WorldContextObject); }
        public bool IsControllerAssignedToGamepad(int ControllerId) { return Invoke<bool>(nameof(IsControllerAssignedToGamepad), ControllerId); }
        public void HideAdBanner() { Invoke(nameof(HideAdBanner)); }
        public bool HasMultipleLocalPlayers(Object WorldContextObject) { return Invoke<bool>(nameof(HasMultipleLocalPlayers), WorldContextObject); }
        public bool GetVolumeButtonsHandledBySystem() { return Invoke<bool>(nameof(GetVolumeButtonsHandledBySystem)); }
        public Object GetUniqueDeviceId() { return Invoke<Object>(nameof(GetUniqueDeviceId)); }
        public Object GetSystemPath(Object Object) { return Invoke<Object>(nameof(GetSystemPath), Object); }
        public bool GetSupportedFullscreenResolutions(Array<IntPoint> Resolutions) { return Invoke<bool>(nameof(GetSupportedFullscreenResolutions), Resolutions); }
        public Object GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId) { return Invoke<Object>(nameof(GetSoftObjectReferenceFromPrimaryAssetId), PrimaryAssetId); }
        public SoftObjectPath GetSoftObjectPath(Object Object) { return Invoke<SoftObjectPath>(nameof(GetSoftObjectPath), Object); }
        public Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId) { return Invoke<Object>(nameof(GetSoftClassReferenceFromPrimaryAssetId), PrimaryAssetId); }
        public SoftClassPath GetSoftClassPath(Object Class) { return Invoke<SoftClassPath>(nameof(GetSoftClassPath), Class); }
        public int GetRenderingMaterialQualityLevel() { return Invoke<int>(nameof(GetRenderingMaterialQualityLevel)); }
        public int GetRenderingDetailMode() { return Invoke<int>(nameof(GetRenderingDetailMode)); }
        public Object GetProjectSavedDirectory() { return Invoke<Object>(nameof(GetProjectSavedDirectory)); }
        public Object GetProjectDirectory() { return Invoke<Object>(nameof(GetProjectDirectory)); }
        public Object GetProjectContentDirectory() { return Invoke<Object>(nameof(GetProjectContentDirectory)); }
        public void GetPrimaryAssetsWithBundleState(Array<Object> RequiredBundles, Array<Object> ExcludedBundles, Array<PrimaryAssetType> ValidTypes, bool bForceCurrentState, Array<PrimaryAssetId> OutPrimaryAssetIdList) { Invoke(nameof(GetPrimaryAssetsWithBundleState), RequiredBundles, ExcludedBundles, ValidTypes, bForceCurrentState, OutPrimaryAssetIdList); }
        public void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, Array<PrimaryAssetId> OutPrimaryAssetIdList) { Invoke(nameof(GetPrimaryAssetIdList), PrimaryAssetType, OutPrimaryAssetIdList); }
        public PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object SoftObjectReference) { return Invoke<PrimaryAssetId>(nameof(GetPrimaryAssetIdFromSoftObjectReference), SoftObjectReference); }
        public PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(Object SoftClassReference) { return Invoke<PrimaryAssetId>(nameof(GetPrimaryAssetIdFromSoftClassReference), SoftClassReference); }
        public PrimaryAssetId GetPrimaryAssetIdFromObject(Object Object) { return Invoke<PrimaryAssetId>(nameof(GetPrimaryAssetIdFromObject), Object); }
        public PrimaryAssetId GetPrimaryAssetIdFromClass(Object Class) { return Invoke<PrimaryAssetId>(nameof(GetPrimaryAssetIdFromClass), Class); }
        public Array<Object> GetPreferredLanguages() { return Invoke<Array<Object>>(nameof(GetPreferredLanguages)); }
        public Object GetPlatformUserName() { return Invoke<Object>(nameof(GetPlatformUserName)); }
        public Object GetPlatformUserDir() { return Invoke<Object>(nameof(GetPlatformUserDir)); }
        public Object GetPathName(Object Object) { return Invoke<Object>(nameof(GetPathName), Object); }
        public Object GetOuterObject(Object Object) { return Invoke<Object>(nameof(GetOuterObject), Object); }
        public Object GetObjectName(Object Object) { return Invoke<Object>(nameof(GetObjectName), Object); }
        public Object GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId) { return Invoke<Object>(nameof(GetObjectFromPrimaryAssetId), PrimaryAssetId); }
        public int GetMinYResolutionForUI() { return Invoke<int>(nameof(GetMinYResolutionForUI)); }
        public int GetMinYResolutionFor3DView() { return Invoke<int>(nameof(GetMinYResolutionFor3DView)); }
        public Object GetLocalCurrencySymbol() { return Invoke<Object>(nameof(GetLocalCurrencySymbol)); }
        public Object GetLocalCurrencyCode() { return Invoke<Object>(nameof(GetLocalCurrencyCode)); }
        public double GetGameTimeInSeconds(Object WorldContextObject) { return Invoke<double>(nameof(GetGameTimeInSeconds), WorldContextObject); }
        public Object GetGamepadControllerName(int ControllerId) { return Invoke<Object>(nameof(GetGamepadControllerName), ControllerId); }
        public Texture2D GetGamepadButtonGlyph(Object ButtonKey, int ControllerIndex) { return Invoke<Texture2D>(nameof(GetGamepadButtonGlyph), ButtonKey, ControllerIndex); }
        public Object GetGameName() { return Invoke<Object>(nameof(GetGameName)); }
        public Object GetGameBundleId() { return Invoke<Object>(nameof(GetGameBundleId)); }
        public long GetFrameCount() { return Invoke<long>(nameof(GetFrameCount)); }
        public Object GetEngineVersion() { return Invoke<Object>(nameof(GetEngineVersion)); }
        public Object GetDisplayName(Object Object) { return Invoke<Object>(nameof(GetDisplayName), Object); }
        public Object GetDeviceId() { return Invoke<Object>(nameof(GetDeviceId)); }
        public Object GetDefaultLocale() { return Invoke<Object>(nameof(GetDefaultLocale)); }
        public Object GetDefaultLanguage() { return Invoke<Object>(nameof(GetDefaultLanguage)); }
        public bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, Array<Object> OutBundles) { return Invoke<bool>(nameof(GetCurrentBundleState), PrimaryAssetId, bForceCurrentState, OutBundles); }
        public bool GetConvenientWindowedResolutions(Array<IntPoint> Resolutions) { return Invoke<bool>(nameof(GetConvenientWindowedResolutions), Resolutions); }
        public int GetConsoleVariableIntValue(Object VariableName) { return Invoke<int>(nameof(GetConsoleVariableIntValue), VariableName); }
        public float GetConsoleVariableFloatValue(Object VariableName) { return Invoke<float>(nameof(GetConsoleVariableFloatValue), VariableName); }
        public bool GetConsoleVariableBoolValue(Object VariableName) { return Invoke<bool>(nameof(GetConsoleVariableBoolValue), VariableName); }
        public void GetComponentBounds(SceneComponent Component, Vector Origin, Vector BoxExtent, float SphereRadius) { Invoke(nameof(GetComponentBounds), Component, Origin, BoxExtent, SphereRadius); }
        public Object GetCommandLine() { return Invoke<Object>(nameof(GetCommandLine)); }
        public Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId) { return Invoke<Object>(nameof(GetClassFromPrimaryAssetId), PrimaryAssetId); }
        public Object GetClassDisplayName(Object Class) { return Invoke<Object>(nameof(GetClassDisplayName), Class); }
        public Object GetBuildVersion() { return Invoke<Object>(nameof(GetBuildVersion)); }
        public Object GetBuildConfiguration() { return Invoke<Object>(nameof(GetBuildConfiguration)); }
        public int GetAdIDCount() { return Invoke<int>(nameof(GetAdIDCount)); }
        public void GetActorListFromComponentList(Array<PrimitiveComponent> ComponentList, Object ActorClassFilter, Array<Actor> OutActorList) { Invoke(nameof(GetActorListFromComponentList), ComponentList, ActorClassFilter, OutActorList); }
        public void GetActorBounds(Actor Actor, Vector Origin, Vector BoxExtent) { Invoke(nameof(GetActorBounds), Actor, Origin, BoxExtent); }
        public void ForceCloseAdBanner() { Invoke(nameof(ForceCloseAdBanner)); }
        public void FlushPersistentDebugLines(Object WorldContextObject) { Invoke(nameof(FlushPersistentDebugLines), WorldContextObject); }
        public void FlushDebugStrings(Object WorldContextObject) { Invoke(nameof(FlushDebugStrings), WorldContextObject); }
        public void ExecuteConsoleCommand(Object WorldContextObject, Object Command, PlayerController SpecificPlayer) { Invoke(nameof(ExecuteConsoleCommand), WorldContextObject, Command, SpecificPlayer); }
        public bool EqualEqual_SoftObjectReference(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_SoftObjectReference), A, B); }
        public bool EqualEqual_SoftClassReference(Object A, Object B) { return Invoke<bool>(nameof(EqualEqual_SoftClassReference), A, B); }
        public bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B) { return Invoke<bool>(nameof(EqualEqual_PrimaryAssetType), A, B); }
        public bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B) { return Invoke<bool>(nameof(EqualEqual_PrimaryAssetId), A, B); }
        public int EndTransaction() { return Invoke<int>(nameof(EndTransaction)); }
        public void DrawDebugString(Object WorldContextObject, Vector TextLocation, Object Text, Actor TestBaseActor, LinearColor TextColor, float Duration) { Invoke(nameof(DrawDebugString), WorldContextObject, TextLocation, Text, TestBaseActor, TextColor, Duration); }
        public void DrawDebugSphere(Object WorldContextObject, Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugSphere), WorldContextObject, Center, Radius, Segments, LineColor, Duration, Thickness); }
        public void DrawDebugPoint(Object WorldContextObject, Vector Position, float Size, LinearColor PointColor, float Duration) { Invoke(nameof(DrawDebugPoint), WorldContextObject, Position, Size, PointColor, Duration); }
        public void DrawDebugPlane(Object WorldContextObject, Plane PlaneCoordinates, Vector Location, float Size, LinearColor PlaneColor, float Duration) { Invoke(nameof(DrawDebugPlane), WorldContextObject, PlaneCoordinates, Location, Size, PlaneColor, Duration); }
        public void DrawDebugLine(Object WorldContextObject, Vector LineStart, Vector LineEnd, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugLine), WorldContextObject, LineStart, LineEnd, LineColor, Duration, Thickness); }
        public void DrawDebugFrustum(Object WorldContextObject, Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugFrustum), WorldContextObject, FrustumTransform, FrustumColor, Duration, Thickness); }
        public void DrawDebugFloatHistoryTransform(Object WorldContextObject, DebugFloatHistory FloatHistory, Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration) { Invoke(nameof(DrawDebugFloatHistoryTransform), WorldContextObject, FloatHistory, DrawTransform, DrawSize, DrawColor, Duration); }
        public void DrawDebugFloatHistoryLocation(Object WorldContextObject, DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration) { Invoke(nameof(DrawDebugFloatHistoryLocation), WorldContextObject, FloatHistory, DrawLocation, DrawSize, DrawColor, Duration); }
        public void DrawDebugCylinder(Object WorldContextObject, Vector Start, Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugCylinder), WorldContextObject, Start, End, Radius, Segments, LineColor, Duration, Thickness); }
        public void DrawDebugCoordinateSystem(Object WorldContextObject, Vector AxisLoc, Rotator AxisRot, float Scale, float Duration, float Thickness) { Invoke(nameof(DrawDebugCoordinateSystem), WorldContextObject, AxisLoc, AxisRot, Scale, Duration, Thickness); }
        public void DrawDebugConeInDegrees(Object WorldContextObject, Vector Origin, Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugConeInDegrees), WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness); }
        public void DrawDebugCone(Object WorldContextObject, Vector Origin, Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugCone), WorldContextObject, Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, LineColor, Duration, Thickness); }
        public void DrawDebugCircle(Object WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis) { Invoke(nameof(DrawDebugCircle), WorldContextObject, Center, Radius, NumSegments, LineColor, Duration, Thickness, YAxis, ZAxis, bDrawAxis); }
        public void DrawDebugCapsule(Object WorldContextObject, Vector Center, float HalfHeight, float Radius, Rotator Rotation, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugCapsule), WorldContextObject, Center, HalfHeight, Radius, Rotation, LineColor, Duration, Thickness); }
        public void DrawDebugCamera(CameraActor CameraActor, LinearColor CameraColor, float Duration) { Invoke(nameof(DrawDebugCamera), CameraActor, CameraColor, Duration); }
        public void DrawDebugBox(Object WorldContextObject, Vector Center, Vector Extent, LinearColor LineColor, Rotator Rotation, float Duration, float Thickness) { Invoke(nameof(DrawDebugBox), WorldContextObject, Center, Extent, LineColor, Rotation, Duration, Thickness); }
        public void DrawDebugArrow(Object WorldContextObject, Vector LineStart, Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness) { Invoke(nameof(DrawDebugArrow), WorldContextObject, LineStart, LineEnd, ArrowSize, LineColor, Duration, Thickness); }
        public bool DoesImplementInterface(Object TestObject, Object Interface) { return Invoke<bool>(nameof(DoesImplementInterface), TestObject, Interface); }
        public void DelayUntilNextTick(Object WorldContextObject, LatentActionInfo LatentInfo) { Invoke(nameof(DelayUntilNextTick), WorldContextObject, LatentInfo); }
        public void Delay(Object WorldContextObject, float Duration, LatentActionInfo LatentInfo) { Invoke(nameof(Delay), WorldContextObject, Duration, LatentInfo); }
        public void CreateCopyForUndoBuffer(Object ObjectToModify) { Invoke(nameof(CreateCopyForUndoBuffer), ObjectToModify); }
        public Object ConvertToRelativePath(Object Filename) { return Invoke<Object>(nameof(ConvertToRelativePath), Filename); }
        public Object ConvertToAbsolutePath(Object Filename) { return Invoke<Object>(nameof(ConvertToAbsolutePath), Filename); }
        public SoftObjectPath Conv_SoftObjRefToSoftObjPath(Object SoftObjectReference) { return Invoke<SoftObjectPath>(nameof(Conv_SoftObjRefToSoftObjPath), SoftObjectReference); }
        public SoftClassPath Conv_SoftObjRefToSoftClassPath(Object SoftClassReference) { return Invoke<SoftClassPath>(nameof(Conv_SoftObjRefToSoftClassPath), SoftClassReference); }
        public Object Conv_SoftObjPathToSoftObjRef(SoftObjectPath SoftObjectPath) { return Invoke<Object>(nameof(Conv_SoftObjPathToSoftObjRef), SoftObjectPath); }
        public Object Conv_SoftObjectReferenceToString(Object SoftObjectReference) { return Invoke<Object>(nameof(Conv_SoftObjectReferenceToString), SoftObjectReference); }
        public Object Conv_SoftObjectReferenceToObject(Object SoftObject) { return Invoke<Object>(nameof(Conv_SoftObjectReferenceToObject), SoftObject); }
        public Object Conv_SoftClassReferenceToString(Object SoftClassReference) { return Invoke<Object>(nameof(Conv_SoftClassReferenceToString), SoftClassReference); }
        public Object Conv_SoftClassReferenceToClass(Object SoftClass) { return Invoke<Object>(nameof(Conv_SoftClassReferenceToClass), SoftClass); }
        public Object Conv_SoftClassPathToSoftClassRef(SoftClassPath SoftClassPath) { return Invoke<Object>(nameof(Conv_SoftClassPathToSoftClassRef), SoftClassPath); }
        public Object Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType) { return Invoke<Object>(nameof(Conv_PrimaryAssetTypeToString), PrimaryAssetType); }
        public Object Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId) { return Invoke<Object>(nameof(Conv_PrimaryAssetIdToString), PrimaryAssetId); }
        public Object Conv_ObjectToSoftObjectReference(Object Object) { return Invoke<Object>(nameof(Conv_ObjectToSoftObjectReference), Object); }
        public Object Conv_ObjectToClass(Object Object, Object Class) { return Invoke<Object>(nameof(Conv_ObjectToClass), Object, Class); }
        public Object Conv_InterfaceToObject(Object Interface) { return Invoke<Object>(nameof(Conv_InterfaceToObject), Interface); }
        public Object Conv_ClassToSoftClassReference(Object Class) { return Invoke<Object>(nameof(Conv_ClassToSoftClassReference), Class); }
        public void ControlScreensaver(bool bAllowScreenSaver) { Invoke(nameof(ControlScreensaver), bAllowScreenSaver); }
        public bool ComponentOverlapComponents(PrimitiveComponent Component, Transform ComponentTransform, Array<byte> ObjectTypes, Object ComponentClassFilter, Array<Actor> ActorsToIgnore, Array<PrimitiveComponent> OutComponents) { return Invoke<bool>(nameof(ComponentOverlapComponents), Component, ComponentTransform, ObjectTypes, ComponentClassFilter, ActorsToIgnore, OutComponents); }
        public bool ComponentOverlapActors(PrimitiveComponent Component, Transform ComponentTransform, Array<byte> ObjectTypes, Object ActorClassFilter, Array<Actor> ActorsToIgnore, Array<Actor> OutActors) { return Invoke<bool>(nameof(ComponentOverlapActors), Component, ComponentTransform, ObjectTypes, ActorClassFilter, ActorsToIgnore, OutActors); }
        public void CollectGarbage() { Invoke(nameof(CollectGarbage)); }
        public bool CapsuleTraceSingleForObjects(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceSingleForObjects), WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleTraceSingleByProfile(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceSingleByProfile), WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleTraceSingle(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceSingle), WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleTraceMultiForObjects(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceMultiForObjects), WorldContextObject, Start, End, Radius, HalfHeight, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleTraceMultiByProfile(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceMultiByProfile), WorldContextObject, Start, End, Radius, HalfHeight, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleTraceMulti(Object WorldContextObject, Vector Start, Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(CapsuleTraceMulti), WorldContextObject, Start, End, Radius, HalfHeight, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool CapsuleOverlapComponents(Object WorldContextObject, Vector CapsulePos, float Radius, float HalfHeight, Array<byte> ObjectTypes, Object ComponentClassFilter, Array<Actor> ActorsToIgnore, Array<PrimitiveComponent> OutComponents) { return Invoke<bool>(nameof(CapsuleOverlapComponents), WorldContextObject, CapsulePos, Radius, HalfHeight, ObjectTypes, ComponentClassFilter, ActorsToIgnore, OutComponents); }
        public bool CapsuleOverlapActors(Object WorldContextObject, Vector CapsulePos, float Radius, float HalfHeight, Array<byte> ObjectTypes, Object ActorClassFilter, Array<Actor> ActorsToIgnore, Array<Actor> OutActors) { return Invoke<bool>(nameof(CapsuleOverlapActors), WorldContextObject, CapsulePos, Radius, HalfHeight, ObjectTypes, ActorClassFilter, ActorsToIgnore, OutActors); }
        public bool CanLaunchURL(Object URL) { return Invoke<bool>(nameof(CanLaunchURL), URL); }
        public void CancelTransaction(int Index) { Invoke(nameof(CancelTransaction), Index); }
        public void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, Object PathString) { Invoke(nameof(BreakSoftObjectPath), InSoftObjectPath, PathString); }
        public void BreakSoftClassPath(SoftClassPath InSoftClassPath, Object PathString) { Invoke(nameof(BreakSoftClassPath), InSoftClassPath, PathString); }
        public void BreakARFilter(ARFilter InARFilter, Array<Object> PackageNames, Array<Object> PackagePaths, Array<SoftObjectPath> SoftObjectPaths, Array<TopLevelAssetPath> ClassPaths, Object RecursiveClassPathsExclusionSet, Array<Object> ClassNames, Object RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets) { Invoke(nameof(BreakARFilter), InARFilter, PackageNames, PackagePaths, SoftObjectPaths, ClassPaths, RecursiveClassPathsExclusionSet, ClassNames, RecursiveClassesExclusionSet, bRecursivePaths, bRecursiveClasses, bIncludeOnlyOnDiskAssets); }
        public bool BoxTraceSingleForObjects(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceSingleForObjects), WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxTraceSingleByProfile(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceSingleByProfile), WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxTraceSingle(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceSingle), WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHit, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxTraceMultiForObjects(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, Array<byte> ObjectTypes, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceMultiForObjects), WorldContextObject, Start, End, HalfSize, Orientation, ObjectTypes, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxTraceMultiByProfile(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, Object ProfileName, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceMultiByProfile), WorldContextObject, Start, End, HalfSize, Orientation, ProfileName, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxTraceMulti(Object WorldContextObject, Vector Start, Vector End, Vector HalfSize, Rotator Orientation, byte TraceChannel, bool bTraceComplex, Array<Actor> ActorsToIgnore, byte DrawDebugType, Array<HitResult> OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime) { return Invoke<bool>(nameof(BoxTraceMulti), WorldContextObject, Start, End, HalfSize, Orientation, TraceChannel, bTraceComplex, ActorsToIgnore, DrawDebugType, OutHits, bIgnoreSelf, TraceColor, TraceHitColor, DrawTime); }
        public bool BoxOverlapComponents(Object WorldContextObject, Vector BoxPos, Vector Extent, Array<byte> ObjectTypes, Object ComponentClassFilter, Array<Actor> ActorsToIgnore, Array<PrimitiveComponent> OutComponents) { return Invoke<bool>(nameof(BoxOverlapComponents), WorldContextObject, BoxPos, Extent, ObjectTypes, ComponentClassFilter, ActorsToIgnore, OutComponents); }
        public bool BoxOverlapActors(Object WorldContextObject, Vector BoxPos, Vector BoxExtent, Array<byte> ObjectTypes, Object ActorClassFilter, Array<Actor> ActorsToIgnore, Array<Actor> OutActors) { return Invoke<bool>(nameof(BoxOverlapActors), WorldContextObject, BoxPos, BoxExtent, ObjectTypes, ActorClassFilter, ActorsToIgnore, OutActors); }
        public int BeginTransaction(Object Context, Object Description, Object PrimaryObject) { return Invoke<int>(nameof(BeginTransaction), Context, Description, PrimaryObject); }
        public DebugFloatHistory AddFloatHistorySample(float Value, DebugFloatHistory FloatHistory) { return Invoke<DebugFloatHistory>(nameof(AddFloatHistorySample), Value, FloatHistory); }
    }
    public class BlueprintPathsLibrary : BlueprintFunctionLibrary
    {
        public BlueprintPathsLibrary(nint addr) : base(addr) { }
        public Object VideoCaptureDir() { return Invoke<Object>(nameof(VideoCaptureDir)); }
        public void ValidatePath(Object InPath, bool bDidSucceed, Object OutReason) { Invoke(nameof(ValidatePath), InPath, bDidSucceed, OutReason); }
        public void Split(Object InPath, Object PathPart, Object FilenamePart, Object ExtensionPart) { Invoke(nameof(Split), InPath, PathPart, FilenamePart, ExtensionPart); }
        public Object SourceConfigDir() { return Invoke<Object>(nameof(SourceConfigDir)); }
        public bool ShouldSaveToUserDir() { return Invoke<bool>(nameof(ShouldSaveToUserDir)); }
        public Object ShaderWorkingDir() { return Invoke<Object>(nameof(ShaderWorkingDir)); }
        public void SetProjectFilePath(Object NewGameProjectFilePath) { Invoke(nameof(SetProjectFilePath), NewGameProjectFilePath); }
        public Object SetExtension(Object InPath, Object InNewExtension) { return Invoke<Object>(nameof(SetExtension), InPath, InNewExtension); }
        public Object ScreenShotDir() { return Invoke<Object>(nameof(ScreenShotDir)); }
        public Object SandboxesDir() { return Invoke<Object>(nameof(SandboxesDir)); }
        public Object RootDir() { return Invoke<Object>(nameof(RootDir)); }
        public void RemoveDuplicateSlashes(Object InPath, Object OutPath) { Invoke(nameof(RemoveDuplicateSlashes), InPath, OutPath); }
        public Object ProjectUserDir() { return Invoke<Object>(nameof(ProjectUserDir)); }
        public Object ProjectSavedDir() { return Invoke<Object>(nameof(ProjectSavedDir)); }
        public Object ProjectPluginsDir() { return Invoke<Object>(nameof(ProjectPluginsDir)); }
        public Object ProjectPersistentDownloadDir() { return Invoke<Object>(nameof(ProjectPersistentDownloadDir)); }
        public Object ProjectModsDir() { return Invoke<Object>(nameof(ProjectModsDir)); }
        public Object ProjectLogDir() { return Invoke<Object>(nameof(ProjectLogDir)); }
        public Object ProjectIntermediateDir() { return Invoke<Object>(nameof(ProjectIntermediateDir)); }
        public Object ProjectDir() { return Invoke<Object>(nameof(ProjectDir)); }
        public Object ProjectContentDir() { return Invoke<Object>(nameof(ProjectContentDir)); }
        public Object ProjectConfigDir() { return Invoke<Object>(nameof(ProjectConfigDir)); }
        public Object ProfilingDir() { return Invoke<Object>(nameof(ProfilingDir)); }
        public void NormalizeFilename(Object InPath, Object OutPath) { Invoke(nameof(NormalizeFilename), InPath, OutPath); }
        public void NormalizeDirectoryName(Object InPath, Object OutPath) { Invoke(nameof(NormalizeDirectoryName), InPath, OutPath); }
        public Object MakeValidFileName(Object InString, Object InReplacementChar) { return Invoke<Object>(nameof(MakeValidFileName), InString, InReplacementChar); }
        public void MakeStandardFilename(Object InPath, Object OutPath) { Invoke(nameof(MakeStandardFilename), InPath, OutPath); }
        public void MakePlatformFilename(Object InPath, Object OutPath) { Invoke(nameof(MakePlatformFilename), InPath, OutPath); }
        public bool MakePathRelativeTo(Object InPath, Object InRelativeTo, Object OutPath) { return Invoke<bool>(nameof(MakePathRelativeTo), InPath, InRelativeTo, OutPath); }
        public Object LaunchDir() { return Invoke<Object>(nameof(LaunchDir)); }
        public bool IsSamePath(Object PathA, Object PathB) { return Invoke<bool>(nameof(IsSamePath), PathA, PathB); }
        public bool IsRestrictedPath(Object InPath) { return Invoke<bool>(nameof(IsRestrictedPath), InPath); }
        public bool IsRelative(Object InPath) { return Invoke<bool>(nameof(IsRelative), InPath); }
        public bool IsProjectFilePathSet() { return Invoke<bool>(nameof(IsProjectFilePathSet)); }
        public bool IsDrive(Object InPath) { return Invoke<bool>(nameof(IsDrive), InPath); }
        public bool HasProjectPersistentDownloadDir() { return Invoke<bool>(nameof(HasProjectPersistentDownloadDir)); }
        public Array<Object> GetToolTipLocalizationPaths() { return Invoke<Array<Object>>(nameof(GetToolTipLocalizationPaths)); }
        public Array<Object> GetRestrictedFolderNames() { return Invoke<Array<Object>>(nameof(GetRestrictedFolderNames)); }
        public Object GetRelativePathToRoot() { return Invoke<Object>(nameof(GetRelativePathToRoot)); }
        public Array<Object> GetPropertyNameLocalizationPaths() { return Invoke<Array<Object>>(nameof(GetPropertyNameLocalizationPaths)); }
        public Object GetProjectFilePath() { return Invoke<Object>(nameof(GetProjectFilePath)); }
        public Object GetPath(Object InPath) { return Invoke<Object>(nameof(GetPath), InPath); }
        public Object GetInvalidFileSystemChars() { return Invoke<Object>(nameof(GetInvalidFileSystemChars)); }
        public Array<Object> GetGameLocalizationPaths() { return Invoke<Array<Object>>(nameof(GetGameLocalizationPaths)); }
        public Object GetExtension(Object InPath, bool bIncludeDot) { return Invoke<Object>(nameof(GetExtension), InPath, bIncludeDot); }
        public Array<Object> GetEngineLocalizationPaths() { return Invoke<Array<Object>>(nameof(GetEngineLocalizationPaths)); }
        public Array<Object> GetEditorLocalizationPaths() { return Invoke<Array<Object>>(nameof(GetEditorLocalizationPaths)); }
        public Object GetCleanFilename(Object InPath) { return Invoke<Object>(nameof(GetCleanFilename), InPath); }
        public Object GetBaseFilename(Object InPath, bool bRemovePath) { return Invoke<Object>(nameof(GetBaseFilename), InPath, bRemovePath); }
        public Object GeneratedConfigDir() { return Invoke<Object>(nameof(GeneratedConfigDir)); }
        public Object GameUserDeveloperDir() { return Invoke<Object>(nameof(GameUserDeveloperDir)); }
        public Object GameSourceDir() { return Invoke<Object>(nameof(GameSourceDir)); }
        public Object GameDevelopersDir() { return Invoke<Object>(nameof(GameDevelopersDir)); }
        public Object GameAgnosticSavedDir() { return Invoke<Object>(nameof(GameAgnosticSavedDir)); }
        public bool FileExists(Object InPath) { return Invoke<bool>(nameof(FileExists), InPath); }
        public Object FeaturePackDir() { return Invoke<Object>(nameof(FeaturePackDir)); }
        public Object EnterprisePluginsDir() { return Invoke<Object>(nameof(EnterprisePluginsDir)); }
        public Object EnterpriseFeaturePackDir() { return Invoke<Object>(nameof(EnterpriseFeaturePackDir)); }
        public Object EnterpriseDir() { return Invoke<Object>(nameof(EnterpriseDir)); }
        public Object EngineVersionAgnosticUserDir() { return Invoke<Object>(nameof(EngineVersionAgnosticUserDir)); }
        public Object EngineUserDir() { return Invoke<Object>(nameof(EngineUserDir)); }
        public Object EngineSourceDir() { return Invoke<Object>(nameof(EngineSourceDir)); }
        public Object EngineSavedDir() { return Invoke<Object>(nameof(EngineSavedDir)); }
        public Object EnginePluginsDir() { return Invoke<Object>(nameof(EnginePluginsDir)); }
        public Object EngineIntermediateDir() { return Invoke<Object>(nameof(EngineIntermediateDir)); }
        public Object EngineDir() { return Invoke<Object>(nameof(EngineDir)); }
        public Object EngineContentDir() { return Invoke<Object>(nameof(EngineContentDir)); }
        public Object EngineConfigDir() { return Invoke<Object>(nameof(EngineConfigDir)); }
        public bool DirectoryExists(Object InPath) { return Invoke<bool>(nameof(DirectoryExists), InPath); }
        public Object DiffDir() { return Invoke<Object>(nameof(DiffDir)); }
        public Object CreateTempFilename(Object Path, Object Prefix, Object Extension) { return Invoke<Object>(nameof(CreateTempFilename), Path, Prefix, Extension); }
        public Object ConvertToSandboxPath(Object InPath, Object InSandboxName) { return Invoke<Object>(nameof(ConvertToSandboxPath), InPath, InSandboxName); }
        public Object ConvertRelativePathToFull(Object InPath, Object InBasePath) { return Invoke<Object>(nameof(ConvertRelativePathToFull), InPath, InBasePath); }
        public Object ConvertFromSandboxPath(Object InPath, Object InSandboxName) { return Invoke<Object>(nameof(ConvertFromSandboxPath), InPath, InSandboxName); }
        public Object Combine(Array<Object> InPaths) { return Invoke<Object>(nameof(Combine), InPaths); }
        public bool CollapseRelativeDirectories(Object InPath, Object OutPath) { return Invoke<bool>(nameof(CollapseRelativeDirectories), InPath, OutPath); }
        public Object CloudDir() { return Invoke<Object>(nameof(CloudDir)); }
        public Object ChangeExtension(Object InPath, Object InNewExtension) { return Invoke<Object>(nameof(ChangeExtension), InPath, InNewExtension); }
        public Object BugItDir() { return Invoke<Object>(nameof(BugItDir)); }
        public Object AutomationTransientDir() { return Invoke<Object>(nameof(AutomationTransientDir)); }
        public Object AutomationLogDir() { return Invoke<Object>(nameof(AutomationLogDir)); }
        public Object AutomationDir() { return Invoke<Object>(nameof(AutomationDir)); }
    }
    public class PlatformGameInstance : GameInstance
    {
        public PlatformGameInstance(nint addr) : base(addr) { }
        public Object ApplicationWillDeactivateDelegate { get { return this[nameof(ApplicationWillDeactivateDelegate)]; } set { this[nameof(ApplicationWillDeactivateDelegate)] = value; } }
        public Object ApplicationHasReactivatedDelegate { get { return this[nameof(ApplicationHasReactivatedDelegate)]; } set { this[nameof(ApplicationHasReactivatedDelegate)] = value; } }
        public Object ApplicationWillEnterBackgroundDelegate { get { return this[nameof(ApplicationWillEnterBackgroundDelegate)]; } set { this[nameof(ApplicationWillEnterBackgroundDelegate)] = value; } }
        public Object ApplicationHasEnteredForegroundDelegate { get { return this[nameof(ApplicationHasEnteredForegroundDelegate)]; } set { this[nameof(ApplicationHasEnteredForegroundDelegate)] = value; } }
        public Object ApplicationWillTerminateDelegate { get { return this[nameof(ApplicationWillTerminateDelegate)]; } set { this[nameof(ApplicationWillTerminateDelegate)] = value; } }
        public Object ApplicationShouldUnloadResourcesDelegate { get { return this[nameof(ApplicationShouldUnloadResourcesDelegate)]; } set { this[nameof(ApplicationShouldUnloadResourcesDelegate)] = value; } }
        public Object ApplicationReceivedStartupArgumentsDelegate { get { return this[nameof(ApplicationReceivedStartupArgumentsDelegate)]; } set { this[nameof(ApplicationReceivedStartupArgumentsDelegate)] = value; } }
        public Object ApplicationRegisteredForRemoteNotificationsDelegate { get { return this[nameof(ApplicationRegisteredForRemoteNotificationsDelegate)]; } set { this[nameof(ApplicationRegisteredForRemoteNotificationsDelegate)] = value; } }
        public Object ApplicationRegisteredForUserNotificationsDelegate { get { return this[nameof(ApplicationRegisteredForUserNotificationsDelegate)]; } set { this[nameof(ApplicationRegisteredForUserNotificationsDelegate)] = value; } }
        public Object ApplicationFailedToRegisterForRemoteNotificationsDelegate { get { return this[nameof(ApplicationFailedToRegisterForRemoteNotificationsDelegate)]; } set { this[nameof(ApplicationFailedToRegisterForRemoteNotificationsDelegate)] = value; } }
        public Object ApplicationReceivedRemoteNotificationDelegate { get { return this[nameof(ApplicationReceivedRemoteNotificationDelegate)]; } set { this[nameof(ApplicationReceivedRemoteNotificationDelegate)] = value; } }
        public Object ApplicationReceivedLocalNotificationDelegate { get { return this[nameof(ApplicationReceivedLocalNotificationDelegate)]; } set { this[nameof(ApplicationReceivedLocalNotificationDelegate)] = value; } }
        public Object ApplicationReceivedScreenOrientationChangedNotificationDelegate { get { return this[nameof(ApplicationReceivedScreenOrientationChangedNotificationDelegate)]; } set { this[nameof(ApplicationReceivedScreenOrientationChangedNotificationDelegate)] = value; } }
    }
    public class BlueprintPlatformLibrary : BlueprintFunctionLibrary
    {
        public BlueprintPlatformLibrary(nint addr) : base(addr) { }
        public void SetAllowedDeviceOrientation(byte NewAllowedDeviceOrientation) { Invoke(nameof(SetAllowedDeviceOrientation), NewAllowedDeviceOrientation); }
        public int ScheduleLocalNotificationFromNow(int inSecondsFromNow, Object Title, Object Body, Object action, Object ActivationEvent) { return Invoke<int>(nameof(ScheduleLocalNotificationFromNow), inSecondsFromNow, Title, Body, action, ActivationEvent); }
        public void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, Object ActivationEvent) { Invoke(nameof(ScheduleLocalNotificationBadgeFromNow), inSecondsFromNow, ActivationEvent); }
        public int ScheduleLocalNotificationBadgeAtTime(DateTime FireDateTime, bool LocalTime, Object ActivationEvent) { return Invoke<int>(nameof(ScheduleLocalNotificationBadgeAtTime), FireDateTime, LocalTime, ActivationEvent); }
        public int ScheduleLocalNotificationAtTime(DateTime FireDateTime, bool LocalTime, Object Title, Object Body, Object action, Object ActivationEvent) { return Invoke<int>(nameof(ScheduleLocalNotificationAtTime), FireDateTime, LocalTime, Title, Body, action, ActivationEvent); }
        public void GetLaunchNotification(bool NotificationLaunchedApp, Object ActivationEvent, int FireDate) { Invoke(nameof(GetLaunchNotification), NotificationLaunchedApp, ActivationEvent, FireDate); }
        public byte GetDeviceOrientation() { return Invoke<byte>(nameof(GetDeviceOrientation)); }
        public byte GetAllowedDeviceOrientation() { return Invoke<byte>(nameof(GetAllowedDeviceOrientation)); }
        public void ClearAllLocalNotifications() { Invoke(nameof(ClearAllLocalNotifications)); }
        public void CancelLocalNotificationById(int NotificationId) { Invoke(nameof(CancelLocalNotificationById), NotificationId); }
        public void CancelLocalNotification(Object ActivationEvent) { Invoke(nameof(CancelLocalNotification), ActivationEvent); }
    }
    public class BlueprintTypeConversions : Object
    {
        public BlueprintTypeConversions(nint addr) : base(addr) { }
        public Object ConvertSetType(Object Inset) { return Invoke<Object>(nameof(ConvertSetType), Inset); }
        public Object ConvertMapType(Object InMap) { return Invoke<Object>(nameof(ConvertMapType), InMap); }
        public int ConvertFVector4fToFVector4d(int InFromData) { return Invoke<int>(nameof(ConvertFVector4fToFVector4d), InFromData); }
        public int ConvertFVector4dToFVector4f(int InFromData) { return Invoke<int>(nameof(ConvertFVector4dToFVector4f), InFromData); }
        public int ConvertFVector3fToFVector3d(int InFromData) { return Invoke<int>(nameof(ConvertFVector3fToFVector3d), InFromData); }
        public int ConvertFVector3dToFVector3f(int InFromData) { return Invoke<int>(nameof(ConvertFVector3dToFVector3f), InFromData); }
        public int ConvertFVector2fToFVector2d(int InFromData) { return Invoke<int>(nameof(ConvertFVector2fToFVector2d), InFromData); }
        public int ConvertFVector2dToFVector2f(int InFromData) { return Invoke<int>(nameof(ConvertFVector2dToFVector2f), InFromData); }
        public int ConvertFTransform3fToFTransform3d(int InFromData) { return Invoke<int>(nameof(ConvertFTransform3fToFTransform3d), InFromData); }
        public int ConvertFTransform3dToFTransform3f(int InFromData) { return Invoke<int>(nameof(ConvertFTransform3dToFTransform3f), InFromData); }
        public int ConvertFRotator3fToFRotator3d(int InFromData) { return Invoke<int>(nameof(ConvertFRotator3fToFRotator3d), InFromData); }
        public int ConvertFRotator3dToFRotator3f(int InFromData) { return Invoke<int>(nameof(ConvertFRotator3dToFRotator3f), InFromData); }
        public int ConvertFQuat4fToFQuat4d(int InFromData) { return Invoke<int>(nameof(ConvertFQuat4fToFQuat4d), InFromData); }
        public int ConvertFQuat4dToFQuat4f(int InFromData) { return Invoke<int>(nameof(ConvertFQuat4dToFQuat4f), InFromData); }
        public int ConvertFPlane4fToFPlane4d(int InFromData) { return Invoke<int>(nameof(ConvertFPlane4fToFPlane4d), InFromData); }
        public int ConvertFPlane4dToFPlane4f(int InFromData) { return Invoke<int>(nameof(ConvertFPlane4dToFPlane4f), InFromData); }
        public int ConvertFMatrix44fToFMatrix44d(int InFromData) { return Invoke<int>(nameof(ConvertFMatrix44fToFMatrix44d), InFromData); }
        public int ConvertFMatrix44dToFMatrix44f(int InFromData) { return Invoke<int>(nameof(ConvertFMatrix44dToFMatrix44f), InFromData); }
        public int ConvertFBox2fToFBox2d(int InFromData) { return Invoke<int>(nameof(ConvertFBox2fToFBox2d), InFromData); }
        public int ConvertFBox2dToFBox2f(int InFromData) { return Invoke<int>(nameof(ConvertFBox2dToFBox2f), InFromData); }
        public Array<int> ConvertArrayType(Array<int> inArray) { return Invoke<Array<int>>(nameof(ConvertArrayType), inArray); }
    }
    public class ImportanceSamplingLibrary : BlueprintFunctionLibrary
    {
        public ImportanceSamplingLibrary(nint addr) : base(addr) { }
        public float RandomSobolFloat(int Index, int Dimension, float Seed) { return Invoke<float>(nameof(RandomSobolFloat), Index, Dimension, Seed); }
        public Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed) { return Invoke<Vector>(nameof(RandomSobolCell3D), Index, NumCells, Cell, Seed); }
        public Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed) { return Invoke<Vector2D>(nameof(RandomSobolCell2D), Index, NumCells, Cell, Seed); }
        public float NextSobolFloat(int Index, int Dimension, float PreviousValue) { return Invoke<float>(nameof(NextSobolFloat), Index, Dimension, PreviousValue); }
        public Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue) { return Invoke<Vector>(nameof(NextSobolCell3D), Index, NumCells, PreviousValue); }
        public Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue) { return Invoke<Vector2D>(nameof(NextSobolCell2D), Index, NumCells, PreviousValue); }
        public ImportanceTexture MakeImportanceTexture(Texture2D Texture, byte WeightingFunc) { return Invoke<ImportanceTexture>(nameof(MakeImportanceTexture), Texture, WeightingFunc); }
        public void ImportanceSample(ImportanceTexture Texture, Vector2D Rand, int Samples, float Intensity, Vector2D SamplePosition, LinearColor SampleColor, float SampleIntensity, float SampleSize) { Invoke(nameof(ImportanceSample), Texture, Rand, Samples, Intensity, SamplePosition, SampleColor, SampleIntensity, SampleSize); }
        public void BreakImportanceTexture(ImportanceTexture ImportanceTexture, Texture2D Texture, byte WeightingFunc) { Invoke(nameof(BreakImportanceTexture), ImportanceTexture, Texture, WeightingFunc); }
    }
    public class Layer : Object
    {
        public Layer(nint addr) : base(addr) { }
        public Object LayerName { get { return this[nameof(LayerName)]; } set { this[nameof(LayerName)] = value; } }
        public bool bIsVisible { get { return this[nameof(bIsVisible)].Flag; } set { this[nameof(bIsVisible)].Flag = value; } }
        public Array<LayerActorStats> ActorStats { get { return new Array<LayerActorStats>(this[nameof(ActorStats)].Address); } }
    }
    public class LevelPartitionInterface : Interface
    {
        public LevelPartitionInterface(nint addr) : base(addr) { }
    }
    public class ActorContainer : Object
    {
        public ActorContainer(nint addr) : base(addr) { }
        public Object Actors { get { return this[nameof(Actors)]; } set { this[nameof(Actors)] = value; } }
    }
    public class LevelActorContainer : Object
    {
        public LevelActorContainer(nint addr) : base(addr) { }
        public Array<Actor> Actors { get { return new Array<Actor>(this[nameof(Actors)].Address); } }
    }
    public class LevelBounds : Actor
    {
        public LevelBounds(nint addr) : base(addr) { }
        public BoxComponent BoxComponent { get { return this[nameof(BoxComponent)].As<BoxComponent>(); } set { this["BoxComponent"] = value; } }
        public bool bAutoUpdateBounds { get { return this[nameof(bAutoUpdateBounds)].Flag; } set { this[nameof(bAutoUpdateBounds)].Flag = value; } }
    }
    public class LevelInstanceComponent : SceneComponent
    {
        public LevelInstanceComponent(nint addr) : base(addr) { }
    }
    public class LevelInstanceEditorInstanceActor : Actor
    {
        public LevelInstanceEditorInstanceActor(nint addr) : base(addr) { }
    }
    public class LevelStreamingLevelInstanceEditor : LevelStreamingAlwaysLoaded
    {
        public LevelStreamingLevelInstanceEditor(nint addr) : base(addr) { }
    }
    public class LevelInstanceEditorObject : Object
    {
        public LevelInstanceEditorObject(nint addr) : base(addr) { }
    }
    public class LevelInstancePivot : Actor
    {
        public LevelInstancePivot(nint addr) : base(addr) { }
    }
    public class LevelInstanceInterface : Interface
    {
        public LevelInstanceInterface(nint addr) : base(addr) { }
    }
    public class LevelStreamingLevelInstance : LevelStreamingDynamic
    {
        public LevelStreamingLevelInstance(nint addr) : base(addr) { }
    }
    public class LevelInstanceSubsystem : WorldSubsystem
    {
        public LevelInstanceSubsystem(nint addr) : base(addr) { }
    }
    public class LevelScriptActor : Actor
    {
        public LevelScriptActor(nint addr) : base(addr) { }
        public bool bInputEnabled { get { return this[nameof(bInputEnabled)].Flag; } set { this[nameof(bInputEnabled)].Flag = value; } }
        public void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation) { Invoke(nameof(WorldOriginLocationChanged), OldOriginLocation, NewOriginLocation); }
        public void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) { Invoke(nameof(SetCinematicMode), bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning); }
        public bool RemoteEvent(Object EventName) { return Invoke<bool>(nameof(RemoteEvent), EventName); }
        public void LevelReset() { Invoke(nameof(LevelReset)); }
    }
    public class LevelScriptBlueprint : Blueprint
    {
        public LevelScriptBlueprint(nint addr) : base(addr) { }
    }
    public class LightmappedSurfaceCollection : Object
    {
        public LightmappedSurfaceCollection(nint addr) : base(addr) { }
        public Model SourceModel { get { return this[nameof(SourceModel)].As<Model>(); } set { this["SourceModel"] = value; } }
        public Array<int> Surfaces { get { return new Array<int>(this[nameof(Surfaces)].Address); } }
    }
    public class LightmassCharacterIndirectDetailVolume : Volume
    {
        public LightmassCharacterIndirectDetailVolume(nint addr) : base(addr) { }
    }
    public class LightmassImportanceVolume : Volume
    {
        public LightmassImportanceVolume(nint addr) : base(addr) { }
    }
    public class LightmassPrimitiveSettingsObject : Object
    {
        public LightmassPrimitiveSettingsObject(nint addr) : base(addr) { }
        public LightmassPrimitiveSettings LightmassSettings { get { return this[nameof(LightmassSettings)].As<LightmassPrimitiveSettings>(); } set { this["LightmassSettings"] = value; } }
    }
    public class LightWeightInstanceBlueprintFunctionLibrary : BlueprintFunctionLibrary
    {
        public LightWeightInstanceBlueprintFunctionLibrary(nint addr) : base(addr) { }
        public ActorInstanceHandle CreateNewLightWeightInstance(Object actorClass, Transform Transform, DataLayerInstance Layer, World World) { return Invoke<ActorInstanceHandle>(nameof(CreateNewLightWeightInstance), actorClass, Transform, Layer, World); }
        public ActorInstanceHandle ConvertActorToLightWeightInstance(Actor Actor) { return Invoke<ActorInstanceHandle>(nameof(ConvertActorToLightWeightInstance), Actor); }
    }
    public class ActorInstanceHandleInterface : Object
    {
        public ActorInstanceHandleInterface(nint addr) : base(addr) { }
    }
    public class LightWeightInstanceManager : Actor
    {
        public LightWeightInstanceManager(nint addr) : base(addr) { }
        public Object RepresentedClass { get { return this[nameof(RepresentedClass)]; } set { this[nameof(RepresentedClass)] = value; } }
        public Object AcceptedClass { get { return this[nameof(AcceptedClass)]; } set { this[nameof(AcceptedClass)] = value; } }
        public Array<Transform> InstanceTransforms { get { return new Array<Transform>(this[nameof(InstanceTransforms)].Address); } }
        public Array<int> FreeIndices { get { return new Array<int>(this[nameof(FreeIndices)].Address); } }
        public Array<bool> ValidIndices { get { return new Array<bool>(this[nameof(ValidIndices)].Address); } }
        public void OnRep_Transforms() { Invoke(nameof(OnRep_Transforms)); }
    }
    public class LightWeightInstanceStaticMeshManager : LightWeightInstanceManager
    {
        public LightWeightInstanceStaticMeshManager(nint addr) : base(addr) { }
        public Object StaticMesh { get { return this[nameof(StaticMesh)]; } set { this[nameof(StaticMesh)] = value; } }
        public HierarchicalInstancedStaticMeshComponent InstancedStaticMeshComponent { get { return this[nameof(InstancedStaticMeshComponent)].As<HierarchicalInstancedStaticMeshComponent>(); } set { this["InstancedStaticMeshComponent"] = value; } }
        public Array<int> RenderingIndicesToDataIndices { get { return new Array<int>(this[nameof(RenderingIndicesToDataIndices)].Address); } }
        public Array<int> DataIndicesToRenderingIndices { get { return new Array<int>(this[nameof(DataIndicesToRenderingIndices)].Address); } }
        public void OnRep_StaticMesh() { Invoke(nameof(OnRep_StaticMesh)); }
    }
    public class LocationVolume : Volume
    {
        public LocationVolume(nint addr) : base(addr) { }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
        public bool bIsRuntime { get { return this[nameof(bIsRuntime)].Flag; } set { this[nameof(bIsRuntime)].Flag = value; } }
        public void Unload() { Invoke(nameof(Unload)); }
        public void Load() { Invoke(nameof(Load)); }
        public bool IsLoaded() { return Invoke<bool>(nameof(IsLoaded)); }
    }
    public class LODActor : Actor
    {
        public LODActor(nint addr) : base(addr) { }
        public StaticMeshComponent StaticMeshComponent { get { return this[nameof(StaticMeshComponent)].As<StaticMeshComponent>(); } set { this["StaticMeshComponent"] = value; } }
        public Object InstancedStaticMeshComponents { get { return this[nameof(InstancedStaticMeshComponents)]; } set { this[nameof(InstancedStaticMeshComponents)] = value; } }
        public HLODProxy Proxy { get { return this[nameof(Proxy)].As<HLODProxy>(); } set { this["Proxy"] = value; } }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public float LODDrawDistance { get { return this[nameof(LODDrawDistance)].GetValue<float>(); } set { this[nameof(LODDrawDistance)].SetValue<float>(value); } }
        public int LODLevel { get { return this[nameof(LODLevel)].GetValue<int>(); } set { this[nameof(LODLevel)].SetValue<int>(value); } }
        public Array<Actor> SubActors { get { return new Array<Actor>(this[nameof(SubActors)].Address); } }
        public byte CachedNumHLODLevels { get { return this[nameof(CachedNumHLODLevels)].GetValue<byte>(); } set { this[nameof(CachedNumHLODLevels)].SetValue<byte>(value); } }
        public void OnSubActorEndPlay(Actor Actor, byte Reason) { Invoke(nameof(OnSubActorEndPlay), Actor, Reason); }
    }
    public class MaterialInstanceActor : Actor
    {
        public MaterialInstanceActor(nint addr) : base(addr) { }
        public Array<Actor> TargetActors { get { return new Array<Actor>(this[nameof(TargetActors)].Address); } }
    }
    public class MaterialInstanceEditorOnlyData : MaterialInterfaceEditorOnlyData
    {
        public MaterialInstanceEditorOnlyData(nint addr) : base(addr) { }
        public StaticParameterSetEditorOnlyData StaticParameters { get { return this[nameof(StaticParameters)].As<StaticParameterSetEditorOnlyData>(); } set { this["StaticParameters"] = value; } }
    }
    public class MaterialInstanceDynamic : MaterialInstance
    {
        public MaterialInstanceDynamic(nint addr) : base(addr) { }
        public void SetVectorParameterValueByInfo(MaterialParameterInfo ParameterInfo, LinearColor Value) { Invoke(nameof(SetVectorParameterValueByInfo), ParameterInfo, Value); }
        public void SetVectorParameterValue(Object ParameterName, LinearColor Value) { Invoke(nameof(SetVectorParameterValue), ParameterName, Value); }
        public void SetTextureParameterValueByInfo(MaterialParameterInfo ParameterInfo, Texture Value) { Invoke(nameof(SetTextureParameterValueByInfo), ParameterInfo, Value); }
        public void SetTextureParameterValue(Object ParameterName, Texture Value) { Invoke(nameof(SetTextureParameterValue), ParameterName, Value); }
        public void SetScalarParameterValueByInfo(MaterialParameterInfo ParameterInfo, float Value) { Invoke(nameof(SetScalarParameterValueByInfo), ParameterInfo, Value); }
        public void SetScalarParameterValue(Object ParameterName, float Value) { Invoke(nameof(SetScalarParameterValue), ParameterName, Value); }
        public bool SetScalarParameterByIndex(int ParameterIndex, float Value) { return Invoke<bool>(nameof(SetScalarParameterByIndex), ParameterIndex, Value); }
        public void SetRuntimeVirtualTextureParameterValueByInfo(MaterialParameterInfo ParameterInfo, RuntimeVirtualTexture Value) { Invoke(nameof(SetRuntimeVirtualTextureParameterValueByInfo), ParameterInfo, Value); }
        public void SetRuntimeVirtualTextureParameterValue(Object ParameterName, RuntimeVirtualTexture Value) { Invoke(nameof(SetRuntimeVirtualTextureParameterValue), ParameterName, Value); }
        public void SetDoubleVectorParameterValue(Object ParameterName, Vector4 Value) { Invoke(nameof(SetDoubleVectorParameterValue), ParameterName, Value); }
        public void K2_InterpolateMaterialInstanceParams(MaterialInstance SourceA, MaterialInstance SourceB, float Alpha) { Invoke(nameof(K2_InterpolateMaterialInstanceParams), SourceA, SourceB, Alpha); }
        public LinearColor K2_GetVectorParameterValueByInfo(MaterialParameterInfo ParameterInfo) { return Invoke<LinearColor>(nameof(K2_GetVectorParameterValueByInfo), ParameterInfo); }
        public LinearColor K2_GetVectorParameterValue(Object ParameterName) { return Invoke<LinearColor>(nameof(K2_GetVectorParameterValue), ParameterName); }
        public Texture K2_GetTextureParameterValueByInfo(MaterialParameterInfo ParameterInfo) { return Invoke<Texture>(nameof(K2_GetTextureParameterValueByInfo), ParameterInfo); }
        public Texture K2_GetTextureParameterValue(Object ParameterName) { return Invoke<Texture>(nameof(K2_GetTextureParameterValue), ParameterName); }
        public float K2_GetScalarParameterValueByInfo(MaterialParameterInfo ParameterInfo) { return Invoke<float>(nameof(K2_GetScalarParameterValueByInfo), ParameterInfo); }
        public float K2_GetScalarParameterValue(Object ParameterName) { return Invoke<float>(nameof(K2_GetScalarParameterValue), ParameterName); }
        public void K2_CopyMaterialInstanceParameters(MaterialInterface Source, bool bQuickParametersOnly) { Invoke(nameof(K2_CopyMaterialInstanceParameters), Source, bQuickParametersOnly); }
        public bool InitializeScalarParameterAndGetIndex(Object ParameterName, float Value, int OutParameterIndex) { return Invoke<bool>(nameof(InitializeScalarParameterAndGetIndex), ParameterName, Value, OutParameterIndex); }
        public void CopyParameterOverrides(MaterialInstance MaterialInstance) { Invoke(nameof(CopyParameterOverrides), MaterialInstance); }
        public void CopyInterpParameters(MaterialInstance Source) { Invoke(nameof(CopyInterpParameters), Source); }
    }
    public class MeshMergeCullingVolume : Volume
    {
        public MeshMergeCullingVolume(nint addr) : base(addr) { }
    }
    public class MeshSimplificationSettings : DeveloperSettings
    {
        public MeshSimplificationSettings(nint addr) : base(addr) { }
        public Object MeshReductionModuleName { get { return this[nameof(MeshReductionModuleName)]; } set { this[nameof(MeshReductionModuleName)] = value; } }
        public bool bMeshReductionBackwardCompatible { get { return this[nameof(bMeshReductionBackwardCompatible)].Flag; } set { this[nameof(bMeshReductionBackwardCompatible)].Flag = value; } }
    }
    public class MeshVertexPainterKismetLibrary : BlueprintFunctionLibrary
    {
        public MeshVertexPainterKismetLibrary(nint addr) : base(addr) { }
        public void RemovePaintedVertices(StaticMeshComponent StaticMeshComponent) { Invoke(nameof(RemovePaintedVertices), StaticMeshComponent); }
        public void PaintVerticesSingleColor(StaticMeshComponent StaticMeshComponent, LinearColor fillColor, bool bConvertToSRGB) { Invoke(nameof(PaintVerticesSingleColor), StaticMeshComponent, fillColor, bConvertToSRGB); }
        public void PaintVerticesLerpAlongAxis(StaticMeshComponent StaticMeshComponent, LinearColor StartColor, LinearColor EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB) { Invoke(nameof(PaintVerticesLerpAlongAxis), StaticMeshComponent, StartColor, EndColor, Axis, bConvertToSRGB); }
    }
    public class Model : Object
    {
        public Model(nint addr) : base(addr) { }
    }
    public class NavigationObjectBase : Actor
    {
        public NavigationObjectBase(nint addr) : base(addr) { }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public BillboardComponent GoodSprite { get { return this[nameof(GoodSprite)].As<BillboardComponent>(); } set { this["GoodSprite"] = value; } }
        public BillboardComponent BadSprite { get { return this[nameof(BadSprite)].As<BillboardComponent>(); } set { this["BadSprite"] = value; } }
        public bool bIsPIEPlayerStart { get { return this[nameof(bIsPIEPlayerStart)].Flag; } set { this[nameof(bIsPIEPlayerStart)].Flag = value; } }
    }
    public class SimulatedClientNetConnection : NetConnection
    {
        public SimulatedClientNetConnection(nint addr) : base(addr) { }
    }
    public class NetworkSettings : DeveloperSettings
    {
        public NetworkSettings(nint addr) : base(addr) { }
        public bool bVerifyPeer { get { return this[nameof(bVerifyPeer)].Flag; } set { this[nameof(bVerifyPeer)].Flag = value; } }
        public bool bEnableMultiplayerWorldOriginRebasing { get { return this[nameof(bEnableMultiplayerWorldOriginRebasing)].Flag; } set { this[nameof(bEnableMultiplayerWorldOriginRebasing)].Flag = value; } }
        public Array<NetworkEmulationProfileDescription> NetworkEmulationProfiles { get { return new Array<NetworkEmulationProfileDescription>(this[nameof(NetworkEmulationProfiles)].Address); } }
    }
    public class BandwidthTestActor : Actor
    {
        public BandwidthTestActor(nint addr) : base(addr) { }
        public BandwidthTestGenerator BandwidthGenerator { get { return this[nameof(BandwidthGenerator)].As<BandwidthTestGenerator>(); } set { this["BandwidthGenerator"] = value; } }
    }
    public class NetFaultConfig : EscalationManagerConfig
    {
        public NetFaultConfig(nint addr) : base(addr) { }
    }
    public class NetPushModelHelpers : BlueprintFunctionLibrary
    {
        public NetPushModelHelpers(nint addr) : base(addr) { }
        public void MarkPropertyDirtyFromRepIndex(Object Object, int RepIndex, Object PropertyName) { Invoke(nameof(MarkPropertyDirtyFromRepIndex), Object, RepIndex, PropertyName); }
        public void MarkPropertyDirty(Object Object, Object PropertyName) { Invoke(nameof(MarkPropertyDirty), Object, PropertyName); }
    }
    public class RPCDoSDetectionConfig : Object
    {
        public RPCDoSDetectionConfig(nint addr) : base(addr) { }
        public bool bRPCDoSDetection { get { return this[nameof(bRPCDoSDetection)].Flag; } set { this[nameof(bRPCDoSDetection)].Flag = value; } }
        public bool bRPCDoSAnalytics { get { return this[nameof(bRPCDoSAnalytics)].Flag; } set { this[nameof(bRPCDoSAnalytics)].Flag = value; } }
        public int HitchTimeQuotaMS { get { return this[nameof(HitchTimeQuotaMS)].GetValue<int>(); } set { this[nameof(HitchTimeQuotaMS)].SetValue<int>(value); } }
        public int HitchSuspendDetectionTimeMS { get { return this[nameof(HitchSuspendDetectionTimeMS)].GetValue<int>(); } set { this[nameof(HitchSuspendDetectionTimeMS)].SetValue<int>(value); } }
        public Array<Object> DetectionSeverity { get { return new Array<Object>(this[nameof(DetectionSeverity)].Address); } }
        public int InitialConnectToleranceMS { get { return this[nameof(InitialConnectToleranceMS)].GetValue<int>(); } set { this[nameof(InitialConnectToleranceMS)].SetValue<int>(value); } }
        public Array<Object> RPCBlockWhitelist { get { return new Array<Object>(this[nameof(RPCBlockWhitelist)].Address); } }
        public Array<Object> RPCBlockAllowlist { get { return new Array<Object>(this[nameof(RPCBlockAllowlist)].Address); } }
        public Array<RPCAnalyticsThreshold> RPCAnalyticsThresholds { get { return new Array<RPCAnalyticsThreshold>(this[nameof(RPCAnalyticsThresholds)].Address); } }
        public double RPCAnalyticsOverrideChance { get { return this[nameof(RPCAnalyticsOverrideChance)].GetValue<double>(); } set { this[nameof(RPCAnalyticsOverrideChance)].SetValue<double>(value); } }
    }
    public class NetworkSubsystem : WorldSubsystem
    {
        public NetworkSubsystem(nint addr) : base(addr) { }
    }
    public class Note : Actor
    {
        public Note(nint addr) : base(addr) { }
    }
    public class ObjectLibrary : Object
    {
        public ObjectLibrary(nint addr) : base(addr) { }
        public Object ObjectBaseClass { get { return this[nameof(ObjectBaseClass)].As<Object>(); } set { this["ObjectBaseClass"] = value; } } // ClassPtrProperty
        public bool bHasBlueprintClasses { get { return this[nameof(bHasBlueprintClasses)].Flag; } set { this[nameof(bHasBlueprintClasses)].Flag = value; } }
        public Array<Object> Objects { get { return new Array<Object>(this[nameof(Objects)].Address); } }
        public Array<Object> WeakObjects { get { return new Array<Object>(this[nameof(WeakObjects)].Address); } }
        public bool bUseWeakReferences { get { return this[nameof(bUseWeakReferences)].Flag; } set { this[nameof(bUseWeakReferences)].Flag = value; } }
        public bool bIsFullyLoaded { get { return this[nameof(bIsFullyLoaded)].Flag; } set { this[nameof(bIsFullyLoaded)].Flag = value; } }
    }
    public class ObjectReferencer : Object
    {
        public ObjectReferencer(nint addr) : base(addr) { }
        public Array<Object> ReferencedObjects { get { return new Array<Object>(this[nameof(ReferencedObjects)].Address); } }
    }
    public class ObjectTraceWorldSubsystem : WorldSubsystem
    {
        public ObjectTraceWorldSubsystem(nint addr) : base(addr) { }
    }
    public class PackageMapClient : PackageMap
    {
        public PackageMapClient(nint addr) : base(addr) { }
    }
    public class PackedLevelActor : LevelInstance
    {
        public PackedLevelActor(nint addr) : base(addr) { }
    }
    public class EngineHandlerComponentFactory : HandlerComponentFactory
    {
        public EngineHandlerComponentFactory(nint addr) : base(addr) { }
    }
    public class PainCausingVolume : PhysicsVolume
    {
        public PainCausingVolume(nint addr) : base(addr) { }
        public bool bPainCausing { get { return this[nameof(bPainCausing)].Flag; } set { this[nameof(bPainCausing)].Flag = value; } }
        public float DamagePerSec { get { return this[nameof(DamagePerSec)].GetValue<float>(); } set { this[nameof(DamagePerSec)].SetValue<float>(value); } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public float PainInterval { get { return this[nameof(PainInterval)].GetValue<float>(); } set { this[nameof(PainInterval)].SetValue<float>(value); } }
        public bool bEntryPain { get { return this[nameof(bEntryPain)].Flag; } set { this[nameof(bEntryPain)].Flag = value; } }
        public bool BACKUP_bPainCausing { get { return this[nameof(BACKUP_bPainCausing)].Flag; } set { this[nameof(BACKUP_bPainCausing)].Flag = value; } }
        public Controller DamageInstigator { get { return this[nameof(DamageInstigator)].As<Controller>(); } set { this["DamageInstigator"] = value; } }
    }
    public class ParticleEventManager : Actor
    {
        public ParticleEventManager(nint addr) : base(addr) { }
    }
    public class AsyncPhysicsInputComponent : ActorComponent
    {
        public AsyncPhysicsInputComponent(nint addr) : base(addr) { }
        public Object DataClass { get { return this[nameof(DataClass)]; } set { this[nameof(DataClass)] = value; } }
        public Array<AsyncPhysicsData> BufferedData { get { return new Array<AsyncPhysicsData>(this[nameof(BufferedData)].Address); } }
        public AsyncPhysicsData DataToConsume { get { return this[nameof(DataToConsume)].As<AsyncPhysicsData>(); } set { this["DataToConsume"] = value; } }
        public AsyncPhysicsData DataToWrite { get { return this[nameof(DataToWrite)].As<AsyncPhysicsData>(); } set { this["DataToWrite"] = value; } }
        public void ServerRPCBufferInput(AsyncPhysicsData AsyncPhysicsData) { Invoke(nameof(ServerRPCBufferInput), AsyncPhysicsData); }
        public AsyncPhysicsData GetDataToWrite() { return Invoke<AsyncPhysicsData>(nameof(GetDataToWrite)); }
        public AsyncPhysicsData GetDataToConsume() { return Invoke<AsyncPhysicsData>(nameof(GetDataToConsume)); }
    }
    public class BodySetup : BodySetupCore
    {
        public BodySetup(nint addr) : base(addr) { }
        public KAggregateGeom AggGeom { get { return this[nameof(AggGeom)].As<KAggregateGeom>(); } set { this["AggGeom"] = value; } }
        public bool bAlwaysFullAnimWeight { get { return this[nameof(bAlwaysFullAnimWeight)].Flag; } set { this[nameof(bAlwaysFullAnimWeight)].Flag = value; } }
        public bool bConsiderForBounds { get { return this[nameof(bConsiderForBounds)].Flag; } set { this[nameof(bConsiderForBounds)].Flag = value; } }
        public bool bMeshCollideAll { get { return this[nameof(bMeshCollideAll)].Flag; } set { this[nameof(bMeshCollideAll)].Flag = value; } }
        public bool bDoubleSidedGeometry { get { return this[nameof(bDoubleSidedGeometry)].Flag; } set { this[nameof(bDoubleSidedGeometry)].Flag = value; } }
        public bool bGenerateNonMirroredCollision { get { return this[nameof(bGenerateNonMirroredCollision)].Flag; } set { this[nameof(bGenerateNonMirroredCollision)].Flag = value; } }
        public bool bSharedCookedData { get { return this[nameof(bSharedCookedData)].Flag; } set { this[nameof(bSharedCookedData)].Flag = value; } }
        public bool bGenerateMirroredCollision { get { return this[nameof(bGenerateMirroredCollision)].Flag; } set { this[nameof(bGenerateMirroredCollision)].Flag = value; } }
        public bool bSupportUVsAndFaceRemap { get { return this[nameof(bSupportUVsAndFaceRemap)].Flag; } set { this[nameof(bSupportUVsAndFaceRemap)].Flag = value; } }
        public bool bNeverNeedsCookedCollisionData { get { return this[nameof(bNeverNeedsCookedCollisionData)].Flag; } set { this[nameof(bNeverNeedsCookedCollisionData)].Flag = value; } }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public WalkableSlopeOverride WalkableSlopeOverride { get { return this[nameof(WalkableSlopeOverride)].As<WalkableSlopeOverride>(); } set { this["WalkableSlopeOverride"] = value; } }
        public BodyInstance DefaultInstance { get { return this[nameof(DefaultInstance)].As<BodyInstance>(); } set { this["DefaultInstance"] = value; } }
        public Vector BuildScale3D { get { return this[nameof(BuildScale3D)].As<Vector>(); } set { this["BuildScale3D"] = value; } }
    }
    public class ConstraintInstanceBlueprintLibrary : BlueprintFunctionLibrary
    {
        public ConstraintInstanceBlueprintLibrary(nint addr) : base(addr) { }
        public void SetProjectionParams(ConstraintInstanceAccessor Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha) { Invoke(nameof(SetProjectionParams), Accessor, bEnableProjection, ProjectionLinearAlpha, ProjectionAngularAlpha); }
        public void SetParentDominates(ConstraintInstanceAccessor Accessor, bool bParentDominates) { Invoke(nameof(SetParentDominates), Accessor, bParentDominates); }
        public void SetOrientationDriveTwistAndSwing(ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive) { Invoke(nameof(SetOrientationDriveTwistAndSwing), Accessor, bEnableTwistDrive, bEnableSwingDrive); }
        public void SetOrientationDriveSLERP(ConstraintInstanceAccessor Accessor, bool bEnableSLERP) { Invoke(nameof(SetOrientationDriveSLERP), Accessor, bEnableSLERP); }
        public void SetLinearVelocityTarget(ConstraintInstanceAccessor Accessor, Vector InVelTarget) { Invoke(nameof(SetLinearVelocityTarget), Accessor, InVelTarget); }
        public void SetLinearVelocityDrive(ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) { Invoke(nameof(SetLinearVelocityDrive), Accessor, bEnableDriveX, bEnableDriveY, bEnableDriveZ); }
        public void SetLinearSoftLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance) { Invoke(nameof(SetLinearSoftLimitParams), Accessor, bSoftLinearLimit, LinearLimitStiffness, LinearLimitDamping, LinearLimitRestitution, LinearLimitContactDistance); }
        public void SetLinearPositionTarget(ConstraintInstanceAccessor Accessor, Vector InPosTarget) { Invoke(nameof(SetLinearPositionTarget), Accessor, InPosTarget); }
        public void SetLinearPositionDrive(ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) { Invoke(nameof(SetLinearPositionDrive), Accessor, bEnableDriveX, bEnableDriveY, bEnableDriveZ); }
        public void SetLinearPlasticity(ConstraintInstanceAccessor Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType) { Invoke(nameof(SetLinearPlasticity), Accessor, bLinearPlasticity, LinearPlasticityThreshold, PlasticityType); }
        public void SetLinearLimits(ConstraintInstanceAccessor Accessor, byte XMotion, byte YMotion, byte ZMotion, float Limit) { Invoke(nameof(SetLinearLimits), Accessor, XMotion, YMotion, ZMotion, Limit); }
        public void SetLinearDriveParams(ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit) { Invoke(nameof(SetLinearDriveParams), Accessor, PositionStrength, VelocityStrength, InForceLimit); }
        public void SetLinearBreakable(ConstraintInstanceAccessor Accessor, bool bLinearBreakable, float LinearBreakThreshold) { Invoke(nameof(SetLinearBreakable), Accessor, bLinearBreakable, LinearBreakThreshold); }
        public void SetDisableCollision(ConstraintInstanceAccessor Accessor, bool bDisableCollision) { Invoke(nameof(SetDisableCollision), Accessor, bDisableCollision); }
        public void SetContactTransferScale(ConstraintInstanceAccessor Accessor, float ContactTransferScale) { Invoke(nameof(SetContactTransferScale), Accessor, ContactTransferScale); }
        public void SetAngularVelocityTarget(ConstraintInstanceAccessor Accessor, Vector InVelTarget) { Invoke(nameof(SetAngularVelocityTarget), Accessor, InVelTarget); }
        public void SetAngularVelocityDriveTwistAndSwing(ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive) { Invoke(nameof(SetAngularVelocityDriveTwistAndSwing), Accessor, bEnableTwistDrive, bEnableSwingDrive); }
        public void SetAngularVelocityDriveSLERP(ConstraintInstanceAccessor Accessor, bool bEnableSLERP) { Invoke(nameof(SetAngularVelocityDriveSLERP), Accessor, bEnableSLERP); }
        public void SetAngularSoftTwistLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance) { Invoke(nameof(SetAngularSoftTwistLimitParams), Accessor, bSoftTwistLimit, TwistLimitStiffness, TwistLimitDamping, TwistLimitRestitution, TwistLimitContactDistance); }
        public void SetAngularSoftSwingLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance) { Invoke(nameof(SetAngularSoftSwingLimitParams), Accessor, bSoftSwingLimit, SwingLimitStiffness, SwingLimitDamping, SwingLimitRestitution, SwingLimitContactDistance); }
        public void SetAngularPlasticity(ConstraintInstanceAccessor Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold) { Invoke(nameof(SetAngularPlasticity), Accessor, bAngularPlasticity, AngularPlasticityThreshold); }
        public void SetAngularOrientationTarget(ConstraintInstanceAccessor Accessor, Rotator InPosTarget) { Invoke(nameof(SetAngularOrientationTarget), Accessor, InPosTarget); }
        public void SetAngularLimits(ConstraintInstanceAccessor Accessor, byte Swing1MotionType, float Swing1LimitAngle, byte Swing2MotionType, float Swing2LimitAngle, byte TwistMotionType, float TwistLimitAngle) { Invoke(nameof(SetAngularLimits), Accessor, Swing1MotionType, Swing1LimitAngle, Swing2MotionType, Swing2LimitAngle, TwistMotionType, TwistLimitAngle); }
        public void SetAngularDriveParams(ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit) { Invoke(nameof(SetAngularDriveParams), Accessor, PositionStrength, VelocityStrength, InForceLimit); }
        public void SetAngularDriveMode(ConstraintInstanceAccessor Accessor, byte DriveMode) { Invoke(nameof(SetAngularDriveMode), Accessor, DriveMode); }
        public void SetAngularBreakable(ConstraintInstanceAccessor Accessor, bool bAngularBreakable, float AngularBreakThreshold) { Invoke(nameof(SetAngularBreakable), Accessor, bAngularBreakable, AngularBreakThreshold); }
        public void GetProjectionParams(ConstraintInstanceAccessor Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha) { Invoke(nameof(GetProjectionParams), Accessor, bEnableProjection, ProjectionLinearAlpha, ProjectionAngularAlpha); }
        public bool GetParentDominates(ConstraintInstanceAccessor Accessor) { return Invoke<bool>(nameof(GetParentDominates), Accessor); }
        public void GetOrientationDriveTwistAndSwing(ConstraintInstanceAccessor Accessor, bool bOutEnableTwistDrive, bool bOutEnableSwingDrive) { Invoke(nameof(GetOrientationDriveTwistAndSwing), Accessor, bOutEnableTwistDrive, bOutEnableSwingDrive); }
        public void GetOrientationDriveSLERP(ConstraintInstanceAccessor Accessor, bool bOutEnableSLERP) { Invoke(nameof(GetOrientationDriveSLERP), Accessor, bOutEnableSLERP); }
        public void GetLinearVelocityTarget(ConstraintInstanceAccessor Accessor, Vector OutVelTarget) { Invoke(nameof(GetLinearVelocityTarget), Accessor, OutVelTarget); }
        public void GetLinearVelocityDrive(ConstraintInstanceAccessor Accessor, bool bOutEnableDriveX, bool bOutEnableDriveY, bool bOutEnableDriveZ) { Invoke(nameof(GetLinearVelocityDrive), Accessor, bOutEnableDriveX, bOutEnableDriveY, bOutEnableDriveZ); }
        public void GetLinearSoftLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance) { Invoke(nameof(GetLinearSoftLimitParams), Accessor, bSoftLinearLimit, LinearLimitStiffness, LinearLimitDamping, LinearLimitRestitution, LinearLimitContactDistance); }
        public void GetLinearPositionTarget(ConstraintInstanceAccessor Accessor, Vector OutPosTarget) { Invoke(nameof(GetLinearPositionTarget), Accessor, OutPosTarget); }
        public void GetLinearPositionDrive(ConstraintInstanceAccessor Accessor, bool bOutEnableDriveX, bool bOutEnableDriveY, bool bOutEnableDriveZ) { Invoke(nameof(GetLinearPositionDrive), Accessor, bOutEnableDriveX, bOutEnableDriveY, bOutEnableDriveZ); }
        public void GetLinearPlasticity(ConstraintInstanceAccessor Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType) { Invoke(nameof(GetLinearPlasticity), Accessor, bLinearPlasticity, LinearPlasticityThreshold, PlasticityType); }
        public void GetLinearLimits(ConstraintInstanceAccessor Accessor, byte XMotion, byte YMotion, byte ZMotion, float Limit) { Invoke(nameof(GetLinearLimits), Accessor, XMotion, YMotion, ZMotion, Limit); }
        public void GetLinearDriveParams(ConstraintInstanceAccessor Accessor, float OutPositionStrength, float OutVelocityStrength, float OutForceLimit) { Invoke(nameof(GetLinearDriveParams), Accessor, OutPositionStrength, OutVelocityStrength, OutForceLimit); }
        public void GetLinearBreakable(ConstraintInstanceAccessor Accessor, bool bLinearBreakable, float LinearBreakThreshold) { Invoke(nameof(GetLinearBreakable), Accessor, bLinearBreakable, LinearBreakThreshold); }
        public bool GetDisableCollsion(ConstraintInstanceAccessor Accessor) { return Invoke<bool>(nameof(GetDisableCollsion), Accessor); }
        public void GetContactTransferScale(ConstraintInstanceAccessor Accessor, float ContactTransferScale) { Invoke(nameof(GetContactTransferScale), Accessor, ContactTransferScale); }
        public void GetAttachedBodyNames(ConstraintInstanceAccessor Accessor, Object ParentBody, Object ChildBody) { Invoke(nameof(GetAttachedBodyNames), Accessor, ParentBody, ChildBody); }
        public void GetAngularVelocityTarget(ConstraintInstanceAccessor Accessor, Vector OutVelTarget) { Invoke(nameof(GetAngularVelocityTarget), Accessor, OutVelTarget); }
        public void GetAngularVelocityDriveTwistAndSwing(ConstraintInstanceAccessor Accessor, bool bOutEnableTwistDrive, bool bOutEnableSwingDrive) { Invoke(nameof(GetAngularVelocityDriveTwistAndSwing), Accessor, bOutEnableTwistDrive, bOutEnableSwingDrive); }
        public void GetAngularVelocityDriveSLERP(ConstraintInstanceAccessor Accessor, bool bOutEnableSLERP) { Invoke(nameof(GetAngularVelocityDriveSLERP), Accessor, bOutEnableSLERP); }
        public void GetAngularSoftTwistLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance) { Invoke(nameof(GetAngularSoftTwistLimitParams), Accessor, bSoftTwistLimit, TwistLimitStiffness, TwistLimitDamping, TwistLimitRestitution, TwistLimitContactDistance); }
        public void GetAngularSoftSwingLimitParams(ConstraintInstanceAccessor Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance) { Invoke(nameof(GetAngularSoftSwingLimitParams), Accessor, bSoftSwingLimit, SwingLimitStiffness, SwingLimitDamping, SwingLimitRestitution, SwingLimitContactDistance); }
        public void GetAngularPlasticity(ConstraintInstanceAccessor Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold) { Invoke(nameof(GetAngularPlasticity), Accessor, bAngularPlasticity, AngularPlasticityThreshold); }
        public void GetAngularOrientationTarget(ConstraintInstanceAccessor Accessor, Rotator OutPosTarget) { Invoke(nameof(GetAngularOrientationTarget), Accessor, OutPosTarget); }
        public void GetAngularLimits(ConstraintInstanceAccessor Accessor, byte Swing1MotionType, float Swing1LimitAngle, byte Swing2MotionType, float Swing2LimitAngle, byte TwistMotionType, float TwistLimitAngle) { Invoke(nameof(GetAngularLimits), Accessor, Swing1MotionType, Swing1LimitAngle, Swing2MotionType, Swing2LimitAngle, TwistMotionType, TwistLimitAngle); }
        public void GetAngularDriveParams(ConstraintInstanceAccessor Accessor, float OutPositionStrength, float OutVelocityStrength, float OutForceLimit) { Invoke(nameof(GetAngularDriveParams), Accessor, OutPositionStrength, OutVelocityStrength, OutForceLimit); }
        public void GetAngularDriveMode(ConstraintInstanceAccessor Accessor, byte OutDriveMode) { Invoke(nameof(GetAngularDriveMode), Accessor, OutDriveMode); }
        public void GetAngularBreakable(ConstraintInstanceAccessor Accessor, bool bAngularBreakable, float AngularBreakThreshold) { Invoke(nameof(GetAngularBreakable), Accessor, bAngularBreakable, AngularBreakThreshold); }
        public void CopyParams(ConstraintInstanceAccessor Accessor, ConstraintInstanceAccessor SourceAccessor, bool bKeepPosition, bool bKeepRotation) { Invoke(nameof(CopyParams), Accessor, SourceAccessor, bKeepPosition, bKeepRotation); }
    }
    public class PhysicalAnimationComponent : ActorComponent
    {
        public PhysicalAnimationComponent(nint addr) : base(addr) { }
        public float StrengthMultiplyer { get { return this[nameof(StrengthMultiplyer)].GetValue<float>(); } set { this[nameof(StrengthMultiplyer)].SetValue<float>(value); } }
        public SkeletalMeshComponent SkeletalMeshComponent { get { return this[nameof(SkeletalMeshComponent)].As<SkeletalMeshComponent>(); } set { this["SkeletalMeshComponent"] = value; } }
        public void SetStrengthMultiplyer(float InStrengthMultiplyer) { Invoke(nameof(SetStrengthMultiplyer), InStrengthMultiplyer); }
        public void SetSkeletalMeshComponent(SkeletalMeshComponent InSkeletalMeshComponent) { Invoke(nameof(SetSkeletalMeshComponent), InSkeletalMeshComponent); }
        public Transform GetBodyTargetTransform(Object BodyName) { return Invoke<Transform>(nameof(GetBodyTargetTransform), BodyName); }
        public void ApplyPhysicalAnimationSettingsBelow(Object BodyName, PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf) { Invoke(nameof(ApplyPhysicalAnimationSettingsBelow), BodyName, PhysicalAnimationData, bIncludeSelf); }
        public void ApplyPhysicalAnimationSettings(Object BodyName, PhysicalAnimationData PhysicalAnimationData) { Invoke(nameof(ApplyPhysicalAnimationSettings), BodyName, PhysicalAnimationData); }
        public void ApplyPhysicalAnimationProfileBelow(Object BodyName, Object ProfileName, bool bIncludeSelf, bool bClearNotFound) { Invoke(nameof(ApplyPhysicalAnimationProfileBelow), BodyName, ProfileName, bIncludeSelf, bClearNotFound); }
    }
    public class PhysicalMaterialMask : Object
    {
        public PhysicalMaterialMask(nint addr) : base(addr) { }
        public int UVChannelIndex { get { return this[nameof(UVChannelIndex)].GetValue<int>(); } set { this[nameof(UVChannelIndex)].SetValue<int>(value); } }
        public byte AddressX { get { return this[nameof(AddressX)].GetValue<byte>(); } set { this[nameof(AddressX)].SetValue<byte>(value); } }
        public byte AddressY { get { return this[nameof(AddressY)].GetValue<byte>(); } set { this[nameof(AddressY)].SetValue<byte>(value); } }
    }
    public class PhysicsAsset : Object
    {
        public PhysicsAsset(nint addr) : base(addr) { }
        public Array<int> BoundsBodies { get { return new Array<int>(this[nameof(BoundsBodies)].Address); } }
        public Array<SkeletalBodySetup> SkeletalBodySetups { get { return new Array<SkeletalBodySetup>(this[nameof(SkeletalBodySetups)].Address); } }
        public Array<PhysicsConstraintTemplate> ConstraintSetup { get { return new Array<PhysicsConstraintTemplate>(this[nameof(ConstraintSetup)].Address); } }
        public PhysicsAssetSolverSettings SolverSettings { get { return this[nameof(SolverSettings)].As<PhysicsAssetSolverSettings>(); } set { this["SolverSettings"] = value; } }
        public SolverIterations SolverIterations { get { return this[nameof(SolverIterations)].As<SolverIterations>(); } set { this["SolverIterations"] = value; } }
        public EPhysicsAssetSolverType SolverType { get { return (EPhysicsAssetSolverType)this[nameof(SolverType)].GetValue<int>(); } set { this[nameof(SolverType)].SetValue<int>((int)value); } }
        public bool bNotForDedicatedServer { get { return this[nameof(bNotForDedicatedServer)].Flag; } set { this[nameof(bNotForDedicatedServer)].Flag = value; } }
        public ThumbnailInfo ThumbnailInfo { get { return this[nameof(ThumbnailInfo)].As<ThumbnailInfo>(); } set { this["ThumbnailInfo"] = value; } }
        public Array<BodySetup> BodySetup { get { return new Array<BodySetup>(this[nameof(BodySetup)].Address); } }
    }
    public class SkeletalBodySetup : BodySetup
    {
        public SkeletalBodySetup(nint addr) : base(addr) { }
        public bool bSkipScaleFromAnimation { get { return this[nameof(bSkipScaleFromAnimation)].Flag; } set { this[nameof(bSkipScaleFromAnimation)].Flag = value; } }
        public Array<PhysicalAnimationProfile> PhysicalAnimationData { get { return new Array<PhysicalAnimationProfile>(this[nameof(PhysicalAnimationData)].Address); } }
    }
    public class PhysicsCollisionHandler : Object
    {
        public PhysicsCollisionHandler(nint addr) : base(addr) { }
        public float ImpactThreshold { get { return this[nameof(ImpactThreshold)].GetValue<float>(); } set { this[nameof(ImpactThreshold)].SetValue<float>(value); } }
        public float ImpactReFireDelay { get { return this[nameof(ImpactReFireDelay)].GetValue<float>(); } set { this[nameof(ImpactReFireDelay)].SetValue<float>(value); } }
        public SoundBase DefaultImpactSound { get { return this[nameof(DefaultImpactSound)].As<SoundBase>(); } set { this["DefaultImpactSound"] = value; } }
        public float LastImpactSoundTime { get { return this[nameof(LastImpactSoundTime)].GetValue<float>(); } set { this[nameof(LastImpactSoundTime)].SetValue<float>(value); } }
    }
    public class PhysicsConstraintActor : RigidBodyBase
    {
        public PhysicsConstraintActor(nint addr) : base(addr) { }
        public PhysicsConstraintComponent ConstraintComp { get { return this[nameof(ConstraintComp)].As<PhysicsConstraintComponent>(); } set { this["ConstraintComp"] = value; } }
        public Actor ConstraintActor1 { get { return this[nameof(ConstraintActor1)].As<Actor>(); } set { this["ConstraintActor1"] = value; } }
        public Actor ConstraintActor2 { get { return this[nameof(ConstraintActor2)].As<Actor>(); } set { this["ConstraintActor2"] = value; } }
        public bool bDisableCollision { get { return this[nameof(bDisableCollision)].Flag; } set { this[nameof(bDisableCollision)].Flag = value; } }
    }
    public class PhysicsConstraintComponent : SceneComponent
    {
        public PhysicsConstraintComponent(nint addr) : base(addr) { }
        public Actor ConstraintActor1 { get { return this[nameof(ConstraintActor1)].As<Actor>(); } set { this["ConstraintActor1"] = value; } }
        public ConstrainComponentPropName ComponentName1 { get { return this[nameof(ComponentName1)].As<ConstrainComponentPropName>(); } set { this["ComponentName1"] = value; } }
        public Actor ConstraintActor2 { get { return this[nameof(ConstraintActor2)].As<Actor>(); } set { this["ConstraintActor2"] = value; } }
        public ConstrainComponentPropName ComponentName2 { get { return this[nameof(ComponentName2)].As<ConstrainComponentPropName>(); } set { this["ComponentName2"] = value; } }
        public PhysicsConstraintTemplate ConstraintSetup { get { return this[nameof(ConstraintSetup)].As<PhysicsConstraintTemplate>(); } set { this["ConstraintSetup"] = value; } }
        public Object OnConstraintBroken { get { return this[nameof(OnConstraintBroken)]; } set { this[nameof(OnConstraintBroken)] = value; } }
        public Object OnPlasticDeformation { get { return this[nameof(OnPlasticDeformation)]; } set { this[nameof(OnPlasticDeformation)] = value; } }
        public ConstraintInstance ConstraintInstance { get { return this[nameof(ConstraintInstance)].As<ConstraintInstance>(); } set { this["ConstraintInstance"] = value; } }
        public void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) { Invoke(nameof(SetOrientationDriveTwistAndSwing), bEnableTwistDrive, bEnableSwingDrive); }
        public void SetOrientationDriveSLERP(bool bEnableSLERP) { Invoke(nameof(SetOrientationDriveSLERP), bEnableSLERP); }
        public void SetLinearZLimit(byte ConstraintType, float LimitSize) { Invoke(nameof(SetLinearZLimit), ConstraintType, LimitSize); }
        public void SetLinearYLimit(byte ConstraintType, float LimitSize) { Invoke(nameof(SetLinearYLimit), ConstraintType, LimitSize); }
        public void SetLinearXLimit(byte ConstraintType, float LimitSize) { Invoke(nameof(SetLinearXLimit), ConstraintType, LimitSize); }
        public void SetLinearVelocityTarget(Vector InVelTarget) { Invoke(nameof(SetLinearVelocityTarget), InVelTarget); }
        public void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) { Invoke(nameof(SetLinearVelocityDrive), bEnableDriveX, bEnableDriveY, bEnableDriveZ); }
        public void SetLinearPositionTarget(Vector InPosTarget) { Invoke(nameof(SetLinearPositionTarget), InPosTarget); }
        public void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ) { Invoke(nameof(SetLinearPositionDrive), bEnableDriveX, bEnableDriveY, bEnableDriveZ); }
        public void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType) { Invoke(nameof(SetLinearPlasticity), bLinearPlasticity, LinearPlasticityThreshold, PlasticityType); }
        public void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) { Invoke(nameof(SetLinearDriveParams), PositionStrength, VelocityStrength, InForceLimit); }
        public void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold) { Invoke(nameof(SetLinearBreakable), bLinearBreakable, LinearBreakThreshold); }
        public void SetDisableCollision(bool bDisableCollision) { Invoke(nameof(SetDisableCollision), bDisableCollision); }
        public void SetContactTransferScale(float ContactTransferScale) { Invoke(nameof(SetContactTransferScale), ContactTransferScale); }
        public void SetConstraintReferencePosition(byte Frame, Vector RefPosition) { Invoke(nameof(SetConstraintReferencePosition), Frame, RefPosition); }
        public void SetConstraintReferenceOrientation(byte Frame, Vector PriAxis, Vector SecAxis) { Invoke(nameof(SetConstraintReferenceOrientation), Frame, PriAxis, SecAxis); }
        public void SetConstraintReferenceFrame(byte Frame, Transform RefFrame) { Invoke(nameof(SetConstraintReferenceFrame), Frame, RefFrame); }
        public void SetConstrainedComponents(PrimitiveComponent Component1, Object BoneName1, PrimitiveComponent Component2, Object BoneName2) { Invoke(nameof(SetConstrainedComponents), Component1, BoneName1, Component2, BoneName2); }
        public void SetAngularVelocityTarget(Vector InVelTarget) { Invoke(nameof(SetAngularVelocityTarget), InVelTarget); }
        public void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive) { Invoke(nameof(SetAngularVelocityDriveTwistAndSwing), bEnableTwistDrive, bEnableSwingDrive); }
        public void SetAngularVelocityDriveSLERP(bool bEnableSLERP) { Invoke(nameof(SetAngularVelocityDriveSLERP), bEnableSLERP); }
        public void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) { Invoke(nameof(SetAngularVelocityDrive), bEnableSwingDrive, bEnableTwistDrive); }
        public void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle) { Invoke(nameof(SetAngularTwistLimit), ConstraintType, TwistLimitAngle); }
        public void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle) { Invoke(nameof(SetAngularSwing2Limit), MotionType, Swing2LimitAngle); }
        public void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle) { Invoke(nameof(SetAngularSwing1Limit), MotionType, Swing1LimitAngle); }
        public void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold) { Invoke(nameof(SetAngularPlasticity), bAngularPlasticity, AngularPlasticityThreshold); }
        public void SetAngularOrientationTarget(Rotator InPosTarget) { Invoke(nameof(SetAngularOrientationTarget), InPosTarget); }
        public void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive) { Invoke(nameof(SetAngularOrientationDrive), bEnableSwingDrive, bEnableTwistDrive); }
        public void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) { Invoke(nameof(SetAngularDriveParams), PositionStrength, VelocityStrength, InForceLimit); }
        public void SetAngularDriveMode(byte DriveMode) { Invoke(nameof(SetAngularDriveMode), DriveMode); }
        public void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold) { Invoke(nameof(SetAngularBreakable), bAngularBreakable, AngularBreakThreshold); }
        public bool IsBroken() { return Invoke<bool>(nameof(IsBroken)); }
        public float GetCurrentTwist() { return Invoke<float>(nameof(GetCurrentTwist)); }
        public float GetCurrentSwing2() { return Invoke<float>(nameof(GetCurrentSwing2)); }
        public float GetCurrentSwing1() { return Invoke<float>(nameof(GetCurrentSwing1)); }
        public void GetConstraintForce(Vector OutLinearForce, Vector OutAngularForce) { Invoke(nameof(GetConstraintForce), OutLinearForce, OutAngularForce); }
        public ConstraintInstanceAccessor GetConstraint() { return Invoke<ConstraintInstanceAccessor>(nameof(GetConstraint)); }
        public void GetConstrainedComponents(PrimitiveComponent OutComponent1, Object OutBoneName1, PrimitiveComponent OutComponent2, Object OutBoneName2) { Invoke(nameof(GetConstrainedComponents), OutComponent1, OutBoneName1, OutComponent2, OutBoneName2); }
        public void BreakConstraint() { Invoke(nameof(BreakConstraint)); }
    }
    public class PhysicsConstraintTemplate : Object
    {
        public PhysicsConstraintTemplate(nint addr) : base(addr) { }
        public ConstraintInstance DefaultInstance { get { return this[nameof(DefaultInstance)].As<ConstraintInstance>(); } set { this["DefaultInstance"] = value; } }
        public Array<PhysicsConstraintProfileHandle> ProfileHandles { get { return new Array<PhysicsConstraintProfileHandle>(this[nameof(ProfileHandles)].Address); } }
        public ConstraintProfileProperties DefaultProfile { get { return this[nameof(DefaultProfile)].As<ConstraintProfileProperties>(); } set { this["DefaultProfile"] = value; } }
    }
    public class PhysicsHandleComponent : ActorComponent
    {
        public PhysicsHandleComponent(nint addr) : base(addr) { }
        public PrimitiveComponent GrabbedComponent { get { return this[nameof(GrabbedComponent)].As<PrimitiveComponent>(); } set { this["GrabbedComponent"] = value; } }
        public bool bSoftAngularConstraint { get { return this[nameof(bSoftAngularConstraint)].Flag; } set { this[nameof(bSoftAngularConstraint)].Flag = value; } }
        public bool bSoftLinearConstraint { get { return this[nameof(bSoftLinearConstraint)].Flag; } set { this[nameof(bSoftLinearConstraint)].Flag = value; } }
        public bool bInterpolateTarget { get { return this[nameof(bInterpolateTarget)].Flag; } set { this[nameof(bInterpolateTarget)].Flag = value; } }
        public float LinearDamping { get { return this[nameof(LinearDamping)].GetValue<float>(); } set { this[nameof(LinearDamping)].SetValue<float>(value); } }
        public float LinearStiffness { get { return this[nameof(LinearStiffness)].GetValue<float>(); } set { this[nameof(LinearStiffness)].SetValue<float>(value); } }
        public float AngularDamping { get { return this[nameof(AngularDamping)].GetValue<float>(); } set { this[nameof(AngularDamping)].SetValue<float>(value); } }
        public float AngularStiffness { get { return this[nameof(AngularStiffness)].GetValue<float>(); } set { this[nameof(AngularStiffness)].SetValue<float>(value); } }
        public float InterpolationSpeed { get { return this[nameof(InterpolationSpeed)].GetValue<float>(); } set { this[nameof(InterpolationSpeed)].SetValue<float>(value); } }
        public void SetTargetRotation(Rotator NewRotation) { Invoke(nameof(SetTargetRotation), NewRotation); }
        public void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation) { Invoke(nameof(SetTargetLocationAndRotation), NewLocation, NewRotation); }
        public void SetTargetLocation(Vector NewLocation) { Invoke(nameof(SetTargetLocation), NewLocation); }
        public void SetLinearStiffness(float NewLinearStiffness) { Invoke(nameof(SetLinearStiffness), NewLinearStiffness); }
        public void SetLinearDamping(float NewLinearDamping) { Invoke(nameof(SetLinearDamping), NewLinearDamping); }
        public void SetInterpolationSpeed(float NewInterpolationSpeed) { Invoke(nameof(SetInterpolationSpeed), NewInterpolationSpeed); }
        public void SetAngularStiffness(float NewAngularStiffness) { Invoke(nameof(SetAngularStiffness), NewAngularStiffness); }
        public void SetAngularDamping(float NewAngularDamping) { Invoke(nameof(SetAngularDamping), NewAngularDamping); }
        public void ReleaseComponent() { Invoke(nameof(ReleaseComponent)); }
        public void GrabComponentAtLocationWithRotation(PrimitiveComponent Component, Object InBoneName, Vector Location, Rotator Rotation) { Invoke(nameof(GrabComponentAtLocationWithRotation), Component, InBoneName, Location, Rotation); }
        public void GrabComponentAtLocation(PrimitiveComponent Component, Object InBoneName, Vector GrabLocation) { Invoke(nameof(GrabComponentAtLocation), Component, InBoneName, GrabLocation); }
        public void GrabComponent(PrimitiveComponent Component, Object InBoneName, Vector GrabLocation, bool bConstrainRotation) { Invoke(nameof(GrabComponent), Component, InBoneName, GrabLocation, bConstrainRotation); }
        public void GetTargetLocationAndRotation(Vector TargetLocation, Rotator TargetRotation) { Invoke(nameof(GetTargetLocationAndRotation), TargetLocation, TargetRotation); }
        public PrimitiveComponent GetGrabbedComponent() { return Invoke<PrimitiveComponent>(nameof(GetGrabbedComponent)); }
    }
    public class PhysicsSettings : PhysicsSettingsCore
    {
        public PhysicsSettings(nint addr) : base(addr) { }
        public RigidBodyErrorCorrection PhysicErrorCorrection { get { return this[nameof(PhysicErrorCorrection)].As<RigidBodyErrorCorrection>(); } set { this["PhysicErrorCorrection"] = value; } }
        public byte LockedAxis { get { return this[nameof(LockedAxis)].GetValue<byte>(); } set { this[nameof(LockedAxis)].SetValue<byte>(value); } }
        public byte DefaultDegreesOfFreedom { get { return this[nameof(DefaultDegreesOfFreedom)].GetValue<byte>(); } set { this[nameof(DefaultDegreesOfFreedom)].SetValue<byte>(value); } }
        public bool bSuppressFaceRemapTable { get { return this[nameof(bSuppressFaceRemapTable)].Flag; } set { this[nameof(bSuppressFaceRemapTable)].Flag = value; } }
        public bool bSupportUVFromHitResults { get { return this[nameof(bSupportUVFromHitResults)].Flag; } set { this[nameof(bSupportUVFromHitResults)].Flag = value; } }
        public bool bDisableActiveActors { get { return this[nameof(bDisableActiveActors)].Flag; } set { this[nameof(bDisableActiveActors)].Flag = value; } }
        public bool bDisableKinematicStaticPairs { get { return this[nameof(bDisableKinematicStaticPairs)].Flag; } set { this[nameof(bDisableKinematicStaticPairs)].Flag = value; } }
        public bool bDisableKinematicKinematicPairs { get { return this[nameof(bDisableKinematicKinematicPairs)].Flag; } set { this[nameof(bDisableKinematicKinematicPairs)].Flag = value; } }
        public bool bDisableCCD { get { return this[nameof(bDisableCCD)].Flag; } set { this[nameof(bDisableCCD)].Flag = value; } }
        public bool bEnableEnhancedDeterminism { get { return this[nameof(bEnableEnhancedDeterminism)].Flag; } set { this[nameof(bEnableEnhancedDeterminism)].Flag = value; } }
        public float AnimPhysicsMinDeltaTime { get { return this[nameof(AnimPhysicsMinDeltaTime)].GetValue<float>(); } set { this[nameof(AnimPhysicsMinDeltaTime)].SetValue<float>(value); } }
        public bool bSimulateAnimPhysicsAfterReset { get { return this[nameof(bSimulateAnimPhysicsAfterReset)].Flag; } set { this[nameof(bSimulateAnimPhysicsAfterReset)].Flag = value; } }
        public float MinPhysicsDeltaTime { get { return this[nameof(MinPhysicsDeltaTime)].GetValue<float>(); } set { this[nameof(MinPhysicsDeltaTime)].SetValue<float>(value); } }
        public float MaxPhysicsDeltaTime { get { return this[nameof(MaxPhysicsDeltaTime)].GetValue<float>(); } set { this[nameof(MaxPhysicsDeltaTime)].SetValue<float>(value); } }
        public bool bSubstepping { get { return this[nameof(bSubstepping)].Flag; } set { this[nameof(bSubstepping)].Flag = value; } }
        public bool bSubsteppingAsync { get { return this[nameof(bSubsteppingAsync)].Flag; } set { this[nameof(bSubsteppingAsync)].Flag = value; } }
        public bool bTickPhysicsAsync { get { return this[nameof(bTickPhysicsAsync)].Flag; } set { this[nameof(bTickPhysicsAsync)].Flag = value; } }
        public float AsyncFixedTimeStepSize { get { return this[nameof(AsyncFixedTimeStepSize)].GetValue<float>(); } set { this[nameof(AsyncFixedTimeStepSize)].SetValue<float>(value); } }
        public float MaxSubstepDeltaTime { get { return this[nameof(MaxSubstepDeltaTime)].GetValue<float>(); } set { this[nameof(MaxSubstepDeltaTime)].SetValue<float>(value); } }
        public int MaxSubsteps { get { return this[nameof(MaxSubsteps)].GetValue<int>(); } set { this[nameof(MaxSubsteps)].SetValue<int>(value); } }
        public float SyncSceneSmoothingFactor { get { return this[nameof(SyncSceneSmoothingFactor)].GetValue<float>(); } set { this[nameof(SyncSceneSmoothingFactor)].SetValue<float>(value); } }
        public float InitialAverageFrameRate { get { return this[nameof(InitialAverageFrameRate)].GetValue<float>(); } set { this[nameof(InitialAverageFrameRate)].SetValue<float>(value); } }
        public int PhysXTreeRebuildRate { get { return this[nameof(PhysXTreeRebuildRate)].GetValue<int>(); } set { this[nameof(PhysXTreeRebuildRate)].SetValue<int>(value); } }
        public Array<PhysicalSurfaceName> PhysicalSurfaces { get { return new Array<PhysicalSurfaceName>(this[nameof(PhysicalSurfaces)].Address); } }
        public BroadphaseSettings DefaultBroadphaseSettings { get { return this[nameof(DefaultBroadphaseSettings)].As<BroadphaseSettings>(); } set { this["DefaultBroadphaseSettings"] = value; } }
        public float MinDeltaVelocityForHitEvents { get { return this[nameof(MinDeltaVelocityForHitEvents)].GetValue<float>(); } set { this[nameof(MinDeltaVelocityForHitEvents)].SetValue<float>(value); } }
        public ChaosPhysicsSettings ChaosSettings { get { return this[nameof(ChaosSettings)].As<ChaosPhysicsSettings>(); } set { this["ChaosSettings"] = value; } }
    }
    public class PhysicsThruster : RigidBodyBase
    {
        public PhysicsThruster(nint addr) : base(addr) { }
        public PhysicsThrusterComponent ThrusterComponent { get { return this[nameof(ThrusterComponent)].As<PhysicsThrusterComponent>(); } set { this["ThrusterComponent"] = value; } }
    }
    public class RadialForceComponent : SceneComponent
    {
        public RadialForceComponent(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public byte Falloff { get { return this[nameof(Falloff)].GetValue<byte>(); } set { this[nameof(Falloff)].SetValue<byte>(value); } }
        public float ImpulseStrength { get { return this[nameof(ImpulseStrength)].GetValue<float>(); } set { this[nameof(ImpulseStrength)].SetValue<float>(value); } }
        public bool bImpulseVelChange { get { return this[nameof(bImpulseVelChange)].Flag; } set { this[nameof(bImpulseVelChange)].Flag = value; } }
        public bool bIgnoreOwningActor { get { return this[nameof(bIgnoreOwningActor)].Flag; } set { this[nameof(bIgnoreOwningActor)].Flag = value; } }
        public float ForceStrength { get { return this[nameof(ForceStrength)].GetValue<float>(); } set { this[nameof(ForceStrength)].SetValue<float>(value); } }
        public float DestructibleDamage { get { return this[nameof(DestructibleDamage)].GetValue<float>(); } set { this[nameof(DestructibleDamage)].SetValue<float>(value); } }
        public Array<byte> ObjectTypesToAffect { get { return new Array<byte>(this[nameof(ObjectTypesToAffect)].Address); } }
        public void RemoveObjectTypeToAffect(byte ObjectType) { Invoke(nameof(RemoveObjectTypeToAffect), ObjectType); }
        public void FireImpulse() { Invoke(nameof(FireImpulse)); }
        public void AddObjectTypeToAffect(byte ObjectType) { Invoke(nameof(AddObjectTypeToAffect), ObjectType); }
    }
    public class PhysicsFieldComponent : SceneComponent
    {
        public PhysicsFieldComponent(nint addr) : base(addr) { }
    }
    public class PhysicsFieldStatics : BlueprintFunctionLibrary
    {
        public PhysicsFieldStatics(nint addr) : base(addr) { }
        public Vector EvalPhysicsVectorField(Object WorldContextObject, Vector WorldPosition, byte VectorType) { return Invoke<Vector>(nameof(EvalPhysicsVectorField), WorldContextObject, WorldPosition, VectorType); }
        public float EvalPhysicsScalarField(Object WorldContextObject, Vector WorldPosition, byte ScalarType) { return Invoke<float>(nameof(EvalPhysicsScalarField), WorldContextObject, WorldPosition, ScalarType); }
        public int EvalPhysicsIntegerField(Object WorldContextObject, Vector WorldPosition, byte IntegerType) { return Invoke<int>(nameof(EvalPhysicsIntegerField), WorldContextObject, WorldPosition, IntegerType); }
    }
    public class PlatformInputDeviceMapperLibrary : BlueprintFunctionLibrary
    {
        public PlatformInputDeviceMapperLibrary(nint addr) : base(addr) { }
        public PlatformUserId PlatformUserId_None() { return Invoke<PlatformUserId>(nameof(PlatformUserId_None)); }
        public bool NotEqual_PlatformUserId(PlatformUserId A, PlatformUserId B) { return Invoke<bool>(nameof(NotEqual_PlatformUserId), A, B); }
        public bool NotEqual_InputDeviceId(InputDeviceId A, InputDeviceId B) { return Invoke<bool>(nameof(NotEqual_InputDeviceId), A, B); }
        public bool IsValidPlatformId(PlatformUserId UserId) { return Invoke<bool>(nameof(IsValidPlatformId), UserId); }
        public bool IsValidInputDevice(InputDeviceId DeviceID) { return Invoke<bool>(nameof(IsValidInputDevice), DeviceID); }
        public bool IsUnpairedUserId(PlatformUserId PlatformId) { return Invoke<bool>(nameof(IsUnpairedUserId), PlatformId); }
        public bool IsInputDeviceMappedToUnpairedUser(InputDeviceId InputDevice) { return Invoke<bool>(nameof(IsInputDeviceMappedToUnpairedUser), InputDevice); }
        public InputDeviceId InputDeviceId_None() { return Invoke<InputDeviceId>(nameof(InputDeviceId_None)); }
        public PlatformUserId GetUserForUnpairedInputDevices() { return Invoke<PlatformUserId>(nameof(GetUserForUnpairedInputDevices)); }
        public PlatformUserId GetUserForInputDevice(InputDeviceId DeviceID) { return Invoke<PlatformUserId>(nameof(GetUserForInputDevice), DeviceID); }
        public InputDeviceId GetPrimaryInputDeviceForUser(PlatformUserId UserId) { return Invoke<InputDeviceId>(nameof(GetPrimaryInputDeviceForUser), UserId); }
        public EInputDeviceConnectionState GetInputDeviceConnectionState(InputDeviceId DeviceID) { return Invoke<EInputDeviceConnectionState>(nameof(GetInputDeviceConnectionState), DeviceID); }
        public InputDeviceId GetDefaultInputDevice() { return Invoke<InputDeviceId>(nameof(GetDefaultInputDevice)); }
        public int GetAllInputDevicesForUser(PlatformUserId UserId, Array<InputDeviceId> OutInputDevices) { return Invoke<int>(nameof(GetAllInputDevicesForUser), UserId, OutInputDevices); }
        public int GetAllInputDevices(Array<InputDeviceId> OutInputDevices) { return Invoke<int>(nameof(GetAllInputDevices), OutInputDevices); }
        public int GetAllConnectedInputDevices(Array<InputDeviceId> OutInputDevices) { return Invoke<int>(nameof(GetAllConnectedInputDevices), OutInputDevices); }
        public int GetAllActiveUsers(Array<PlatformUserId> OutUsers) { return Invoke<int>(nameof(GetAllActiveUsers), OutUsers); }
        public bool EqualEqual_PlatformUserId(PlatformUserId A, PlatformUserId B) { return Invoke<bool>(nameof(EqualEqual_PlatformUserId), A, B); }
        public bool EqualEqual_InputDeviceId(InputDeviceId A, InputDeviceId B) { return Invoke<bool>(nameof(EqualEqual_InputDeviceId), A, B); }
    }
    public class PlayerStart : NavigationObjectBase
    {
        public PlayerStart(nint addr) : base(addr) { }
        public Object PlayerStartTag { get { return this[nameof(PlayerStartTag)]; } set { this[nameof(PlayerStartTag)] = value; } }
    }
    public class PlayerStartPIE : PlayerStart
    {
        public PlayerStartPIE(nint addr) : base(addr) { }
    }
    public class PostProcessVolume : Volume
    {
        public PostProcessVolume(nint addr) : base(addr) { }
        public PostProcessSettings Settings { get { return this[nameof(Settings)].As<PostProcessSettings>(); } set { this["Settings"] = value; } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public float BlendRadius { get { return this[nameof(BlendRadius)].GetValue<float>(); } set { this[nameof(BlendRadius)].SetValue<float>(value); } }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bUnbound { get { return this[nameof(bUnbound)].Flag; } set { this[nameof(bUnbound)].Flag = value; } }
        public void AddOrUpdateBlendable(Object InBlendableObject, float InWeight) { Invoke(nameof(AddOrUpdateBlendable), InBlendableObject, InWeight); }
    }
    public class PrecomputedVisibilityVolume : Volume
    {
        public PrecomputedVisibilityVolume(nint addr) : base(addr) { }
    }
    public class PrimaryAssetLabel : PrimaryDataAsset
    {
        public PrimaryAssetLabel(nint addr) : base(addr) { }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
        public bool bLabelAssetsInMyDirectory { get { return this[nameof(bLabelAssetsInMyDirectory)].Flag; } set { this[nameof(bLabelAssetsInMyDirectory)].Flag = value; } }
        public bool bIsRuntimeLabel { get { return this[nameof(bIsRuntimeLabel)].Flag; } set { this[nameof(bIsRuntimeLabel)].Flag = value; } }
        public Array<Object> ExplicitAssets { get { return new Array<Object>(this[nameof(ExplicitAssets)].Address); } }
        public Array<Object> ExplicitBlueprints { get { return new Array<Object>(this[nameof(ExplicitBlueprints)].Address); } }
        public CollectionReference AssetCollection { get { return this[nameof(AssetCollection)].As<CollectionReference>(); } set { this["AssetCollection"] = value; } }
    }
    public class HealthSnapshotBlueprintLibrary : BlueprintFunctionLibrary
    {
        public HealthSnapshotBlueprintLibrary(nint addr) : base(addr) { }
        public void StopPerformanceSnapshots() { Invoke(nameof(StopPerformanceSnapshots)); }
        public void StartPerformanceSnapshots() { Invoke(nameof(StartPerformanceSnapshots)); }
        public void LogPerformanceSnapshot(Object SnapshotTitle, bool bResetStats) { Invoke(nameof(LogPerformanceSnapshot), SnapshotTitle, bResetStats); }
    }
    public class ProxyLODMeshSimplificationSettings : DeveloperSettings
    {
        public ProxyLODMeshSimplificationSettings(nint addr) : base(addr) { }
        public Object ProxyLODMeshReductionModuleName { get { return this[nameof(ProxyLODMeshReductionModuleName)]; } set { this[nameof(ProxyLODMeshReductionModuleName)] = value; } }
    }
    public class RectLight : Light
    {
        public RectLight(nint addr) : base(addr) { }
        public RectLightComponent RectLightComponent { get { return this[nameof(RectLightComponent)].As<RectLightComponent>(); } set { this["RectLightComponent"] = value; } }
    }
    public class RendererSettings : DeveloperSettings
    {
        public RendererSettings(nint addr) : base(addr) { }
        public byte MobileShadingPath { get { return this[nameof(MobileShadingPath)].GetValue<byte>(); } set { this[nameof(MobileShadingPath)].SetValue<byte>(value); } }
        public bool bMobileSupportGPUScene { get { return this[nameof(bMobileSupportGPUScene)].Flag; } set { this[nameof(bMobileSupportGPUScene)].Flag = value; } }
        public byte MobileAntiAliasing { get { return this[nameof(MobileAntiAliasing)].GetValue<byte>(); } set { this[nameof(MobileAntiAliasing)].SetValue<byte>(value); } }
        public byte MobileFloatPrecisionMode { get { return this[nameof(MobileFloatPrecisionMode)].GetValue<byte>(); } set { this[nameof(MobileFloatPrecisionMode)].SetValue<byte>(value); } }
        public bool bMobileAllowDitheredLODTransition { get { return this[nameof(bMobileAllowDitheredLODTransition)].Flag; } set { this[nameof(bMobileAllowDitheredLODTransition)].Flag = value; } }
        public bool bMobileVirtualTextures { get { return this[nameof(bMobileVirtualTextures)].Flag; } set { this[nameof(bMobileVirtualTextures)].Flag = value; } }
        public bool bDiscardUnusedQualityLevels { get { return this[nameof(bDiscardUnusedQualityLevels)].Flag; } set { this[nameof(bDiscardUnusedQualityLevels)].Flag = value; } }
        public byte ShaderCompressionFormat { get { return this[nameof(ShaderCompressionFormat)].GetValue<byte>(); } set { this[nameof(ShaderCompressionFormat)].SetValue<byte>(value); } }
        public bool bOcclusionCulling { get { return this[nameof(bOcclusionCulling)].Flag; } set { this[nameof(bOcclusionCulling)].Flag = value; } }
        public float MinScreenRadiusForLights { get { return this[nameof(MinScreenRadiusForLights)].GetValue<float>(); } set { this[nameof(MinScreenRadiusForLights)].SetValue<float>(value); } }
        public float MinScreenRadiusForEarlyZPass { get { return this[nameof(MinScreenRadiusForEarlyZPass)].GetValue<float>(); } set { this[nameof(MinScreenRadiusForEarlyZPass)].SetValue<float>(value); } }
        public float MinScreenRadiusForCSMdepth { get { return this[nameof(MinScreenRadiusForCSMdepth)].GetValue<float>(); } set { this[nameof(MinScreenRadiusForCSMdepth)].SetValue<float>(value); } }
        public bool bPrecomputedVisibilityWarning { get { return this[nameof(bPrecomputedVisibilityWarning)].Flag; } set { this[nameof(bPrecomputedVisibilityWarning)].Flag = value; } }
        public bool bTextureStreaming { get { return this[nameof(bTextureStreaming)].Flag; } set { this[nameof(bTextureStreaming)].Flag = value; } }
        public bool bUseDXT5NormalMaps { get { return this[nameof(bUseDXT5NormalMaps)].Flag; } set { this[nameof(bUseDXT5NormalMaps)].Flag = value; } }
        public bool bVirtualTextures { get { return this[nameof(bVirtualTextures)].Flag; } set { this[nameof(bVirtualTextures)].Flag = value; } }
        public bool bVirtualTextureEnableAutoImport { get { return this[nameof(bVirtualTextureEnableAutoImport)].Flag; } set { this[nameof(bVirtualTextureEnableAutoImport)].Flag = value; } }
        public bool bVirtualTexturedLightmaps { get { return this[nameof(bVirtualTexturedLightmaps)].Flag; } set { this[nameof(bVirtualTexturedLightmaps)].Flag = value; } }
        public bool bVirtualTextureAnisotropicFiltering { get { return this[nameof(bVirtualTextureAnisotropicFiltering)].Flag; } set { this[nameof(bVirtualTextureAnisotropicFiltering)].Flag = value; } }
        public bool bEnableVirtualTextureOpacityMask { get { return this[nameof(bEnableVirtualTextureOpacityMask)].Flag; } set { this[nameof(bEnableVirtualTextureOpacityMask)].Flag = value; } }
        public uint VirtualTextureTileSize { get { return this[nameof(VirtualTextureTileSize)].GetValue<uint>(); } set { this[nameof(VirtualTextureTileSize)].SetValue<uint>(value); } }
        public uint VirtualTextureTileBorderSize { get { return this[nameof(VirtualTextureTileBorderSize)].GetValue<uint>(); } set { this[nameof(VirtualTextureTileBorderSize)].SetValue<uint>(value); } }
        public uint VirtualTextureFeedbackFactor { get { return this[nameof(VirtualTextureFeedbackFactor)].GetValue<uint>(); } set { this[nameof(VirtualTextureFeedbackFactor)].SetValue<uint>(value); } }
        public byte WorkingColorSpaceChoice { get { return this[nameof(WorkingColorSpaceChoice)].GetValue<byte>(); } set { this[nameof(WorkingColorSpaceChoice)].SetValue<byte>(value); } }
        public Vector2D RedChromaticityCoordinate { get { return this[nameof(RedChromaticityCoordinate)].As<Vector2D>(); } set { this["RedChromaticityCoordinate"] = value; } }
        public Vector2D GreenChromaticityCoordinate { get { return this[nameof(GreenChromaticityCoordinate)].As<Vector2D>(); } set { this["GreenChromaticityCoordinate"] = value; } }
        public Vector2D BlueChromaticityCoordinate { get { return this[nameof(BlueChromaticityCoordinate)].As<Vector2D>(); } set { this["BlueChromaticityCoordinate"] = value; } }
        public Vector2D WhiteChromaticityCoordinate { get { return this[nameof(WhiteChromaticityCoordinate)].As<Vector2D>(); } set { this["WhiteChromaticityCoordinate"] = value; } }
        public bool bClearCoatEnableSecondNormal { get { return this[nameof(bClearCoatEnableSecondNormal)].Flag; } set { this[nameof(bClearCoatEnableSecondNormal)].Flag = value; } }
        public byte DynamicGlobalIllumination { get { return this[nameof(DynamicGlobalIllumination)].GetValue<byte>(); } set { this[nameof(DynamicGlobalIllumination)].SetValue<byte>(value); } }
        public byte Reflections { get { return this[nameof(Reflections)].GetValue<byte>(); } set { this[nameof(Reflections)].SetValue<byte>(value); } }
        public int ReflectionCaptureResolution { get { return this[nameof(ReflectionCaptureResolution)].GetValue<int>(); } set { this[nameof(ReflectionCaptureResolution)].SetValue<int>(value); } }
        public bool ReflectionEnvironmentLightmapMixBasedOnRoughness { get { return this[nameof(ReflectionEnvironmentLightmapMixBasedOnRoughness)].Flag; } set { this[nameof(ReflectionEnvironmentLightmapMixBasedOnRoughness)].Flag = value; } }
        public bool bUseHardwareRayTracingForLumen { get { return this[nameof(bUseHardwareRayTracingForLumen)].Flag; } set { this[nameof(bUseHardwareRayTracingForLumen)].Flag = value; } }
        public ELumenRayLightingMode LumenRayLightingMode { get { return (ELumenRayLightingMode)this[nameof(LumenRayLightingMode)].GetValue<int>(); } set { this[nameof(LumenRayLightingMode)].SetValue<int>((int)value); } }
        public bool LumenFrontLayerTranslucencyReflections { get { return this[nameof(LumenFrontLayerTranslucencyReflections)].Flag; } set { this[nameof(LumenFrontLayerTranslucencyReflections)].Flag = value; } }
        public byte LumenSoftwareTracingMode { get { return this[nameof(LumenSoftwareTracingMode)].GetValue<byte>(); } set { this[nameof(LumenSoftwareTracingMode)].SetValue<byte>(value); } }
        public byte ShadowMapMethod { get { return this[nameof(ShadowMapMethod)].GetValue<byte>(); } set { this[nameof(ShadowMapMethod)].SetValue<byte>(value); } }
        public bool bEnableRayTracing { get { return this[nameof(bEnableRayTracing)].Flag; } set { this[nameof(bEnableRayTracing)].Flag = value; } }
        public bool bEnableRayTracingShadows { get { return this[nameof(bEnableRayTracingShadows)].Flag; } set { this[nameof(bEnableRayTracingShadows)].Flag = value; } }
        public bool bEnableRayTracingSkylight { get { return this[nameof(bEnableRayTracingSkylight)].Flag; } set { this[nameof(bEnableRayTracingSkylight)].Flag = value; } }
        public bool bEnableRayTracingTextureLOD { get { return this[nameof(bEnableRayTracingTextureLOD)].Flag; } set { this[nameof(bEnableRayTracingTextureLOD)].Flag = value; } }
        public bool bEnablePathTracing { get { return this[nameof(bEnablePathTracing)].Flag; } set { this[nameof(bEnablePathTracing)].Flag = value; } }
        public bool bGenerateMeshDistanceFields { get { return this[nameof(bGenerateMeshDistanceFields)].Flag; } set { this[nameof(bGenerateMeshDistanceFields)].Flag = value; } }
        public float DistanceFieldVoxelDensity { get { return this[nameof(DistanceFieldVoxelDensity)].GetValue<float>(); } set { this[nameof(DistanceFieldVoxelDensity)].SetValue<float>(value); } }
        public bool bNanite { get { return this[nameof(bNanite)].Flag; } set { this[nameof(bNanite)].Flag = value; } }
        public bool bAllowStaticLighting { get { return this[nameof(bAllowStaticLighting)].Flag; } set { this[nameof(bAllowStaticLighting)].Flag = value; } }
        public bool bUseNormalMapsForStaticLighting { get { return this[nameof(bUseNormalMapsForStaticLighting)].Flag; } set { this[nameof(bUseNormalMapsForStaticLighting)].Flag = value; } }
        public bool bForwardShading { get { return this[nameof(bForwardShading)].Flag; } set { this[nameof(bForwardShading)].Flag = value; } }
        public bool bVertexFoggingForOpaque { get { return this[nameof(bVertexFoggingForOpaque)].Flag; } set { this[nameof(bVertexFoggingForOpaque)].Flag = value; } }
        public bool bSeparateTranslucency { get { return this[nameof(bSeparateTranslucency)].Flag; } set { this[nameof(bSeparateTranslucency)].Flag = value; } }
        public byte TranslucentSortPolicy { get { return this[nameof(TranslucentSortPolicy)].GetValue<byte>(); } set { this[nameof(TranslucentSortPolicy)].SetValue<byte>(value); } }
        public Vector TranslucentSortAxis { get { return this[nameof(TranslucentSortAxis)].As<Vector>(); } set { this["TranslucentSortAxis"] = value; } }
        public byte HMDFixedFoveationLevel { get { return this[nameof(HMDFixedFoveationLevel)].GetValue<byte>(); } set { this[nameof(HMDFixedFoveationLevel)].SetValue<byte>(value); } }
        public bool bHMDFixedFoveationDynamic { get { return this[nameof(bHMDFixedFoveationDynamic)].Flag; } set { this[nameof(bHMDFixedFoveationDynamic)].Flag = value; } }
        public byte CustomDepthStencil { get { return this[nameof(CustomDepthStencil)].GetValue<byte>(); } set { this[nameof(CustomDepthStencil)].SetValue<byte>(value); } }
        public bool bCustomDepthTaaJitter { get { return this[nameof(bCustomDepthTaaJitter)].Flag; } set { this[nameof(bCustomDepthTaaJitter)].Flag = value; } }
        public byte bEnableAlphaChannelInPostProcessing { get { return this[nameof(bEnableAlphaChannelInPostProcessing)].GetValue<byte>(); } set { this[nameof(bEnableAlphaChannelInPostProcessing)].SetValue<byte>(value); } }
        public bool bDefaultFeatureBloom { get { return this[nameof(bDefaultFeatureBloom)].Flag; } set { this[nameof(bDefaultFeatureBloom)].Flag = value; } }
        public bool bDefaultFeatureAmbientOcclusion { get { return this[nameof(bDefaultFeatureAmbientOcclusion)].Flag; } set { this[nameof(bDefaultFeatureAmbientOcclusion)].Flag = value; } }
        public bool bDefaultFeatureAmbientOcclusionStaticFraction { get { return this[nameof(bDefaultFeatureAmbientOcclusionStaticFraction)].Flag; } set { this[nameof(bDefaultFeatureAmbientOcclusionStaticFraction)].Flag = value; } }
        public bool bDefaultFeatureAutoExposure { get { return this[nameof(bDefaultFeatureAutoExposure)].Flag; } set { this[nameof(bDefaultFeatureAutoExposure)].Flag = value; } }
        public byte DefaultFeatureAutoExposure { get { return this[nameof(DefaultFeatureAutoExposure)].GetValue<byte>(); } set { this[nameof(DefaultFeatureAutoExposure)].SetValue<byte>(value); } }
        public float DefaultFeatureAutoExposureBias { get { return this[nameof(DefaultFeatureAutoExposureBias)].GetValue<float>(); } set { this[nameof(DefaultFeatureAutoExposureBias)].SetValue<float>(value); } }
        public bool bExtendDefaultLuminanceRangeInAutoExposureSettings { get { return this[nameof(bExtendDefaultLuminanceRangeInAutoExposureSettings)].Flag; } set { this[nameof(bExtendDefaultLuminanceRangeInAutoExposureSettings)].Flag = value; } }
        public bool bDefaultFeatureMotionBlur { get { return this[nameof(bDefaultFeatureMotionBlur)].Flag; } set { this[nameof(bDefaultFeatureMotionBlur)].Flag = value; } }
        public bool bDefaultFeatureLensFlare { get { return this[nameof(bDefaultFeatureLensFlare)].Flag; } set { this[nameof(bDefaultFeatureLensFlare)].Flag = value; } }
        public bool bTemporalUpsampling { get { return this[nameof(bTemporalUpsampling)].Flag; } set { this[nameof(bTemporalUpsampling)].Flag = value; } }
        public byte DefaultFeatureAntiAliasing { get { return this[nameof(DefaultFeatureAntiAliasing)].GetValue<byte>(); } set { this[nameof(DefaultFeatureAntiAliasing)].SetValue<byte>(value); } }
        public byte MSAASampleCount { get { return this[nameof(MSAASampleCount)].GetValue<byte>(); } set { this[nameof(MSAASampleCount)].SetValue<byte>(value); } }
        public ELightUnits DefaultLightUnits { get { return (ELightUnits)this[nameof(DefaultLightUnits)].GetValue<int>(); } set { this[nameof(DefaultLightUnits)].SetValue<int>((int)value); } }
        public byte DefaultBackBufferPixelFormat { get { return this[nameof(DefaultBackBufferPixelFormat)].GetValue<byte>(); } set { this[nameof(DefaultBackBufferPixelFormat)].SetValue<byte>(value); } }
        public bool bRenderUnbuiltPreviewShadowsInGame { get { return this[nameof(bRenderUnbuiltPreviewShadowsInGame)].Flag; } set { this[nameof(bRenderUnbuiltPreviewShadowsInGame)].Flag = value; } }
        public bool bStencilForLODDither { get { return this[nameof(bStencilForLODDither)].Flag; } set { this[nameof(bStencilForLODDither)].Flag = value; } }
        public byte EarlyZPass { get { return this[nameof(EarlyZPass)].GetValue<byte>(); } set { this[nameof(EarlyZPass)].SetValue<byte>(value); } }
        public bool bEarlyZPassOnlyMaterialMasking { get { return this[nameof(bEarlyZPassOnlyMaterialMasking)].Flag; } set { this[nameof(bEarlyZPassOnlyMaterialMasking)].Flag = value; } }
        public bool bEnableCSMCaching { get { return this[nameof(bEnableCSMCaching)].Flag; } set { this[nameof(bEnableCSMCaching)].Flag = value; } }
        public bool bDBuffer { get { return this[nameof(bDBuffer)].Flag; } set { this[nameof(bDBuffer)].Flag = value; } }
        public byte ClearSceneMethod { get { return this[nameof(ClearSceneMethod)].GetValue<byte>(); } set { this[nameof(ClearSceneMethod)].SetValue<byte>(value); } }
        public byte VelocityPass { get { return this[nameof(VelocityPass)].GetValue<byte>(); } set { this[nameof(VelocityPass)].SetValue<byte>(value); } }
        public byte VertexDeformationOutputsVelocity { get { return this[nameof(VertexDeformationOutputsVelocity)].GetValue<byte>(); } set { this[nameof(VertexDeformationOutputsVelocity)].SetValue<byte>(value); } }
        public bool bSelectiveBasePassOutputs { get { return this[nameof(bSelectiveBasePassOutputs)].Flag; } set { this[nameof(bSelectiveBasePassOutputs)].Flag = value; } }
        public bool bDefaultParticleCutouts { get { return this[nameof(bDefaultParticleCutouts)].Flag; } set { this[nameof(bDefaultParticleCutouts)].Flag = value; } }
        public int GPUSimulationTextureSizeX { get { return this[nameof(GPUSimulationTextureSizeX)].GetValue<int>(); } set { this[nameof(GPUSimulationTextureSizeX)].SetValue<int>(value); } }
        public int GPUSimulationTextureSizeY { get { return this[nameof(GPUSimulationTextureSizeY)].GetValue<int>(); } set { this[nameof(GPUSimulationTextureSizeY)].SetValue<int>(value); } }
        public bool bGlobalClipPlane { get { return this[nameof(bGlobalClipPlane)].Flag; } set { this[nameof(bGlobalClipPlane)].Flag = value; } }
        public byte GBufferFormat { get { return this[nameof(GBufferFormat)].GetValue<byte>(); } set { this[nameof(GBufferFormat)].SetValue<byte>(value); } }
        public bool bUseGPUMorphTargets { get { return this[nameof(bUseGPUMorphTargets)].Flag; } set { this[nameof(bUseGPUMorphTargets)].Flag = value; } }
        public bool bNvidiaAftermathEnabled { get { return this[nameof(bNvidiaAftermathEnabled)].Flag; } set { this[nameof(bNvidiaAftermathEnabled)].Flag = value; } }
        public bool bMultiView { get { return this[nameof(bMultiView)].Flag; } set { this[nameof(bMultiView)].Flag = value; } }
        public bool bMobilePostProcessing { get { return this[nameof(bMobilePostProcessing)].Flag; } set { this[nameof(bMobilePostProcessing)].Flag = value; } }
        public bool bMobileMultiView { get { return this[nameof(bMobileMultiView)].Flag; } set { this[nameof(bMobileMultiView)].Flag = value; } }
        public bool bMobileUseHWsRGBEncoding { get { return this[nameof(bMobileUseHWsRGBEncoding)].Flag; } set { this[nameof(bMobileUseHWsRGBEncoding)].Flag = value; } }
        public bool bRoundRobinOcclusion { get { return this[nameof(bRoundRobinOcclusion)].Flag; } set { this[nameof(bRoundRobinOcclusion)].Flag = value; } }
        public bool bMeshStreaming { get { return this[nameof(bMeshStreaming)].Flag; } set { this[nameof(bMeshStreaming)].Flag = value; } }
        public bool bEnableHeterogeneousVolumes { get { return this[nameof(bEnableHeterogeneousVolumes)].Flag; } set { this[nameof(bEnableHeterogeneousVolumes)].Flag = value; } }
        public float WireframeCullThreshold { get { return this[nameof(WireframeCullThreshold)].GetValue<float>(); } set { this[nameof(WireframeCullThreshold)].SetValue<float>(value); } }
        public bool bSupportStationarySkylight { get { return this[nameof(bSupportStationarySkylight)].Flag; } set { this[nameof(bSupportStationarySkylight)].Flag = value; } }
        public bool bSupportLowQualityLightmaps { get { return this[nameof(bSupportLowQualityLightmaps)].Flag; } set { this[nameof(bSupportLowQualityLightmaps)].Flag = value; } }
        public bool bSupportPointLightWholeSceneShadows { get { return this[nameof(bSupportPointLightWholeSceneShadows)].Flag; } set { this[nameof(bSupportPointLightWholeSceneShadows)].Flag = value; } }
        public bool bSupportSkyAtmosphere { get { return this[nameof(bSupportSkyAtmosphere)].Flag; } set { this[nameof(bSupportSkyAtmosphere)].Flag = value; } }
        public bool bSupportSkyAtmosphereAffectsHeightFog { get { return this[nameof(bSupportSkyAtmosphereAffectsHeightFog)].Flag; } set { this[nameof(bSupportSkyAtmosphereAffectsHeightFog)].Flag = value; } }
        public bool bSupportCloudShadowOnForwardLitTranslucent { get { return this[nameof(bSupportCloudShadowOnForwardLitTranslucent)].Flag; } set { this[nameof(bSupportCloudShadowOnForwardLitTranslucent)].Flag = value; } }
        public bool bSupportTranslucentPerObjectShadow { get { return this[nameof(bSupportTranslucentPerObjectShadow)].Flag; } set { this[nameof(bSupportTranslucentPerObjectShadow)].Flag = value; } }
        public bool bSupportCloudShadowOnSingleLayerWater { get { return this[nameof(bSupportCloudShadowOnSingleLayerWater)].Flag; } set { this[nameof(bSupportCloudShadowOnSingleLayerWater)].Flag = value; } }
        public bool bEnableStrata { get { return this[nameof(bEnableStrata)].Flag; } set { this[nameof(bEnableStrata)].Flag = value; } }
        public uint StrataBytePerPixel { get { return this[nameof(StrataBytePerPixel)].GetValue<uint>(); } set { this[nameof(StrataBytePerPixel)].SetValue<uint>(value); } }
        public bool StrataOpaqueMaterialRoughRefraction { get { return this[nameof(StrataOpaqueMaterialRoughRefraction)].Flag; } set { this[nameof(StrataOpaqueMaterialRoughRefraction)].Flag = value; } }
        public bool StrataDebugAdvancedVisualizationShaders { get { return this[nameof(StrataDebugAdvancedVisualizationShaders)].Flag; } set { this[nameof(StrataDebugAdvancedVisualizationShaders)].Flag = value; } }
        public bool bMaterialRoughDiffuse { get { return this[nameof(bMaterialRoughDiffuse)].Flag; } set { this[nameof(bMaterialRoughDiffuse)].Flag = value; } }
        public bool bMaterialEnergyConservation { get { return this[nameof(bMaterialEnergyConservation)].Flag; } set { this[nameof(bMaterialEnergyConservation)].Flag = value; } }
        public bool bOrderedIndependentTransparencyEnable { get { return this[nameof(bOrderedIndependentTransparencyEnable)].Flag; } set { this[nameof(bOrderedIndependentTransparencyEnable)].Flag = value; } }
        public bool bSupportSkinCacheShaders { get { return this[nameof(bSupportSkinCacheShaders)].Flag; } set { this[nameof(bSupportSkinCacheShaders)].Flag = value; } }
        public bool bSkipCompilingGPUSkinVF { get { return this[nameof(bSkipCompilingGPUSkinVF)].Flag; } set { this[nameof(bSkipCompilingGPUSkinVF)].Flag = value; } }
        public ESkinCacheDefaultBehavior DefaultSkinCacheBehavior { get { return (ESkinCacheDefaultBehavior)this[nameof(DefaultSkinCacheBehavior)].GetValue<int>(); } set { this[nameof(DefaultSkinCacheBehavior)].SetValue<int>((int)value); } }
        public float SkinCacheSceneMemoryLimitInMB { get { return this[nameof(SkinCacheSceneMemoryLimitInMB)].GetValue<float>(); } set { this[nameof(SkinCacheSceneMemoryLimitInMB)].SetValue<float>(value); } }
        public bool bMobileEnableStaticAndCSMShadowReceivers { get { return this[nameof(bMobileEnableStaticAndCSMShadowReceivers)].Flag; } set { this[nameof(bMobileEnableStaticAndCSMShadowReceivers)].Flag = value; } }
        public bool bMobileEnableMovableLightCSMShaderCulling { get { return this[nameof(bMobileEnableMovableLightCSMShaderCulling)].Flag; } set { this[nameof(bMobileEnableMovableLightCSMShaderCulling)].Flag = value; } }
        public bool bMobileForwardEnableLocalLights { get { return this[nameof(bMobileForwardEnableLocalLights)].Flag; } set { this[nameof(bMobileForwardEnableLocalLights)].Flag = value; } }
        public bool bMobileForwardEnableClusteredReflections { get { return this[nameof(bMobileForwardEnableClusteredReflections)].Flag; } set { this[nameof(bMobileForwardEnableClusteredReflections)].Flag = value; } }
        public bool bMobileEnableNoPrecomputedLightingCSMShader { get { return this[nameof(bMobileEnableNoPrecomputedLightingCSMShader)].Flag; } set { this[nameof(bMobileEnableNoPrecomputedLightingCSMShader)].Flag = value; } }
        public bool bMobileAllowDistanceFieldShadows { get { return this[nameof(bMobileAllowDistanceFieldShadows)].Flag; } set { this[nameof(bMobileAllowDistanceFieldShadows)].Flag = value; } }
        public bool bMobileAllowMovableDirectionalLights { get { return this[nameof(bMobileAllowMovableDirectionalLights)].Flag; } set { this[nameof(bMobileAllowMovableDirectionalLights)].Flag = value; } }
        public bool bMobileAllowMovableSpotlightShadows { get { return this[nameof(bMobileAllowMovableSpotlightShadows)].Flag; } set { this[nameof(bMobileAllowMovableSpotlightShadows)].Flag = value; } }
        public bool bSupport16BitBoneIndex { get { return this[nameof(bSupport16BitBoneIndex)].Flag; } set { this[nameof(bSupport16BitBoneIndex)].Flag = value; } }
        public bool bGPUSkinLimit2BoneInfluences { get { return this[nameof(bGPUSkinLimit2BoneInfluences)].Flag; } set { this[nameof(bGPUSkinLimit2BoneInfluences)].Flag = value; } }
        public bool bSupportDepthOnlyIndexBuffers { get { return this[nameof(bSupportDepthOnlyIndexBuffers)].Flag; } set { this[nameof(bSupportDepthOnlyIndexBuffers)].Flag = value; } }
        public bool bSupportReversedIndexBuffers { get { return this[nameof(bSupportReversedIndexBuffers)].Flag; } set { this[nameof(bSupportReversedIndexBuffers)].Flag = value; } }
        public bool bMobileAmbientOcclusion { get { return this[nameof(bMobileAmbientOcclusion)].Flag; } set { this[nameof(bMobileAmbientOcclusion)].Flag = value; } }
        public bool bUseUnlimitedBoneInfluences { get { return this[nameof(bUseUnlimitedBoneInfluences)].Flag; } set { this[nameof(bUseUnlimitedBoneInfluences)].Flag = value; } }
        public int UnlimitedBonInfluencesThreshold { get { return this[nameof(UnlimitedBonInfluencesThreshold)].GetValue<int>(); } set { this[nameof(UnlimitedBonInfluencesThreshold)].SetValue<int>(value); } }
        public PerPlatformInt MaxSkinBones { get { return this[nameof(MaxSkinBones)].As<PerPlatformInt>(); } set { this["MaxSkinBones"] = value; } }
        public byte MobilePlanarReflectionMode { get { return this[nameof(MobilePlanarReflectionMode)].GetValue<byte>(); } set { this[nameof(MobilePlanarReflectionMode)].SetValue<byte>(value); } }
        public bool bMobileSupportsGen4TAA { get { return this[nameof(bMobileSupportsGen4TAA)].Flag; } set { this[nameof(bMobileSupportsGen4TAA)].Flag = value; } }
        public PerPlatformBool bStreamSkeletalMeshLODs { get { return this[nameof(bStreamSkeletalMeshLODs)].As<PerPlatformBool>(); } set { this["bStreamSkeletalMeshLODs"] = value; } }
        public PerPlatformBool bDiscardSkeletalMeshOptionalLODs { get { return this[nameof(bDiscardSkeletalMeshOptionalLODs)].As<PerPlatformBool>(); } set { this["bDiscardSkeletalMeshOptionalLODs"] = value; } }
        public SoftObjectPath VisualizeCalibrationColorMaterialPath { get { return this[nameof(VisualizeCalibrationColorMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationColorMaterialPath"] = value; } }
        public SoftObjectPath VisualizeCalibrationCustomMaterialPath { get { return this[nameof(VisualizeCalibrationCustomMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationCustomMaterialPath"] = value; } }
        public SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath { get { return this[nameof(VisualizeCalibrationGrayscaleMaterialPath)].As<SoftObjectPath>(); } set { this["VisualizeCalibrationGrayscaleMaterialPath"] = value; } }
    }
    public class RendererOverrideSettings : DeveloperSettings
    {
        public RendererOverrideSettings(nint addr) : base(addr) { }
        public bool bSupportAllShaderPermutations { get { return this[nameof(bSupportAllShaderPermutations)].Flag; } set { this[nameof(bSupportAllShaderPermutations)].Flag = value; } }
    }
    public class SubsurfaceProfile : Object
    {
        public SubsurfaceProfile(nint addr) : base(addr) { }
        public SubsurfaceProfileStruct Settings { get { return this[nameof(Settings)].As<SubsurfaceProfileStruct>(); } set { this["Settings"] = value; } }
    }
    public class ReplayNetConnection : NetConnection
    {
        public ReplayNetConnection(nint addr) : base(addr) { }
    }
    public class ReplaySubsystem : GameInstanceSubsystem
    {
        public ReplaySubsystem(nint addr) : base(addr) { }
        public bool bLoadDefaultMapOnStop { get { return this[nameof(bLoadDefaultMapOnStop)].Flag; } set { this[nameof(bLoadDefaultMapOnStop)].Flag = value; } }
        public void RequestCheckpoint() { Invoke(nameof(RequestCheckpoint)); }
        public bool IsRecording() { return Invoke<bool>(nameof(IsRecording)); }
        public bool IsPlaying() { return Invoke<bool>(nameof(IsPlaying)); }
        public float GetReplayCurrentTime() { return Invoke<float>(nameof(GetReplayCurrentTime)); }
        public Object GetActiveReplayName() { return Invoke<Object>(nameof(GetActiveReplayName)); }
    }
    public class ReverbEffect : Object
    {
        public ReverbEffect(nint addr) : base(addr) { }
        public bool bBypassEarlyReflections { get { return this[nameof(bBypassEarlyReflections)].Flag; } set { this[nameof(bBypassEarlyReflections)].Flag = value; } }
        public float ReflectionsDelay { get { return this[nameof(ReflectionsDelay)].GetValue<float>(); } set { this[nameof(ReflectionsDelay)].SetValue<float>(value); } }
        public float GainHF { get { return this[nameof(GainHF)].GetValue<float>(); } set { this[nameof(GainHF)].SetValue<float>(value); } }
        public float ReflectionsGain { get { return this[nameof(ReflectionsGain)].GetValue<float>(); } set { this[nameof(ReflectionsGain)].SetValue<float>(value); } }
        public bool bBypassLateReflections { get { return this[nameof(bBypassLateReflections)].Flag; } set { this[nameof(bBypassLateReflections)].Flag = value; } }
        public float LateDelay { get { return this[nameof(LateDelay)].GetValue<float>(); } set { this[nameof(LateDelay)].SetValue<float>(value); } }
        public float DecayTime { get { return this[nameof(DecayTime)].GetValue<float>(); } set { this[nameof(DecayTime)].SetValue<float>(value); } }
        public float Density { get { return this[nameof(Density)].GetValue<float>(); } set { this[nameof(Density)].SetValue<float>(value); } }
        public float Diffusion { get { return this[nameof(Diffusion)].GetValue<float>(); } set { this[nameof(Diffusion)].SetValue<float>(value); } }
        public float AirAbsorptionGainHF { get { return this[nameof(AirAbsorptionGainHF)].GetValue<float>(); } set { this[nameof(AirAbsorptionGainHF)].SetValue<float>(value); } }
        public float DecayHFRatio { get { return this[nameof(DecayHFRatio)].GetValue<float>(); } set { this[nameof(DecayHFRatio)].SetValue<float>(value); } }
        public float LateGain { get { return this[nameof(LateGain)].GetValue<float>(); } set { this[nameof(LateGain)].SetValue<float>(value); } }
        public float Gain { get { return this[nameof(Gain)].GetValue<float>(); } set { this[nameof(Gain)].SetValue<float>(value); } }
        public float RoomRolloffFactor { get { return this[nameof(RoomRolloffFactor)].GetValue<float>(); } set { this[nameof(RoomRolloffFactor)].SetValue<float>(value); } }
    }
    public class SCS_Node : Object
    {
        public SCS_Node(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)].As<Object>(); } set { this["ComponentClass"] = value; } } // ClassPtrProperty
        public ActorComponent ComponentTemplate { get { return this[nameof(ComponentTemplate)].As<ActorComponent>(); } set { this["ComponentTemplate"] = value; } }
        public BlueprintCookedComponentInstancingData CookedComponentInstancingData { get { return this[nameof(CookedComponentInstancingData)].As<BlueprintCookedComponentInstancingData>(); } set { this["CookedComponentInstancingData"] = value; } }
        public Object AttachToName { get { return this[nameof(AttachToName)]; } set { this[nameof(AttachToName)] = value; } }
        public Object ParentComponentOrVariableName { get { return this[nameof(ParentComponentOrVariableName)]; } set { this[nameof(ParentComponentOrVariableName)] = value; } }
        public Object ParentComponentOwnerClassName { get { return this[nameof(ParentComponentOwnerClassName)]; } set { this[nameof(ParentComponentOwnerClassName)] = value; } }
        public bool bIsParentComponentNative { get { return this[nameof(bIsParentComponentNative)].Flag; } set { this[nameof(bIsParentComponentNative)].Flag = value; } }
        public Array<SCS_Node> ChildNodes { get { return new Array<SCS_Node>(this[nameof(ChildNodes)].Address); } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this[nameof(MetaDataArray)].Address); } }
        public Guid VariableGuid { get { return this[nameof(VariableGuid)].As<Guid>(); } set { this["VariableGuid"] = value; } }
        public Object InternalVariableName { get { return this[nameof(InternalVariableName)]; } set { this[nameof(InternalVariableName)] = value; } }
    }
    public class SimpleConstructionScript : Object
    {
        public SimpleConstructionScript(nint addr) : base(addr) { }
        public Array<SCS_Node> RootNodes { get { return new Array<SCS_Node>(this[nameof(RootNodes)].Address); } }
        public Array<SCS_Node> AllNodes { get { return new Array<SCS_Node>(this[nameof(AllNodes)].Address); } }
        public SCS_Node DefaultSceneRootNode { get { return this[nameof(DefaultSceneRootNode)].As<SCS_Node>(); } set { this["DefaultSceneRootNode"] = value; } }
    }
    public class SkeletalMeshEditorData : Object
    {
        public SkeletalMeshEditorData(nint addr) : base(addr) { }
    }
    public class SkeletalMeshLODSettings : DataAsset
    {
        public SkeletalMeshLODSettings(nint addr) : base(addr) { }
        public PerQualityLevelInt MinQualityLevelLOD { get { return this[nameof(MinQualityLevelLOD)].As<PerQualityLevelInt>(); } set { this["MinQualityLevelLOD"] = value; } }
        public PerPlatformInt MinLOD { get { return this[nameof(MinLOD)].As<PerPlatformInt>(); } set { this["MinLOD"] = value; } }
        public PerPlatformBool DisableBelowMinLodStripping { get { return this[nameof(DisableBelowMinLodStripping)].As<PerPlatformBool>(); } set { this["DisableBelowMinLodStripping"] = value; } }
        public bool bOverrideLODStreamingSettings { get { return this[nameof(bOverrideLODStreamingSettings)].Flag; } set { this[nameof(bOverrideLODStreamingSettings)].Flag = value; } }
        public PerPlatformBool bSupportLODStreaming { get { return this[nameof(bSupportLODStreaming)].As<PerPlatformBool>(); } set { this["bSupportLODStreaming"] = value; } }
        public PerPlatformInt MaxNumStreamedLODs { get { return this[nameof(MaxNumStreamedLODs)].As<PerPlatformInt>(); } set { this["MaxNumStreamedLODs"] = value; } }
        public PerPlatformInt MaxNumOptionalLODs { get { return this[nameof(MaxNumOptionalLODs)].As<PerPlatformInt>(); } set { this["MaxNumOptionalLODs"] = value; } }
        public Array<SkeletalMeshLODGroupSettings> LODGroups { get { return new Array<SkeletalMeshLODGroupSettings>(this[nameof(LODGroups)].Address); } }
    }
    public class SkeletalMeshSimplificationSettings : DeveloperSettings
    {
        public SkeletalMeshSimplificationSettings(nint addr) : base(addr) { }
        public Object SkeletalMeshReductionModuleName { get { return this[nameof(SkeletalMeshReductionModuleName)]; } set { this[nameof(SkeletalMeshReductionModuleName)] = value; } }
    }
    public class ButtonStyleAsset : Object
    {
        public ButtonStyleAsset(nint addr) : base(addr) { }
        public ButtonStyle ButtonStyle { get { return this[nameof(ButtonStyle)].As<ButtonStyle>(); } set { this["ButtonStyle"] = value; } }
    }
    public class CheckBoxStyleAsset : Object
    {
        public CheckBoxStyleAsset(nint addr) : base(addr) { }
        public CheckBoxStyle CheckBoxStyle { get { return this[nameof(CheckBoxStyle)].As<CheckBoxStyle>(); } set { this["CheckBoxStyle"] = value; } }
    }
    public class SlateBrushAsset : Object
    {
        public SlateBrushAsset(nint addr) : base(addr) { }
        public SlateBrush Brush { get { return this[nameof(Brush)].As<SlateBrush>(); } set { this["Brush"] = value; } }
    }
    public class SlateTextureAtlasInterface : Interface
    {
        public SlateTextureAtlasInterface(nint addr) : base(addr) { }
    }
    public class SoundClass : Object
    {
        public SoundClass(nint addr) : base(addr) { }
        public SoundClassProperties Properties { get { return this[nameof(Properties)].As<SoundClassProperties>(); } set { this["Properties"] = value; } }
        public Array<SoundClass> ChildClasses { get { return new Array<SoundClass>(this[nameof(ChildClasses)].Address); } }
        public Array<PassiveSoundMixModifier> PassiveSoundMixModifiers { get { return new Array<PassiveSoundMixModifier>(this[nameof(PassiveSoundMixModifiers)].Address); } }
        public SoundClass ParentClass { get { return this[nameof(ParentClass)].As<SoundClass>(); } set { this["ParentClass"] = value; } }
    }
    public class SoundConcurrency : Object
    {
        public SoundConcurrency(nint addr) : base(addr) { }
        public SoundConcurrencySettings Concurrency { get { return this[nameof(Concurrency)].As<SoundConcurrencySettings>(); } set { this["Concurrency"] = value; } }
    }
    public class SoundCue : SoundBase
    {
        public SoundCue(nint addr) : base(addr) { }
        public SoundNode FirstNode { get { return this[nameof(FirstNode)].As<SoundNode>(); } set { this["FirstNode"] = value; } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public float SubtitlePriority { get { return this[nameof(SubtitlePriority)].GetValue<float>(); } set { this[nameof(SubtitlePriority)].SetValue<float>(value); } }
        public bool bPrimeOnLoad { get { return this[nameof(bPrimeOnLoad)].Flag; } set { this[nameof(bPrimeOnLoad)].Flag = value; } }
        public bool bOverrideAttenuation { get { return this[nameof(bOverrideAttenuation)].Flag; } set { this[nameof(bOverrideAttenuation)].Flag = value; } }
        public bool bExcludeFromRandomNodeBranchCulling { get { return this[nameof(bExcludeFromRandomNodeBranchCulling)].Flag; } set { this[nameof(bExcludeFromRandomNodeBranchCulling)].Flag = value; } }
        public bool bHasPlayWhenSilent { get { return this[nameof(bHasPlayWhenSilent)].Flag; } set { this[nameof(bHasPlayWhenSilent)].Flag = value; } }
        public int CookedQualityIndex { get { return this[nameof(CookedQualityIndex)].GetValue<int>(); } set { this[nameof(CookedQualityIndex)].SetValue<int>(value); } }
    }
    public class SoundMix : Object
    {
        public SoundMix(nint addr) : base(addr) { }
        public bool bApplyEQ { get { return this[nameof(bApplyEQ)].Flag; } set { this[nameof(bApplyEQ)].Flag = value; } }
        public float EQPriority { get { return this[nameof(EQPriority)].GetValue<float>(); } set { this[nameof(EQPriority)].SetValue<float>(value); } }
        public AudioEQEffect EQSettings { get { return this[nameof(EQSettings)].As<AudioEQEffect>(); } set { this["EQSettings"] = value; } }
        public Array<SoundClassAdjuster> SoundClassEffects { get { return new Array<SoundClassAdjuster>(this[nameof(SoundClassEffects)].Address); } }
        public float InitialDelay { get { return this[nameof(InitialDelay)].GetValue<float>(); } set { this[nameof(InitialDelay)].SetValue<float>(value); } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
    }
    public class SoundNodeAssetReferencer : SoundNode
    {
        public SoundNodeAssetReferencer(nint addr) : base(addr) { }
    }
    public class SoundNodeAttenuation : SoundNode
    {
        public SoundNodeAttenuation(nint addr) : base(addr) { }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundAttenuationSettings AttenuationOverrides { get { return this[nameof(AttenuationOverrides)].As<SoundAttenuationSettings>(); } set { this["AttenuationOverrides"] = value; } }
        public bool bOverrideAttenuation { get { return this[nameof(bOverrideAttenuation)].Flag; } set { this[nameof(bOverrideAttenuation)].Flag = value; } }
    }
    public class SoundNodeBranch : SoundNode
    {
        public SoundNodeBranch(nint addr) : base(addr) { }
        public Object BoolParameterName { get { return this[nameof(BoolParameterName)]; } set { this[nameof(BoolParameterName)] = value; } }
    }
    public class SoundNodeConcatenator : SoundNode
    {
        public SoundNodeConcatenator(nint addr) : base(addr) { }
        public Array<float> InputVolume { get { return new Array<float>(this[nameof(InputVolume)].Address); } }
    }
    public class SoundNodeDelay : SoundNode
    {
        public SoundNodeDelay(nint addr) : base(addr) { }
        public float DelayMin { get { return this[nameof(DelayMin)].GetValue<float>(); } set { this[nameof(DelayMin)].SetValue<float>(value); } }
        public float DelayMax { get { return this[nameof(DelayMax)].GetValue<float>(); } set { this[nameof(DelayMax)].SetValue<float>(value); } }
    }
    public class SoundNodeDialoguePlayer : SoundNode
    {
        public SoundNodeDialoguePlayer(nint addr) : base(addr) { }
        public DialogueWaveParameter DialogueWaveParameter { get { return this[nameof(DialogueWaveParameter)].As<DialogueWaveParameter>(); } set { this["DialogueWaveParameter"] = value; } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
    }
    public class SoundNodeDistanceCrossFade : SoundNode
    {
        public SoundNodeDistanceCrossFade(nint addr) : base(addr) { }
        public Array<DistanceDatum> CrossFadeInput { get { return new Array<DistanceDatum>(this[nameof(CrossFadeInput)].Address); } }
    }
    public class SoundNodeDoppler : SoundNode
    {
        public SoundNodeDoppler(nint addr) : base(addr) { }
        public float DopplerIntensity { get { return this[nameof(DopplerIntensity)].GetValue<float>(); } set { this[nameof(DopplerIntensity)].SetValue<float>(value); } }
        public bool bUseSmoothing { get { return this[nameof(bUseSmoothing)].Flag; } set { this[nameof(bUseSmoothing)].Flag = value; } }
        public float SmoothingInterpSpeed { get { return this[nameof(SmoothingInterpSpeed)].GetValue<float>(); } set { this[nameof(SmoothingInterpSpeed)].SetValue<float>(value); } }
    }
    public class SoundNodeEnveloper : SoundNode
    {
        public SoundNodeEnveloper(nint addr) : base(addr) { }
        public float LoopStart { get { return this[nameof(LoopStart)].GetValue<float>(); } set { this[nameof(LoopStart)].SetValue<float>(value); } }
        public float LoopEnd { get { return this[nameof(LoopEnd)].GetValue<float>(); } set { this[nameof(LoopEnd)].SetValue<float>(value); } }
        public float DurationAfterLoop { get { return this[nameof(DurationAfterLoop)].GetValue<float>(); } set { this[nameof(DurationAfterLoop)].SetValue<float>(value); } }
        public int LoopCount { get { return this[nameof(LoopCount)].GetValue<int>(); } set { this[nameof(LoopCount)].SetValue<int>(value); } }
        public bool bLoopIndefinitely { get { return this[nameof(bLoopIndefinitely)].Flag; } set { this[nameof(bLoopIndefinitely)].Flag = value; } }
        public bool bLoop { get { return this[nameof(bLoop)].Flag; } set { this[nameof(bLoop)].Flag = value; } }
        public DistributionFloatConstantCurve VolumeInterpCurve { get { return this[nameof(VolumeInterpCurve)].As<DistributionFloatConstantCurve>(); } set { this["VolumeInterpCurve"] = value; } }
        public DistributionFloatConstantCurve PitchInterpCurve { get { return this[nameof(PitchInterpCurve)].As<DistributionFloatConstantCurve>(); } set { this["PitchInterpCurve"] = value; } }
        public RuntimeFloatCurve VolumeCurve { get { return this[nameof(VolumeCurve)].As<RuntimeFloatCurve>(); } set { this["VolumeCurve"] = value; } }
        public RuntimeFloatCurve PitchCurve { get { return this[nameof(PitchCurve)].As<RuntimeFloatCurve>(); } set { this["PitchCurve"] = value; } }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float VolumeMin { get { return this[nameof(VolumeMin)].GetValue<float>(); } set { this[nameof(VolumeMin)].SetValue<float>(value); } }
        public float VolumeMax { get { return this[nameof(VolumeMax)].GetValue<float>(); } set { this[nameof(VolumeMax)].SetValue<float>(value); } }
    }
    public class SoundNodeGroupControl : SoundNode
    {
        public SoundNodeGroupControl(nint addr) : base(addr) { }
        public Array<int> GroupSizes { get { return new Array<int>(this[nameof(GroupSizes)].Address); } }
    }
    public class SoundNodeLooping : SoundNode
    {
        public SoundNodeLooping(nint addr) : base(addr) { }
        public int LoopCount { get { return this[nameof(LoopCount)].GetValue<int>(); } set { this[nameof(LoopCount)].SetValue<int>(value); } }
        public bool bLoopIndefinitely { get { return this[nameof(bLoopIndefinitely)].Flag; } set { this[nameof(bLoopIndefinitely)].Flag = value; } }
    }
    public class SoundNodeMature : SoundNode
    {
        public SoundNodeMature(nint addr) : base(addr) { }
    }
    public class SoundNodeMixer : SoundNode
    {
        public SoundNodeMixer(nint addr) : base(addr) { }
        public Array<float> InputVolume { get { return new Array<float>(this[nameof(InputVolume)].Address); } }
    }
    public class SoundNodeModulator : SoundNode
    {
        public SoundNodeModulator(nint addr) : base(addr) { }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float VolumeMin { get { return this[nameof(VolumeMin)].GetValue<float>(); } set { this[nameof(VolumeMin)].SetValue<float>(value); } }
        public float VolumeMax { get { return this[nameof(VolumeMax)].GetValue<float>(); } set { this[nameof(VolumeMax)].SetValue<float>(value); } }
    }
    public class SoundNodeOscillator : SoundNode
    {
        public SoundNodeOscillator(nint addr) : base(addr) { }
        public bool bModulateVolume { get { return this[nameof(bModulateVolume)].Flag; } set { this[nameof(bModulateVolume)].Flag = value; } }
        public bool bModulatePitch { get { return this[nameof(bModulatePitch)].Flag; } set { this[nameof(bModulatePitch)].Flag = value; } }
        public float AmplitudeMin { get { return this[nameof(AmplitudeMin)].GetValue<float>(); } set { this[nameof(AmplitudeMin)].SetValue<float>(value); } }
        public float AmplitudeMax { get { return this[nameof(AmplitudeMax)].GetValue<float>(); } set { this[nameof(AmplitudeMax)].SetValue<float>(value); } }
        public float FrequencyMin { get { return this[nameof(FrequencyMin)].GetValue<float>(); } set { this[nameof(FrequencyMin)].SetValue<float>(value); } }
        public float FrequencyMax { get { return this[nameof(FrequencyMax)].GetValue<float>(); } set { this[nameof(FrequencyMax)].SetValue<float>(value); } }
        public float OffsetMin { get { return this[nameof(OffsetMin)].GetValue<float>(); } set { this[nameof(OffsetMin)].SetValue<float>(value); } }
        public float OffsetMax { get { return this[nameof(OffsetMax)].GetValue<float>(); } set { this[nameof(OffsetMax)].SetValue<float>(value); } }
        public float CenterMin { get { return this[nameof(CenterMin)].GetValue<float>(); } set { this[nameof(CenterMin)].SetValue<float>(value); } }
        public float CenterMax { get { return this[nameof(CenterMax)].GetValue<float>(); } set { this[nameof(CenterMax)].SetValue<float>(value); } }
    }
    public class SoundNodeParamCrossFade : SoundNodeDistanceCrossFade
    {
        public SoundNodeParamCrossFade(nint addr) : base(addr) { }
        public Object ParamName { get { return this[nameof(ParamName)]; } set { this[nameof(ParamName)] = value; } }
    }
    public class SoundNodeQualityLevel : SoundNode
    {
        public SoundNodeQualityLevel(nint addr) : base(addr) { }
        public int CookedQualityLevelIndex { get { return this[nameof(CookedQualityLevelIndex)].GetValue<int>(); } set { this[nameof(CookedQualityLevelIndex)].SetValue<int>(value); } }
    }
    public class SoundNodeRandom : SoundNode
    {
        public SoundNodeRandom(nint addr) : base(addr) { }
        public Array<float> Weights { get { return new Array<float>(this[nameof(Weights)].Address); } }
        public Array<bool> HasBeenUsed { get { return new Array<bool>(this[nameof(HasBeenUsed)].Address); } }
        public int NumRandomUsed { get { return this[nameof(NumRandomUsed)].GetValue<int>(); } set { this[nameof(NumRandomUsed)].SetValue<int>(value); } }
        public int PreselectAtLevelLoad { get { return this[nameof(PreselectAtLevelLoad)].GetValue<int>(); } set { this[nameof(PreselectAtLevelLoad)].SetValue<int>(value); } }
        public bool bShouldExcludeFromBranchCulling { get { return this[nameof(bShouldExcludeFromBranchCulling)].Flag; } set { this[nameof(bShouldExcludeFromBranchCulling)].Flag = value; } }
        public bool bSoundCueExcludedFromBranchCulling { get { return this[nameof(bSoundCueExcludedFromBranchCulling)].Flag; } set { this[nameof(bSoundCueExcludedFromBranchCulling)].Flag = value; } }
        public bool bRandomizeWithoutReplacement { get { return this[nameof(bRandomizeWithoutReplacement)].Flag; } set { this[nameof(bRandomizeWithoutReplacement)].Flag = value; } }
    }
    public class SoundNodeSoundClass : SoundNode
    {
        public SoundNodeSoundClass(nint addr) : base(addr) { }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
    }
    public class SoundNodeSwitch : SoundNode
    {
        public SoundNodeSwitch(nint addr) : base(addr) { }
        public Object IntParameterName { get { return this[nameof(IntParameterName)]; } set { this[nameof(IntParameterName)] = value; } }
    }
    public class SoundNodeWaveParam : SoundNode
    {
        public SoundNodeWaveParam(nint addr) : base(addr) { }
        public Object WaveParameterName { get { return this[nameof(WaveParameterName)]; } set { this[nameof(WaveParameterName)] = value; } }
    }
    public class SoundNodeWavePlayer : SoundNodeAssetReferencer
    {
        public SoundNodeWavePlayer(nint addr) : base(addr) { }
        public Object SoundWaveAssetPtr { get { return this[nameof(SoundWaveAssetPtr)]; } set { this[nameof(SoundWaveAssetPtr)] = value; } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
    }
    public class SoundSourceBus : SoundWave
    {
        public SoundSourceBus(nint addr) : base(addr) { }
        public ESourceBusChannels SourceBusChannels { get { return (ESourceBusChannels)this[nameof(SourceBusChannels)].GetValue<int>(); } set { this[nameof(SourceBusChannels)].SetValue<int>((int)value); } }
        public float SourceBusDuration { get { return this[nameof(SourceBusDuration)].GetValue<float>(); } set { this[nameof(SourceBusDuration)].SetValue<float>(value); } }
        public AudioBus AudioBus { get { return this[nameof(AudioBus)].As<AudioBus>(); } set { this["AudioBus"] = value; } }
        public bool bAutoDeactivateWhenSilent { get { return this[nameof(bAutoDeactivateWhenSilent)].Flag; } set { this[nameof(bAutoDeactivateWhenSilent)].Flag = value; } }
    }
    public class SoundSubmixBase : Object
    {
        public SoundSubmixBase(nint addr) : base(addr) { }
        public bool bAutoDisable { get { return this[nameof(bAutoDisable)].Flag; } set { this[nameof(bAutoDisable)].Flag = value; } }
        public float AutoDisableTime { get { return this[nameof(AutoDisableTime)].GetValue<float>(); } set { this[nameof(AutoDisableTime)].SetValue<float>(value); } }
        public Array<SoundSubmixBase> ChildSubmixes { get { return new Array<SoundSubmixBase>(this[nameof(ChildSubmixes)].Address); } }
    }
    public class SoundSubmixWithParentBase : SoundSubmixBase
    {
        public SoundSubmixWithParentBase(nint addr) : base(addr) { }
        public SoundSubmixBase ParentSubmix { get { return this[nameof(ParentSubmix)].As<SoundSubmixBase>(); } set { this["ParentSubmix"] = value; } }
    }
    public class SoundSubmix : SoundSubmixWithParentBase
    {
        public SoundSubmix(nint addr) : base(addr) { }
        public bool bMuteWhenBackgrounded { get { return this[nameof(bMuteWhenBackgrounded)].Flag; } set { this[nameof(bMuteWhenBackgrounded)].Flag = value; } }
        public Array<SoundEffectSubmixPreset> SubmixEffectChain { get { return new Array<SoundEffectSubmixPreset>(this[nameof(SubmixEffectChain)].Address); } }
        public SoundfieldEncodingSettingsBase AmbisonicsPluginSettings { get { return this[nameof(AmbisonicsPluginSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["AmbisonicsPluginSettings"] = value; } }
        public int EnvelopeFollowerAttackTime { get { return this[nameof(EnvelopeFollowerAttackTime)].GetValue<int>(); } set { this[nameof(EnvelopeFollowerAttackTime)].SetValue<int>(value); } }
        public int EnvelopeFollowerReleaseTime { get { return this[nameof(EnvelopeFollowerReleaseTime)].GetValue<int>(); } set { this[nameof(EnvelopeFollowerReleaseTime)].SetValue<int>(value); } }
        public float OutputVolume { get { return this[nameof(OutputVolume)].GetValue<float>(); } set { this[nameof(OutputVolume)].SetValue<float>(value); } }
        public float WetLevel { get { return this[nameof(WetLevel)].GetValue<float>(); } set { this[nameof(WetLevel)].SetValue<float>(value); } }
        public float DryLevel { get { return this[nameof(DryLevel)].GetValue<float>(); } set { this[nameof(DryLevel)].SetValue<float>(value); } }
        public SoundModulationDestinationSettings OutputVolumeModulation { get { return this[nameof(OutputVolumeModulation)].As<SoundModulationDestinationSettings>(); } set { this["OutputVolumeModulation"] = value; } }
        public SoundModulationDestinationSettings WetLevelModulation { get { return this[nameof(WetLevelModulation)].As<SoundModulationDestinationSettings>(); } set { this["WetLevelModulation"] = value; } }
        public SoundModulationDestinationSettings DryLevelModulation { get { return this[nameof(DryLevelModulation)].As<SoundModulationDestinationSettings>(); } set { this["DryLevelModulation"] = value; } }
        public bool bSendToAudioLink { get { return this[nameof(bSendToAudioLink)].Flag; } set { this[nameof(bSendToAudioLink)].Flag = value; } }
        //public Object OnSubmixRecordedFileDone { get { return this[nameof(OnSubmixRecordedFileDone)]; } set { this[nameof(OnSubmixRecordedFileDone)] = value; } }
        public void StopSpectralAnalysis(Object WorldContextObject) { Invoke(nameof(StopSpectralAnalysis), WorldContextObject); }
        public void StopRecordingOutput(Object WorldContextObject, EAudioRecordingExportType ExportType, Object Name, Object Path, SoundWave ExistingSoundWaveToOverwrite) { Invoke(nameof(StopRecordingOutput), WorldContextObject, ExportType, Name, Path, ExistingSoundWaveToOverwrite); }
        public void StopEnvelopeFollowing(Object WorldContextObject) { Invoke(nameof(StopEnvelopeFollowing), WorldContextObject); }
        public void StartSpectralAnalysis(Object WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType) { Invoke(nameof(StartSpectralAnalysis), WorldContextObject, FFTSize, InterpolationMethod, WindowType, HopSize, SpectrumType); }
        public void StartRecordingOutput(Object WorldContextObject, float ExpectedDuration) { Invoke(nameof(StartRecordingOutput), WorldContextObject, ExpectedDuration); }
        public void StartEnvelopeFollowing(Object WorldContextObject) { Invoke(nameof(StartEnvelopeFollowing), WorldContextObject); }
        public void SetSubmixWetLevel(Object WorldContextObject, float InWetLevel) { Invoke(nameof(SetSubmixWetLevel), WorldContextObject, InWetLevel); }
        public void SetSubmixOutputVolume(Object WorldContextObject, float InOutputVolume) { Invoke(nameof(SetSubmixOutputVolume), WorldContextObject, InOutputVolume); }
        public void SetSubmixDryLevel(Object WorldContextObject, float InDryLevel) { Invoke(nameof(SetSubmixDryLevel), WorldContextObject, InDryLevel); }
        public void RemoveSpectralAnalysisDelegate(Object WorldContextObject, Object OnSubmixSpectralAnalysisBP) { Invoke(nameof(RemoveSpectralAnalysisDelegate), WorldContextObject, OnSubmixSpectralAnalysisBP); }
        public void AddSpectralAnalysisDelegate(Object WorldContextObject, Array<SoundSubmixSpectralAnalysisBandSettings> InBandSettings, Object OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime) { Invoke(nameof(AddSpectralAnalysisDelegate), WorldContextObject, InBandSettings, OnSubmixSpectralAnalysisBP, UpdateRate, DecibelNoiseFloor, bDoNormalize, bDoAutoRange, AutoRangeAttackTime, AutoRangeReleaseTime); }
        public void AddEnvelopeFollowerDelegate(Object WorldContextObject, Object OnSubmixEnvelopeBP) { Invoke(nameof(AddEnvelopeFollowerDelegate), WorldContextObject, OnSubmixEnvelopeBP); }
    }
    public class SoundfieldSubmix : SoundSubmixWithParentBase
    {
        public SoundfieldSubmix(nint addr) : base(addr) { }
        public Object SoundfieldEncodingFormat { get { return this[nameof(SoundfieldEncodingFormat)]; } set { this[nameof(SoundfieldEncodingFormat)] = value; } }
        public SoundfieldEncodingSettingsBase EncodingSettings { get { return this[nameof(EncodingSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["EncodingSettings"] = value; } }
        public Array<SoundfieldEffectBase> SoundfieldEffectChain { get { return new Array<SoundfieldEffectBase>(this[nameof(SoundfieldEffectChain)].Address); } }
        public Object EncodingSettingsClass { get { return this[nameof(EncodingSettingsClass)]; } set { this[nameof(EncodingSettingsClass)] = value; } }
    }
    public class EndpointSubmix : SoundSubmixBase
    {
        public EndpointSubmix(nint addr) : base(addr) { }
        public Object EndpointType { get { return this[nameof(EndpointType)]; } set { this[nameof(EndpointType)] = value; } }
        public Object EndpointSettingsClass { get { return this[nameof(EndpointSettingsClass)]; } set { this[nameof(EndpointSettingsClass)] = value; } }
        public AudioEndpointSettingsBase EndpointSettings { get { return this[nameof(EndpointSettings)].As<AudioEndpointSettingsBase>(); } set { this["EndpointSettings"] = value; } }
    }
    public class SoundfieldEndpointSubmix : SoundSubmixBase
    {
        public SoundfieldEndpointSubmix(nint addr) : base(addr) { }
        public Object SoundfieldEndpointType { get { return this[nameof(SoundfieldEndpointType)]; } set { this[nameof(SoundfieldEndpointType)] = value; } }
        public Object EndpointSettingsClass { get { return this[nameof(EndpointSettingsClass)]; } set { this[nameof(EndpointSettingsClass)] = value; } }
        public SoundfieldEndpointSettingsBase EndpointSettings { get { return this[nameof(EndpointSettings)].As<SoundfieldEndpointSettingsBase>(); } set { this["EndpointSettings"] = value; } }
        public Object EncodingSettingsClass { get { return this[nameof(EncodingSettingsClass)]; } set { this[nameof(EncodingSettingsClass)] = value; } }
        public SoundfieldEncodingSettingsBase EncodingSettings { get { return this[nameof(EncodingSettings)].As<SoundfieldEncodingSettingsBase>(); } set { this["EncodingSettings"] = value; } }
        public Array<SoundfieldEffectBase> SoundfieldEffectChain { get { return new Array<SoundfieldEffectBase>(this[nameof(SoundfieldEffectChain)].Address); } }
    }
    public class SpectatorPawn : DefaultPawn
    {
        public SpectatorPawn(nint addr) : base(addr) { }
    }
    public class SpectatorPawnMovement : FloatingPawnMovement
    {
        public SpectatorPawnMovement(nint addr) : base(addr) { }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
    }
    public class SplineMeshActor : Actor
    {
        public SplineMeshActor(nint addr) : base(addr) { }
        public SplineMeshComponent SplineMeshComponent { get { return this[nameof(SplineMeshComponent)].As<SplineMeshComponent>(); } set { this["SplineMeshComponent"] = value; } }
    }
    public class StaticMeshDescriptionBulkData : MeshDescriptionBaseBulkData
    {
        public StaticMeshDescriptionBulkData(nint addr) : base(addr) { }
    }
    public class StereoLayerFunctionLibrary : BlueprintFunctionLibrary
    {
        public StereoLayerFunctionLibrary(nint addr) : base(addr) { }
        public void ShowSplashScreen() { Invoke(nameof(ShowSplashScreen)); }
        public void SetSplashScreen(Texture Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet) { Invoke(nameof(SetSplashScreen), Texture, Scale, Offset, bShowLoadingMovie, bShowOnSet); }
        public void HideSplashScreen() { Invoke(nameof(HideSplashScreen)); }
        public void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled) { Invoke(nameof(EnableAutoLoadingSplashScreen), InAutoShowEnabled); }
    }
    public class ActorTextureStreamingBuildDataComponent : ActorComponent
    {
        public ActorTextureStreamingBuildDataComponent(nint addr) : base(addr) { }
    }
    public class TextureMipDataProviderFactory : AssetUserData
    {
        public TextureMipDataProviderFactory(nint addr) : base(addr) { }
    }
    public class AudioSubsystemCollectionRoot : Object
    {
        public AudioSubsystemCollectionRoot(nint addr) : base(addr) { }
    }
    public class AudioEngineSubsystem : DynamicSubsystem
    {
        public AudioEngineSubsystem(nint addr) : base(addr) { }
    }
    public class SubsystemBlueprintLibrary : BlueprintFunctionLibrary
    {
        public SubsystemBlueprintLibrary(nint addr) : base(addr) { }
        public WorldSubsystem GetWorldSubsystem(Object ContextObject, Object Class) { return Invoke<WorldSubsystem>(nameof(GetWorldSubsystem), ContextObject, Class); }
        public LocalPlayerSubsystem GetLocalPlayerSubSystemFromPlayerController(PlayerController PlayerController, Object Class) { return Invoke<LocalPlayerSubsystem>(nameof(GetLocalPlayerSubSystemFromPlayerController), PlayerController, Class); }
        public LocalPlayerSubsystem GetLocalPlayerSubsystem(Object ContextObject, Object Class) { return Invoke<LocalPlayerSubsystem>(nameof(GetLocalPlayerSubsystem), ContextObject, Class); }
        public GameInstanceSubsystem GetGameInstanceSubsystem(Object ContextObject, Object Class) { return Invoke<GameInstanceSubsystem>(nameof(GetGameInstanceSubsystem), ContextObject, Class); }
        public EngineSubsystem GetEngineSubsystem(Object Class) { return Invoke<EngineSubsystem>(nameof(GetEngineSubsystem), Class); }
        public AudioEngineSubsystem GetAudioEngineSubsystem(Object ContextObject, Object Class) { return Invoke<AudioEngineSubsystem>(nameof(GetAudioEngineSubsystem), ContextObject, Class); }
    }
    public class TargetPoint : Actor
    {
        public TargetPoint(nint addr) : base(addr) { }
    }
    public class AutomationTestSettings : Object
    {
        public AutomationTestSettings(nint addr) : base(addr) { }
        public Array<Object> EngineTestModules { get { return new Array<Object>(this[nameof(EngineTestModules)].Address); } }
        public Array<Object> EditorTestModules { get { return new Array<Object>(this[nameof(EditorTestModules)].Address); } }
        public SoftObjectPath AutomationTestmap { get { return this[nameof(AutomationTestmap)].As<SoftObjectPath>(); } set { this["AutomationTestmap"] = value; } }
        public Array<EditorMapPerformanceTestDefinition> EditorPerformanceTestMaps { get { return new Array<EditorMapPerformanceTestDefinition>(this[nameof(EditorPerformanceTestMaps)].Address); } }
        public Array<Object> AssetsToOpen { get { return new Array<Object>(this[nameof(AssetsToOpen)].Address); } }
        public Array<Object> MapsToPIETest { get { return new Array<Object>(this[nameof(MapsToPIETest)].Address); } }
        public bool bUseAllProjectMapsToPlayInPIE { get { return this[nameof(bUseAllProjectMapsToPlayInPIE)].Flag; } set { this[nameof(bUseAllProjectMapsToPlayInPIE)].Flag = value; } }
        public BuildPromotionTestSettings BuildPromotionTest { get { return this[nameof(BuildPromotionTest)].As<BuildPromotionTestSettings>(); } set { this["BuildPromotionTest"] = value; } }
        public MaterialEditorPromotionSettings MaterialEditorPromotionTest { get { return this[nameof(MaterialEditorPromotionTest)].As<MaterialEditorPromotionSettings>(); } set { this["MaterialEditorPromotionTest"] = value; } }
        public ParticleEditorPromotionSettings ParticleEditorPromotionTest { get { return this[nameof(ParticleEditorPromotionTest)].As<ParticleEditorPromotionSettings>(); } set { this["ParticleEditorPromotionTest"] = value; } }
        public BlueprintEditorPromotionSettings BlueprintEditorPromotionTest { get { return this[nameof(BlueprintEditorPromotionTest)].As<BlueprintEditorPromotionSettings>(); } set { this["BlueprintEditorPromotionTest"] = value; } }
        public Array<Object> TestLevelFolders { get { return new Array<Object>(this[nameof(TestLevelFolders)].Address); } }
        public Array<ExternalToolDefinition> ExternalTools { get { return new Array<ExternalToolDefinition>(this[nameof(ExternalTools)].Address); } }
        public Array<EditorImportExportTestDefinition> ImportExportTestDefinitions { get { return new Array<EditorImportExportTestDefinition>(this[nameof(ImportExportTestDefinitions)].Address); } }
        public Array<LaunchOnTestSettings> LaunchOnSettings { get { return new Array<LaunchOnTestSettings>(this[nameof(LaunchOnSettings)].Address); } }
        public IntPoint DefaultScreenshotResolution { get { return this[nameof(DefaultScreenshotResolution)].As<IntPoint>(); } set { this["DefaultScreenshotResolution"] = value; } }
        public float PIETestDuration { get { return this[nameof(PIETestDuration)].GetValue<float>(); } set { this[nameof(PIETestDuration)].SetValue<float>(value); } }
        public float DefaultInteractiveFramerate { get { return this[nameof(DefaultInteractiveFramerate)].GetValue<float>(); } set { this[nameof(DefaultInteractiveFramerate)].SetValue<float>(value); } }
        public float DefaultInteractiveFramerateWaitTime { get { return this[nameof(DefaultInteractiveFramerateWaitTime)].GetValue<float>(); } set { this[nameof(DefaultInteractiveFramerateWaitTime)].SetValue<float>(value); } }
        public float DefaultInteractiveFramerateDuration { get { return this[nameof(DefaultInteractiveFramerateDuration)].GetValue<float>(); } set { this[nameof(DefaultInteractiveFramerateDuration)].SetValue<float>(value); } }
    }
    public class TransactionDiffingTestObject : Object
    {
        public TransactionDiffingTestObject(nint addr) : base(addr) { }
        public Array<Object> NamesArray { get { return new Array<Object>(this[nameof(NamesArray)].Address); } }
        public Object AdditionalName { get { return this[nameof(AdditionalName)]; } set { this[nameof(AdditionalName)] = value; } }
        public Array<Object> ObjectsArray { get { return new Array<Object>(this[nameof(ObjectsArray)].Address); } }
        public Object AdditionalObject { get { return this[nameof(AdditionalObject)].As<Object>(); } set { this["AdditionalObject"] = value; } }
        public Array<Object> SoftObjectsArray { get { return new Array<Object>(this[nameof(SoftObjectsArray)].Address); } }
        public Object AdditionalSoftObject { get { return this[nameof(AdditionalSoftObject)]; } set { this[nameof(AdditionalSoftObject)] = value; } }
        public int PropertyData { get { return this[nameof(PropertyData)].GetValue<int>(); } set { this[nameof(PropertyData)].SetValue<int>(value); } }
    }
    public class Texture2DDynamic : Texture
    {
        public Texture2DDynamic(nint addr) : base(addr) { }
        public byte Format { get { return this[nameof(Format)].GetValue<byte>(); } set { this[nameof(Format)].SetValue<byte>(value); } }
    }
    public class TextureCubeArray : Texture
    {
        public TextureCubeArray(nint addr) : base(addr) { }
    }
    public class TextureEncodingProjectSettings : DeveloperSettings
    {
        public TextureEncodingProjectSettings(nint addr) : base(addr) { }
        public bool bFinalUsesRDO { get { return this[nameof(bFinalUsesRDO)].Flag; } set { this[nameof(bFinalUsesRDO)].Flag = value; } }
        public byte FinalRDOLambda { get { return this[nameof(FinalRDOLambda)].GetValue<byte>(); } set { this[nameof(FinalRDOLambda)].SetValue<byte>(value); } }
        public ETextureEncodeEffort FinalEffortLevel { get { return (ETextureEncodeEffort)this[nameof(FinalEffortLevel)].GetValue<int>(); } set { this[nameof(FinalEffortLevel)].SetValue<int>((int)value); } }
        public ETextureUniversalTiling FinalUniversalTiling { get { return (ETextureUniversalTiling)this[nameof(FinalUniversalTiling)].GetValue<int>(); } set { this[nameof(FinalUniversalTiling)].SetValue<int>((int)value); } }
        public bool bFastUsesRDO { get { return this[nameof(bFastUsesRDO)].Flag; } set { this[nameof(bFastUsesRDO)].Flag = value; } }
        public byte FastRDOLambda { get { return this[nameof(FastRDOLambda)].GetValue<byte>(); } set { this[nameof(FastRDOLambda)].SetValue<byte>(value); } }
        public ETextureEncodeEffort FastEffortLevel { get { return (ETextureEncodeEffort)this[nameof(FastEffortLevel)].GetValue<int>(); } set { this[nameof(FastEffortLevel)].SetValue<int>((int)value); } }
        public ETextureUniversalTiling FastUniversalTiling { get { return (ETextureUniversalTiling)this[nameof(FastUniversalTiling)].GetValue<int>(); } set { this[nameof(FastUniversalTiling)].SetValue<int>((int)value); } }
        public ETextureEncodeSpeed CookUsesSpeed { get { return (ETextureEncodeSpeed)this[nameof(CookUsesSpeed)].GetValue<int>(); } set { this[nameof(CookUsesSpeed)].SetValue<int>((int)value); } }
        public ETextureEncodeSpeed EditorUsesSpeed { get { return (ETextureEncodeSpeed)this[nameof(EditorUsesSpeed)].GetValue<int>(); } set { this[nameof(EditorUsesSpeed)].SetValue<int>((int)value); } }
    }
    public class TextureEncodingUserSettings : DeveloperSettings
    {
        public TextureEncodingUserSettings(nint addr) : base(addr) { }
        public ETextureEncodeSpeedOverride ForceEncodeSpeed { get { return (ETextureEncodeSpeedOverride)this[nameof(ForceEncodeSpeed)].GetValue<int>(); } set { this[nameof(ForceEncodeSpeed)].SetValue<int>((int)value); } }
    }
    public class TextureLightProfile : Texture2D
    {
        public TextureLightProfile(nint addr) : base(addr) { }
        public float Brightness { get { return this[nameof(Brightness)].GetValue<float>(); } set { this[nameof(Brightness)].SetValue<float>(value); } }
        public float TextureMultiplier { get { return this[nameof(TextureMultiplier)].GetValue<float>(); } set { this[nameof(TextureMultiplier)].SetValue<float>(value); } }
    }
    public class TextureRenderTarget2DArray : TextureRenderTarget
    {
        public TextureRenderTarget2DArray(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public int Slices { get { return this[nameof(Slices)].GetValue<int>(); } set { this[nameof(Slices)].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this[nameof(OverrideFormat)].GetValue<byte>(); } set { this[nameof(OverrideFormat)].SetValue<byte>(value); } }
        public bool bHDR { get { return this[nameof(bHDR)].Flag; } set { this[nameof(bHDR)].Flag = value; } }
        public bool bForceLinearGamma { get { return this[nameof(bForceLinearGamma)].Flag; } set { this[nameof(bForceLinearGamma)].Flag = value; } }
    }
    public class TextureRenderTargetCube : TextureRenderTarget
    {
        public TextureRenderTargetCube(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this[nameof(OverrideFormat)].GetValue<byte>(); } set { this[nameof(OverrideFormat)].SetValue<byte>(value); } }
        public bool bHDR { get { return this[nameof(bHDR)].Flag; } set { this[nameof(bHDR)].Flag = value; } }
        public bool bForceLinearGamma { get { return this[nameof(bForceLinearGamma)].Flag; } set { this[nameof(bForceLinearGamma)].Flag = value; } }
    }
    public class TextureRenderTargetVolume : TextureRenderTarget
    {
        public TextureRenderTargetVolume(nint addr) : base(addr) { }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public int SizeZ { get { return this[nameof(SizeZ)].GetValue<int>(); } set { this[nameof(SizeZ)].SetValue<int>(value); } }
        public LinearColor ClearColor { get { return this[nameof(ClearColor)].As<LinearColor>(); } set { this["ClearColor"] = value; } }
        public byte OverrideFormat { get { return this[nameof(OverrideFormat)].GetValue<byte>(); } set { this[nameof(OverrideFormat)].SetValue<byte>(value); } }
        public bool bHDR { get { return this[nameof(bHDR)].Flag; } set { this[nameof(bHDR)].Flag = value; } }
        public bool bForceLinearGamma { get { return this[nameof(bForceLinearGamma)].Flag; } set { this[nameof(bForceLinearGamma)].Flag = value; } }
    }
    public class TimelineTemplate : Object
    {
        public TimelineTemplate(nint addr) : base(addr) { }
        public float TimelineLength { get { return this[nameof(TimelineLength)].GetValue<float>(); } set { this[nameof(TimelineLength)].SetValue<float>(value); } }
        public byte LengthMode { get { return this[nameof(LengthMode)].GetValue<byte>(); } set { this[nameof(LengthMode)].SetValue<byte>(value); } }
        public bool bAutoPlay { get { return this[nameof(bAutoPlay)].Flag; } set { this[nameof(bAutoPlay)].Flag = value; } }
        public bool bLoop { get { return this[nameof(bLoop)].Flag; } set { this[nameof(bLoop)].Flag = value; } }
        public bool bReplicated { get { return this[nameof(bReplicated)].Flag; } set { this[nameof(bReplicated)].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
        public Array<TTEventTrack> EventTracks { get { return new Array<TTEventTrack>(this[nameof(EventTracks)].Address); } }
        //public Array<TTFloatTrack> FloatTracks { get { return new Array<TTFloatTrack>(this[nameof(FloatTracks)].Address); } }
        public Array<TTVectorTrack> VectorTracks { get { return new Array<TTVectorTrack>(this[nameof(VectorTracks)].Address); } }
        public Array<TTLinearColorTrack> LinearColorTracks { get { return new Array<TTLinearColorTrack>(this[nameof(LinearColorTracks)].Address); } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this[nameof(MetaDataArray)].Address); } }
        public Guid TimelineGuid { get { return this[nameof(TimelineGuid)].As<Guid>(); } set { this["TimelineGuid"] = value; } }
        public byte TimelineTickGroup { get { return this[nameof(TimelineTickGroup)].GetValue<byte>(); } set { this[nameof(TimelineTickGroup)].SetValue<byte>(value); } }
        public Object VariableName { get { return this[nameof(VariableName)]; } set { this[nameof(VariableName)] = value; } }
        public Object DirectionPropertyName { get { return this[nameof(DirectionPropertyName)]; } set { this[nameof(DirectionPropertyName)] = value; } }
        public Object UpdateFunctionName { get { return this[nameof(UpdateFunctionName)]; } set { this[nameof(UpdateFunctionName)] = value; } }
        public Object FinishedFunctionName { get { return this[nameof(FinishedFunctionName)]; } set { this[nameof(FinishedFunctionName)] = value; } }
    }
    public class TriggerVolume : Volume
    {
        public TriggerVolume(nint addr) : base(addr) { }
    }
    public class UserDefinedEnum : Enum
    {
        public UserDefinedEnum(nint addr) : base(addr) { }
        public Object DisplayNameMap { get { return this[nameof(DisplayNameMap)]; } set { this[nameof(DisplayNameMap)] = value; } }
    }
    public class UserInterfaceSettings : DeveloperSettings
    {
        public UserInterfaceSettings(nint addr) : base(addr) { }
        public ERenderFocusRule RenderFocusRule { get { return (ERenderFocusRule)this[nameof(RenderFocusRule)].GetValue<int>(); } set { this[nameof(RenderFocusRule)].SetValue<int>((int)value); } }
        public Object HardwareCursors { get { return this[nameof(HardwareCursors)]; } set { this[nameof(HardwareCursors)] = value; } }
        public Object SoftwareCursors { get { return this[nameof(SoftwareCursors)]; } set { this[nameof(SoftwareCursors)] = value; } }
        public SoftClassPath DefaultCursor { get { return this[nameof(DefaultCursor)].As<SoftClassPath>(); } set { this["DefaultCursor"] = value; } }
        public SoftClassPath TextEditBeamCursor { get { return this[nameof(TextEditBeamCursor)].As<SoftClassPath>(); } set { this["TextEditBeamCursor"] = value; } }
        public SoftClassPath CrosshairsCursor { get { return this[nameof(CrosshairsCursor)].As<SoftClassPath>(); } set { this["CrosshairsCursor"] = value; } }
        public SoftClassPath HandCursor { get { return this[nameof(HandCursor)].As<SoftClassPath>(); } set { this["HandCursor"] = value; } }
        public SoftClassPath GrabHandCursor { get { return this[nameof(GrabHandCursor)].As<SoftClassPath>(); } set { this["GrabHandCursor"] = value; } }
        public SoftClassPath GrabHandClosedCursor { get { return this[nameof(GrabHandClosedCursor)].As<SoftClassPath>(); } set { this["GrabHandClosedCursor"] = value; } }
        public SoftClassPath SlashedCircleCursor { get { return this[nameof(SlashedCircleCursor)].As<SoftClassPath>(); } set { this["SlashedCircleCursor"] = value; } }
        public float ApplicationScale { get { return this[nameof(ApplicationScale)].GetValue<float>(); } set { this[nameof(ApplicationScale)].SetValue<float>(value); } }
        public EUIScalingRule UIScaleRule { get { return (EUIScalingRule)this[nameof(UIScaleRule)].GetValue<int>(); } set { this[nameof(UIScaleRule)].SetValue<int>((int)value); } }
        public SoftClassPath CustomScalingRuleClass { get { return this[nameof(CustomScalingRuleClass)].As<SoftClassPath>(); } set { this["CustomScalingRuleClass"] = value; } }
        public RuntimeFloatCurve UIScaleCurve { get { return this[nameof(UIScaleCurve)].As<RuntimeFloatCurve>(); } set { this["UIScaleCurve"] = value; } }
        public bool bAllowHighDPIInGameMode { get { return this[nameof(bAllowHighDPIInGameMode)].Flag; } set { this[nameof(bAllowHighDPIInGameMode)].Flag = value; } }
        public IntPoint DesignScreenSize { get { return this[nameof(DesignScreenSize)].As<IntPoint>(); } set { this["DesignScreenSize"] = value; } }
        public bool bLoadWidgetsOnDedicatedServer { get { return this[nameof(bLoadWidgetsOnDedicatedServer)].Flag; } set { this[nameof(bLoadWidgetsOnDedicatedServer)].Flag = value; } }
        public Array<Object> CursorClasses { get { return new Array<Object>(this[nameof(CursorClasses)].Address); } }
        public Object CustomScalingRuleClassInstance { get { return this[nameof(CustomScalingRuleClassInstance)].As<Object>(); } set { this["CustomScalingRuleClassInstance"] = value; } } // ClassPtrProperty
        public DPICustomScalingRule CustomScalingRule { get { return this[nameof(CustomScalingRule)].As<DPICustomScalingRule>(); } set { this["CustomScalingRule"] = value; } }
    }
    public class Canvas : Object
    {
        public Canvas(nint addr) : base(addr) { }
        public float OrgX { get { return this[nameof(OrgX)].GetValue<float>(); } set { this[nameof(OrgX)].SetValue<float>(value); } }
        public float OrgY { get { return this[nameof(OrgY)].GetValue<float>(); } set { this[nameof(OrgY)].SetValue<float>(value); } }
        public float ClipX { get { return this[nameof(ClipX)].GetValue<float>(); } set { this[nameof(ClipX)].SetValue<float>(value); } }
        public float ClipY { get { return this[nameof(ClipY)].GetValue<float>(); } set { this[nameof(ClipY)].SetValue<float>(value); } }
        public Color DrawColor { get { return this[nameof(DrawColor)].As<Color>(); } set { this["DrawColor"] = value; } }
        public bool bCenterX { get { return this[nameof(bCenterX)].Flag; } set { this[nameof(bCenterX)].Flag = value; } }
        public bool bCenterY { get { return this[nameof(bCenterY)].Flag; } set { this[nameof(bCenterY)].Flag = value; } }
        public bool bNoSmooth { get { return this[nameof(bNoSmooth)].Flag; } set { this[nameof(bNoSmooth)].Flag = value; } }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public Plane ColorModulate { get { return this[nameof(ColorModulate)].As<Plane>(); } set { this["ColorModulate"] = value; } }
        public Texture2D DefaultTexture { get { return this[nameof(DefaultTexture)].As<Texture2D>(); } set { this["DefaultTexture"] = value; } }
        public Texture2D GradientTexture0 { get { return this[nameof(GradientTexture0)].As<Texture2D>(); } set { this["GradientTexture0"] = value; } }
        public ReporterGraph ReporterGraph { get { return this[nameof(ReporterGraph)].As<ReporterGraph>(); } set { this["ReporterGraph"] = value; } }
        public Vector2D K2_TextSize(Font RenderFont, Object RenderText, Vector2D Scale) { return Invoke<Vector2D>(nameof(K2_TextSize), RenderFont, RenderText, Scale); }
        public Vector2D K2_StrLen(Font RenderFont, Object RenderText) { return Invoke<Vector2D>(nameof(K2_StrLen), RenderFont, RenderText); }
        public Vector K2_Project(Vector WorldLocation) { return Invoke<Vector>(nameof(K2_Project), WorldLocation); }
        public void K2_DrawTriangle(Texture RenderTexture, Array<CanvasUVTri> Triangles) { Invoke(nameof(K2_DrawTriangle), RenderTexture, Triangles); }
        public void K2_DrawTexture(Texture RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint) { Invoke(nameof(K2_DrawTexture), RenderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BlendMode, Rotation, PivotPoint); }
        public void K2_DrawText(Font RenderFont, Object RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor) { Invoke(nameof(K2_DrawText), RenderFont, RenderText, ScreenPosition, Scale, RenderColor, Kerning, ShadowColor, ShadowOffset, bCentreX, bCentreY, bOutlined, OutlineColor); }
        public void K2_DrawPolygon(Texture RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor) { Invoke(nameof(K2_DrawPolygon), RenderTexture, ScreenPosition, Radius, NumberOfSides, RenderColor); }
        public void K2_DrawMaterialTriangle(MaterialInterface RenderMaterial, Array<CanvasUVTri> Triangles) { Invoke(nameof(K2_DrawMaterialTriangle), RenderMaterial, Triangles); }
        public void K2_DrawMaterial(MaterialInterface RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint) { Invoke(nameof(K2_DrawMaterial), RenderMaterial, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, Rotation, PivotPoint); }
        public void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor) { Invoke(nameof(K2_DrawLine), ScreenPositionA, ScreenPositionB, Thickness, RenderColor); }
        public void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor) { Invoke(nameof(K2_DrawBox), ScreenPosition, ScreenSize, Thickness, RenderColor); }
        public void K2_DrawBorder(Texture BorderTexture, Texture BackgroundTexture, Texture LeftBorderTexture, Texture RightBorderTexture, Texture TopBorderTexture, Texture BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize) { Invoke(nameof(K2_DrawBorder), BorderTexture, BackgroundTexture, LeftBorderTexture, RightBorderTexture, TopBorderTexture, BottomBorderTexture, ScreenPosition, ScreenSize, CoordinatePosition, CoordinateSize, RenderColor, BorderScale, BackgroundScale, Rotation, PivotPoint, CornerSize); }
        public void K2_Deproject(Vector2D ScreenPosition, Vector WorldOrigin, Vector WorldDirection) { Invoke(nameof(K2_Deproject), ScreenPosition, WorldOrigin, WorldDirection); }
    }
    public class Console : Object
    {
        public Console(nint addr) : base(addr) { }
        public LocalPlayer ConsoleTargetPlayer { get { return this[nameof(ConsoleTargetPlayer)].As<LocalPlayer>(); } set { this["ConsoleTargetPlayer"] = value; } }
        public Texture2D DefaultTexture_Black { get { return this[nameof(DefaultTexture_Black)].As<Texture2D>(); } set { this["DefaultTexture_Black"] = value; } }
        public Texture2D DefaultTexture_White { get { return this[nameof(DefaultTexture_White)].As<Texture2D>(); } set { this["DefaultTexture_White"] = value; } }
        public Array<Object> HistoryBuffer { get { return new Array<Object>(this[nameof(HistoryBuffer)].Address); } }
    }
    public class InputSettings : Object
    {
        public InputSettings(nint addr) : base(addr) { }
        public Array<InputAxisConfigEntry> AxisConfig { get { return new Array<InputAxisConfigEntry>(this[nameof(AxisConfig)].Address); } }
        public bool bAltEnterTogglesFullscreen { get { return this[nameof(bAltEnterTogglesFullscreen)].Flag; } set { this[nameof(bAltEnterTogglesFullscreen)].Flag = value; } }
        public bool bF11TogglesFullscreen { get { return this[nameof(bF11TogglesFullscreen)].Flag; } set { this[nameof(bF11TogglesFullscreen)].Flag = value; } }
        public bool bUseMouseForTouch { get { return this[nameof(bUseMouseForTouch)].Flag; } set { this[nameof(bUseMouseForTouch)].Flag = value; } }
        public bool bEnableMouseSmoothing { get { return this[nameof(bEnableMouseSmoothing)].Flag; } set { this[nameof(bEnableMouseSmoothing)].Flag = value; } }
        public bool bEnableFOVScaling { get { return this[nameof(bEnableFOVScaling)].Flag; } set { this[nameof(bEnableFOVScaling)].Flag = value; } }
        public bool bCaptureMouseOnLaunch { get { return this[nameof(bCaptureMouseOnLaunch)].Flag; } set { this[nameof(bCaptureMouseOnLaunch)].Flag = value; } }
        public bool bEnableLegacyInputScales { get { return this[nameof(bEnableLegacyInputScales)].Flag; } set { this[nameof(bEnableLegacyInputScales)].Flag = value; } }
        public bool bEnableMotionControls { get { return this[nameof(bEnableMotionControls)].Flag; } set { this[nameof(bEnableMotionControls)].Flag = value; } }
        public bool bFilterInputByPlatformUser { get { return this[nameof(bFilterInputByPlatformUser)].Flag; } set { this[nameof(bFilterInputByPlatformUser)].Flag = value; } }
        public bool bShouldFlushPressedKeysOnViewportFocusLost { get { return this[nameof(bShouldFlushPressedKeysOnViewportFocusLost)].Flag; } set { this[nameof(bShouldFlushPressedKeysOnViewportFocusLost)].Flag = value; } }
        public bool bEnableDynamicComponentInputBinding { get { return this[nameof(bEnableDynamicComponentInputBinding)].Flag; } set { this[nameof(bEnableDynamicComponentInputBinding)].Flag = value; } }
        public bool bAlwaysShowTouchInterface { get { return this[nameof(bAlwaysShowTouchInterface)].Flag; } set { this[nameof(bAlwaysShowTouchInterface)].Flag = value; } }
        public bool bShowConsoleOnFourFingerTap { get { return this[nameof(bShowConsoleOnFourFingerTap)].Flag; } set { this[nameof(bShowConsoleOnFourFingerTap)].Flag = value; } }
        public bool bEnableGestureRecognizer { get { return this[nameof(bEnableGestureRecognizer)].Flag; } set { this[nameof(bEnableGestureRecognizer)].Flag = value; } }
        public bool bUseAutocorrect { get { return this[nameof(bUseAutocorrect)].Flag; } set { this[nameof(bUseAutocorrect)].Flag = value; } }
        public Array<Object> ExcludedAutocorrectOS { get { return new Array<Object>(this[nameof(ExcludedAutocorrectOS)].Address); } }
        public Array<Object> ExcludedAutocorrectCultures { get { return new Array<Object>(this[nameof(ExcludedAutocorrectCultures)].Address); } }
        public Array<Object> ExcludedAutocorrectDeviceModels { get { return new Array<Object>(this[nameof(ExcludedAutocorrectDeviceModels)].Address); } }
        public EMouseCaptureMode DefaultViewportMouseCaptureMode { get { return (EMouseCaptureMode)this[nameof(DefaultViewportMouseCaptureMode)].GetValue<int>(); } set { this[nameof(DefaultViewportMouseCaptureMode)].SetValue<int>((int)value); } }
        public EMouseLockMode DefaultViewportMouseLockMode { get { return (EMouseLockMode)this[nameof(DefaultViewportMouseLockMode)].GetValue<int>(); } set { this[nameof(DefaultViewportMouseLockMode)].SetValue<int>((int)value); } }
        public float FOVScale { get { return this[nameof(FOVScale)].GetValue<float>(); } set { this[nameof(FOVScale)].SetValue<float>(value); } }
        public float DoubleClickTime { get { return this[nameof(DoubleClickTime)].GetValue<float>(); } set { this[nameof(DoubleClickTime)].SetValue<float>(value); } }
        public Array<InputActionKeyMapping> ActionMappings { get { return new Array<InputActionKeyMapping>(this[nameof(ActionMappings)].Address); } }
        public Array<InputAxisKeyMapping> AxisMappings { get { return new Array<InputAxisKeyMapping>(this[nameof(AxisMappings)].Address); } }
        public Array<InputActionSpeechMapping> SpeechMappings { get { return new Array<InputActionSpeechMapping>(this[nameof(SpeechMappings)].Address); } }
        public Object DefaultPlayerInputClass { get { return this[nameof(DefaultPlayerInputClass)]; } set { this[nameof(DefaultPlayerInputClass)] = value; } }
        public Object DefaultInputComponentClass { get { return this[nameof(DefaultInputComponentClass)]; } set { this[nameof(DefaultInputComponentClass)] = value; } }
        public SoftObjectPath DefaultTouchInterface { get { return this[nameof(DefaultTouchInterface)].As<SoftObjectPath>(); } set { this["DefaultTouchInterface"] = value; } }
        public Array<Key> ConsoleKeys { get { return new Array<Key>(this[nameof(ConsoleKeys)].Address); } }
        public void SaveKeyMappings() { Invoke(nameof(SaveKeyMappings)); }
        public void RemoveAxisMapping(InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps) { Invoke(nameof(RemoveAxisMapping), KeyMapping, bForceRebuildKeymaps); }
        public void RemoveActionMapping(InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps) { Invoke(nameof(RemoveActionMapping), KeyMapping, bForceRebuildKeymaps); }
        public InputSettings GetInputSettings() { return Invoke<InputSettings>(nameof(GetInputSettings)); }
        public void GetAxisNames(Array<Object> AxisNames) { Invoke(nameof(GetAxisNames), AxisNames); }
        public void GetAxisMappingByName(Object InAxisName, Array<InputAxisKeyMapping> OutMappings) { Invoke(nameof(GetAxisMappingByName), InAxisName, OutMappings); }
        public void GetActionNames(Array<Object> ActionNames) { Invoke(nameof(GetActionNames), ActionNames); }
        public void GetActionMappingByName(Object InActionName, Array<InputActionKeyMapping> OutMappings) { Invoke(nameof(GetActionMappingByName), InActionName, OutMappings); }
        public void ForceRebuildKeymaps() { Invoke(nameof(ForceRebuildKeymaps)); }
        public void AddAxisMapping(InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps) { Invoke(nameof(AddAxisMapping), KeyMapping, bForceRebuildKeymaps); }
        public void AddActionMapping(InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps) { Invoke(nameof(AddActionMapping), KeyMapping, bForceRebuildKeymaps); }
    }
    public class VectorFieldVolume : Actor
    {
        public VectorFieldVolume(nint addr) : base(addr) { }
        public VectorFieldComponent VectorFieldComponent { get { return this[nameof(VectorFieldComponent)].As<VectorFieldComponent>(); } set { this["VectorFieldComponent"] = value; } }
    }
    public class TireType : DataAsset
    {
        public TireType(nint addr) : base(addr) { }
        public float FrictionScale { get { return this[nameof(FrictionScale)].GetValue<float>(); } set { this[nameof(FrictionScale)].SetValue<float>(value); } }
    }
    public class VisualLoggerAutomationTests : Object
    {
        public VisualLoggerAutomationTests(nint addr) : base(addr) { }
    }
    public class VisualLoggerFilterVolume : Volume
    {
        public VisualLoggerFilterVolume(nint addr) : base(addr) { }
    }
    public class VisualLoggerKismetLibrary : BlueprintFunctionLibrary
    {
        public VisualLoggerKismetLibrary(nint addr) : base(addr) { }
        public void RedirectVislog(Object SourceOwner, Object DestinationOwner) { Invoke(nameof(RedirectVislog), SourceOwner, DestinationOwner); }
        public void LogText(Object WorldContextObject, Object Text, Object LogCategory, bool bAddToMessageLog) { Invoke(nameof(LogText), WorldContextObject, Text, LogCategory, bAddToMessageLog); }
        public void LogSegment(Object WorldContextObject, Vector SegmentStart, Vector SegmentEnd, Object Text, LinearColor ObjectColor, float Thickness, Object CategoryName, bool bAddToMessageLog) { Invoke(nameof(LogSegment), WorldContextObject, SegmentStart, SegmentEnd, Text, ObjectColor, Thickness, CategoryName, bAddToMessageLog); }
        public void LogLocation(Object WorldContextObject, Vector Location, Object Text, LinearColor ObjectColor, float Radius, Object LogCategory, bool bAddToMessageLog) { Invoke(nameof(LogLocation), WorldContextObject, Location, Text, ObjectColor, Radius, LogCategory, bAddToMessageLog); }
        public void LogBox(Object WorldContextObject, Box BoxShape, Object Text, LinearColor ObjectColor, Object LogCategory, bool bAddToMessageLog) { Invoke(nameof(LogBox), WorldContextObject, BoxShape, Text, ObjectColor, LogCategory, bAddToMessageLog); }
        public void EnableRecording(bool bEnabled) { Invoke(nameof(EnableRecording), bEnabled); }
    }
    public class VoiceChannel : Channel
    {
        public VoiceChannel(nint addr) : base(addr) { }
    }
    public class VOIPTalker : ActorComponent
    {
        public VOIPTalker(nint addr) : base(addr) { }
        public VoiceSettings Settings { get { return this[nameof(Settings)].As<VoiceSettings>(); } set { this["Settings"] = value; } }
        public void RegisterWithPlayerState(PlayerState OwningState) { Invoke(nameof(RegisterWithPlayerState), OwningState); }
        public float GetVoiceLevel() { return Invoke<float>(nameof(GetVoiceLevel)); }
        public VOIPTalker CreateTalkerForPlayer(PlayerState OwningState) { return Invoke<VOIPTalker>(nameof(CreateTalkerForPlayer), OwningState); }
        public void BPOnTalkingEnd() { Invoke(nameof(BPOnTalkingEnd)); }
        public void BPOnTalkingBegin(AudioComponent AudioComponent) { Invoke(nameof(BPOnTalkingBegin), AudioComponent); }
    }
    public class VOIPStatics : BlueprintFunctionLibrary
    {
        public VOIPStatics(nint addr) : base(addr) { }
        public void SetMicThreshold(float InThreshold) { Invoke(nameof(SetMicThreshold), InThreshold); }
    }
    public class VolumeTexture : Texture
    {
        public VolumeTexture(nint addr) : base(addr) { }
        public byte AddressMode { get { return this[nameof(AddressMode)].GetValue<byte>(); } set { this[nameof(AddressMode)].SetValue<byte>(value); } }
    }
    public class VolumetricLightmapDensityVolume : Volume
    {
        public VolumetricLightmapDensityVolume(nint addr) : base(addr) { }
        public Int32Interval AllowedMipLevelRange { get { return this[nameof(AllowedMipLevelRange)].As<Int32Interval>(); } set { this["AllowedMipLevelRange"] = value; } }
    }
    public class LightMapVirtualTexture2D : Texture2D
    {
        public LightMapVirtualTexture2D(nint addr) : base(addr) { }
        public Array<byte> TypeToLayer { get { return new Array<byte>(this[nameof(TypeToLayer)].Address); } }
    }
    public class RuntimeVirtualTexture : Object
    {
        public RuntimeVirtualTexture(nint addr) : base(addr) { }
        public int TileCount { get { return this[nameof(TileCount)].GetValue<int>(); } set { this[nameof(TileCount)].SetValue<int>(value); } }
        public int TileSize { get { return this[nameof(TileSize)].GetValue<int>(); } set { this[nameof(TileSize)].SetValue<int>(value); } }
        public int TileBorderSize { get { return this[nameof(TileBorderSize)].GetValue<int>(); } set { this[nameof(TileBorderSize)].SetValue<int>(value); } }
        public ERuntimeVirtualTextureMaterialType MaterialType { get { return (ERuntimeVirtualTextureMaterialType)this[nameof(MaterialType)].GetValue<int>(); } set { this[nameof(MaterialType)].SetValue<int>((int)value); } }
        public bool bCompressTextures { get { return this[nameof(bCompressTextures)].Flag; } set { this[nameof(bCompressTextures)].Flag = value; } }
        public bool bUseLowQualityCompression { get { return this[nameof(bUseLowQualityCompression)].Flag; } set { this[nameof(bUseLowQualityCompression)].Flag = value; } }
        public bool bClearTextures { get { return this[nameof(bClearTextures)].Flag; } set { this[nameof(bClearTextures)].Flag = value; } }
        public bool bSinglePhysicalSpace { get { return this[nameof(bSinglePhysicalSpace)].Flag; } set { this[nameof(bSinglePhysicalSpace)].Flag = value; } }
        public bool bPrivateSpace { get { return this[nameof(bPrivateSpace)].Flag; } set { this[nameof(bPrivateSpace)].Flag = value; } }
        public bool bAdaptive { get { return this[nameof(bAdaptive)].Flag; } set { this[nameof(bAdaptive)].Flag = value; } }
        public bool bContinuousUpdate { get { return this[nameof(bContinuousUpdate)].Flag; } set { this[nameof(bContinuousUpdate)].Flag = value; } }
        public int RemoveLowMips { get { return this[nameof(RemoveLowMips)].GetValue<int>(); } set { this[nameof(RemoveLowMips)].SetValue<int>(value); } }
        public byte LODGroup { get { return this[nameof(LODGroup)].GetValue<byte>(); } set { this[nameof(LODGroup)].SetValue<byte>(value); } }
        public int Size { get { return this[nameof(Size)].GetValue<int>(); } set { this[nameof(Size)].SetValue<int>(value); } }
        public RuntimeVirtualTextureStreamingProxy StreamingTexture { get { return this[nameof(StreamingTexture)].As<RuntimeVirtualTextureStreamingProxy>(); } set { this["StreamingTexture"] = value; } }
        public int GetTileSize() { return Invoke<int>(nameof(GetTileSize)); }
        public int GetTileCount() { return Invoke<int>(nameof(GetTileCount)); }
        public int GetTileBorderSize() { return Invoke<int>(nameof(GetTileBorderSize)); }
        public int GetSize() { return Invoke<int>(nameof(GetSize)); }
        public int GetPageTableSize() { return Invoke<int>(nameof(GetPageTableSize)); }
    }
    public class RuntimeVirtualTextureVolume : Actor
    {
        public RuntimeVirtualTextureVolume(nint addr) : base(addr) { }
        public RuntimeVirtualTextureComponent VirtualTextureComponent { get { return this[nameof(VirtualTextureComponent)].As<RuntimeVirtualTextureComponent>(); } set { this["VirtualTextureComponent"] = value; } }
    }
    public class VirtualTexture : Object
    {
        public VirtualTexture(nint addr) : base(addr) { }
    }
    public class LightMapVirtualTexture : VirtualTexture
    {
        public LightMapVirtualTexture(nint addr) : base(addr) { }
    }
    public class RuntimeVirtualTextureStreamingProxy : Texture2D
    {
        public RuntimeVirtualTextureStreamingProxy(nint addr) : base(addr) { }
    }
    public class VirtualTexture2D : Texture2D
    {
        public VirtualTexture2D(nint addr) : base(addr) { }
        public VirtualTextureBuildSettings Settings { get { return this[nameof(Settings)].As<VirtualTextureBuildSettings>(); } set { this["Settings"] = value; } }
        public bool bContinuousUpdate { get { return this[nameof(bContinuousUpdate)].Flag; } set { this[nameof(bContinuousUpdate)].Flag = value; } }
        public bool bSinglePhysicalSpace { get { return this[nameof(bSinglePhysicalSpace)].Flag; } set { this[nameof(bSinglePhysicalSpace)].Flag = value; } }
    }
    public class VirtualTextureBuilder : Object
    {
        public VirtualTextureBuilder(nint addr) : base(addr) { }
        public VirtualTexture2D Texture { get { return this[nameof(Texture)].As<VirtualTexture2D>(); } set { this["Texture"] = value; } }
        public ulong BuildHash { get { return this[nameof(BuildHash)].GetValue<ulong>(); } set { this[nameof(BuildHash)].SetValue<ulong>(value); } }
    }
    public class VirtualTexturePoolConfig : Object
    {
        public VirtualTexturePoolConfig(nint addr) : base(addr) { }
        public int DefaultSizeInMegabyte { get { return this[nameof(DefaultSizeInMegabyte)].GetValue<int>(); } set { this[nameof(DefaultSizeInMegabyte)].SetValue<int>(value); } }
        public Array<VirtualTextureSpacePoolConfig> Pools { get { return new Array<VirtualTextureSpacePoolConfig>(this[nameof(Pools)].Address); } }
    }
    public class WindDirectionalSource : Info
    {
        public WindDirectionalSource(nint addr) : base(addr) { }
        public WindDirectionalSourceComponent Component { get { return this[nameof(Component)].As<WindDirectionalSourceComponent>(); } set { this["Component"] = value; } }
    }
    public class WorldComposition : Object
    {
        public WorldComposition(nint addr) : base(addr) { }
        public Array<LevelStreaming> TilesStreaming { get { return new Array<LevelStreaming>(this[nameof(TilesStreaming)].Address); } }
        public double TilesStreamingTimeThreshold { get { return this[nameof(TilesStreamingTimeThreshold)].GetValue<double>(); } set { this[nameof(TilesStreamingTimeThreshold)].SetValue<double>(value); } }
        public bool bLoadAllTilesDuringCinematic { get { return this[nameof(bLoadAllTilesDuringCinematic)].Flag; } set { this[nameof(bLoadAllTilesDuringCinematic)].Flag = value; } }
        public bool bRebaseOriginIn3DSpace { get { return this[nameof(bRebaseOriginIn3DSpace)].Flag; } set { this[nameof(bRebaseOriginIn3DSpace)].Flag = value; } }
        public float RebaseOriginDistance { get { return this[nameof(RebaseOriginDistance)].GetValue<float>(); } set { this[nameof(RebaseOriginDistance)].SetValue<float>(value); } }
    }
    public class WorldPartitionBlueprintLibrary : BlueprintFunctionLibrary
    {
        public WorldPartitionBlueprintLibrary(nint addr) : base(addr) { }
        public void UnloadActors(Array<Guid> InActorsToLoad) { Invoke(nameof(UnloadActors), InActorsToLoad); }
        public void LoadActors(Array<Guid> InActorsToLoad) { Invoke(nameof(LoadActors), InActorsToLoad); }
        public Box GetRuntimeWorldBounds() { return Invoke<Box>(nameof(GetRuntimeWorldBounds)); }
        public bool GetIntersectingActorDescs(Box InBox, Array<ActorDesc> OutActorDescs) { return Invoke<bool>(nameof(GetIntersectingActorDescs), InBox, OutActorDescs); }
        public Box GetEditorWorldBounds() { return Invoke<Box>(nameof(GetEditorWorldBounds)); }
        public bool GetActorDescs(Array<ActorDesc> OutActorDescs) { return Invoke<bool>(nameof(GetActorDescs), OutActorDescs); }
    }
    public class ActorDescContainer : Object
    {
        public ActorDescContainer(nint addr) : base(addr) { }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
    }
    public class ContentBundleDescriptor : Object
    {
        public ContentBundleDescriptor(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
        public Object PackageRoot { get { return this[nameof(PackageRoot)]; } set { this[nameof(PackageRoot)] = value; } }
    }
    public class ContentBundleUnsavedActorMonitor : Object
    {
        public ContentBundleUnsavedActorMonitor(nint addr) : base(addr) { }
    }
    public class ContentBundleEngineSubsystem : EngineSubsystem
    {
        public ContentBundleEngineSubsystem(nint addr) : base(addr) { }
    }
    public class ContentBundleManager : Object
    {
        public ContentBundleManager(nint addr) : base(addr) { }
    }
    public class ContentBundleDuplicateForPIEHelper : Object
    {
        public ContentBundleDuplicateForPIEHelper(nint addr) : base(addr) { }
    }
    public class WorldDataLayers : Info
    {
        public WorldDataLayers(nint addr) : base(addr) { }
        public Object DataLayerInstances { get { return this[nameof(DataLayerInstances)]; } set { this[nameof(DataLayerInstances)] = value; } }
        public Object DeprecatedDataLayerNameToDataLayerInstance { get { return this[nameof(DeprecatedDataLayerNameToDataLayerInstance)]; } set { this[nameof(DeprecatedDataLayerNameToDataLayerInstance)] = value; } }
        public Object WorldDataLayers_value { get { return this[nameof(WorldDataLayers)]; } set { this[nameof(WorldDataLayers)] = value; } }
        public Array<Object> RepActiveDataLayerNames { get { return new Array<Object>(this[nameof(RepActiveDataLayerNames)].Address); } }
        public Array<Object> RepLoadedDataLayerNames { get { return new Array<Object>(this[nameof(RepLoadedDataLayerNames)].Address); } }
        public Array<Object> RepEffectiveActiveDataLayerNames { get { return new Array<Object>(this[nameof(RepEffectiveActiveDataLayerNames)].Address); } }
        public Array<Object> RepEffectiveLoadedDataLayerNames { get { return new Array<Object>(this[nameof(RepEffectiveLoadedDataLayerNames)].Address); } }
        public void OnRep_LoadedDataLayerNames() { Invoke(nameof(OnRep_LoadedDataLayerNames)); }
        public void OnRep_EffectiveLoadedDataLayerNames() { Invoke(nameof(OnRep_EffectiveLoadedDataLayerNames)); }
        public void OnRep_EffectiveActiveDataLayerNames() { Invoke(nameof(OnRep_EffectiveActiveDataLayerNames)); }
        public void OnRep_ActiveDataLayerNames() { Invoke(nameof(OnRep_ActiveDataLayerNames)); }
        public void OnDataLayerRuntimeStateChanged(DataLayerInstance InDataLayer, EDataLayerRuntimeState InState) { Invoke(nameof(OnDataLayerRuntimeStateChanged), InDataLayer, InState); }
    }
    public class DataLayer : Object
    {
        public DataLayer(nint addr) : base(addr) { }
        public Object DataLayerLabel { get { return this[nameof(DataLayerLabel)]; } set { this[nameof(DataLayerLabel)] = value; } }
        public bool bIsRuntime { get { return this[nameof(bIsRuntime)].Flag; } set { this[nameof(bIsRuntime)].Flag = value; } }
        public EDataLayerRuntimeState InitialRuntimeState { get { return (EDataLayerRuntimeState)this[nameof(InitialRuntimeState)].GetValue<int>(); } set { this[nameof(InitialRuntimeState)].SetValue<int>((int)value); } }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
        public DataLayer Parent { get { return this[nameof(Parent)].As<DataLayer>(); } set { this["Parent"] = value; } }
        public Array<DataLayer> Children { get { return new Array<DataLayer>(this[nameof(Children)].Address); } }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public bool IsRuntime() { return Invoke<bool>(nameof(IsRuntime)); }
        public bool IsInitiallyVisible() { return Invoke<bool>(nameof(IsInitiallyVisible)); }
        public bool IsInitiallyActive() { return Invoke<bool>(nameof(IsInitiallyActive)); }
        public bool IsEffectiveVisible() { return Invoke<bool>(nameof(IsEffectiveVisible)); }
        public bool IsDynamicallyLoaded() { return Invoke<bool>(nameof(IsDynamicallyLoaded)); }
        public EDataLayerState GetInitialState() { return Invoke<EDataLayerState>(nameof(GetInitialState)); }
        public EDataLayerRuntimeState GetInitialRuntimeState() { return Invoke<EDataLayerRuntimeState>(nameof(GetInitialRuntimeState)); }
        public Color GetDebugColor() { return Invoke<Color>(nameof(GetDebugColor)); }
        public Object GetDataLayerLabel() { return Invoke<Object>(nameof(GetDataLayerLabel)); }
        public bool Equals(ActorDataLayer ActorDataLayer) { return Invoke<bool>(nameof(Equals), ActorDataLayer); }
    }
    public class DataLayerAsset : Object
    {
        public DataLayerAsset(nint addr) : base(addr) { }
        public EDataLayerType DataLayerType { get { return (EDataLayerType)this[nameof(DataLayerType)].GetValue<int>(); } set { this[nameof(DataLayerType)].SetValue<int>((int)value); } }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
        public bool IsRuntime() { return Invoke<bool>(nameof(IsRuntime)); }
        public EDataLayerType GetType() { return Invoke<EDataLayerType>(nameof(GetType)); }
        public Color GetDebugColor() { return Invoke<Color>(nameof(GetDebugColor)); }
    }
    public class DataLayerInstance : Object
    {
        public DataLayerInstance(nint addr) : base(addr) { }
        public EDataLayerRuntimeState InitialRuntimeState { get { return (EDataLayerRuntimeState)this[nameof(InitialRuntimeState)].GetValue<int>(); } set { this[nameof(InitialRuntimeState)].SetValue<int>((int)value); } }
        public DataLayerInstance Parent { get { return this[nameof(Parent)].As<DataLayerInstance>(); } set { this["Parent"] = value; } }
        public Array<DataLayerInstance> Children { get { return new Array<DataLayerInstance>(this[nameof(Children)].Address); } }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public bool IsRuntime() { return Invoke<bool>(nameof(IsRuntime)); }
        public bool IsInitiallyVisible() { return Invoke<bool>(nameof(IsInitiallyVisible)); }
        public bool IsEffectiveVisible() { return Invoke<bool>(nameof(IsEffectiveVisible)); }
        public EDataLayerType GetType() { return Invoke<EDataLayerType>(nameof(GetType)); }
        public EDataLayerRuntimeState GetInitialRuntimeState() { return Invoke<EDataLayerRuntimeState>(nameof(GetInitialRuntimeState)); }
        public Color GetDebugColor() { return Invoke<Color>(nameof(GetDebugColor)); }
    }
    public class DataLayerInstanceWithAsset : DataLayerInstance
    {
        public DataLayerInstanceWithAsset(nint addr) : base(addr) { }
        public DataLayerAsset DataLayerAsset { get { return this[nameof(DataLayerAsset)].As<DataLayerAsset>(); } set { this["DataLayerAsset"] = value; } }
    }
    public class DataLayerSubsystem : WorldSubsystem
    {
        public DataLayerSubsystem(nint addr) : base(addr) { }
        public Object OnDataLayerRuntimeStateChanged { get { return this[nameof(OnDataLayerRuntimeStateChanged)]; } set { this[nameof(OnDataLayerRuntimeStateChanged)] = value; } }
        public void SetDataLayerStateByLabel(Object InDataLayerLabel, EDataLayerState InState) { Invoke(nameof(SetDataLayerStateByLabel), InDataLayerLabel, InState); }
        public void SetDataLayerState(ActorDataLayer InDataLayer, EDataLayerState InState) { Invoke(nameof(SetDataLayerState), InDataLayer, InState); }
        public void SetDataLayerRuntimeStateByLabel(Object InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive) { Invoke(nameof(SetDataLayerRuntimeStateByLabel), InDataLayerLabel, InState, bInIsRecursive); }
        public void SetDataLayerRuntimeState(ActorDataLayer InDataLayer, EDataLayerRuntimeState InState, bool bInIsRecursive) { Invoke(nameof(SetDataLayerRuntimeState), InDataLayer, InState, bInIsRecursive); }
        public void SetDataLayerInstanceRuntimeState(DataLayerAsset InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive) { Invoke(nameof(SetDataLayerInstanceRuntimeState), InDataLayerAsset, InState, bInIsRecursive); }
        public Object GetLoadedDataLayerNames() { return Invoke<Object>(nameof(GetLoadedDataLayerNames)); }
        public EDataLayerState GetDataLayerStateByLabel(Object InDataLayerLabel) { return Invoke<EDataLayerState>(nameof(GetDataLayerStateByLabel), InDataLayerLabel); }
        public EDataLayerState GetDataLayerState(ActorDataLayer InDataLayer) { return Invoke<EDataLayerState>(nameof(GetDataLayerState), InDataLayer); }
        public EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(Object InDataLayerLabel) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerRuntimeStateByLabel), InDataLayerLabel); }
        public EDataLayerRuntimeState GetDataLayerRuntimeState(ActorDataLayer InDataLayer) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerRuntimeState), InDataLayer); }
        public EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(DataLayerAsset InDataLayerAsset) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerInstanceRuntimeState), InDataLayerAsset); }
        public DataLayerInstance GetDataLayerInstanceFromAsset(DataLayerAsset InDataLayerAsset) { return Invoke<DataLayerInstance>(nameof(GetDataLayerInstanceFromAsset), InDataLayerAsset); }
        public EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(DataLayerAsset InDataLayerAsset) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerInstanceEffectiveRuntimeState), InDataLayerAsset); }
        public DataLayerInstance GetDataLayerFromName(Object InDataLayerName) { return Invoke<DataLayerInstance>(nameof(GetDataLayerFromName), InDataLayerName); }
        public DataLayerInstance GetDataLayerFromLabel(Object InDataLayerLabel) { return Invoke<DataLayerInstance>(nameof(GetDataLayerFromLabel), InDataLayerLabel); }
        public EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(Object InDataLayerLabel) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerEffectiveRuntimeStateByLabel), InDataLayerLabel); }
        public EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(ActorDataLayer InDataLayer) { return Invoke<EDataLayerRuntimeState>(nameof(GetDataLayerEffectiveRuntimeState), InDataLayer); }
        public DataLayerInstance GetDataLayer(ActorDataLayer InDataLayer) { return Invoke<DataLayerInstance>(nameof(GetDataLayer), InDataLayer); }
        public Object GetActiveDataLayerNames() { return Invoke<Object>(nameof(GetActiveDataLayerNames)); }
    }
    public class DeprecatedDataLayerInstance : DataLayerInstance
    {
        public DeprecatedDataLayerInstance(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object DeprecatedDataLayerFName { get { return this[nameof(DeprecatedDataLayerFName)]; } set { this[nameof(DeprecatedDataLayerFName)] = value; } }
        public EDataLayerType DataLayerType { get { return (EDataLayerType)this[nameof(DataLayerType)].GetValue<int>(); } set { this[nameof(DataLayerType)].SetValue<int>((int)value); } }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
    }
    public class WorldPartitionHLOD : Actor
    {
        public WorldPartitionHLOD(nint addr) : base(addr) { }
        public uint LODLevel { get { return this[nameof(LODLevel)].GetValue<uint>(); } set { this[nameof(LODLevel)].SetValue<uint>(value); } }
        public bool bRequireWarmup { get { return this[nameof(bRequireWarmup)].Flag; } set { this[nameof(bRequireWarmup)].Flag = value; } }
        public Object SourceCell { get { return this[nameof(SourceCell)]; } set { this[nameof(SourceCell)] = value; } }
        public Object SourceCellName { get { return this[nameof(SourceCellName)]; } set { this[nameof(SourceCellName)] = value; } }
    }
    public class HLODBuilderSettings : Object
    {
        public HLODBuilderSettings(nint addr) : base(addr) { }
    }
    public class NullHLODBuilder : HLODBuilder
    {
        public NullHLODBuilder(nint addr) : base(addr) { }
    }
    public class HLODLayer : Object
    {
        public HLODLayer(nint addr) : base(addr) { }
        public EHLODLayerType LayerType { get { return (EHLODLayerType)this[nameof(LayerType)].GetValue<int>(); } set { this[nameof(LayerType)].SetValue<int>((int)value); } }
        public Object HLODBuilderClass { get { return this[nameof(HLODBuilderClass)]; } set { this[nameof(HLODBuilderClass)] = value; } }
        public HLODBuilderSettings HLODBuilderSettings { get { return this[nameof(HLODBuilderSettings)].As<HLODBuilderSettings>(); } set { this["HLODBuilderSettings"] = value; } }
        public bool bIsSpatiallyLoaded { get { return this[nameof(bIsSpatiallyLoaded)].Flag; } set { this[nameof(bIsSpatiallyLoaded)].Flag = value; } }
        public int CellSize { get { return this[nameof(CellSize)].GetValue<int>(); } set { this[nameof(CellSize)].SetValue<int>(value); } }
        public double LoadingRange { get { return this[nameof(LoadingRange)].GetValue<double>(); } set { this[nameof(LoadingRange)].SetValue<double>(value); } }
        public Object ParentLayer { get { return this[nameof(ParentLayer)]; } set { this[nameof(ParentLayer)] = value; } }
    }
    public class HLODSubsystem : WorldSubsystem
    {
        public HLODSubsystem(nint addr) : base(addr) { }
    }
    public class NavigationDataChunkActor : PartitionActor
    {
        public NavigationDataChunkActor(nint addr) : base(addr) { }
        public Array<NavigationDataChunk> NavDataChunks { get { return new Array<NavigationDataChunk>(this[nameof(NavDataChunks)].Address); } }
        public Box DataChunkActorBounds { get { return this[nameof(DataChunkActorBounds)].As<Box>(); } set { this["DataChunkActorBounds"] = value; } }
    }
    public class WorldPartition : Object
    {
        public WorldPartition(nint addr) : base(addr) { }
        public ActorDescContainer ActorDescContainer { get { return this[nameof(ActorDescContainer)].As<ActorDescContainer>(); } set { this["ActorDescContainer"] = value; } }
        public WorldPartitionRuntimeHash RuntimeHash { get { return this[nameof(RuntimeHash)].As<WorldPartitionRuntimeHash>(); } set { this["RuntimeHash"] = value; } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public bool bEnableStreaming { get { return this[nameof(bEnableStreaming)].Flag; } set { this[nameof(bEnableStreaming)].Flag = value; } }
        public WorldPartitionStreamingPolicy StreamingPolicy { get { return this[nameof(StreamingPolicy)].As<WorldPartitionStreamingPolicy>(); } set { this["StreamingPolicy"] = value; } }
    }
    public class WorldPartitionActorLoaderInterface : Interface
    {
        public WorldPartitionActorLoaderInterface(nint addr) : base(addr) { }
    }
    public class WorldPartitionEditorHash : Object
    {
        public WorldPartitionEditorHash(nint addr) : base(addr) { }
    }
    public class WorldPartitionEditorPerProjectUserSettings : Object
    {
        public WorldPartitionEditorPerProjectUserSettings(nint addr) : base(addr) { }
    }
    public class WorldPartitionEditorSpatialHash : WorldPartitionEditorHash
    {
        public WorldPartitionEditorSpatialHash(nint addr) : base(addr) { }
    }
    public class WorldPartitionLevelStreamingDynamic : LevelStreamingDynamic
    {
        public WorldPartitionLevelStreamingDynamic(nint addr) : base(addr) { }
        public bool bShouldBeAlwaysLoaded { get { return this[nameof(bShouldBeAlwaysLoaded)].Flag; } set { this[nameof(bShouldBeAlwaysLoaded)].Flag = value; } }
        public Object StreamingCell { get { return this[nameof(StreamingCell)]; } set { this[nameof(StreamingCell)] = value; } }
        public Object OuterWorldPartition { get { return this[nameof(OuterWorldPartition)]; } set { this[nameof(OuterWorldPartition)] = value; } }
    }
    public class WorldPartitionStreamingPolicy : Object
    {
        public WorldPartitionStreamingPolicy(nint addr) : base(addr) { }
    }
    public class WorldPartitionLevelStreamingPolicy : WorldPartitionStreamingPolicy
    {
        public WorldPartitionLevelStreamingPolicy(nint addr) : base(addr) { }
        public Object SubObjectsToCellRemapping { get { return this[nameof(SubObjectsToCellRemapping)]; } set { this[nameof(SubObjectsToCellRemapping)] = value; } }
    }
    public class WorldPartitionMiniMap : Info
    {
        public WorldPartitionMiniMap(nint addr) : base(addr) { }
        public Box MiniMapWorldBounds { get { return this[nameof(MiniMapWorldBounds)].As<Box>(); } set { this["MiniMapWorldBounds"] = value; } }
        public Box2D UVOffset { get { return this[nameof(UVOffset)].As<Box2D>(); } set { this["UVOffset"] = value; } }
        public Texture2D MiniMapTexture { get { return this[nameof(MiniMapTexture)].As<Texture2D>(); } set { this["MiniMapTexture"] = value; } }
        public Object ExcludedDataLayers { get { return this[nameof(ExcludedDataLayers)]; } set { this[nameof(ExcludedDataLayers)] = value; } }
        public int WorldUnitsPerPixel { get { return this[nameof(WorldUnitsPerPixel)].GetValue<int>(); } set { this[nameof(WorldUnitsPerPixel)].SetValue<int>(value); } }
        public int BuilderCellSize { get { return this[nameof(BuilderCellSize)].GetValue<int>(); } set { this[nameof(BuilderCellSize)].SetValue<int>(value); } }
        public byte CaptureSource { get { return this[nameof(CaptureSource)].GetValue<byte>(); } set { this[nameof(CaptureSource)].SetValue<byte>(value); } }
        public uint CaptureWarmupFrames { get { return this[nameof(CaptureWarmupFrames)].GetValue<uint>(); } set { this[nameof(CaptureWarmupFrames)].SetValue<uint>(value); } }
        public int MiniMapTileSize { get { return this[nameof(MiniMapTileSize)].GetValue<int>(); } set { this[nameof(MiniMapTileSize)].SetValue<int>(value); } }
    }
    public class WorldPartitionMiniMapVolume : Volume
    {
        public WorldPartitionMiniMapVolume(nint addr) : base(addr) { }
    }
    public class WorldPartitionReplay : Actor
    {
        public WorldPartitionReplay(nint addr) : base(addr) { }
        public Array<Object> StreamingSourceNames { get { return new Array<Object>(this[nameof(StreamingSourceNames)].Address); } }
    }
    public class WorldPartitionRuntimeCell : Object
    {
        public WorldPartitionRuntimeCell(nint addr) : base(addr) { }
        public bool bIsAlwaysLoaded { get { return this[nameof(bIsAlwaysLoaded)].Flag; } set { this[nameof(bIsAlwaysLoaded)].Flag = value; } }
        public Array<Object> DataLayers { get { return new Array<Object>(this[nameof(DataLayers)].Address); } }
        public Box ContentBounds { get { return this[nameof(ContentBounds)].As<Box>(); } set { this["ContentBounds"] = value; } }
        public WorldPartitionRuntimeCellDebugInfo DebugInfo { get { return this[nameof(DebugInfo)].As<WorldPartitionRuntimeCellDebugInfo>(); } set { this["DebugInfo"] = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public bool bClientOnlyVisible { get { return this[nameof(bClientOnlyVisible)].Flag; } set { this[nameof(bClientOnlyVisible)].Flag = value; } }
        public bool bIsHLOD { get { return this[nameof(bIsHLOD)].Flag; } set { this[nameof(bIsHLOD)].Flag = value; } }
        public bool bBlockOnSlowLoading { get { return this[nameof(bBlockOnSlowLoading)].Flag; } set { this[nameof(bBlockOnSlowLoading)].Flag = value; } }
        public Guid ContentBundleID { get { return this[nameof(ContentBundleID)].As<Guid>(); } set { this["ContentBundleID"] = value; } }
    }
    public class RuntimeHashExternalStreamingObjectBase : Object
    {
        public RuntimeHashExternalStreamingObjectBase(nint addr) : base(addr) { }
        public Object OwningWorld { get { return this[nameof(OwningWorld)]; } set { this[nameof(OwningWorld)] = value; } }
        public Object OuterWorld { get { return this[nameof(OuterWorld)]; } set { this[nameof(OuterWorld)] = value; } }
    }
    public class WorldPartitionRuntimeHash : Object
    {
        public WorldPartitionRuntimeHash(nint addr) : base(addr) { }
    }
    public class WorldPartitionRuntimeSpatialHashCell : WorldPartitionRuntimeCell
    {
        public WorldPartitionRuntimeSpatialHashCell(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float Extent { get { return this[nameof(Extent)].GetValue<float>(); } set { this[nameof(Extent)].SetValue<float>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
    }
    public class WorldPartitionRuntimeLevelStreamingCell : WorldPartitionRuntimeSpatialHashCell
    {
        public WorldPartitionRuntimeLevelStreamingCell(nint addr) : base(addr) { }
        public WorldPartitionLevelStreamingDynamic LevelStreaming { get { return this[nameof(LevelStreaming)].As<WorldPartitionLevelStreamingDynamic>(); } set { this["LevelStreaming"] = value; } }
        public void OnLevelShown() { Invoke(nameof(OnLevelShown)); }
        public void OnLevelHidden() { Invoke(nameof(OnLevelHidden)); }
    }
    public class SpatialHashRuntimeGridInfo : Info
    {
        public SpatialHashRuntimeGridInfo(nint addr) : base(addr) { }
        public SpatialHashRuntimeGrid GridSettings { get { return this[nameof(GridSettings)].As<SpatialHashRuntimeGrid>(); } set { this["GridSettings"] = value; } }
    }
    public class RuntimeSpatialHashExternalStreamingObject : RuntimeHashExternalStreamingObjectBase
    {
        public RuntimeSpatialHashExternalStreamingObject(nint addr) : base(addr) { }
        public Array<SpatialHashStreamingGrid> StreamingGrids { get { return new Array<SpatialHashStreamingGrid>(this[nameof(StreamingGrids)].Address); } }
        public Object CellToLevelStreamingPackage { get { return this[nameof(CellToLevelStreamingPackage)]; } set { this[nameof(CellToLevelStreamingPackage)] = value; } }
    }
    public class WorldPartitionRuntimeSpatialHash : WorldPartitionRuntimeHash
    {
        public WorldPartitionRuntimeSpatialHash(nint addr) : base(addr) { }
        public bool bEnableZCulling { get { return this[nameof(bEnableZCulling)].Flag; } set { this[nameof(bEnableZCulling)].Flag = value; } }
        public Array<SpatialHashStreamingGrid> StreamingGrids { get { return new Array<SpatialHashStreamingGrid>(this[nameof(StreamingGrids)].Address); } }
        public Array<Object> ExternalStreamingObjects { get { return new Array<Object>(this[nameof(ExternalStreamingObjects)].Address); } }
    }
    public class WorldPartitionSubsystem : TickableWorldSubsystem
    {
        public WorldPartitionSubsystem(nint addr) : base(addr) { }
        public bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, Array<WorldPartitionStreamingQuerySource> QuerySources, bool bExactState) { return Invoke<bool>(nameof(IsStreamingCompleted), QueryState, QuerySources, bExactState); }
        public bool IsAllStreamingCompleted() { return Invoke<bool>(nameof(IsAllStreamingCompleted)); }
    }
    public class WorldPartitionVolume : Volume
    {
        public WorldPartitionVolume(nint addr) : base(addr) { }
    }
    public class MaterialInput : Object
    {
        public MaterialInput(nint addr) : base(addr) { }
        public MaterialExpression Expression { get { return this[nameof(Expression)].As<MaterialExpression>(); } set { this["Expression"] = value; } }
        public int OutputIndex { get { return this[nameof(OutputIndex)].GetValue<int>(); } set { this[nameof(OutputIndex)].SetValue<int>(value); } }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public int mask { get { return this[nameof(mask)].GetValue<int>(); } set { this[nameof(mask)].SetValue<int>(value); } }
        public int MaskR { get { return this[nameof(MaskR)].GetValue<int>(); } set { this[nameof(MaskR)].SetValue<int>(value); } }
        public int MaskG { get { return this[nameof(MaskG)].GetValue<int>(); } set { this[nameof(MaskG)].SetValue<int>(value); } }
        public int MaskB { get { return this[nameof(MaskB)].GetValue<int>(); } set { this[nameof(MaskB)].SetValue<int>(value); } }
        public int MaskA { get { return this[nameof(MaskA)].GetValue<int>(); } set { this[nameof(MaskA)].SetValue<int>(value); } }
    }
    public class ColorMaterialInput : MaterialInput
    {
        public ColorMaterialInput(nint addr) : base(addr) { }
        public bool UseConstant { get { return this[nameof(UseConstant)].Flag; } set { this[nameof(UseConstant)].Flag = value; } }
        public Color Constant { get { return this[nameof(Constant)].As<Color>(); } set { this["Constant"] = value; } }
    }
    public class DistributionLookupTable : Object
    {
        public DistributionLookupTable(nint addr) : base(addr) { }
        public float TimeScale { get { return this[nameof(TimeScale)].GetValue<float>(); } set { this[nameof(TimeScale)].SetValue<float>(value); } }
        public float TimeBias { get { return this[nameof(TimeBias)].GetValue<float>(); } set { this[nameof(TimeBias)].SetValue<float>(value); } }
        public Array<float> Values { get { return new Array<float>(this[nameof(Values)].Address); } }
        public byte Op { get { return this[nameof(Op)].GetValue<byte>(); } set { this[nameof(Op)].SetValue<byte>(value); } }
        public byte EntryCount { get { return this[nameof(EntryCount)].GetValue<byte>(); } set { this[nameof(EntryCount)].SetValue<byte>(value); } }
        public byte EntryStride { get { return this[nameof(EntryStride)].GetValue<byte>(); } set { this[nameof(EntryStride)].SetValue<byte>(value); } }
        public byte SubEntryStride { get { return this[nameof(SubEntryStride)].GetValue<byte>(); } set { this[nameof(SubEntryStride)].SetValue<byte>(value); } }
        public byte LockFlag { get { return this[nameof(LockFlag)].GetValue<byte>(); } set { this[nameof(LockFlag)].SetValue<byte>(value); } }
    }
    public class ExpressionInput : Object
    {
        public ExpressionInput(nint addr) : base(addr) { }
        public MaterialExpression Expression { get { return this[nameof(Expression)].As<MaterialExpression>(); } set { this["Expression"] = value; } }
        public int OutputIndex { get { return this[nameof(OutputIndex)].GetValue<int>(); } set { this[nameof(OutputIndex)].SetValue<int>(value); } }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public int mask { get { return this[nameof(mask)].GetValue<int>(); } set { this[nameof(mask)].SetValue<int>(value); } }
        public int MaskR { get { return this[nameof(MaskR)].GetValue<int>(); } set { this[nameof(MaskR)].SetValue<int>(value); } }
        public int MaskG { get { return this[nameof(MaskG)].GetValue<int>(); } set { this[nameof(MaskG)].SetValue<int>(value); } }
        public int MaskB { get { return this[nameof(MaskB)].GetValue<int>(); } set { this[nameof(MaskB)].SetValue<int>(value); } }
        public int MaskA { get { return this[nameof(MaskA)].GetValue<int>(); } set { this[nameof(MaskA)].SetValue<int>(value); } }
    }
    public class ExpressionOutput : Object
    {
        public ExpressionOutput(nint addr) : base(addr) { }
        public Object OutputName { get { return this[nameof(OutputName)]; } set { this[nameof(OutputName)] = value; } }
        public int mask { get { return this[nameof(mask)].GetValue<int>(); } set { this[nameof(mask)].SetValue<int>(value); } }
        public int MaskR { get { return this[nameof(MaskR)].GetValue<int>(); } set { this[nameof(MaskR)].SetValue<int>(value); } }
        public int MaskG { get { return this[nameof(MaskG)].GetValue<int>(); } set { this[nameof(MaskG)].SetValue<int>(value); } }
        public int MaskB { get { return this[nameof(MaskB)].GetValue<int>(); } set { this[nameof(MaskB)].SetValue<int>(value); } }
        public int MaskA { get { return this[nameof(MaskA)].GetValue<int>(); } set { this[nameof(MaskA)].SetValue<int>(value); } }
    }
    public class FloatDistribution : Object
    {
        public FloatDistribution(nint addr) : base(addr) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class FloatRK4SpringInterpolator : Object
    {
        public FloatRK4SpringInterpolator(nint addr) : base(addr) { }
        public float StiffnessConstant { get { return this[nameof(StiffnessConstant)].GetValue<float>(); } set { this[nameof(StiffnessConstant)].SetValue<float>(value); } }
        public float DampeningRatio { get { return this[nameof(DampeningRatio)].GetValue<float>(); } set { this[nameof(DampeningRatio)].SetValue<float>(value); } }
    }
    public class FormatArgumentData : Object
    {
        public FormatArgumentData(nint addr) : base(addr) { }
        public Object ArgumentName { get { return this[nameof(ArgumentName)]; } set { this[nameof(ArgumentName)] = value; } }
        public byte ArgumentValueType { get { return this[nameof(ArgumentValueType)].GetValue<byte>(); } set { this[nameof(ArgumentValueType)].SetValue<byte>(value); } }
        public Object ArgumentValue { get { return this[nameof(ArgumentValue)]; } set { this[nameof(ArgumentValue)] = value; } }
        public long ArgumentValueInt { get { return this[nameof(ArgumentValueInt)].GetValue<long>(); } set { this[nameof(ArgumentValueInt)].SetValue<long>(value); } }
        public float ArgumentValueFloat { get { return this[nameof(ArgumentValueFloat)].GetValue<float>(); } set { this[nameof(ArgumentValueFloat)].SetValue<float>(value); } }
        public double ArgumentValueDouble { get { return this[nameof(ArgumentValueDouble)].GetValue<double>(); } set { this[nameof(ArgumentValueDouble)].SetValue<double>(value); } }
        public ETextGender ArgumentValueGender { get { return (ETextGender)this[nameof(ArgumentValueGender)].GetValue<int>(); } set { this[nameof(ArgumentValueGender)].SetValue<int>((int)value); } }
    }
    public enum ETextGender : int
    {
        Masculine = 0,
        Feminine = 1,
        Neuter = 2,
        ETextGender_MAX = 3,
    }
    public enum EFormatArgumentType : int
    {
        Int = 0,
        UInt = 1,
        Float = 2,
        Double = 3,
        Text = 4,
        Gender = 5,
        EFormatArgumentType_MAX = 6,
    }
    public class MaterialAttributesInput : ExpressionInput
    {
        public MaterialAttributesInput(nint addr) : base(addr) { }
        public int PropertyConnectedBitmask { get { return this[nameof(PropertyConnectedBitmask)].GetValue<int>(); } set { this[nameof(PropertyConnectedBitmask)].SetValue<int>(value); } }
    }
    public class RawDistribution : Object
    {
        public RawDistribution(nint addr) : base(addr) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class ScalarMaterialInput : MaterialInput
    {
        public ScalarMaterialInput(nint addr) : base(addr) { }
        public bool UseConstant { get { return this[nameof(UseConstant)].Flag; } set { this[nameof(UseConstant)].Flag = value; } }
        public float Constant { get { return this[nameof(Constant)].GetValue<float>(); } set { this[nameof(Constant)].SetValue<float>(value); } }
    }
    public class ShadingModelMaterialInput : MaterialInput
    {
        public ShadingModelMaterialInput(nint addr) : base(addr) { }
    }
    public class StrataMaterialInput : MaterialInput
    {
        public StrataMaterialInput(nint addr) : base(addr) { }
    }
    public class Vector2MaterialInput : MaterialInput
    {
        public Vector2MaterialInput(nint addr) : base(addr) { }
        public bool UseConstant { get { return this[nameof(UseConstant)].Flag; } set { this[nameof(UseConstant)].Flag = value; } }
        public float ConstantX { get { return this[nameof(ConstantX)].GetValue<float>(); } set { this[nameof(ConstantX)].SetValue<float>(value); } }
        public float ConstantY { get { return this[nameof(ConstantY)].GetValue<float>(); } set { this[nameof(ConstantY)].SetValue<float>(value); } }
    }
    public class Vector4Distribution : Object
    {
        public Vector4Distribution(nint addr) : base(addr) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class VectorDistribution : Object
    {
        public VectorDistribution(nint addr) : base(addr) { }
        public DistributionLookupTable Table { get { return this[nameof(Table)].As<DistributionLookupTable>(); } set { this["Table"] = value; } }
    }
    public class VectorMaterialInput : MaterialInput
    {
        public VectorMaterialInput(nint addr) : base(addr) { }
        public bool UseConstant { get { return this[nameof(UseConstant)].Flag; } set { this[nameof(UseConstant)].Flag = value; } }
        public Vector3f Constant { get { return this[nameof(Constant)].As<Vector3f>(); } set { this["Constant"] = value; } }
    }
    public class VectorRK4SpringInterpolator : Object
    {
        public VectorRK4SpringInterpolator(nint addr) : base(addr) { }
        public float StiffnessConstant { get { return this[nameof(StiffnessConstant)].GetValue<float>(); } set { this[nameof(StiffnessConstant)].SetValue<float>(value); } }
        public float DampeningRatio { get { return this[nameof(DampeningRatio)].GetValue<float>(); } set { this[nameof(DampeningRatio)].SetValue<float>(value); } }
    }
    public class AnimDataModelNotifPayload : Object
    {
        public AnimDataModelNotifPayload(nint addr) : base(addr) { }
    }
    public enum EAnimDataModelNotifyType : int
    {
        BracketOpened = 0,
        BracketClosed = 1,
        TrackAdded = 2,
        TrackChanged = 3,
        TrackRemoved = 4,
        SequenceLengthChanged = 5,
        FrameRateChanged = 6,
        CurveAdded = 7,
        CurveChanged = 8,
        CurveRemoved = 9,
        CurveFlagsChanged = 10,
        CurveRenamed = 11,
        CurveScaled = 12,
        CurveColorChanged = 13,
        AttributeAdded = 14,
        AttributeRemoved = 15,
        AttributeChanged = 16,
        Populated = 17,
        Reset = 18,
        Invalid = 19,
        EAnimDataModelNotifyType_MAX = 20,
    }
    public class HitResult : Object
    {
        public HitResult(nint addr) : base(addr) { }
        public int FaceIndex { get { return this[nameof(FaceIndex)].GetValue<int>(); } set { this[nameof(FaceIndex)].SetValue<int>(value); } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Vector_NetQuantize ImpactPoint { get { return this[nameof(ImpactPoint)].As<Vector_NetQuantize>(); } set { this["ImpactPoint"] = value; } }
        public Vector_NetQuantizeNormal Normal { get { return this[nameof(Normal)].As<Vector_NetQuantizeNormal>(); } set { this["Normal"] = value; } }
        public Vector_NetQuantizeNormal ImpactNormal { get { return this[nameof(ImpactNormal)].As<Vector_NetQuantizeNormal>(); } set { this["ImpactNormal"] = value; } }
        public Vector_NetQuantize TraceStart { get { return this[nameof(TraceStart)].As<Vector_NetQuantize>(); } set { this["TraceStart"] = value; } }
        public Vector_NetQuantize TraceEnd { get { return this[nameof(TraceEnd)].As<Vector_NetQuantize>(); } set { this["TraceEnd"] = value; } }
        public float PenetrationDepth { get { return this[nameof(PenetrationDepth)].GetValue<float>(); } set { this[nameof(PenetrationDepth)].SetValue<float>(value); } }
        public int MyItem { get { return this[nameof(MyItem)].GetValue<int>(); } set { this[nameof(MyItem)].SetValue<int>(value); } }
        public int Item { get { return this[nameof(Item)].GetValue<int>(); } set { this[nameof(Item)].SetValue<int>(value); } }
        public byte ElementIndex { get { return this[nameof(ElementIndex)].GetValue<byte>(); } set { this[nameof(ElementIndex)].SetValue<byte>(value); } }
        public bool bBlockingHit { get { return this[nameof(bBlockingHit)].Flag; } set { this[nameof(bBlockingHit)].Flag = value; } }
        public bool bStartPenetrating { get { return this[nameof(bStartPenetrating)].Flag; } set { this[nameof(bStartPenetrating)].Flag = value; } }
        public Object PhysMaterial { get { return this[nameof(PhysMaterial)]; } set { this[nameof(PhysMaterial)] = value; } }
        public ActorInstanceHandle HitObjectHandle { get { return this[nameof(HitObjectHandle)].As<ActorInstanceHandle>(); } set { this["HitObjectHandle"] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public Object MyBoneName { get { return this[nameof(MyBoneName)]; } set { this[nameof(MyBoneName)] = value; } }
    }
    public class ActorInstanceHandle : Object
    {
        public ActorInstanceHandle(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
    }
    public class Vector_NetQuantize : Vector
    {
        public Vector_NetQuantize(nint addr) : base(addr) { }
    }
    public class Vector_NetQuantizeNormal : Vector
    {
        public Vector_NetQuantizeNormal(nint addr) : base(addr) { }
    }
    public enum EMovementMode : int
    {
        MOVE_None = 0,
        MOVE_Walking = 1,
        MOVE_NavWalking = 2,
        MOVE_Falling = 3,
        MOVE_Swimming = 4,
        MOVE_Flying = 5,
        MOVE_Custom = 6,
        MOVE_MAX = 7,
    }
    public enum EAudioComponentPlayState : int
    {
        Playing = 0,
        Stopped = 1,
        Paused = 2,
        FadingIn = 3,
        FadingOut = 4,
        Count = 5,
        EAudioComponentPlayState_MAX = 6,
    }
    public enum EDataLayerRuntimeState : int
    {
        Unloaded = 0,
        Loaded = 1,
        Activated = 2,
        EDataLayerRuntimeState_MAX = 3,
    }
    public enum EQuartzCommandDelegateSubType : int
    {
        CommandOnFailedToQueue = 0,
        CommandOnQueued = 1,
        CommandOnCanceled = 2,
        CommandOnAboutToStart = 3,
        CommandOnStarted = 4,
        Count = 5,
        EQuartzCommandDelegateSubType_MAX = 6,
    }
    public enum EQuartzCommandQuantization : int
    {
        Bar = 0,
        Beat = 1,
        ThirtySecondNote = 2,
        SixteenthNote = 3,
        EighthNote = 4,
        QuarterNote = 5,
        HalfNote = 6,
        WholeNote = 7,
        DottedSixteenthNote = 8,
        DottedEighthNote = 9,
        DottedQuarterNote = 10,
        DottedHalfNote = 11,
        DottedWholeNote = 12,
        SixteenthNoteTriplet = 13,
        EighthNoteTriplet = 14,
        QuarterNoteTriplet = 15,
        HalfNoteTriplet = 16,
        Tick = 17,
        Count = 18,
        None = 19,
        EQuartzCommandQuantization_MAX = 20,
    }
    public class SubtitleCue : Object
    {
        public SubtitleCue(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
    }
    public class PlatformInterfaceDelegateResult : Object
    {
        public PlatformInterfaceDelegateResult(nint addr) : base(addr) { }
        public bool bSuccessful { get { return this[nameof(bSuccessful)].Flag; } set { this[nameof(bSuccessful)].Flag = value; } }
        public PlatformInterfaceData Data { get { return this[nameof(Data)].As<PlatformInterfaceData>(); } set { this["Data"] = value; } }
    }
    public class PlatformInterfaceData : Object
    {
        public PlatformInterfaceData(nint addr) : base(addr) { }
        public Object DataName { get { return this[nameof(DataName)]; } set { this[nameof(DataName)] = value; } }
        public byte Type { get { return this[nameof(Type)].GetValue<byte>(); } set { this[nameof(Type)].SetValue<byte>(value); } }
        public int IntValue { get { return this[nameof(IntValue)].GetValue<int>(); } set { this[nameof(IntValue)].SetValue<int>(value); } }
        //public float FloatValue { get { return this[nameof(FloatValue)].GetValue<float>(); } set { this[nameof(FloatValue)].SetValue<float>(value); } }
        public Object StringValue { get { return this[nameof(StringValue)]; } set { this[nameof(StringValue)] = value; } }
        public Object ObjectValue { get { return this[nameof(ObjectValue)].As<Object>(); } set { this["ObjectValue"] = value; } }
    }
    public enum EPlatformInterfaceDataType : int
    {
        PIDT_None = 0,
        PIDT_Int = 1,
        PIDT_Float = 2,
        PIDT_String = 3,
        PIDT_Object = 4,
        PIDT_Custom = 5,
        PIDT_MAX = 6,
    }
    public class BranchingPointNotifyPayload : Object
    {
        public BranchingPointNotifyPayload(nint addr) : base(addr) { }
    }
    public enum EEndPlayReason : int
    {
        Destroyed = 0,
        LevelTransition = 1,
        EndPlayInEditor = 2,
        RemovedFromWorld = 3,
        Quit = 4,
        EEndPlayReason_MAX = 5,
    }
    public enum ETickingGroup : int
    {
        TG_PrePhysics = 0,
        TG_StartPhysics = 1,
        TG_DuringPhysics = 2,
        TG_EndPhysics = 3,
        TG_PostPhysics = 4,
        TG_PostUpdateWork = 5,
        TG_LastDemotable = 6,
        TG_NewlySpawned = 7,
        TG_MAX = 8,
    }
    public enum EComponentCreationMethod : int
    {
        Native = 0,
        SimpleConstructionScript = 1,
        UserConstructionScript = 2,
        Instance = 3,
        EComponentCreationMethod_MAX = 4,
    }
    public class TickFunction : Object
    {
        public TickFunction(nint addr) : base(addr) { }
        public byte TickGroup { get { return this[nameof(TickGroup)].GetValue<byte>(); } set { this[nameof(TickGroup)].SetValue<byte>(value); } }
        public byte EndTickGroup { get { return this[nameof(EndTickGroup)].GetValue<byte>(); } set { this[nameof(EndTickGroup)].SetValue<byte>(value); } }
        public bool bTickEvenWhenPaused { get { return this[nameof(bTickEvenWhenPaused)].Flag; } set { this[nameof(bTickEvenWhenPaused)].Flag = value; } }
        public bool bCanEverTick { get { return this[nameof(bCanEverTick)].Flag; } set { this[nameof(bCanEverTick)].Flag = value; } }
        public bool bStartWithTickEnabled { get { return this[nameof(bStartWithTickEnabled)].Flag; } set { this[nameof(bStartWithTickEnabled)].Flag = value; } }
        public bool bAllowTickOnDedicatedServer { get { return this[nameof(bAllowTickOnDedicatedServer)].Flag; } set { this[nameof(bAllowTickOnDedicatedServer)].Flag = value; } }
        public float TickInterval { get { return this[nameof(TickInterval)].GetValue<float>(); } set { this[nameof(TickInterval)].SetValue<float>(value); } }
    }
    public class ActorComponentTickFunction : TickFunction
    {
        public ActorComponentTickFunction(nint addr) : base(addr) { }
    }
    public enum ETemperatureSeverityType : int
    {
        Unknown = 0,
        Good = 1,
        Bad = 2,
        Serious = 3,
        Critical = 4,
        NumSeverities = 5,
        ETemperatureSeverityType_MAX = 6,
    }
    public enum EPlaneConstraintAxisSetting : int
    {
        Custom = 0,
        X = 1,
        Y = 2,
        Z = 3,
        UseGlobalPhysicsSetting = 4,
        EPlaneConstraintAxisSetting_MAX = 5,
    }
    public class InterpControlPoint : Object
    {
        public InterpControlPoint(nint addr) : base(addr) { }
        public Vector PositionControlPoint { get { return this[nameof(PositionControlPoint)].As<Vector>(); } set { this["PositionControlPoint"] = value; } }
        public bool bPositionIsRelative { get { return this[nameof(bPositionIsRelative)].Flag; } set { this[nameof(bPositionIsRelative)].Flag = value; } }
    }
    public enum EInterpToBehaviourType : int
    {
        OneShot = 0,
        OneShot_Reverse = 1,
        Loop_Reset = 2,
        PingPong = 3,
        EInterpToBehaviourType_MAX = 4,
    }
    public enum ETeleportType : int
    {
        None = 0,
        TeleportPhysics = 1,
        ResetPhysics = 2,
        ETeleportType_MAX = 3,
    }
    public class DebugFloatHistory : Object
    {
        public DebugFloatHistory(nint addr) : base(addr) { }
        public Array<float> Samples { get { return new Array<float>(this[nameof(Samples)].Address); } }
        public int MaxSamples { get { return this[nameof(MaxSamples)].GetValue<int>(); } set { this[nameof(MaxSamples)].SetValue<int>(value); } }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public bool bAutoAdjustMinMax { get { return this[nameof(bAutoAdjustMinMax)].Flag; } set { this[nameof(bAutoAdjustMinMax)].Flag = value; } }
    }
    public enum EObjectTypeQuery : int
    {
        ObjectTypeQuery1 = 0,
        ObjectTypeQuery2 = 1,
        ObjectTypeQuery3 = 2,
        ObjectTypeQuery4 = 3,
        ObjectTypeQuery5 = 4,
        ObjectTypeQuery6 = 5,
        ObjectTypeQuery7 = 6,
        ObjectTypeQuery8 = 7,
        ObjectTypeQuery9 = 8,
        ObjectTypeQuery10 = 9,
        ObjectTypeQuery11 = 10,
        ObjectTypeQuery12 = 11,
        ObjectTypeQuery13 = 12,
        ObjectTypeQuery14 = 13,
        ObjectTypeQuery15 = 14,
        ObjectTypeQuery16 = 15,
        ObjectTypeQuery17 = 16,
        ObjectTypeQuery18 = 17,
        ObjectTypeQuery19 = 18,
        ObjectTypeQuery20 = 19,
        ObjectTypeQuery21 = 20,
        ObjectTypeQuery22 = 21,
        ObjectTypeQuery23 = 22,
        ObjectTypeQuery24 = 23,
        ObjectTypeQuery25 = 24,
        ObjectTypeQuery26 = 25,
        ObjectTypeQuery27 = 26,
        ObjectTypeQuery28 = 27,
        ObjectTypeQuery29 = 28,
        ObjectTypeQuery30 = 29,
        ObjectTypeQuery31 = 30,
        ObjectTypeQuery32 = 31,
        ObjectTypeQuery_MAX = 32,
        EObjectTypeQuery_MAX = 33,
    }
    public enum EDrawDebugTrace : int
    {
        None = 0,
        ForOneFrame = 1,
        ForDuration = 2,
        Persistent = 3,
        EDrawDebugTrace_MAX = 4,
    }
    public enum ETraceTypeQuery : int
    {
        TraceTypeQuery1 = 0,
        TraceTypeQuery2 = 1,
        TraceTypeQuery3 = 2,
        TraceTypeQuery4 = 3,
        TraceTypeQuery5 = 4,
        TraceTypeQuery6 = 5,
        TraceTypeQuery7 = 6,
        TraceTypeQuery8 = 7,
        TraceTypeQuery9 = 8,
        TraceTypeQuery10 = 9,
        TraceTypeQuery11 = 10,
        TraceTypeQuery12 = 11,
        TraceTypeQuery13 = 12,
        TraceTypeQuery14 = 13,
        TraceTypeQuery15 = 14,
        TraceTypeQuery16 = 15,
        TraceTypeQuery17 = 16,
        TraceTypeQuery18 = 17,
        TraceTypeQuery19 = 18,
        TraceTypeQuery20 = 19,
        TraceTypeQuery21 = 20,
        TraceTypeQuery22 = 21,
        TraceTypeQuery23 = 22,
        TraceTypeQuery24 = 23,
        TraceTypeQuery25 = 24,
        TraceTypeQuery26 = 25,
        TraceTypeQuery27 = 26,
        TraceTypeQuery28 = 27,
        TraceTypeQuery29 = 28,
        TraceTypeQuery30 = 29,
        TraceTypeQuery31 = 30,
        TraceTypeQuery32 = 31,
        TraceTypeQuery_MAX = 32,
        ETraceTypeQuery_MAX = 33,
    }
    public class LatentActionInfo : Object
    {
        public LatentActionInfo(nint addr) : base(addr) { }
        public int Linkage { get { return this[nameof(Linkage)].GetValue<int>(); } set { this[nameof(Linkage)].SetValue<int>(value); } }
        public int UUID { get { return this[nameof(UUID)].GetValue<int>(); } set { this[nameof(UUID)].SetValue<int>(value); } }
        public Object ExecutionFunction { get { return this[nameof(ExecutionFunction)]; } set { this[nameof(ExecutionFunction)] = value; } }
        public Object CallbackTarget { get { return this[nameof(CallbackTarget)].As<Object>(); } set { this["CallbackTarget"] = value; } }
    }
    public class TimerHandle : Object
    {
        public TimerHandle(nint addr) : base(addr) { }
        public ulong Handle { get { return this[nameof(Handle)].GetValue<ulong>(); } set { this[nameof(Handle)].SetValue<ulong>(value); } }
    }
    public enum EMoveComponentAction : int
    {
        Move = 0,
        Stop = 1,
        Return = 2,
        EMoveComponentAction_MAX = 3,
    }
    public enum EQuitPreference : int
    {
        Quit = 0,
        Background = 1,
        EQuitPreference_MAX = 2,
    }
    public class CollisionProfileName : Object
    {
        public CollisionProfileName(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class GenericStruct : Object
    {
        public GenericStruct(nint addr) : base(addr) { }
        public int Data { get { return this[nameof(Data)].GetValue<int>(); } set { this[nameof(Data)].SetValue<int>(value); } }
    }
    public class UserActivity : Object
    {
        public UserActivity(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
    }
    public enum ETravelFailure : int
    {
        NoLevel = 0,
        LoadMapFailure = 1,
        InvalidURL = 2,
        PackageMissing = 3,
        PackageVersion = 4,
        NoDownload = 5,
        TravelFailure = 6,
        CheatCommands = 7,
        PendingNetGameCreateFailure = 8,
        CloudSaveFailure = 9,
        ServerTravelFailure = 10,
        ClientTravelFailure = 11,
        ETravelFailure_MAX = 12,
    }
    public enum EScreenOrientation : int
    {
        Unknown = 0,
        Portrait = 1,
        PortraitUpsideDown = 2,
        LandscapeLeft = 3,
        LandscapeRight = 4,
        FaceUp = 5,
        FaceDown = 6,
        PortraitSensor = 7,
        LandscapeSensor = 8,
        FullSensor = 9,
        EScreenOrientation_MAX = 10,
    }
    public enum EApplicationState : int
    {
        Unknown = 0,
        Inactive = 1,
        Background = 2,
        Active = 3,
        EApplicationState_MAX = 4,
    }
    public enum EComponentPhysicsStateChange : int
    {
        Created = 0,
        Destroyed = 1,
        EComponentPhysicsStateChange_MAX = 2,
    }
    public enum EMouseLockMode : int
    {
        DoNotLock = 0,
        LockOnCapture = 1,
        LockAlways = 2,
        LockInFullscreen = 3,
        EMouseLockMode_MAX = 4,
    }
    public enum EWindowTitleBarMode : int
    {
        Overlay = 0,
        VerticalBox = 1,
        EWindowTitleBarMode_MAX = 2,
    }
    public class DataTableRowHandle : Object
    {
        public DataTableRowHandle(nint addr) : base(addr) { }
        public DataTable DataTable { get { return this[nameof(DataTable)].As<DataTable>(); } set { this["DataTable"] = value; } }
        public Object RowName { get { return this[nameof(RowName)]; } set { this[nameof(RowName)] = value; } }
    }
    public enum ERoundingMode : int
    {
        HalfToEven = 0,
        HalfFromZero = 1,
        HalfToZero = 2,
        FromZero = 3,
        ToZero = 4,
        ToNegativeInfinity = 5,
        ToPositiveInfinity = 6,
        ERoundingMode_MAX = 7,
    }
    public enum EInputEvent : int
    {
        IE_Pressed = 0,
        IE_Released = 1,
        IE_Repeat = 2,
        IE_DoubleClick = 3,
        IE_Axis = 4,
        IE_MAX = 5,
    }
    public enum ENetRole : int
    {
        ROLE_None = 0,
        ROLE_SimulatedProxy = 1,
        ROLE_AutonomousProxy = 2,
        ROLE_Authority = 3,
        ROLE_MAX = 4,
    }
    public enum EAttachLocation : int
    {
        KeepRelativeOffset = 0,
        KeepWorldPosition = 1,
        SnapToTarget = 2,
        SnapToTargetIncludingScale = 3,
        EAttachLocation_MAX = 4,
    }
    public enum EAttachmentRule : int
    {
        KeepRelative = 0,
        KeepWorld = 1,
        SnapToTarget = 2,
        EAttachmentRule_MAX = 3,
    }
    public enum EDetachmentRule : int
    {
        KeepRelative = 0,
        KeepWorld = 1,
        EDetachmentRule_MAX = 2,
    }
    public enum ENetDormancy : int
    {
        DORM_Never = 0,
        DORM_Awake = 1,
        DORM_DormantAll = 2,
        DORM_DormantPartial = 3,
        DORM_Initial = 4,
        DORM_MAX = 5,
    }
    public enum EAutoReceiveInput : int
    {
        Disabled = 0,
        Player0 = 1,
        Player1 = 2,
        Player2 = 3,
        Player3 = 4,
        Player4 = 5,
        Player5 = 6,
        Player6 = 7,
        Player7 = 8,
        EAutoReceiveInput_MAX = 9,
    }
    public enum ESpawnActorCollisionHandlingMethod : int
    {
        Undefined = 0,
        AlwaysSpawn = 1,
        AdjustIfPossibleButAlwaysSpawn = 2,
        AdjustIfPossibleButDontSpawnIfColliding = 3,
        DontSpawnIfColliding = 4,
        ESpawnActorCollisionHandlingMethod_MAX = 5,
    }
    public class RepMovement : Object
    {
        public RepMovement(nint addr) : base(addr) { }
        public Vector LinearVelocity { get { return this[nameof(LinearVelocity)].As<Vector>(); } set { this["LinearVelocity"] = value; } }
        public Vector AngularVelocity { get { return this[nameof(AngularVelocity)].As<Vector>(); } set { this["AngularVelocity"] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public bool bSimulatedPhysicSleep { get { return this[nameof(bSimulatedPhysicSleep)].Flag; } set { this[nameof(bSimulatedPhysicSleep)].Flag = value; } }
        public bool bRepPhysics { get { return this[nameof(bRepPhysics)].Flag; } set { this[nameof(bRepPhysics)].Flag = value; } }
        public int ServerFrame { get { return this[nameof(ServerFrame)].GetValue<int>(); } set { this[nameof(ServerFrame)].SetValue<int>(value); } }
        public int ServerPhysicsHandle { get { return this[nameof(ServerPhysicsHandle)].GetValue<int>(); } set { this[nameof(ServerPhysicsHandle)].SetValue<int>(value); } }
        public EVectorQuantization LocationQuantizationLevel { get { return (EVectorQuantization)this[nameof(LocationQuantizationLevel)].GetValue<int>(); } set { this[nameof(LocationQuantizationLevel)].SetValue<int>((int)value); } }
        public EVectorQuantization VelocityQuantizationLevel { get { return (EVectorQuantization)this[nameof(VelocityQuantizationLevel)].GetValue<int>(); } set { this[nameof(VelocityQuantizationLevel)].SetValue<int>((int)value); } }
        public ERotatorQuantization RotationQuantizationLevel { get { return (ERotatorQuantization)this[nameof(RotationQuantizationLevel)].GetValue<int>(); } set { this[nameof(RotationQuantizationLevel)].SetValue<int>((int)value); } }
    }
    public enum ERotatorQuantization : int
    {
        ByteComponents = 0,
        ShortComponents = 1,
        ERotatorQuantization_MAX = 2,
    }
    public enum EVectorQuantization : int
    {
        RoundWholeNumber = 0,
        RoundOneDecimal = 1,
        RoundTwoDecimals = 2,
        EVectorQuantization_MAX = 3,
    }
    public class RepAttachment : Object
    {
        public RepAttachment(nint addr) : base(addr) { }
        public Actor AttachParent { get { return this[nameof(AttachParent)].As<Actor>(); } set { this["AttachParent"] = value; } }
        public Vector_NetQuantize100 LocationOffset { get { return this[nameof(LocationOffset)].As<Vector_NetQuantize100>(); } set { this["LocationOffset"] = value; } }
        public Vector_NetQuantize100 RelativeScale3D { get { return this[nameof(RelativeScale3D)].As<Vector_NetQuantize100>(); } set { this["RelativeScale3D"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Object AttachSocket { get { return this[nameof(AttachSocket)]; } set { this[nameof(AttachSocket)] = value; } }
        public SceneComponent AttachComponent { get { return this[nameof(AttachComponent)].As<SceneComponent>(); } set { this["AttachComponent"] = value; } }
    }
    public class Vector_NetQuantize100 : Vector
    {
        public Vector_NetQuantize100(nint addr) : base(addr) { }
    }
    public enum EActorUpdateOverlapsMethod : int
    {
        UseConfigDefault = 0,
        AlwaysUpdate = 1,
        OnlyUpdateMovable = 2,
        NeverUpdate = 3,
        EActorUpdateOverlapsMethod_MAX = 4,
    }
    public class ActorTickFunction : TickFunction
    {
        public ActorTickFunction(nint addr) : base(addr) { }
    }
    public class BaseComponentReference : Object
    {
        public BaseComponentReference(nint addr) : base(addr) { }
        public Object ComponentProperty { get { return this[nameof(ComponentProperty)]; } set { this[nameof(ComponentProperty)] = value; } }
        public Object PathToComponent { get { return this[nameof(PathToComponent)]; } set { this[nameof(PathToComponent)] = value; } }
    }
    public class ComponentReference : BaseComponentReference
    {
        public ComponentReference(nint addr) : base(addr) { }
        public Object OtherActor { get { return this[nameof(OtherActor)]; } set { this[nameof(OtherActor)] = value; } }
    }
    public enum EAutoPossessAI : int
    {
        Disabled = 0,
        PlacedInWorld = 1,
        Spawned = 2,
        PlacedInWorldOrSpawned = 3,
        EAutoPossessAI_MAX = 4,
    }
    public class RootMotionSourceGroup : Object
    {
        public RootMotionSourceGroup(nint addr) : base(addr) { }
        public bool bHasAdditiveSources { get { return this[nameof(bHasAdditiveSources)].Flag; } set { this[nameof(bHasAdditiveSources)].Flag = value; } }
        public bool bHasOverrideSources { get { return this[nameof(bHasOverrideSources)].Flag; } set { this[nameof(bHasOverrideSources)].Flag = value; } }
        public bool bHasOverrideSourcesWithIgnoreZAccumulate { get { return this[nameof(bHasOverrideSourcesWithIgnoreZAccumulate)].Flag; } set { this[nameof(bHasOverrideSourcesWithIgnoreZAccumulate)].Flag = value; } }
        public bool bIsAdditiveVelocityApplied { get { return this[nameof(bIsAdditiveVelocityApplied)].Flag; } set { this[nameof(bIsAdditiveVelocityApplied)].Flag = value; } }
        public RootMotionSourceSettings LastAccumulatedSettings { get { return this[nameof(LastAccumulatedSettings)].As<RootMotionSourceSettings>(); } set { this["LastAccumulatedSettings"] = value; } }
        public Vector_NetQuantize10 LastPreAdditiveVelocity { get { return this[nameof(LastPreAdditiveVelocity)].As<Vector_NetQuantize10>(); } set { this["LastPreAdditiveVelocity"] = value; } }
    }
    public class Vector_NetQuantize10 : Vector
    {
        public Vector_NetQuantize10(nint addr) : base(addr) { }
    }
    public class RootMotionSourceSettings : Object
    {
        public RootMotionSourceSettings(nint addr) : base(addr) { }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
    }
    public class CharacterNetworkSerializationPackedBits : Object
    {
        public CharacterNetworkSerializationPackedBits(nint addr) : base(addr) { }
    }
    public class CharacterMoveResponsePackedBits : CharacterNetworkSerializationPackedBits
    {
        public CharacterMoveResponsePackedBits(nint addr) : base(addr) { }
    }
    public class CharacterServerMovePackedBits : CharacterNetworkSerializationPackedBits
    {
        public CharacterServerMovePackedBits(nint addr) : base(addr) { }
    }
    public class RepRootMotionMontage : Object
    {
        public RepRootMotionMontage(nint addr) : base(addr) { }
        public bool bIsActive { get { return this[nameof(bIsActive)].Flag; } set { this[nameof(bIsActive)].Flag = value; } }
        public AnimMontage AnimMontage { get { return this[nameof(AnimMontage)].As<AnimMontage>(); } set { this["AnimMontage"] = value; } }
        public float Position { get { return this[nameof(Position)].GetValue<float>(); } set { this[nameof(Position)].SetValue<float>(value); } }
        public Vector_NetQuantize100 Location { get { return this[nameof(Location)].As<Vector_NetQuantize100>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public PrimitiveComponent MovementBase { get { return this[nameof(MovementBase)].As<PrimitiveComponent>(); } set { this["MovementBase"] = value; } }
        public Object MovementBaseBoneName { get { return this[nameof(MovementBaseBoneName)]; } set { this[nameof(MovementBaseBoneName)] = value; } }
        public bool bRelativePosition { get { return this[nameof(bRelativePosition)].Flag; } set { this[nameof(bRelativePosition)].Flag = value; } }
        public bool bRelativeRotation { get { return this[nameof(bRelativeRotation)].Flag; } set { this[nameof(bRelativeRotation)].Flag = value; } }
        public RootMotionSourceGroup AuthoritativeRootMotion { get { return this[nameof(AuthoritativeRootMotion)].As<RootMotionSourceGroup>(); } set { this["AuthoritativeRootMotion"] = value; } }
        public Vector_NetQuantize10 Acceleration { get { return this[nameof(Acceleration)].As<Vector_NetQuantize10>(); } set { this["Acceleration"] = value; } }
        public Vector_NetQuantize10 LinearVelocity { get { return this[nameof(LinearVelocity)].As<Vector_NetQuantize10>(); } set { this["LinearVelocity"] = value; } }
    }
    public class SimulatedRootMotionReplicatedMove : Object
    {
        public SimulatedRootMotionReplicatedMove(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public RepRootMotionMontage RootMotion { get { return this[nameof(RootMotion)].As<RepRootMotionMontage>(); } set { this["RootMotion"] = value; } }
    }
    public class RootMotionMovementParams : Object
    {
        public RootMotionMovementParams(nint addr) : base(addr) { }
        public bool bHasRootMotion { get { return this[nameof(bHasRootMotion)].Flag; } set { this[nameof(bHasRootMotion)].Flag = value; } }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
        public Transform RootMotionTransform { get { return this[nameof(RootMotionTransform)].As<Transform>(); } set { this["RootMotionTransform"] = value; } }
    }
    public class BasedMovementInfo : Object
    {
        public BasedMovementInfo(nint addr) : base(addr) { }
        public PrimitiveComponent MovementBase { get { return this[nameof(MovementBase)].As<PrimitiveComponent>(); } set { this["MovementBase"] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public Vector_NetQuantize100 Location { get { return this[nameof(Location)].As<Vector_NetQuantize100>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public bool bServerHasBaseComponent { get { return this[nameof(bServerHasBaseComponent)].Flag; } set { this[nameof(bServerHasBaseComponent)].Flag = value; } }
        public bool bRelativeRotation { get { return this[nameof(bRelativeRotation)].Flag; } set { this[nameof(bRelativeRotation)].Flag = value; } }
        public bool bServerHasVelocity { get { return this[nameof(bServerHasVelocity)].Flag; } set { this[nameof(bServerHasVelocity)].Flag = value; } }
    }
    public class NetLevelVisibilityTransactionId : Object
    {
        public NetLevelVisibilityTransactionId(nint addr) : base(addr) { }
        public uint Data { get { return this[nameof(Data)].GetValue<uint>(); } set { this[nameof(Data)].SetValue<uint>(value); } }
    }
    public class AsyncPhysicsTimestamp : Object
    {
        public AsyncPhysicsTimestamp(nint addr) : base(addr) { }
        public int ServerFrame { get { return this[nameof(ServerFrame)].GetValue<int>(); } set { this[nameof(ServerFrame)].SetValue<int>(value); } }
        public int LocalFrame { get { return this[nameof(LocalFrame)].GetValue<int>(); } set { this[nameof(LocalFrame)].SetValue<int>(value); } }
    }
    public class UniqueNetIdRepl : UniqueNetIdWrapper
    {
        public UniqueNetIdRepl(nint addr) : base(addr) { }
        public Array<byte> ReplicationBytes { get { return new Array<byte>(this[nameof(ReplicationBytes)].Address); } }
    }
    public class ForceFeedbackParameters : Object
    {
        public ForceFeedbackParameters(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
        public bool bPlayWhilePaused { get { return this[nameof(bPlayWhilePaused)].Flag; } set { this[nameof(bPlayWhilePaused)].Flag = value; } }
    }
    public class ViewTargetTransitionParams : Object
    {
        public ViewTargetTransitionParams(nint addr) : base(addr) { }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public byte BlendFunction { get { return this[nameof(BlendFunction)].GetValue<byte>(); } set { this[nameof(BlendFunction)].SetValue<byte>(value); } }
        public float BlendExp { get { return this[nameof(BlendExp)].GetValue<float>(); } set { this[nameof(BlendExp)].SetValue<float>(value); } }
        public bool bLockOutgoing { get { return this[nameof(bLockOutgoing)].Flag; } set { this[nameof(bLockOutgoing)].Flag = value; } }
    }
    public enum EViewTargetBlendFunction : int
    {
        VTBlend_Linear = 0,
        VTBlend_Cubic = 1,
        VTBlend_EaseIn = 2,
        VTBlend_EaseOut = 3,
        VTBlend_EaseInOut = 4,
        VTBlend_PreBlended = 5,
        VTBlend_MAX = 6,
    }
    public enum ECameraShakePlaySpace : int
    {
        CameraLocal = 0,
        World = 1,
        UserDefined = 2,
        ECameraShakePlaySpace_MAX = 3,
    }
    public enum ETravelType : int
    {
        TRAVEL_Absolute = 0,
        TRAVEL_Partial = 1,
        TRAVEL_Relative = 2,
        TRAVEL_MAX = 3,
    }
    public class UpdateLevelStreamingLevelStatus : Object
    {
        public UpdateLevelStreamingLevelStatus(nint addr) : base(addr) { }
        public Object PackageName { get { return this[nameof(PackageName)]; } set { this[nameof(PackageName)] = value; } }
        public int LODIndex { get { return this[nameof(LODIndex)].GetValue<int>(); } set { this[nameof(LODIndex)].SetValue<int>(value); } }
        public bool bNewShouldBeLoaded { get { return this[nameof(bNewShouldBeLoaded)].Flag; } set { this[nameof(bNewShouldBeLoaded)].Flag = value; } }
        public bool bNewShouldBeVisible { get { return this[nameof(bNewShouldBeVisible)].Flag; } set { this[nameof(bNewShouldBeVisible)].Flag = value; } }
        public bool bNewShouldBlockOnLoad { get { return this[nameof(bNewShouldBlockOnLoad)].Flag; } set { this[nameof(bNewShouldBlockOnLoad)].Flag = value; } }
    }
    public enum ECollisionChannel : int
    {
        ECC_WorldStatic = 0,
        ECC_WorldDynamic = 1,
        ECC_Pawn = 2,
        ECC_Visibility = 3,
        ECC_Camera = 4,
        ECC_PhysicsBody = 5,
        ECC_Vehicle = 6,
        ECC_Destructible = 7,
        ECC_EngineTraceChannel1 = 8,
        ECC_EngineTraceChannel2 = 9,
        ECC_EngineTraceChannel3 = 10,
        ECC_EngineTraceChannel4 = 11,
        ECC_EngineTraceChannel5 = 12,
        ECC_EngineTraceChannel6 = 13,
        ECC_GameTraceChannel1 = 14,
        ECC_GameTraceChannel2 = 15,
        ECC_GameTraceChannel3 = 16,
        ECC_GameTraceChannel4 = 17,
        ECC_GameTraceChannel5 = 18,
        ECC_GameTraceChannel6 = 19,
        ECC_GameTraceChannel7 = 20,
        ECC_GameTraceChannel8 = 21,
        ECC_GameTraceChannel9 = 22,
        ECC_GameTraceChannel10 = 23,
        ECC_GameTraceChannel11 = 24,
        ECC_GameTraceChannel12 = 25,
        ECC_GameTraceChannel13 = 26,
        ECC_GameTraceChannel14 = 27,
        ECC_GameTraceChannel15 = 28,
        ECC_GameTraceChannel16 = 29,
        ECC_GameTraceChannel17 = 30,
        ECC_GameTraceChannel18 = 31,
        ECC_OverlapAll_Deprecated = 32,
        ECC_MAX = 33,
    }
    public enum EControllerAnalogStick : int
    {
        CAS_LeftStick = 0,
        CAS_RightStick = 1,
        CAS_MAX = 2,
    }
    public enum EStreamingSourcePriority : int
    {
        Highest = 0,
        High = 64,
        Normal = 128,
        Low = 192,
        Lowest = 255,
        Default = 128,
        EStreamingSourcePriority_MAX = 256,
    }
    public class StreamingSourceShape : Object
    {
        public StreamingSourceShape(nint addr) : base(addr) { }
        public bool bUseGridLoadingRange { get { return this[nameof(bUseGridLoadingRange)].Flag; } set { this[nameof(bUseGridLoadingRange)].Flag = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public bool bIsSector { get { return this[nameof(bIsSector)].Flag; } set { this[nameof(bIsSector)].Flag = value; } }
        public float SectorAngle { get { return this[nameof(SectorAngle)].GetValue<float>(); } set { this[nameof(SectorAngle)].SetValue<float>(value); } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
    }
    public enum EDynamicForceFeedbackAction : int
    {
        Start = 0,
        Update = 1,
        Stop = 2,
        EDynamicForceFeedbackAction_MAX = 3,
    }
    public class UpdateLevelVisibilityLevelInfo : Object
    {
        public UpdateLevelVisibilityLevelInfo(nint addr) : base(addr) { }
        public Object PackageName { get { return this[nameof(PackageName)]; } set { this[nameof(PackageName)] = value; } }
        public Object Filename { get { return this[nameof(Filename)]; } set { this[nameof(Filename)] = value; } }
        public NetLevelVisibilityTransactionId VisibilityRequestId { get { return this[nameof(VisibilityRequestId)].As<NetLevelVisibilityTransactionId>(); } set { this["VisibilityRequestId"] = value; } }
        public bool bIsVisible { get { return this[nameof(bIsVisible)].Flag; } set { this[nameof(bIsVisible)].Flag = value; } }
        public bool bTryMakeVisible { get { return this[nameof(bTryMakeVisible)].Flag; } set { this[nameof(bTryMakeVisible)].Flag = value; } }
    }
    public class ActiveForceFeedbackEffect : Object
    {
        public ActiveForceFeedbackEffect(nint addr) : base(addr) { }
        public ForceFeedbackEffect ForceFeedbackEffect { get { return this[nameof(ForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["ForceFeedbackEffect"] = value; } }
    }
    public class TableRowBase : Object
    {
        public TableRowBase(nint addr) : base(addr) { }
    }
    public enum EAnimCurveType : int
    {
        AttributeCurve = 0,
        MaterialCurve = 1,
        MorphTargetCurve = 2,
        MaxAnimCurveType = 3,
        EAnimCurveType_MAX = 4,
    }
    public class MarkerSyncAnimPosition : Object
    {
        public MarkerSyncAnimPosition(nint addr) : base(addr) { }
        public Object PreviousMarkerName { get { return this[nameof(PreviousMarkerName)]; } set { this[nameof(PreviousMarkerName)] = value; } }
        public Object NextMarkerName { get { return this[nameof(NextMarkerName)]; } set { this[nameof(NextMarkerName)] = value; } }
        public float PositionBetweenMarkers { get { return this[nameof(PositionBetweenMarkers)].GetValue<float>(); } set { this[nameof(PositionBetweenMarkers)].SetValue<float>(value); } }
    }
    public enum EMontagePlayReturnType : int
    {
        MontageLength = 0,
        Duration = 1,
        EMontagePlayReturnType_MAX = 2,
    }
    public class AlphaBlendArgs : Object
    {
        public AlphaBlendArgs(nint addr) : base(addr) { }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public EAlphaBlendOption BlendOption { get { return (EAlphaBlendOption)this[nameof(BlendOption)].GetValue<int>(); } set { this[nameof(BlendOption)].SetValue<int>((int)value); } }
    }
    public enum EAlphaBlendOption : int
    {
        Linear = 0,
        Cubic = 1,
        HermiteCubic = 2,
        Sinusoidal = 3,
        QuadraticInOut = 4,
        CubicInOut = 5,
        QuarticInOut = 6,
        QuinticInOut = 7,
        CircularIn = 8,
        CircularOut = 9,
        CircularInOut = 10,
        ExpIn = 11,
        ExpOut = 12,
        ExpInOut = 13,
        Custom = 14,
        EAlphaBlendOption_MAX = 15,
    }
    public class MontageBlendSettings : Object
    {
        public MontageBlendSettings(nint addr) : base(addr) { }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
        public AlphaBlendArgs Blend { get { return this[nameof(Blend)].As<AlphaBlendArgs>(); } set { this["Blend"] = value; } }
        public EMontageBlendMode BlendMode { get { return (EMontageBlendMode)this[nameof(BlendMode)].GetValue<int>(); } set { this[nameof(BlendMode)].SetValue<int>((int)value); } }
    }
    public enum EMontageBlendMode : int
    {
        Standard = 0,
        Inertialization = 1,
        EMontageBlendMode_MAX = 2,
    }
    public enum ETransitionRequestOverwriteMode : int
    {
        Append = 0,
        Ignore = 1,
        Overwrite = 2,
        ETransitionRequestOverwriteMode_MAX = 3,
    }
    public enum ETransitionRequestQueueMode : int
    {
        Shared = 0,
        Unique = 1,
        ETransitionRequestQueueMode_MAX = 2,
    }
    public enum ERootMotionMode : int
    {
        NoRootMotionExtraction = 0,
        IgnoreRootMotion = 1,
        RootMotionFromEverything = 2,
        RootMotionFromMontagesOnly = 3,
        ERootMotionMode_MAX = 4,
    }
    public class PoseSnapshot : Object
    {
        public PoseSnapshot(nint addr) : base(addr) { }
        public Array<Transform> LocalTransforms { get { return new Array<Transform>(this[nameof(LocalTransforms)].Address); } }
        public Array<Object> BoneNames { get { return new Array<Object>(this[nameof(BoneNames)].Address); } }
        public Object SkeletalMeshName { get { return this[nameof(SkeletalMeshName)]; } set { this[nameof(SkeletalMeshName)] = value; } }
        public Object SnapshotName { get { return this[nameof(SnapshotName)]; } set { this[nameof(SnapshotName)] = value; } }
        public bool bIsValid { get { return this[nameof(bIsValid)].Flag; } set { this[nameof(bIsValid)].Flag = value; } }
    }
    public class AnimNotifyEventReference : Object
    {
        public AnimNotifyEventReference(nint addr) : base(addr) { }
        public MirrorDataTable MirrorTable { get { return this[nameof(MirrorTable)].As<MirrorDataTable>(); } set { this["MirrorTable"] = value; } }
        public Object NotifySource { get { return this[nameof(NotifySource)].As<Object>(); } set { this["NotifySource"] = value; } }
    }
    public class AnimLinkableElement : Object
    {
        public AnimLinkableElement(nint addr) : base(addr) { }
        public AnimMontage LinkedMontage { get { return this[nameof(LinkedMontage)].As<AnimMontage>(); } set { this["LinkedMontage"] = value; } }
        public int SlotIndex { get { return this[nameof(SlotIndex)].GetValue<int>(); } set { this[nameof(SlotIndex)].SetValue<int>(value); } }
        public int SegmentIndex { get { return this[nameof(SegmentIndex)].GetValue<int>(); } set { this[nameof(SegmentIndex)].SetValue<int>(value); } }
        public byte LinkMethod { get { return this[nameof(LinkMethod)].GetValue<byte>(); } set { this[nameof(LinkMethod)].SetValue<byte>(value); } }
        public byte CachedLinkMethod { get { return this[nameof(CachedLinkMethod)].GetValue<byte>(); } set { this[nameof(CachedLinkMethod)].SetValue<byte>(value); } }
        public float SegmentBeginTime { get { return this[nameof(SegmentBeginTime)].GetValue<float>(); } set { this[nameof(SegmentBeginTime)].SetValue<float>(value); } }
        public float SegmentLength { get { return this[nameof(SegmentLength)].GetValue<float>(); } set { this[nameof(SegmentLength)].SetValue<float>(value); } }
        public float LinkValue { get { return this[nameof(LinkValue)].GetValue<float>(); } set { this[nameof(LinkValue)].SetValue<float>(value); } }
        public AnimSequenceBase LinkedSequence { get { return this[nameof(LinkedSequence)].As<AnimSequenceBase>(); } set { this["LinkedSequence"] = value; } }
    }
    public enum EAnimLinkMethod : int
    {
        Absolute = 0,
        Relative = 1,
        Proportional = 2,
        EAnimLinkMethod_MAX = 3,
    }
    public class AnimNotifyEvent : AnimLinkableElement
    {
        public AnimNotifyEvent(nint addr) : base(addr) { }
        public float DisplayTime { get { return this[nameof(DisplayTime)].GetValue<float>(); } set { this[nameof(DisplayTime)].SetValue<float>(value); } }
        public float TriggerTimeOffset { get { return this[nameof(TriggerTimeOffset)].GetValue<float>(); } set { this[nameof(TriggerTimeOffset)].SetValue<float>(value); } }
        public float EndTriggerTimeOffset { get { return this[nameof(EndTriggerTimeOffset)].GetValue<float>(); } set { this[nameof(EndTriggerTimeOffset)].SetValue<float>(value); } }
        public float TriggerWeightThreshold { get { return this[nameof(TriggerWeightThreshold)].GetValue<float>(); } set { this[nameof(TriggerWeightThreshold)].SetValue<float>(value); } }
        public Object NotifyName { get { return this[nameof(NotifyName)]; } set { this[nameof(NotifyName)] = value; } }
        public AnimNotify Notify { get { return this[nameof(Notify)].As<AnimNotify>(); } set { this["Notify"] = value; } }
        public AnimNotifyState NotifyStateClass { get { return this[nameof(NotifyStateClass)].As<AnimNotifyState>(); } set { this["NotifyStateClass"] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public AnimLinkableElement EndLink { get { return this[nameof(EndLink)].As<AnimLinkableElement>(); } set { this["EndLink"] = value; } }
        public bool bConvertedFromBranchingPoint { get { return this[nameof(bConvertedFromBranchingPoint)].Flag; } set { this[nameof(bConvertedFromBranchingPoint)].Flag = value; } }
        public byte MontageTickType { get { return this[nameof(MontageTickType)].GetValue<byte>(); } set { this[nameof(MontageTickType)].SetValue<byte>(value); } }
        public float NotifyTriggerChance { get { return this[nameof(NotifyTriggerChance)].GetValue<float>(); } set { this[nameof(NotifyTriggerChance)].SetValue<float>(value); } }
        public byte NotifyFilterType { get { return this[nameof(NotifyFilterType)].GetValue<byte>(); } set { this[nameof(NotifyFilterType)].SetValue<byte>(value); } }
        public int NotifyFilterLOD { get { return this[nameof(NotifyFilterLOD)].GetValue<int>(); } set { this[nameof(NotifyFilterLOD)].SetValue<int>(value); } }
        public bool bTriggerOnDedicatedServer { get { return this[nameof(bTriggerOnDedicatedServer)].Flag; } set { this[nameof(bTriggerOnDedicatedServer)].Flag = value; } }
        public bool bTriggerOnFollower { get { return this[nameof(bTriggerOnFollower)].Flag; } set { this[nameof(bTriggerOnFollower)].Flag = value; } }
        public int TrackIndex { get { return this[nameof(TrackIndex)].GetValue<int>(); } set { this[nameof(TrackIndex)].SetValue<int>(value); } }
    }
    public enum ENotifyFilterType : int
    {
        NoFiltering = 0,
        LOD = 1,
        ENotifyFilterType_MAX = 2,
    }
    public enum EMontageNotifyTickType : int
    {
        Queued = 0,
        BranchingPoint = 1,
        EMontageNotifyTickType_MAX = 2,
    }
    public class AnimNotifyQueue : Object
    {
        public AnimNotifyQueue(nint addr) : base(addr) { }
        public Array<AnimNotifyEventReference> AnimNotifies { get { return new Array<AnimNotifyEventReference>(this[nameof(AnimNotifies)].Address); } }
        public Object UnfilteredMontageAnimNotifies { get { return this[nameof(UnfilteredMontageAnimNotifies)]; } set { this[nameof(UnfilteredMontageAnimNotifies)] = value; } }
    }
    public class AnimNotifyArray : Object
    {
        public AnimNotifyArray(nint addr) : base(addr) { }
        public Array<AnimNotifyEventReference> Notifies { get { return new Array<AnimNotifyEventReference>(this[nameof(Notifies)].Address); } }
    }
    public enum ERelativeTransformSpace : int
    {
        RTS_World = 0,
        RTS_Actor = 1,
        RTS_Component = 2,
        RTS_ParentBoneSpace = 3,
        RTS_MAX = 4,
    }
    public enum EComponentMobility : int
    {
        Static = 0,
        Stationary = 1,
        Movable = 2,
        EComponentMobility_MAX = 3,
    }
    public enum EDetailMode : int
    {
        DM_Low = 0,
        DM_Medium = 1,
        DM_High = 2,
        DM_MAX = 3,
    }
    public class BodyInstanceAsyncPhysicsTickHandle : Object
    {
        public BodyInstanceAsyncPhysicsTickHandle(nint addr) : base(addr) { }
    }
    public enum ECollisionEnabled : int
    {
        NoCollision = 0,
        QueryOnly = 1,
        PhysicsOnly = 2,
        QueryAndPhysics = 3,
        ProbeOnly = 4,
        QueryAndProbe = 5,
        ECollisionEnabled_MAX = 6,
    }
    public enum ECollisionResponse : int
    {
        ECR_Ignore = 0,
        ECR_Overlap = 1,
        ECR_Block = 2,
        ECR_MAX = 3,
    }
    public class WalkableSlopeOverride : Object
    {
        public WalkableSlopeOverride(nint addr) : base(addr) { }
        public byte WalkableSlopeBehavior { get { return this[nameof(WalkableSlopeBehavior)].GetValue<byte>(); } set { this[nameof(WalkableSlopeBehavior)].SetValue<byte>(value); } }
        public float WalkableSlopeAngle { get { return this[nameof(WalkableSlopeAngle)].GetValue<float>(); } set { this[nameof(WalkableSlopeAngle)].SetValue<float>(value); } }
    }
    public enum EWalkableSlopeBehavior : int
    {
        WalkableSlope_Default = 0,
        WalkableSlope_Increase = 1,
        WalkableSlope_Decrease = 2,
        WalkableSlope_Unwalkable = 3,
        WalkableSlope_Max = 4,
    }
    public enum EDOFMode : int
    {
        Default = 0,
        SixDOF = 1,
        YZPlane = 2,
        XZPlane = 3,
        XYPlane = 4,
        CustomPlane = 5,
        None = 6,
        EDOFMode_MAX = 7,
    }
    public enum ERendererStencilMask : int
    {
        ERSM_Default = 0,
        ERSM_256 = 1,
        ERSM_2 = 2,
        ERSM_3 = 3,
        ERSM_5 = 4,
        ERSM_9 = 5,
        ERSM_17 = 6,
        ERSM_33 = 7,
        ERSM_65 = 8,
        ERSM_129 = 9,
        ERSM_MAX = 10,
    }
    public enum ERayTracingGroupCullingPriority : int
    {
        CP_0_NEVER_CULL = 0,
        CP_2 = 1,
        CP_3 = 2,
        CP_4 = 3,
        CP_4_DEFAULT = 4,
        CP_6 = 5,
        CP_7 = 6,
        CP_8 = 7,
        CP_8_QUICKLY_CULL = 8,
        CP_MAX = 9,
    }
    public class BodyInstance : BodyInstanceCore
    {
        public BodyInstance(nint addr) : base(addr) { }
        public byte ObjectType { get { return this[nameof(ObjectType)].GetValue<byte>(); } set { this[nameof(ObjectType)].SetValue<byte>(value); } }
        public byte CollisionEnabled { get { return this[nameof(CollisionEnabled)].GetValue<byte>(); } set { this[nameof(CollisionEnabled)].SetValue<byte>(value); } }
        public ESleepFamily SleepFamily { get { return (ESleepFamily)this[nameof(SleepFamily)].GetValue<int>(); } set { this[nameof(SleepFamily)].SetValue<int>((int)value); } }
        public byte DOFMode { get { return this[nameof(DOFMode)].GetValue<byte>(); } set { this[nameof(DOFMode)].SetValue<byte>(value); } }
        public bool bUseCCD { get { return this[nameof(bUseCCD)].Flag; } set { this[nameof(bUseCCD)].Flag = value; } }
        public bool bIgnoreAnalyticCollisions { get { return this[nameof(bIgnoreAnalyticCollisions)].Flag; } set { this[nameof(bIgnoreAnalyticCollisions)].Flag = value; } }
        public bool bNotifyRigidBodyCollision { get { return this[nameof(bNotifyRigidBodyCollision)].Flag; } set { this[nameof(bNotifyRigidBodyCollision)].Flag = value; } }
        public bool bSmoothEdgeCollisions { get { return this[nameof(bSmoothEdgeCollisions)].Flag; } set { this[nameof(bSmoothEdgeCollisions)].Flag = value; } }
        public bool bLockTranslation { get { return this[nameof(bLockTranslation)].Flag; } set { this[nameof(bLockTranslation)].Flag = value; } }
        public bool bLockRotation { get { return this[nameof(bLockRotation)].Flag; } set { this[nameof(bLockRotation)].Flag = value; } }
        public bool bLockXTranslation { get { return this[nameof(bLockXTranslation)].Flag; } set { this[nameof(bLockXTranslation)].Flag = value; } }
        public bool bLockYTranslation { get { return this[nameof(bLockYTranslation)].Flag; } set { this[nameof(bLockYTranslation)].Flag = value; } }
        public bool bLockZTranslation { get { return this[nameof(bLockZTranslation)].Flag; } set { this[nameof(bLockZTranslation)].Flag = value; } }
        public bool bLockXRotation { get { return this[nameof(bLockXRotation)].Flag; } set { this[nameof(bLockXRotation)].Flag = value; } }
        public bool bLockYRotation { get { return this[nameof(bLockYRotation)].Flag; } set { this[nameof(bLockYRotation)].Flag = value; } }
        public bool bLockZRotation { get { return this[nameof(bLockZRotation)].Flag; } set { this[nameof(bLockZRotation)].Flag = value; } }
        public bool bOverrideMaxAngularVelocity { get { return this[nameof(bOverrideMaxAngularVelocity)].Flag; } set { this[nameof(bOverrideMaxAngularVelocity)].Flag = value; } }
        public bool bOverrideMaxDepenetrationVelocity { get { return this[nameof(bOverrideMaxDepenetrationVelocity)].Flag; } set { this[nameof(bOverrideMaxDepenetrationVelocity)].Flag = value; } }
        public bool bOverrideWalkableSlopeOnInstance { get { return this[nameof(bOverrideWalkableSlopeOnInstance)].Flag; } set { this[nameof(bOverrideWalkableSlopeOnInstance)].Flag = value; } }
        public bool bInterpolateWhenSubStepping { get { return this[nameof(bInterpolateWhenSubStepping)].Flag; } set { this[nameof(bInterpolateWhenSubStepping)].Flag = value; } }
        public bool bInertiaConditioning { get { return this[nameof(bInertiaConditioning)].Flag; } set { this[nameof(bInertiaConditioning)].Flag = value; } }
        public Object CollisionProfileName { get { return this[nameof(CollisionProfileName)]; } set { this[nameof(CollisionProfileName)] = value; } }
        public byte PositionSolverIterationCount { get { return this[nameof(PositionSolverIterationCount)].GetValue<byte>(); } set { this[nameof(PositionSolverIterationCount)].SetValue<byte>(value); } }
        public byte VelocitySolverIterationCount { get { return this[nameof(VelocitySolverIterationCount)].GetValue<byte>(); } set { this[nameof(VelocitySolverIterationCount)].SetValue<byte>(value); } }
        public CollisionResponse CollisionResponses { get { return this[nameof(CollisionResponses)].As<CollisionResponse>(); } set { this["CollisionResponses"] = value; } }
        public float MaxDepenetrationVelocity { get { return this[nameof(MaxDepenetrationVelocity)].GetValue<float>(); } set { this[nameof(MaxDepenetrationVelocity)].SetValue<float>(value); } }
        public float MassInKgOverride { get { return this[nameof(MassInKgOverride)].GetValue<float>(); } set { this[nameof(MassInKgOverride)].SetValue<float>(value); } }
        public float LinearDamping { get { return this[nameof(LinearDamping)].GetValue<float>(); } set { this[nameof(LinearDamping)].SetValue<float>(value); } }
        public float AngularDamping { get { return this[nameof(AngularDamping)].GetValue<float>(); } set { this[nameof(AngularDamping)].SetValue<float>(value); } }
        public Vector CustomDOFPlaneNormal { get { return this[nameof(CustomDOFPlaneNormal)].As<Vector>(); } set { this["CustomDOFPlaneNormal"] = value; } }
        public Vector COMNudge { get { return this[nameof(COMNudge)].As<Vector>(); } set { this["COMNudge"] = value; } }
        public float MassScale { get { return this[nameof(MassScale)].GetValue<float>(); } set { this[nameof(MassScale)].SetValue<float>(value); } }
        public Vector InertiaTensorScale { get { return this[nameof(InertiaTensorScale)].As<Vector>(); } set { this["InertiaTensorScale"] = value; } }
        public WalkableSlopeOverride WalkableSlopeOverride { get { return this[nameof(WalkableSlopeOverride)].As<WalkableSlopeOverride>(); } set { this["WalkableSlopeOverride"] = value; } }
        public PhysicalMaterial PhysMaterialOverride { get { return this[nameof(PhysMaterialOverride)].As<PhysicalMaterial>(); } set { this["PhysMaterialOverride"] = value; } }
        public float MaxAngularVelocity { get { return this[nameof(MaxAngularVelocity)].GetValue<float>(); } set { this[nameof(MaxAngularVelocity)].SetValue<float>(value); } }
        public float CustomSleepThresholdMultiplier { get { return this[nameof(CustomSleepThresholdMultiplier)].GetValue<float>(); } set { this[nameof(CustomSleepThresholdMultiplier)].SetValue<float>(value); } }
        public float StabilizationThresholdMultiplier { get { return this[nameof(StabilizationThresholdMultiplier)].GetValue<float>(); } set { this[nameof(StabilizationThresholdMultiplier)].SetValue<float>(value); } }
        public float PhysicsBlendWeight { get { return this[nameof(PhysicsBlendWeight)].GetValue<float>(); } set { this[nameof(PhysicsBlendWeight)].SetValue<float>(value); } }
    }
    public class CollisionResponse : Object
    {
        public CollisionResponse(nint addr) : base(addr) { }
        public CollisionResponseContainer ResponseToChannels { get { return this[nameof(ResponseToChannels)].As<CollisionResponseContainer>(); } set { this["ResponseToChannels"] = value; } }
        public Array<ResponseChannel> ResponseArray { get { return new Array<ResponseChannel>(this[nameof(ResponseArray)].Address); } }
    }
    public class ResponseChannel : Object
    {
        public ResponseChannel(nint addr) : base(addr) { }
        public Object Channel { get { return this[nameof(Channel)]; } set { this[nameof(Channel)] = value; } }
        public byte Response { get { return this[nameof(Response)].GetValue<byte>(); } set { this[nameof(Response)].SetValue<byte>(value); } }
    }
    public class CollisionResponseContainer : Object
    {
        public CollisionResponseContainer(nint addr) : base(addr) { }
        public byte WorldStatic { get { return this[nameof(WorldStatic)].GetValue<byte>(); } set { this[nameof(WorldStatic)].SetValue<byte>(value); } }
        public byte WorldDynamic { get { return this[nameof(WorldDynamic)].GetValue<byte>(); } set { this[nameof(WorldDynamic)].SetValue<byte>(value); } }
        public byte Pawn { get { return this[nameof(Pawn)].GetValue<byte>(); } set { this[nameof(Pawn)].SetValue<byte>(value); } }
        public byte Visibility { get { return this[nameof(Visibility)].GetValue<byte>(); } set { this[nameof(Visibility)].SetValue<byte>(value); } }
        public byte Camera { get { return this[nameof(Camera)].GetValue<byte>(); } set { this[nameof(Camera)].SetValue<byte>(value); } }
        public byte PhysicsBody { get { return this[nameof(PhysicsBody)].GetValue<byte>(); } set { this[nameof(PhysicsBody)].SetValue<byte>(value); } }
        public byte Vehicle { get { return this[nameof(Vehicle)].GetValue<byte>(); } set { this[nameof(Vehicle)].SetValue<byte>(value); } }
        public byte Destructible { get { return this[nameof(Destructible)].GetValue<byte>(); } set { this[nameof(Destructible)].SetValue<byte>(value); } }
        public byte EngineTraceChannel1 { get { return this[nameof(EngineTraceChannel1)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel1)].SetValue<byte>(value); } }
        public byte EngineTraceChannel2 { get { return this[nameof(EngineTraceChannel2)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel2)].SetValue<byte>(value); } }
        public byte EngineTraceChannel3 { get { return this[nameof(EngineTraceChannel3)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel3)].SetValue<byte>(value); } }
        public byte EngineTraceChannel4 { get { return this[nameof(EngineTraceChannel4)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel4)].SetValue<byte>(value); } }
        public byte EngineTraceChannel5 { get { return this[nameof(EngineTraceChannel5)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel5)].SetValue<byte>(value); } }
        public byte EngineTraceChannel6 { get { return this[nameof(EngineTraceChannel6)].GetValue<byte>(); } set { this[nameof(EngineTraceChannel6)].SetValue<byte>(value); } }
        public byte GameTraceChannel1 { get { return this[nameof(GameTraceChannel1)].GetValue<byte>(); } set { this[nameof(GameTraceChannel1)].SetValue<byte>(value); } }
        public byte GameTraceChannel2 { get { return this[nameof(GameTraceChannel2)].GetValue<byte>(); } set { this[nameof(GameTraceChannel2)].SetValue<byte>(value); } }
        public byte GameTraceChannel3 { get { return this[nameof(GameTraceChannel3)].GetValue<byte>(); } set { this[nameof(GameTraceChannel3)].SetValue<byte>(value); } }
        public byte GameTraceChannel4 { get { return this[nameof(GameTraceChannel4)].GetValue<byte>(); } set { this[nameof(GameTraceChannel4)].SetValue<byte>(value); } }
        public byte GameTraceChannel5 { get { return this[nameof(GameTraceChannel5)].GetValue<byte>(); } set { this[nameof(GameTraceChannel5)].SetValue<byte>(value); } }
        public byte GameTraceChannel6 { get { return this[nameof(GameTraceChannel6)].GetValue<byte>(); } set { this[nameof(GameTraceChannel6)].SetValue<byte>(value); } }
        public byte GameTraceChannel7 { get { return this[nameof(GameTraceChannel7)].GetValue<byte>(); } set { this[nameof(GameTraceChannel7)].SetValue<byte>(value); } }
        public byte GameTraceChannel8 { get { return this[nameof(GameTraceChannel8)].GetValue<byte>(); } set { this[nameof(GameTraceChannel8)].SetValue<byte>(value); } }
        public byte GameTraceChannel9 { get { return this[nameof(GameTraceChannel9)].GetValue<byte>(); } set { this[nameof(GameTraceChannel9)].SetValue<byte>(value); } }
        public byte GameTraceChannel10 { get { return this[nameof(GameTraceChannel10)].GetValue<byte>(); } set { this[nameof(GameTraceChannel10)].SetValue<byte>(value); } }
        public byte GameTraceChannel11 { get { return this[nameof(GameTraceChannel11)].GetValue<byte>(); } set { this[nameof(GameTraceChannel11)].SetValue<byte>(value); } }
        public byte GameTraceChannel12 { get { return this[nameof(GameTraceChannel12)].GetValue<byte>(); } set { this[nameof(GameTraceChannel12)].SetValue<byte>(value); } }
        public byte GameTraceChannel13 { get { return this[nameof(GameTraceChannel13)].GetValue<byte>(); } set { this[nameof(GameTraceChannel13)].SetValue<byte>(value); } }
        public byte GameTraceChannel14 { get { return this[nameof(GameTraceChannel14)].GetValue<byte>(); } set { this[nameof(GameTraceChannel14)].SetValue<byte>(value); } }
        public byte GameTraceChannel15 { get { return this[nameof(GameTraceChannel15)].GetValue<byte>(); } set { this[nameof(GameTraceChannel15)].SetValue<byte>(value); } }
        public byte GameTraceChannel16 { get { return this[nameof(GameTraceChannel16)].GetValue<byte>(); } set { this[nameof(GameTraceChannel16)].SetValue<byte>(value); } }
        public byte GameTraceChannel17 { get { return this[nameof(GameTraceChannel17)].GetValue<byte>(); } set { this[nameof(GameTraceChannel17)].SetValue<byte>(value); } }
        public byte GameTraceChannel18 { get { return this[nameof(GameTraceChannel18)].GetValue<byte>(); } set { this[nameof(GameTraceChannel18)].SetValue<byte>(value); } }
    }
    public enum ERuntimeVirtualTextureMainPassType : int
    {
        Never = 0,
        Exclusive = 1,
        Always = 2,
        ERuntimeVirtualTextureMainPassType_MAX = 3,
    }
    public class CustomPrimitiveData : Object
    {
        public CustomPrimitiveData(nint addr) : base(addr) { }
        public Array<float> Data { get { return new Array<float>(this[nameof(Data)].Address); } }
    }
    public class LightingChannels : Object
    {
        public LightingChannels(nint addr) : base(addr) { }
        public bool bChannel0 { get { return this[nameof(bChannel0)].Flag; } set { this[nameof(bChannel0)].Flag = value; } }
        public bool bChannel1 { get { return this[nameof(bChannel1)].Flag; } set { this[nameof(bChannel1)].Flag = value; } }
        public bool bChannel2 { get { return this[nameof(bChannel2)].Flag; } set { this[nameof(bChannel2)].Flag = value; } }
    }
    public enum ECanBeCharacterBase : int
    {
        ECB_No = 0,
        ECB_Yes = 1,
        ECB_Owner = 2,
        ECB_MAX = 3,
    }
    public enum EHasCustomNavigableGeometry : int
    {
        No = 0,
        Yes = 1,
        EvenIfNotCollidable = 2,
        DontExport = 3,
        EHasCustomNavigableGeometry_MAX = 4,
    }
    public enum ELightmapType : int
    {
        Default = 0,
        ForceSurface = 1,
        ForceVolumetric = 2,
        ELightmapType_MAX = 3,
    }
    public enum EIndirectLightingCacheQuality : int
    {
        ILCQ_Off = 0,
        ILCQ_Point = 1,
        ILCQ_Volume = 2,
        ILCQ_MAX = 3,
    }
    public enum ESceneDepthPriorityGroup : int
    {
        SDPG_World = 0,
        SDPG_Foreground = 1,
        SDPG_MAX = 2,
    }
    public class MovementProperties : Object
    {
        public MovementProperties(nint addr) : base(addr) { }
        public bool bCanCrouch { get { return this[nameof(bCanCrouch)].Flag; } set { this[nameof(bCanCrouch)].Flag = value; } }
        public bool bCanJump { get { return this[nameof(bCanJump)].Flag; } set { this[nameof(bCanJump)].Flag = value; } }
        public bool bCanWalk { get { return this[nameof(bCanWalk)].Flag; } set { this[nameof(bCanWalk)].Flag = value; } }
        public bool bCanSwim { get { return this[nameof(bCanSwim)].Flag; } set { this[nameof(bCanSwim)].Flag = value; } }
        public bool bCanFly { get { return this[nameof(bCanFly)].Flag; } set { this[nameof(bCanFly)].Flag = value; } }
    }
    public class NavAgentProperties : MovementProperties
    {
        public NavAgentProperties(nint addr) : base(addr) { }
        public float AgentRadius { get { return this[nameof(AgentRadius)].GetValue<float>(); } set { this[nameof(AgentRadius)].SetValue<float>(value); } }
        public float AgentHeight { get { return this[nameof(AgentHeight)].GetValue<float>(); } set { this[nameof(AgentHeight)].SetValue<float>(value); } }
        public float AgentStepHeight { get { return this[nameof(AgentStepHeight)].GetValue<float>(); } set { this[nameof(AgentStepHeight)].SetValue<float>(value); } }
        public float NavWalkingSearchHeightScale { get { return this[nameof(NavWalkingSearchHeightScale)].GetValue<float>(); } set { this[nameof(NavWalkingSearchHeightScale)].SetValue<float>(value); } }
        public SoftClassPath PreferredNavData { get { return this[nameof(PreferredNavData)].As<SoftClassPath>(); } set { this["PreferredNavData"] = value; } }
    }
    public class FindFloorResult : Object
    {
        public FindFloorResult(nint addr) : base(addr) { }
        public bool bBlockingHit { get { return this[nameof(bBlockingHit)].Flag; } set { this[nameof(bBlockingHit)].Flag = value; } }
        public bool bWalkableFloor { get { return this[nameof(bWalkableFloor)].Flag; } set { this[nameof(bWalkableFloor)].Flag = value; } }
        public bool bLineTrace { get { return this[nameof(bLineTrace)].Flag; } set { this[nameof(bLineTrace)].Flag = value; } }
        public float FloorDist { get { return this[nameof(FloorDist)].GetValue<float>(); } set { this[nameof(FloorDist)].SetValue<float>(value); } }
        public float LineDist { get { return this[nameof(LineDist)].GetValue<float>(); } set { this[nameof(LineDist)].SetValue<float>(value); } }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
    }
    public class NavAvoidanceMask : Object
    {
        public NavAvoidanceMask(nint addr) : base(addr) { }
        public bool bGroup0 { get { return this[nameof(bGroup0)].Flag; } set { this[nameof(bGroup0)].Flag = value; } }
        public bool bGroup1 { get { return this[nameof(bGroup1)].Flag; } set { this[nameof(bGroup1)].Flag = value; } }
        public bool bGroup2 { get { return this[nameof(bGroup2)].Flag; } set { this[nameof(bGroup2)].Flag = value; } }
        public bool bGroup3 { get { return this[nameof(bGroup3)].Flag; } set { this[nameof(bGroup3)].Flag = value; } }
        public bool bGroup4 { get { return this[nameof(bGroup4)].Flag; } set { this[nameof(bGroup4)].Flag = value; } }
        public bool bGroup5 { get { return this[nameof(bGroup5)].Flag; } set { this[nameof(bGroup5)].Flag = value; } }
        public bool bGroup6 { get { return this[nameof(bGroup6)].Flag; } set { this[nameof(bGroup6)].Flag = value; } }
        public bool bGroup7 { get { return this[nameof(bGroup7)].Flag; } set { this[nameof(bGroup7)].Flag = value; } }
        public bool bGroup8 { get { return this[nameof(bGroup8)].Flag; } set { this[nameof(bGroup8)].Flag = value; } }
        public bool bGroup9 { get { return this[nameof(bGroup9)].Flag; } set { this[nameof(bGroup9)].Flag = value; } }
        public bool bGroup10 { get { return this[nameof(bGroup10)].Flag; } set { this[nameof(bGroup10)].Flag = value; } }
        public bool bGroup11 { get { return this[nameof(bGroup11)].Flag; } set { this[nameof(bGroup11)].Flag = value; } }
        public bool bGroup12 { get { return this[nameof(bGroup12)].Flag; } set { this[nameof(bGroup12)].Flag = value; } }
        public bool bGroup13 { get { return this[nameof(bGroup13)].Flag; } set { this[nameof(bGroup13)].Flag = value; } }
        public bool bGroup14 { get { return this[nameof(bGroup14)].Flag; } set { this[nameof(bGroup14)].Flag = value; } }
        public bool bGroup15 { get { return this[nameof(bGroup15)].Flag; } set { this[nameof(bGroup15)].Flag = value; } }
        public bool bGroup16 { get { return this[nameof(bGroup16)].Flag; } set { this[nameof(bGroup16)].Flag = value; } }
        public bool bGroup17 { get { return this[nameof(bGroup17)].Flag; } set { this[nameof(bGroup17)].Flag = value; } }
        public bool bGroup18 { get { return this[nameof(bGroup18)].Flag; } set { this[nameof(bGroup18)].Flag = value; } }
        public bool bGroup19 { get { return this[nameof(bGroup19)].Flag; } set { this[nameof(bGroup19)].Flag = value; } }
        public bool bGroup20 { get { return this[nameof(bGroup20)].Flag; } set { this[nameof(bGroup20)].Flag = value; } }
        public bool bGroup21 { get { return this[nameof(bGroup21)].Flag; } set { this[nameof(bGroup21)].Flag = value; } }
        public bool bGroup22 { get { return this[nameof(bGroup22)].Flag; } set { this[nameof(bGroup22)].Flag = value; } }
        public bool bGroup23 { get { return this[nameof(bGroup23)].Flag; } set { this[nameof(bGroup23)].Flag = value; } }
        public bool bGroup24 { get { return this[nameof(bGroup24)].Flag; } set { this[nameof(bGroup24)].Flag = value; } }
        public bool bGroup25 { get { return this[nameof(bGroup25)].Flag; } set { this[nameof(bGroup25)].Flag = value; } }
        public bool bGroup26 { get { return this[nameof(bGroup26)].Flag; } set { this[nameof(bGroup26)].Flag = value; } }
        public bool bGroup27 { get { return this[nameof(bGroup27)].Flag; } set { this[nameof(bGroup27)].Flag = value; } }
        public bool bGroup28 { get { return this[nameof(bGroup28)].Flag; } set { this[nameof(bGroup28)].Flag = value; } }
        public bool bGroup29 { get { return this[nameof(bGroup29)].Flag; } set { this[nameof(bGroup29)].Flag = value; } }
        public bool bGroup30 { get { return this[nameof(bGroup30)].Flag; } set { this[nameof(bGroup30)].Flag = value; } }
        public bool bGroup31 { get { return this[nameof(bGroup31)].Flag; } set { this[nameof(bGroup31)].Flag = value; } }
    }
    public class CharacterMovementComponentPostPhysicsTickFunction : TickFunction
    {
        public CharacterMovementComponentPostPhysicsTickFunction(nint addr) : base(addr) { }
    }
    public enum ENetworkSmoothingMode : int
    {
        Disabled = 0,
        Linear = 1,
        Exponential = 2,
        ENetworkSmoothingMode_MAX = 3,
    }
    public enum EAntiAliasingMethod : int
    {
        AAM_None = 0,
        AAM_FXAA = 1,
        AAM_TemporalAA = 2,
        AAM_MSAA = 3,
        AAM_TSR = 4,
        AAM_MAX = 5,
    }
    public enum EWindowMode : int
    {
        Fullscreen = 0,
        WindowedFullscreen = 1,
        Windowed = 2,
        EWindowMode_MAX = 3,
    }
    public class KeyBind : Object
    {
        public KeyBind(nint addr) : base(addr) { }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
        public Object Command { get { return this[nameof(Command)]; } set { this[nameof(Command)] = value; } }
        public bool Control { get { return this[nameof(Control)].Flag; } set { this[nameof(Control)].Flag = value; } }
        public bool Shift { get { return this[nameof(Shift)].Flag; } set { this[nameof(Shift)].Flag = value; } }
        public bool Alt { get { return this[nameof(Alt)].Flag; } set { this[nameof(Alt)].Flag = value; } }
        public bool Cmd { get { return this[nameof(Cmd)].Flag; } set { this[nameof(Cmd)].Flag = value; } }
        public bool bIgnoreCtrl { get { return this[nameof(bIgnoreCtrl)].Flag; } set { this[nameof(bIgnoreCtrl)].Flag = value; } }
        public bool bIgnoreShift { get { return this[nameof(bIgnoreShift)].Flag; } set { this[nameof(bIgnoreShift)].Flag = value; } }
        public bool bIgnoreAlt { get { return this[nameof(bIgnoreAlt)].Flag; } set { this[nameof(bIgnoreAlt)].Flag = value; } }
        public bool bIgnoreCmd { get { return this[nameof(bIgnoreCmd)].Flag; } set { this[nameof(bIgnoreCmd)].Flag = value; } }
        public bool bDisabled { get { return this[nameof(bDisabled)].Flag; } set { this[nameof(bDisabled)].Flag = value; } }
    }
    public class InputActionKeyMapping : Object
    {
        public InputActionKeyMapping(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public bool bShift { get { return this[nameof(bShift)].Flag; } set { this[nameof(bShift)].Flag = value; } }
        public bool bCtrl { get { return this[nameof(bCtrl)].Flag; } set { this[nameof(bCtrl)].Flag = value; } }
        public bool bAlt { get { return this[nameof(bAlt)].Flag; } set { this[nameof(bAlt)].Flag = value; } }
        public bool bCmd { get { return this[nameof(bCmd)].Flag; } set { this[nameof(bCmd)].Flag = value; } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class InputAxisKeyMapping : Object
    {
        public InputAxisKeyMapping(nint addr) : base(addr) { }
        public Object AxisName { get { return this[nameof(AxisName)]; } set { this[nameof(AxisName)] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class LightmassPrimitiveSettings : Object
    {
        public LightmassPrimitiveSettings(nint addr) : base(addr) { }
        public bool bUseTwoSidedLighting { get { return this[nameof(bUseTwoSidedLighting)].Flag; } set { this[nameof(bUseTwoSidedLighting)].Flag = value; } }
        public bool bShadowIndirectOnly { get { return this[nameof(bShadowIndirectOnly)].Flag; } set { this[nameof(bShadowIndirectOnly)].Flag = value; } }
        public bool bUseEmissiveForStaticLighting { get { return this[nameof(bUseEmissiveForStaticLighting)].Flag; } set { this[nameof(bUseEmissiveForStaticLighting)].Flag = value; } }
        public bool bUseVertexNormalForHemisphereGather { get { return this[nameof(bUseVertexNormalForHemisphereGather)].Flag; } set { this[nameof(bUseVertexNormalForHemisphereGather)].Flag = value; } }
        public float EmissiveLightFalloffExponent { get { return this[nameof(EmissiveLightFalloffExponent)].GetValue<float>(); } set { this[nameof(EmissiveLightFalloffExponent)].SetValue<float>(value); } }
        public float EmissiveLightExplicitInfluenceRadius { get { return this[nameof(EmissiveLightExplicitInfluenceRadius)].GetValue<float>(); } set { this[nameof(EmissiveLightExplicitInfluenceRadius)].SetValue<float>(value); } }
        public float EmissiveBoost { get { return this[nameof(EmissiveBoost)].GetValue<float>(); } set { this[nameof(EmissiveBoost)].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this[nameof(DiffuseBoost)].GetValue<float>(); } set { this[nameof(DiffuseBoost)].SetValue<float>(value); } }
        public float FullyOccludedSamplesFraction { get { return this[nameof(FullyOccludedSamplesFraction)].GetValue<float>(); } set { this[nameof(FullyOccludedSamplesFraction)].SetValue<float>(value); } }
    }
    public class StreamingTextureBuildInfo : Object
    {
        public StreamingTextureBuildInfo(nint addr) : base(addr) { }
        public uint PackedRelativeBox { get { return this[nameof(PackedRelativeBox)].GetValue<uint>(); } set { this[nameof(PackedRelativeBox)].SetValue<uint>(value); } }
        public int TextureLevelIndex { get { return this[nameof(TextureLevelIndex)].GetValue<int>(); } set { this[nameof(TextureLevelIndex)].SetValue<int>(value); } }
        public float TexelFactor { get { return this[nameof(TexelFactor)].GetValue<float>(); } set { this[nameof(TexelFactor)].SetValue<float>(value); } }
    }
    public class StaticMeshComponentLODInfo : Object
    {
        public StaticMeshComponentLODInfo(nint addr) : base(addr) { }
    }
    public enum EPhysBodyOp : int
    {
        PBO_None = 0,
        PBO_Term = 1,
        PBO_MAX = 2,
    }
    public class SkelMeshSkinWeightInfo : Object
    {
        public SkelMeshSkinWeightInfo(nint addr) : base(addr) { }
        public int Bones { get { return this[nameof(Bones)].GetValue<int>(); } set { this[nameof(Bones)].SetValue<int>(value); } }
        public byte Weights { get { return this[nameof(Weights)].GetValue<byte>(); } set { this[nameof(Weights)].SetValue<byte>(value); } }
    }
    public enum EVisibilityBasedAnimTickOption : int
    {
        AlwaysTickPoseAndRefreshBones = 0,
        AlwaysTickPose = 1,
        OnlyTickMontagesWhenNotRendered = 2,
        OnlyTickPoseWhenRendered = 3,
        EVisibilityBasedAnimTickOption_MAX = 4,
    }
    public class SkelMeshComponentLODInfo : Object
    {
        public SkelMeshComponentLODInfo(nint addr) : base(addr) { }
        public Array<bool> HiddenMaterials { get { return new Array<bool>(this[nameof(HiddenMaterials)].Address); } }
    }
    public enum ESkinCacheUsage : int
    {
        Auto = 0,
        Disabled = 255,
        Enabled = 1,
        ESkinCacheUsage_MAX = 256,
    }
    public enum EAnimationMode : int
    {
        AnimationBlueprint = 0,
        AnimationSingleNode = 1,
        AnimationCustomMode = 2,
        EAnimationMode_MAX = 3,
    }
    public class ConstraintInstanceAccessor : Object
    {
        public ConstraintInstanceAccessor(nint addr) : base(addr) { }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
        public uint Index { get { return this[nameof(Index)].GetValue<uint>(); } set { this[nameof(Index)].SetValue<uint>(value); } }
    }
    public enum ECustomBoneAttributeLookup : int
    {
        BoneOnly = 0,
        ImmediateParent = 1,
        ParentHierarchy = 2,
        ECustomBoneAttributeLookup_MAX = 3,
    }
    public enum EPhysicsTransformUpdateMode : int
    {
        SimulationUpatesComponentTransform = 0,
        ComponentTransformIsKinematic = 1,
        EPhysicsTransformUpdateMode_MAX = 2,
    }
    public enum EKinematicBonesUpdateToPhysics : int
    {
        SkipSimulatingBones = 0,
        SkipAllBones = 1,
        EKinematicBonesUpdateToPhysics_MAX = 2,
    }
    public class SingleAnimationPlayData : Object
    {
        public SingleAnimationPlayData(nint addr) : base(addr) { }
        public AnimationAsset AnimToPlay { get { return this[nameof(AnimToPlay)].As<AnimationAsset>(); } set { this["AnimToPlay"] = value; } }
        public bool bSavedLooping { get { return this[nameof(bSavedLooping)].Flag; } set { this[nameof(bSavedLooping)].Flag = value; } }
        public bool bSavedPlaying { get { return this[nameof(bSavedPlaying)].Flag; } set { this[nameof(bSavedPlaying)].Flag = value; } }
        public float SavedPosition { get { return this[nameof(SavedPosition)].GetValue<float>(); } set { this[nameof(SavedPosition)].SetValue<float>(value); } }
        public float SavedPlayRate { get { return this[nameof(SavedPlayRate)].GetValue<float>(); } set { this[nameof(SavedPlayRate)].SetValue<float>(value); } }
    }
    public enum EMouseCaptureMode : int
    {
        NoCapture = 0,
        CapturePermanently = 1,
        CapturePermanently_IncludingInitialMouseDown = 2,
        CaptureDuringMouseDown = 3,
        CaptureDuringRightMouseDown = 4,
        EMouseCaptureMode_MAX = 5,
    }
    public enum AnimationKeyFormat : int
    {
        AKF_ConstantKeyLerp = 0,
        AKF_VariableKeyLerp = 1,
        AKF_PerTrackCompression = 2,
        AKF_MAX = 3,
    }
    public enum EAnimAssetCurveFlags : int
    {
        AACF_NONE = 0,
        AACF_DriveMorphTarget_DEPRECATED = 1,
        AACF_DriveAttribute_DEPRECATED = 2,
        AACF_Editable = 4,
        AACF_DriveMaterial_DEPRECATED = 8,
        AACF_Metadata = 16,
        AACF_DriveTrack = 32,
        AACF_Disabled = 64,
        AACF_MAX = 65,
    }
    public enum ERawCurveTrackTypes : int
    {
        RCT_Float = 0,
        RCT_Vector = 1,
        RCT_Transform = 2,
        RCT_MAX = 3,
    }
    public enum ERootMotionRootLock : int
    {
        RefPose = 0,
        AnimFirstFrame = 1,
        Zero = 2,
        ERootMotionRootLock_MAX = 3,
    }
    public enum EAdditiveBasePoseType : int
    {
        ABPT_None = 0,
        ABPT_RefPose = 1,
        ABPT_AnimScaled = 2,
        ABPT_AnimFrame = 3,
        ABPT_LocalAnimFrame = 4,
        ABPT_MAX = 5,
    }
    public enum AnimationCompressionFormat : int
    {
        ACF_None = 0,
        ACF_Float96NoW = 1,
        ACF_Fixed48NoW = 2,
        ACF_IntervalFixed32NoW = 3,
        ACF_Fixed32NoW = 4,
        ACF_Float32NoW = 5,
        ACF_Identity = 6,
        ACF_MAX = 7,
    }
    public enum AnimPhysTwistAxis : int
    {
        AxisX = 0,
        AxisY = 1,
        AxisZ = 2,
        AnimPhysTwistAxis_MAX = 3,
    }
    public enum AnimPhysCollisionType : int
    {
        CoM = 0,
        CustomSphere = 1,
        InnerSphere = 2,
        OuterSphere = 3,
        AnimPhysCollisionType_MAX = 4,
    }
    public enum ETypeAdvanceAnim : int
    {
        ETAA_Default = 0,
        ETAA_Finished = 1,
        ETAA_Looped = 2,
        ETAA_MAX = 3,
    }
    public enum EBoneAxis : int
    {
        BA_X = 0,
        BA_Y = 1,
        BA_Z = 2,
        BA_MAX = 3,
    }
    public enum EBoneControlSpace : int
    {
        BCS_WorldSpace = 0,
        BCS_ComponentSpace = 1,
        BCS_ParentBoneSpace = 2,
        BCS_BoneSpace = 3,
        BCS_MAX = 4,
    }
    public enum EBoneRotationSource : int
    {
        BRS_KeepComponentSpaceRotation = 0,
        BRS_KeepLocalSpaceRotation = 1,
        BRS_CopyFromTarget = 2,
        BRS_MAX = 3,
    }
    public enum EAdditiveAnimationType : int
    {
        AAT_None = 0,
        AAT_LocalSpaceBase = 1,
        AAT_RotationOffsetMeshSpace = 2,
        AAT_MAX = 3,
    }
    public enum ECurveBlendOption : int
    {
        Override = 0,
        DoNotOverride = 1,
        NormalizeByWeight = 2,
        BlendByWeight = 3,
        UseBasePose = 4,
        UseMaxValue = 5,
        UseMinValue = 6,
        ECurveBlendOption_MAX = 7,
    }
    public enum EAnimInterpolationType : int
    {
        Linear = 0,
        Step = 1,
        EAnimInterpolationType_MAX = 2,
    }
    public enum EAxisOption : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        X_Neg = 3,
        Y_Neg = 4,
        Z_Neg = 5,
        Custom = 6,
        EAxisOption_MAX = 7,
    }
    public enum EComponentType : int
    {
        None = 0,
        TranslationX = 1,
        TranslationY = 2,
        TranslationZ = 3,
        RotationX = 4,
        RotationY = 5,
        RotationZ = 6,
        Scale = 7,
        ScaleX = 8,
        ScaleY = 9,
        ScaleZ = 10,
        EComponentType_MAX = 11,
    }
    public enum EAudioOutputTarget : int
    {
        Speaker = 0,
        Controller = 1,
        ControllerFallbackToSpeaker = 2,
        EAudioOutputTarget_MAX = 3,
    }
    public enum EBlendableLocation : int
    {
        BL_AfterTonemapping = 0,
        BL_BeforeTonemapping = 1,
        BL_BeforeTranslucency = 2,
        BL_ReplacingTonemapper = 3,
        BL_SSRInput = 4,
        BL_MAX = 5,
    }
    public enum EBlendSpaceAxis : int
    {
        BSA_None = 0,
        BSA_X = 1,
        BSA_Y = 2,
        BSA_MAX = 3,
    }
    public enum EPreferredTriangulationDirection : int
    {
        None = 0,
        Tangential = 1,
        Radial = 2,
        EPreferredTriangulationDirection_MAX = 3,
    }
    public enum ENotifyTriggerMode : int
    {
        AllAnimations = 0,
        HighestWeightedAnimation = 1,
        None = 2,
        ENotifyTriggerMode_MAX = 3,
    }
    public enum EBlueprintStatus : int
    {
        BS_Unknown = 0,
        BS_Dirty = 1,
        BS_Error = 2,
        BS_UpToDate = 3,
        BS_BeingCreated = 4,
        BS_UpToDateWithWarnings = 5,
        BS_MAX = 6,
    }
    public enum EBlueprintType : int
    {
        BPTYPE_Normal = 0,
        BPTYPE_Const = 1,
        BPTYPE_MacroLibrary = 2,
        BPTYPE_Interface = 3,
        BPTYPE_LevelScript = 4,
        BPTYPE_FunctionLibrary = 5,
        BPTYPE_MAX = 6,
    }
    public enum EBlueprintCompileMode : int
    {
        Default = 0,
        Development = 1,
        FinalRelease = 2,
        EBlueprintCompileMode_MAX = 3,
    }
    public enum EBlueprintNativizationFlag : int
    {
        Disabled = 0,
        Dependency = 1,
        ExplicitlyEnabled = 2,
        EBlueprintNativizationFlag_MAX = 3,
    }
    public enum EShouldCookBlueprintPropertyGuids : int
    {
        No = 0,
        Yes = 1,
        Inherit = 2,
        EShouldCookBlueprintPropertyGuids_MAX = 3,
    }
    public enum ECsgOper : int
    {
        CSG_Active = 0,
        CSG_Add = 1,
        CSG_Subtract = 2,
        CSG_Intersect = 3,
        CSG_Deintersect = 4,
        CSG_None = 5,
        CSG_MAX = 6,
    }
    public enum EBrushType : int
    {
        Brush_Default = 0,
        Brush_Add = 1,
        Brush_Subtract = 2,
        Brush_MAX = 3,
    }
    public enum ECameraProjectionMode : int
    {
        Perspective = 0,
        Orthographic = 1,
        ECameraProjectionMode_MAX = 2,
    }
    public enum ECloudStorageDelegate : int
    {
        CSD_KeyValueReadComplete = 0,
        CSD_KeyValueWriteComplete = 1,
        CSD_ValueChanged = 2,
        CSD_DocumentQueryComplete = 3,
        CSD_DocumentReadComplete = 4,
        CSD_DocumentWriteComplete = 5,
        CSD_DocumentConflictDetected = 6,
        CSD_MAX = 7,
    }
    public enum EContentBundleClientState : int
    {
        Unregistered = 0,
        Registered = 1,
        ContentInjectionRequested = 2,
        ContentRemovalRequested = 3,
        RegistrationFailed = 4,
        EContentBundleClientState_MAX = 5,
    }
    public enum EWorldContentState : int
    {
        NoContent = 0,
        ContentBundleInjected = 1,
        ContentBundleInjectionFailed = 2,
        EWorldContentState_MAX = 3,
    }
    public enum EContentBundleStatus : int
    {
        Registered = 0,
        ReadyToInject = 1,
        FailedToInject = 2,
        ContentInjected = 3,
        Unknown = -1,
        EContentBundleStatus_MAX = 4,
    }
    public enum ECustomAttributeBlendType : int
    {
        Override = 0,
        Blend = 1,
        ECustomAttributeBlendType_MAX = 2,
    }
    public enum EDataLayerType : int
    {
        Runtime = 0,
        Editor = 1,
        Unknown = 2,
        Size = 3,
        EDataLayerType_MAX = 4,
    }
    public enum DistributionParamMode : int
    {
        DPM_Normal = 0,
        DPM_Abs = 1,
        DPM_Direct = 2,
        DPM_MAX = 3,
    }
    public enum EDistributionVectorLockFlags : int
    {
        EDVLF_None = 0,
        EDVLF_XY = 1,
        EDVLF_XZ = 2,
        EDVLF_YZ = 3,
        EDVLF_XYZ = 4,
        EDVLF_MAX = 5,
    }
    public enum EDistributionVectorMirrorFlags : int
    {
        EDVMF_Same = 0,
        EDVMF_Different = 1,
        EDVMF_Mirror = 2,
        EDVMF_MAX = 3,
    }
    public enum EEdGraphPinDirection : int
    {
        EGPD_Input = 0,
        EGPD_Output = 1,
        EGPD_MAX = 2,
    }
    public enum EPinContainerType : int
    {
        None = 0,
        Array = 1,
        Set = 2,
        Map = 3,
        EPinContainerType_MAX = 4,
    }
    public enum ENodeTitleType : int
    {
        FullTitle = 0,
        ListView = 1,
        EditableTitle = 2,
        MenuTitle = 3,
        MAX_TitleTypes = 4,
        ENodeTitleType_MAX = 5,
    }
    public enum ENodeAdvancedPins : int
    {
        NoPins = 0,
        Shown = 1,
        Hidden = 2,
        ENodeAdvancedPins_MAX = 3,
    }
    public enum ENodeEnabledState : int
    {
        Enabled = 0,
        Disabled = 1,
        DevelopmentOnly = 2,
        ENodeEnabledState_MAX = 3,
    }
    public enum EBlueprintPinStyleType : int
    {
        BPST_Original = 0,
        BPST_VariantA = 1,
        BPST_MAX = 2,
    }
    public enum EGraphType : int
    {
        GT_Function = 0,
        GT_Ubergraph = 1,
        GT_Macro = 2,
        GT_Animation = 3,
        GT_StateMachine = 4,
        GT_MAX = 5,
    }
    public enum ECanCreateConnectionResponse : int
    {
        CONNECT_RESPONSE_MAKE = 0,
        CONNECT_RESPONSE_DISALLOW = 1,
        CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
        CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
        CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
        CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
        CONNECT_RESPONSE_MAKE_WITH_PROMOTION = 6,
        CONNECT_RESPONSE_MAX = 7,
    }
    public enum EFullyLoadPackageType : int
    {
        FULLYLOAD_Map = 0,
        FULLYLOAD_Game_PreLoadClass = 1,
        FULLYLOAD_Game_PostLoadClass = 2,
        FULLYLOAD_Always = 3,
        FULLYLOAD_Mutator = 4,
        FULLYLOAD_MAX = 5,
    }
    public enum ETransitionType : int
    {
        None = 0,
        Paused = 1,
        Loading = 2,
        Saving = 3,
        Connecting = 4,
        Precaching = 5,
        WaitingToConnect = 6,
        MAX = 7,
    }
    public enum ENetworkLagState : int
    {
        NotLagging = 0,
        Lagging = 1,
        ENetworkLagState_MAX = 2,
    }
    public enum EDemoPlayFailure : int
    {
        Generic = 0,
        DemoNotFound = 1,
        Corrupt = 2,
        InvalidVersion = 3,
        InitBase = 4,
        GameSpecificHeader = 5,
        ReplayStreamerInternal = 6,
        LoadMap = 7,
        Serialization = 8,
        EDemoPlayFailure_MAX = 9,
    }
    public enum EViewModeIndex : int
    {
        VMI_BrushWireframe = 0,
        VMI_Wireframe = 1,
        VMI_Unlit = 2,
        VMI_Lit = 3,
        VMI_Lit_DetailLighting = 4,
        VMI_LightingOnly = 5,
        VMI_LightComplexity = 6,
        VMI_ShaderComplexity = 8,
        VMI_LightmapDensity = 9,
        VMI_LitLightmapDensity = 10,
        VMI_ReflectionOverride = 11,
        VMI_VisualizeBuffer = 12,
        VMI_StationaryLightOverlap = 14,
        VMI_CollisionPawn = 15,
        VMI_CollisionVisibility = 16,
        VMI_LODColoration = 18,
        VMI_QuadOverdraw = 19,
        VMI_PrimitiveDistanceAccuracy = 20,
        VMI_MeshUVDensityAccuracy = 21,
        VMI_ShaderComplexityWithQuadOverdraw = 22,
        VMI_HLODColoration = 23,
        VMI_GroupLODColoration = 24,
        VMI_MaterialTextureScaleAccuracy = 25,
        VMI_RequiredTextureResolution = 26,
        VMI_PathTracing = 27,
        VMI_RayTracingDebug = 28,
        VMI_VisualizeNanite = 29,
        VMI_VirtualTexturePendingMips = 30,
        VMI_VisualizeLumen = 31,
        VMI_VisualizeVirtualShadowMap = 32,
        VMI_VisualizeGPUSkinCache = 33,
        VMI_Max = 34,
        VMI_Unknown = 255,
    }
    public enum EAspectRatioAxisConstraint : int
    {
        AspectRatio_MaintainYFOV = 0,
        AspectRatio_MaintainXFOV = 1,
        AspectRatio_MajorAxisFOV = 2,
        AspectRatio_MAX = 3,
    }
    public enum EOcclusionCombineMode : int
    {
        OCM_Minimum = 0,
        OCM_Multiply = 1,
        OCM_MAX = 2,
    }
    public enum EBlendMode : int
    {
        BLEND_Opaque = 0,
        BLEND_Masked = 1,
        BLEND_Translucent = 2,
        BLEND_Additive = 3,
        BLEND_Modulate = 4,
        BLEND_AlphaComposite = 5,
        BLEND_AlphaHoldout = 6,
        BLEND_MAX = 7,
    }
    public enum EStrataBlendMode : int
    {
        SBM_Opaque = 0,
        SBM_Masked = 1,
        SBM_TranslucentGreyTransmittance = 2,
        SBM_TranslucentColoredTransmittance = 3,
        SBM_ColoredTransmittanceOnly = 4,
        SBM_AlphaHoldout = 5,
        SBM_MAX = 6,
    }
    public enum EMaterialFloatPrecisionMode : int
    {
        MFPM_Default = 0,
        MFPM_Full_MaterialExpressionOnly = 1,
        MFPM_Full = 2,
        MFPM_Half = 3,
        MFPM_MAX = 4,
    }
    public enum ESamplerSourceMode : int
    {
        SSM_FromTextureAsset = 0,
        SSM_Wrap_WorldGroupSettings = 1,
        SSM_Clamp_WorldGroupSettings = 2,
        SSM_TerrainWeightmapGroupSettings = 3,
        SSM_MAX = 4,
    }
    public enum ETextureMipValueMode : int
    {
        TMVM_None = 0,
        TMVM_MipLevel = 1,
        TMVM_MipBias = 2,
        TMVM_Derivative = 3,
        TMVM_MAX = 4,
    }
    public enum ETranslucencyLightingMode : int
    {
        TLM_VolumetricNonDirectional = 0,
        TLM_VolumetricDirectional = 1,
        TLM_VolumetricPerVertexNonDirectional = 2,
        TLM_VolumetricPerVertexDirectional = 3,
        TLM_Surface = 4,
        TLM_SurfacePerPixelLighting = 5,
        TLM_MAX = 6,
    }
    public enum ERefractionMode : int
    {
        RM_IndexOfRefraction = 0,
        RM_PixelNormalOffset = 1,
        RM_MAX = 2,
    }
    public enum ETranslucentSortPolicy : int
    {
        SortByDistance = 0,
        SortByProjectedZ = 1,
        SortAlongAxis = 2,
        ETranslucentSortPolicy_MAX = 3,
    }
    public enum EDynamicGlobalIlluminationMethod : int
    {
        None = 0,
        Lumen = 1,
        ScreenSpace = 2,
        RayTraced = 3,
        Plugin = 4,
        EDynamicGlobalIlluminationMethod_MAX = 5,
    }
    public enum EReflectionMethod : int
    {
        None = 0,
        Lumen = 1,
        ScreenSpace = 2,
        RayTraced = 3,
        EReflectionMethod_MAX = 4,
    }
    public enum EShadowMapMethod : int
    {
        ShadowMaps = 0,
        VirtualShadowMaps = 1,
        EShadowMapMethod_MAX = 2,
    }
    public enum ECastRayTracedShadow : int
    {
        Disabled = 0,
        UseProjectSetting = 1,
        Enabled = 2,
        ECastRayTracedShadow_MAX = 3,
    }
    public enum ESceneCaptureSource : int
    {
        SCS_SceneColorHDR = 0,
        SCS_SceneColorHDRNoAlpha = 1,
        SCS_FinalColorLDR = 2,
        SCS_SceneColorSceneDepth = 3,
        SCS_SceneDepth = 4,
        SCS_DeviceDepth = 5,
        SCS_Normal = 6,
        SCS_BaseColor = 7,
        SCS_FinalColorHDR = 8,
        SCS_FinalToneCurveHDR = 9,
        SCS_MAX = 10,
    }
    public enum ESceneCaptureCompositeMode : int
    {
        SCCM_Overwrite = 0,
        SCCM_Additive = 1,
        SCCM_Composite = 2,
        SCCM_MAX = 3,
    }
    public enum EGBufferFormat : int
    {
        Force8BitsPerChannel = 0,
        Default = 1,
        HighPrecisionNormals = 3,
        Force16BitsPerChannel = 5,
        EGBufferFormat_MAX = 6,
    }
    public enum ETrailWidthMode : int
    {
        ETrailWidthMode_FromCentre = 0,
        ETrailWidthMode_FromFirst = 1,
        ETrailWidthMode_FromSecond = 2,
        ETrailWidthMode_MAX = 3,
    }
    public enum EParticleCollisionMode : int
    {
        SceneDepth = 0,
        DistanceField = 1,
        EParticleCollisionMode_MAX = 2,
    }
    public enum EMaterialShadingModel : int
    {
        MSM_Unlit = 0,
        MSM_DefaultLit = 1,
        MSM_Subsurface = 2,
        MSM_PreintegratedSkin = 3,
        MSM_ClearCoat = 4,
        MSM_SubsurfaceProfile = 5,
        MSM_TwoSidedFoliage = 6,
        MSM_Hair = 7,
        MSM_Cloth = 8,
        MSM_Eye = 9,
        MSM_SingleLayerWater = 10,
        MSM_ThinTranslucent = 11,
        MSM_Strata = 12,
        MSM_NUM = 13,
        MSM_FromMaterialExpression = 14,
        MSM_MAX = 15,
    }
    public enum EStrataShadingModel : int
    {
        SSM_Unlit = 0,
        SSM_DefaultLit = 1,
        SSM_SubsurfaceLit = 2,
        SSM_VolumetricFogCloud = 3,
        SSM_Hair = 4,
        SSM_Eye = 5,
        SSM_SingleLayerWater = 6,
        SSM_LightFunction = 7,
        SSM_PostProcess = 8,
        SSM_Decal = 9,
        SSM_NUM = 10,
    }
    public enum EMaterialSamplerType : int
    {
        SAMPLERTYPE_Color = 0,
        SAMPLERTYPE_Grayscale = 1,
        SAMPLERTYPE_Alpha = 2,
        SAMPLERTYPE_Normal = 3,
        SAMPLERTYPE_Masks = 4,
        SAMPLERTYPE_DistanceFieldFont = 5,
        SAMPLERTYPE_LinearColor = 6,
        SAMPLERTYPE_LinearGrayscale = 7,
        SAMPLERTYPE_Data = 8,
        SAMPLERTYPE_External = 9,
        SAMPLERTYPE_VirtualColor = 10,
        SAMPLERTYPE_VirtualGrayscale = 11,
        SAMPLERTYPE_VirtualAlpha = 12,
        SAMPLERTYPE_VirtualNormal = 13,
        SAMPLERTYPE_VirtualMasks = 14,
        SAMPLERTYPE_VirtualLinearColor = 15,
        SAMPLERTYPE_VirtualLinearGrayscale = 16,
        SAMPLERTYPE_MAX = 17,
    }
    public enum EMaterialStencilCompare : int
    {
        MSC_Less = 0,
        MSC_LessEqual = 1,
        MSC_Greater = 2,
        MSC_GreaterEqual = 3,
        MSC_Equal = 4,
        MSC_NotEqual = 5,
        MSC_Never = 6,
        MSC_Always = 7,
        MSC_Count = 8,
        MSC_MAX = 9,
    }
    public enum EMaterialShadingRate : int
    {
        MSR_1x1 = 0,
        MSR_2x1 = 1,
        MSR_1x2 = 2,
        MSR_2x2 = 3,
        MSR_4x2 = 4,
        MSR_2x4 = 5,
        MSR_4x4 = 6,
        MSR_Count = 7,
        MSR_MAX = 8,
    }
    public enum ELightingBuildQuality : int
    {
        Quality_Preview = 0,
        Quality_Medium = 1,
        Quality_High = 2,
        Quality_Production = 3,
        Quality_MAX = 4,
    }
    public enum EOverlapFilterOption : int
    {
        OverlapFilter_All = 0,
        OverlapFilter_DynamicOnly = 1,
        OverlapFilter_StaticOnly = 2,
        OverlapFilter_MAX = 3,
    }
    public enum EFilterInterpolationType : int
    {
        BSIT_Average = 0,
        BSIT_Linear = 1,
        BSIT_Cubic = 2,
        BSIT_EaseInOut = 3,
        BSIT_ExponentialDecay = 4,
        BSIT_SpringDamper = 5,
        BSIT_MAX = 6,
    }
    public enum ETimelineSigType : int
    {
        ETS_EventSignature = 0,
        ETS_FloatSignature = 1,
        ETS_VectorSignature = 2,
        ETS_LinearColorSignature = 3,
        ETS_InvalidSignature = 4,
        ETS_MAX = 5,
    }
    public enum ELightMapPaddingType : int
    {
        LMPT_NormalPadding = 0,
        LMPT_PrePadding = 1,
        LMPT_NoPadding = 2,
        LMPT_MAX = 3,
    }
    public enum EShadowMapFlags : int
    {
        SMF_None = 0,
        SMF_Streamed = 1,
        SMF_MAX = 2,
    }
    public enum EUpdateRateShiftBucket : int
    {
        ShiftBucket0 = 0,
        ShiftBucket1 = 1,
        ShiftBucket2 = 2,
        ShiftBucket3 = 3,
        ShiftBucket4 = 4,
        ShiftBucket5 = 5,
        ShiftBucketMax = 6,
        EUpdateRateShiftBucket_MAX = 7,
    }
    public enum EPhysicalMaterialMaskColor : int
    {
        Red = 0,
        Green = 1,
        Blue = 2,
        Cyan = 3,
        Magenta = 4,
        Yellow = 5,
        White = 6,
        Black = 7,
        MAX = 8,
    }
    public enum EComponentSocketType : int
    {
        Invalid = 0,
        Bone = 1,
        Socket = 2,
        EComponentSocketType_MAX = 3,
    }
    public enum EMeshBufferAccess : int
    {
        Default = 0,
        ForceCPUAndGPU = 1,
        EMeshBufferAccess_MAX = 2,
    }
    public enum EFontImportCharacterSet : int
    {
        FontICS_Default = 0,
        FontICS_Ansi = 1,
        FontICS_Symbol = 2,
        FontICS_MAX = 3,
    }
    public enum EStandbyType : int
    {
        STDBY_Rx = 0,
        STDBY_Tx = 1,
        STDBY_BadPing = 2,
        STDBY_MAX = 3,
    }
    public enum ESuggestProjVelocityTraceOption : int
    {
        DoNotTrace = 0,
        TraceFullPath = 1,
        OnlyTraceWhileAscending = 2,
        ESuggestProjVelocityTraceOption_MAX = 3,
    }
    public enum EHISMViewRelevanceType : int
    {
        Grass = 0,
        Foliage = 1,
        HISM = 2,
        EHISMViewRelevanceType_MAX = 3,
    }
    public enum EHitProxyPriority : int
    {
        HPP_World = 0,
        HPP_Wireframe = 1,
        HPP_Foreground = 2,
        HPP_UI = 3,
        HPP_MAX = 4,
    }
    public enum EHLODBatchingPolicy : int
    {
        None = 0,
        MeshSection = 1,
        Instancing = 2,
        EHLODBatchingPolicy_MAX = 3,
    }
    public enum EAdManagerDelegate : int
    {
        AMD_ClickedBanner = 0,
        AMD_UserClosedAd = 1,
        AMD_MAX = 2,
    }
    public enum EScreenPercentageMode : int
    {
        Manual = 0,
        BasedOnDisplayResolution = 1,
        BasedOnDPIScale = 2,
        EScreenPercentageMode_MAX = 3,
    }
    public enum ELevelInstanceRuntimeBehavior : int
    {
        None = 0,
        Embedded_Deprecated = 1,
        Partitioned = 2,
        LevelStreaming = 3,
        ELevelInstanceRuntimeBehavior_MAX = 4,
    }
    public enum ELevelInstanceCreationType : int
    {
        LevelInstance = 0,
        PackedLevelActor = 1,
        ELevelInstanceCreationType_MAX = 2,
    }
    public enum ELevelInstancePivotType : int
    {
        CenterMinZ = 0,
        Center = 1,
        Actor = 2,
        WorldOrigin = 3,
        ELevelInstancePivotType_MAX = 4,
    }
    public enum EStreamingVolumeUsage : int
    {
        SVB_Loading = 0,
        SVB_LoadingAndVisibility = 1,
        SVB_VisibilityBlockingOnLoad = 2,
        SVB_BlockingOnLoad = 3,
        SVB_LoadingNotVisible = 4,
        SVB_MAX = 5,
    }
    public enum EDecalBlendMode : int
    {
        DBM_Translucent = 0,
        DBM_Stain = 1,
        DBM_Normal = 2,
        DBM_Emissive = 3,
        DBM_DBuffer_ColorNormalRoughness = 4,
        DBM_DBuffer_Color = 5,
        DBM_DBuffer_ColorNormal = 6,
        DBM_DBuffer_ColorRoughness = 7,
        DBM_DBuffer_Normal = 8,
        DBM_DBuffer_NormalRoughness = 9,
        DBM_DBuffer_Roughness = 10,
        DBM_DBuffer_Emissive = 11,
        DBM_DBuffer_AlphaComposite = 12,
        DBM_DBuffer_EmissiveAlphaComposite = 13,
        DBM_Volumetric_DistanceFunction = 14,
        DBM_AlphaComposite = 15,
        DBM_AmbientOcclusion = 16,
        DBM_MAX = 17,
    }
    public enum EMaterialDecalResponse : int
    {
        MDR_None = 0,
        MDR_ColorNormalRoughness = 1,
        MDR_Color = 2,
        MDR_ColorNormal = 3,
        MDR_ColorRoughness = 4,
        MDR_Normal = 5,
        MDR_NormalRoughness = 6,
        MDR_Roughness = 7,
        MDR_MAX = 8,
    }
    public enum EMaterialTranslucencyPass : int
    {
        MTP_BeforeDOF = 0,
        MTP_AfterDOF = 1,
        MTP_AfterMotionBlur = 2,
        MTP_MAX = 3,
    }
    public enum ETextureColorChannel : int
    {
        TCC_Red = 0,
        TCC_Green = 1,
        TCC_Blue = 2,
        TCC_Alpha = 3,
        TCC_MAX = 4,
    }
    public enum EMaterialAttributeBlend : int
    {
        Blend = 0,
        UseA = 1,
        UseB = 2,
        EMaterialAttributeBlend_MAX = 3,
    }
    public enum EChannelMaskParameterColor : int
    {
        Red = 0,
        Green = 1,
        Blue = 2,
        Alpha = 3,
        EChannelMaskParameterColor_MAX = 4,
    }
    public enum EClampMode : int
    {
        CMODE_Clamp = 0,
        CMODE_ClampMin = 1,
        CMODE_ClampMax = 2,
        CMODE_MAX = 3,
    }
    public enum ECustomMaterialOutputType : int
    {
        CMOT_Float1 = 0,
        CMOT_Float2 = 1,
        CMOT_Float3 = 2,
        CMOT_Float4 = 3,
        CMOT_MaterialAttributes = 4,
        CMOT_MAX = 5,
    }
    public enum EDBufferTextureId : int
    {
        DBT_A = 0,
        DBT_B = 1,
        DBT_C = 2,
        DBT_MAX = 3,
    }
    public enum EDepthOfFieldFunctionValue : int
    {
        TDOF_NearAndFarMask = 0,
        TDOF_NearMask = 1,
        TDOF_FarMask = 2,
        TDOF_CircleOfConfusionRadius = 3,
        TDOF_MAX = 4,
    }
    public enum EFunctionInputType : int
    {
        FunctionInput_Scalar = 0,
        FunctionInput_Vector2 = 1,
        FunctionInput_Vector3 = 2,
        FunctionInput_Vector4 = 3,
        FunctionInput_Texture2D = 4,
        FunctionInput_TextureCube = 5,
        FunctionInput_Texture2DArray = 6,
        FunctionInput_VolumeTexture = 7,
        FunctionInput_StaticBool = 8,
        FunctionInput_MaterialAttributes = 9,
        FunctionInput_TextureExternal = 10,
        FunctionInput_MAX = 11,
    }
    public enum ENoiseFunction : int
    {
        NOISEFUNCTION_SimplexTex = 0,
        NOISEFUNCTION_GradientTex = 1,
        NOISEFUNCTION_GradientTex3D = 2,
        NOISEFUNCTION_GradientALU = 3,
        NOISEFUNCTION_ValueALU = 4,
        NOISEFUNCTION_VoronoiALU = 5,
        NOISEFUNCTION_MAX = 6,
    }
    public enum ERuntimeVirtualTextureMipValueMode : int
    {
        RVTMVM_None = 0,
        RVTMVM_MipLevel = 1,
        RVTMVM_MipBias = 2,
        RVTMVM_RecalculateDerivatives = 3,
        RVTMVM_MAX = 4,
    }
    public enum ERuntimeVirtualTextureTextureAddressMode : int
    {
        RVTTA_Clamp = 0,
        RVTTA_Wrap = 1,
        RVTTA_MAX = 2,
    }
    public enum EMaterialSceneAttributeInputMode : int
    {
        Coordinates = 0,
        OffsetFraction = 1,
        EMaterialSceneAttributeInputMode_MAX = 2,
    }
    public enum ESpeedTreeGeometryType : int
    {
        STG_Branch = 0,
        STG_Frond = 1,
        STG_Leaf = 2,
        STG_FacingLeaf = 3,
        STG_Billboard = 4,
        STG_MAX = 5,
    }
    public enum ESpeedTreeWindType : int
    {
        STW_None = 0,
        STW_Fastest = 1,
        STW_Fast = 2,
        STW_Better = 3,
        STW_Best = 4,
        STW_Palm = 5,
        STW_BestPlus = 6,
        STW_MAX = 7,
    }
    public enum ESpeedTreeLODType : int
    {
        STLOD_Pop = 0,
        STLOD_Smooth = 1,
        STLOD_MAX = 2,
    }
    public enum EMaterialExposedTextureProperty : int
    {
        TMTM_TextureSize = 0,
        TMTM_TexelSize = 1,
        TMTM_MAX = 2,
    }
    public enum EMaterialVectorCoordTransformSource : int
    {
        TRANSFORMSOURCE_Tangent = 0,
        TRANSFORMSOURCE_Local = 1,
        TRANSFORMSOURCE_World = 2,
        TRANSFORMSOURCE_View = 3,
        TRANSFORMSOURCE_Camera = 4,
        TRANSFORMSOURCE_ParticleWorld = 5,
        TRANSFORMSOURCE_Instance = 6,
        TRANSFORMSOURCE_MAX = 7,
    }
    public enum EMaterialVectorCoordTransform : int
    {
        TRANSFORM_Tangent = 0,
        TRANSFORM_Local = 1,
        TRANSFORM_World = 2,
        TRANSFORM_View = 3,
        TRANSFORM_Camera = 4,
        TRANSFORM_ParticleWorld = 5,
        TRANSFORM_Instance = 6,
        TRANSFORM_MAX = 7,
    }
    public enum EMaterialPositionTransformSource : int
    {
        TRANSFORMPOSSOURCE_Local = 0,
        TRANSFORMPOSSOURCE_World = 1,
        TRANSFORMPOSSOURCE_TranslatedWorld = 2,
        TRANSFORMPOSSOURCE_View = 3,
        TRANSFORMPOSSOURCE_Camera = 4,
        TRANSFORMPOSSOURCE_Particle = 5,
        TRANSFORMPOSSOURCE_Instance = 6,
        TRANSFORMPOSSOURCE_MAX = 7,
    }
    public enum EVectorNoiseFunction : int
    {
        VNF_CellnoiseALU = 0,
        VNF_VectorALU = 1,
        VNF_GradientALU = 2,
        VNF_CurlALU = 3,
        VNF_VoronoiALU = 4,
        VNF_MAX = 5,
    }
    public enum EMaterialExposedViewProperty : int
    {
        MEVP_BufferSize = 0,
        MEVP_FieldOfView = 1,
        MEVP_TanHalfFieldOfView = 2,
        MEVP_ViewSize = 3,
        MEVP_WorldSpaceViewPosition = 4,
        MEVP_WorldSpaceCameraPosition = 5,
        MEVP_ViewportOffset = 6,
        MEVP_TemporalSampleCount = 7,
        MEVP_TemporalSampleIndex = 8,
        MEVP_TemporalSampleOffset = 9,
        MEVP_RuntimeVirtualTextureOutputLevel = 10,
        MEVP_RuntimeVirtualTextureOutputDerivative = 11,
        MEVP_PreExposure = 12,
        MEVP_RuntimeVirtualTextureMaxLevel = 13,
        MEVP_ResolutionFraction = 14,
        MEVP_MAX = 15,
    }
    public enum EWorldPositionIncludedOffsets : int
    {
        WPT_Default = 0,
        WPT_ExcludeAllShaderOffsets = 1,
        WPT_CameraRelative = 2,
        WPT_CameraRelativeNoOffsets = 3,
        WPT_MAX = 4,
    }
    public enum EMaterialFunctionUsage : int
    {
        Default = 0,
        MaterialLayer = 1,
        MaterialLayerBlend = 2,
        EMaterialFunctionUsage_MAX = 3,
    }
    public enum EMaterialUsage : int
    {
        MATUSAGE_SkeletalMesh = 0,
        MATUSAGE_ParticleSprites = 1,
        MATUSAGE_BeamTrails = 2,
        MATUSAGE_MeshParticles = 3,
        MATUSAGE_StaticLighting = 4,
        MATUSAGE_MorphTargets = 5,
        MATUSAGE_SplineMesh = 6,
        MATUSAGE_InstancedStaticMeshes = 7,
        MATUSAGE_GeometryCollections = 8,
        MATUSAGE_Clothing = 9,
        MATUSAGE_NiagaraSprites = 10,
        MATUSAGE_NiagaraRibbons = 11,
        MATUSAGE_NiagaraMeshParticles = 12,
        MATUSAGE_GeometryCache = 13,
        MATUSAGE_Water = 14,
        MATUSAGE_HairStrands = 15,
        MATUSAGE_LidarPointCloud = 16,
        MATUSAGE_VirtualHeightfieldMesh = 17,
        MATUSAGE_Nanite = 18,
        MATUSAGE_MAX = 19,
    }
    public enum EMaterialLayerLinkState : int
    {
        Uninitialized = 0,
        LinkedToParent = 1,
        UnlinkedFromParent = 2,
        NotFromParent = 3,
        EMaterialLayerLinkState_MAX = 4,
    }
    public enum ETextureSizingType : int
    {
        TextureSizingType_UseSingleTextureSize = 0,
        TextureSizingType_UseAutomaticBiasedSizes = 1,
        TextureSizingType_UseManualOverrideTextureSize = 2,
        TextureSizingType_UseSimplygonAutomaticSizing = 3,
        TextureSizingType_AutomaticFromTexelDensity = 4,
        TextureSizingType_AutomaticFromMeshScreenSize = 5,
        TextureSizingType_AutomaticFromMeshDrawDistance = 6,
        TextureSizingType_MAX = 7,
    }
    public enum EMaterialMergeType : int
    {
        MaterialMergeType_Default = 0,
        MaterialMergeType_Simplygon = 1,
        MaterialMergeType_MAX = 2,
    }
    public enum ESceneTextureId : int
    {
        PPI_SceneColor = 0,
        PPI_SceneDepth = 1,
        PPI_DiffuseColor = 2,
        PPI_SpecularColor = 3,
        PPI_SubsurfaceColor = 4,
        PPI_BaseColor = 5,
        PPI_Specular = 6,
        PPI_Metallic = 7,
        PPI_WorldNormal = 8,
        PPI_SeparateTranslucency = 9,
        PPI_Opacity = 10,
        PPI_Roughness = 11,
        PPI_MaterialAO = 12,
        PPI_CustomDepth = 13,
        PPI_PostProcessInput0 = 14,
        PPI_PostProcessInput1 = 15,
        PPI_PostProcessInput2 = 16,
        PPI_PostProcessInput3 = 17,
        PPI_PostProcessInput4 = 18,
        PPI_PostProcessInput5 = 19,
        PPI_PostProcessInput6 = 20,
        PPI_DecalMask = 21,
        PPI_ShadingModelColor = 22,
        PPI_ShadingModelID = 23,
        PPI_AmbientOcclusion = 24,
        PPI_CustomStencil = 25,
        PPI_StoredBaseColor = 26,
        PPI_StoredSpecular = 27,
        PPI_Velocity = 28,
        PPI_WorldTangent = 29,
        PPI_Anisotropy = 30,
        PPI_MAX = 31,
    }
    public enum EMaterialDomain : int
    {
        MD_Surface = 0,
        MD_DeferredDecal = 1,
        MD_LightFunction = 2,
        MD_Volume = 3,
        MD_PostProcess = 4,
        MD_UI = 5,
        MD_RuntimeVirtualTexture = 6,
        MD_MAX = 7,
    }
    public enum EMaterialParameterAssociation : int
    {
        LayerParameter = 0,
        BlendParameter = 1,
        GlobalParameter = 2,
        EMaterialParameterAssociation_MAX = 3,
    }
    public enum EMicroTransactionDelegate : int
    {
        MTD_PurchaseQueryComplete = 0,
        MTD_PurchaseComplete = 1,
        MTD_MAX = 2,
    }
    public enum EMicroTransactionResult : int
    {
        MTR_Succeeded = 0,
        MTR_Failed = 1,
        MTR_Canceled = 2,
        MTR_RestoredFromServer = 3,
        MTR_MAX = 4,
    }
    public enum ENavLinkDirection : int
    {
        BothWays = 0,
        LeftToRight = 1,
        RightToLeft = 2,
        ENavLinkDirection_MAX = 3,
    }
    public enum EPingType : int
    {
        None = 0,
        RoundTrip = 1,
        RoundTripExclFrame = 2,
        ICMP = 4,
        UDPQoS = 8,
        Max = 8,
        Count = 4,
    }
    public enum EPingAverageType : int
    {
        None = 0,
        MovingAverage = 1,
        PlayerStateAvg = 2,
        EPingAverageType_MAX = 3,
    }
    public enum EParticleBurstMethod : int
    {
        EPBM_Instant = 0,
        EPBM_Interpolated = 1,
        EPBM_MAX = 2,
    }
    public enum EParticleSubUVInterpMethod : int
    {
        PSUVIM_None = 0,
        PSUVIM_Linear = 1,
        PSUVIM_Linear_Blend = 2,
        PSUVIM_Random = 3,
        PSUVIM_Random_Blend = 4,
        PSUVIM_MAX = 5,
    }
    public enum EEmitterRenderMode : int
    {
        ERM_Normal = 0,
        ERM_Point = 1,
        ERM_Cross = 2,
        ERM_LightsOnly = 3,
        ERM_None = 4,
        ERM_MAX = 5,
    }
    public enum EParticleDetailMode : int
    {
        PDM_Low = 0,
        PDM_Medium = 1,
        PDM_High = 2,
        PDM_MAX = 3,
    }
    public enum EParticleSignificanceLevel : int
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Critical = 3,
        Num = 4,
        EParticleSignificanceLevel_MAX = 5,
    }
    public enum EParticleSystemInsignificanceReaction : int
    {
        Auto = 0,
        Complete = 1,
        DisableTick = 2,
        DisableTickAndKill = 3,
        Num = 4,
        EParticleSystemInsignificanceReaction_MAX = 5,
    }
    public enum EModuleType : int
    {
        EPMT_General = 0,
        EPMT_TypeData = 1,
        EPMT_Beam = 2,
        EPMT_Trail = 3,
        EPMT_Spawn = 4,
        EPMT_Required = 5,
        EPMT_Event = 6,
        EPMT_Light = 7,
        EPMT_SubUV = 8,
        EPMT_MAX = 9,
    }
    public enum EParticleSourceSelectionMethod : int
    {
        EPSSM_Random = 0,
        EPSSM_Sequential = 1,
        EPSSM_MAX = 2,
    }
    public enum EAttractorParticleSelectionMethod : int
    {
        EAPSM_Random = 0,
        EAPSM_Sequential = 1,
        EAPSM_MAX = 2,
    }
    public enum Beam2SourceTargetMethod : int
    {
        PEB2STM_Default = 0,
        PEB2STM_UserSet = 1,
        PEB2STM_Emitter = 2,
        PEB2STM_Particle = 3,
        PEB2STM_Actor = 4,
        PEB2STM_MAX = 5,
    }
    public enum Beam2SourceTargetTangentMethod : int
    {
        PEB2STTM_Direct = 0,
        PEB2STTM_UserSet = 1,
        PEB2STTM_Distribution = 2,
        PEB2STTM_Emitter = 3,
        PEB2STTM_MAX = 4,
    }
    public enum BeamModifierType : int
    {
        PEB2MT_Source = 0,
        PEB2MT_Target = 1,
        PEB2MT_MAX = 2,
    }
    public enum EParticleCameraOffsetUpdateMethod : int
    {
        EPCOUM_DirectSet = 0,
        EPCOUM_Additive = 1,
        EPCOUM_Scalar = 2,
        EPCOUM_MAX = 3,
    }
    public enum EParticleCollisionComplete : int
    {
        EPCC_Kill = 0,
        EPCC_Freeze = 1,
        EPCC_HaltCollisions = 2,
        EPCC_FreezeTranslation = 3,
        EPCC_FreezeRotation = 4,
        EPCC_FreezeMovement = 5,
        EPCC_MAX = 6,
    }
    public enum EParticleCollisionResponse : int
    {
        Bounce = 0,
        Stop = 1,
        Kill = 2,
        EParticleCollisionResponse_MAX = 3,
    }
    public enum ELocationBoneSocketSource : int
    {
        BONESOCKETSOURCE_Bones = 0,
        BONESOCKETSOURCE_Sockets = 1,
        BONESOCKETSOURCE_MAX = 2,
    }
    public enum ELocationBoneSocketSelectionMethod : int
    {
        BONESOCKETSEL_Sequential = 0,
        BONESOCKETSEL_Random = 1,
        BONESOCKETSEL_MAX = 2,
    }
    public enum ELocationEmitterSelectionMethod : int
    {
        ELESM_Random = 0,
        ELESM_Sequential = 1,
        ELESM_MAX = 2,
    }
    public enum CylinderHeightAxis : int
    {
        PMLPC_HEIGHTAXIS_X = 0,
        PMLPC_HEIGHTAXIS_Y = 1,
        PMLPC_HEIGHTAXIS_Z = 2,
        PMLPC_HEIGHTAXIS_MAX = 3,
    }
    public enum ELocationSkelVertSurfaceSource : int
    {
        VERTSURFACESOURCE_Vert = 0,
        VERTSURFACESOURCE_Surface = 1,
        VERTSURFACESOURCE_MAX = 2,
    }
    public enum EOrbitChainMode : int
    {
        EOChainMode_Add = 0,
        EOChainMode_Scale = 1,
        EOChainMode_Link = 2,
        EOChainMode_MAX = 3,
    }
    public enum EParticleAxisLock : int
    {
        EPAL_NONE = 0,
        EPAL_X = 1,
        EPAL_Y = 2,
        EPAL_Z = 3,
        EPAL_NEGATIVE_X = 4,
        EPAL_NEGATIVE_Y = 5,
        EPAL_NEGATIVE_Z = 6,
        EPAL_ROTATE_X = 7,
        EPAL_ROTATE_Y = 8,
        EPAL_ROTATE_Z = 9,
        EPAL_MAX = 10,
    }
    public enum EEmitterDynamicParameterValue : int
    {
        EDPV_UserSet = 0,
        EDPV_AutoSet = 1,
        EDPV_VelocityX = 2,
        EDPV_VelocityY = 3,
        EDPV_VelocityZ = 4,
        EDPV_VelocityMag = 5,
        EDPV_MAX = 6,
    }
    public enum EParticleUVFlipMode : int
    {
        None = 0,
        FlipUV = 1,
        FlipUOnly = 2,
        FlipVOnly = 3,
        RandomFlipUV = 4,
        RandomFlipUOnly = 5,
        RandomFlipVOnly = 6,
        RandomFlipUVIndependent = 7,
        EParticleUVFlipMode_MAX = 8,
    }
    public enum EParticleSortMode : int
    {
        PSORTMODE_None = 0,
        PSORTMODE_ViewProjDepth = 1,
        PSORTMODE_DistanceToView = 2,
        PSORTMODE_Age_OldestFirst = 3,
        PSORTMODE_Age_NewestFirst = 4,
        PSORTMODE_MAX = 5,
    }
    public enum EEmitterNormalsMode : int
    {
        ENM_CameraFacing = 0,
        ENM_Spherical = 1,
        ENM_Cylindrical = 2,
        ENM_MAX = 3,
    }
    public enum ETrail2SourceMethod : int
    {
        PET2SRCM_Default = 0,
        PET2SRCM_Particle = 1,
        PET2SRCM_Actor = 2,
        PET2SRCM_MAX = 3,
    }
    public enum EBeam2Method : int
    {
        PEB2M_Distance = 0,
        PEB2M_Target = 1,
        PEB2M_Branch = 2,
        PEB2M_MAX = 3,
    }
    public enum EBeamTaperMethod : int
    {
        PEBTM_None = 0,
        PEBTM_Full = 1,
        PEBTM_Partial = 2,
        PEBTM_MAX = 3,
    }
    public enum EMeshScreenAlignment : int
    {
        PSMA_MeshFaceCameraWithRoll = 0,
        PSMA_MeshFaceCameraWithSpin = 1,
        PSMA_MeshFaceCameraWithLockedAxis = 2,
        PSMA_MAX = 3,
    }
    public enum EMeshCameraFacingUpAxis : int
    {
        CameraFacing_NoneUP = 0,
        CameraFacing_ZUp = 1,
        CameraFacing_NegativeZUp = 2,
        CameraFacing_YUp = 3,
        CameraFacing_NegativeYUp = 4,
        CameraFacing_MAX = 5,
    }
    public enum EMeshCameraFacingOptions : int
    {
        XAxisFacing_NoUp = 0,
        XAxisFacing_ZUp = 1,
        XAxisFacing_NegativeZUp = 2,
        XAxisFacing_YUp = 3,
        XAxisFacing_NegativeYUp = 4,
        LockedAxis_ZAxisFacing = 5,
        LockedAxis_NegativeZAxisFacing = 6,
        LockedAxis_YAxisFacing = 7,
        LockedAxis_NegativeYAxisFacing = 8,
        VelocityAligned_ZAxisFacing = 9,
        VelocityAligned_NegativeZAxisFacing = 10,
        VelocityAligned_YAxisFacing = 11,
        VelocityAligned_NegativeYAxisFacing = 12,
        EMeshCameraFacingOptions_MAX = 13,
    }
    public enum ETrailsRenderAxisOption : int
    {
        Trails_CameraUp = 0,
        Trails_SourceUp = 1,
        Trails_WorldUp = 2,
        Trails_MAX = 3,
    }
    public enum EParticleScreenAlignment : int
    {
        PSA_FacingCameraPosition = 0,
        PSA_Square = 1,
        PSA_Rectangle = 2,
        PSA_Velocity = 3,
        PSA_AwayFromCenter = 4,
        PSA_TypeSpecific = 5,
        PSA_FacingCameraDistanceBlend = 6,
        PSA_MAX = 7,
    }
    public enum EParticleSystemUpdateMode : int
    {
        EPSUM_RealTime = 0,
        EPSUM_FixedTime = 1,
        EPSUM_MAX = 2,
    }
    public enum ParticleSystemLODMethod : int
    {
        PARTICLESYSTEMLODMETHOD_Automatic = 0,
        PARTICLESYSTEMLODMETHOD_DirectSet = 1,
        PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
        PARTICLESYSTEMLODMETHOD_MAX = 3,
    }
    public enum EParticleSystemOcclusionBoundsMethod : int
    {
        EPSOBM_None = 0,
        EPSOBM_ParticleBounds = 1,
        EPSOBM_CustomBounds = 2,
        EPSOBM_MAX = 3,
    }
    public enum EParticleSysParamType : int
    {
        PSPT_None = 0,
        PSPT_Scalar = 1,
        PSPT_ScalarRand = 2,
        PSPT_Vector = 3,
        PSPT_VectorRand = 4,
        PSPT_Color = 5,
        PSPT_Actor = 6,
        PSPT_Material = 7,
        PSPT_VectorUnitRand = 8,
        PSPT_MAX = 9,
    }
    public enum ParticleReplayState : int
    {
        PRS_Disabled = 0,
        PRS_Capturing = 1,
        PRS_Replaying = 2,
        PRS_MAX = 3,
    }
    public enum EParticleEventType : int
    {
        EPET_Any = 0,
        EPET_Spawn = 1,
        EPET_Death = 2,
        EPET_Collision = 3,
        EPET_Burst = 4,
        EPET_Blueprint = 5,
        EPET_MAX = 6,
    }
    public enum ERichCurveInterpMode : int
    {
        RCIM_Linear = 0,
        RCIM_Constant = 1,
        RCIM_Cubic = 2,
        RCIM_None = 3,
        RCIM_MAX = 4,
    }
    public enum ERichCurveExtrapolation : int
    {
        RCCE_Cycle = 0,
        RCCE_CycleWithOffset = 1,
        RCCE_Oscillate = 2,
        RCCE_Linear = 3,
        RCCE_Constant = 4,
        RCCE_None = 5,
        RCCE_MAX = 6,
    }
    public enum EReplayResult : int
    {
        Success = 0,
        ReplayNotFound = 1,
        Corrupt = 2,
        UnsupportedCheckpoint = 3,
        GameSpecific = 4,
        InitConnect = 5,
        LoadMap = 6,
        Serialization = 7,
        StreamerError = 8,
        ConnectionClosed = 9,
        MissingArchive = 10,
        Unknown = 11,
        EReplayResult_MAX = 12,
    }
    public enum ReverbPreset : int
    {
        REVERB_Default = 0,
        REVERB_Bathroom = 1,
        REVERB_StoneRoom = 2,
        REVERB_Auditorium = 3,
        REVERB_ConcertHall = 4,
        REVERB_Cave = 5,
        REVERB_Hallway = 6,
        REVERB_StoneCorridor = 7,
        REVERB_Alley = 8,
        REVERB_Forest = 9,
        REVERB_City = 10,
        REVERB_Mountains = 11,
        REVERB_Quarry = 12,
        REVERB_Plain = 13,
        REVERB_ParkingLot = 14,
        REVERB_SewerPipe = 15,
        REVERB_Underwater = 16,
        REVERB_SmallRoom = 17,
        REVERB_MediumRoom = 18,
        REVERB_LargeRoom = 19,
        REVERB_MediumHall = 20,
        REVERB_LargeHall = 21,
        REVERB_Plate = 22,
        REVERB_MAX = 23,
    }
    public enum ERichCurveTangentMode : int
    {
        RCTM_Auto = 0,
        RCTM_User = 1,
        RCTM_Break = 2,
        RCTM_None = 3,
        RCTM_MAX = 4,
    }
    public enum ERichCurveTangentWeightMode : int
    {
        RCTWM_WeightedNone = 0,
        RCTWM_WeightedArrive = 1,
        RCTWM_WeightedLeave = 2,
        RCTWM_WeightedBoth = 3,
        RCTWM_MAX = 4,
    }
    public enum ERichCurveCompressionFormat : int
    {
        RCCF_Empty = 0,
        RCCF_Constant = 1,
        RCCF_Linear = 2,
        RCCF_Cubic = 3,
        RCCF_Mixed = 4,
        RCCF_Weighted = 5,
        RCCF_MAX = 6,
    }
    public enum ERichCurveKeyTimeCompressionFormat : int
    {
        RCKTCF_uint16 = 0,
        RCKTCF_float32 = 1,
        RCKTCF_MAX = 2,
    }
    public enum ERuntimeVirtualTextureMaterialType : int
    {
        BaseColor = 0,
        BaseColor_Normal_DEPRECATED = 1,
        BaseColor_Normal_Roughness = 2,
        BaseColor_Normal_Specular = 3,
        BaseColor_Normal_Specular_YCoCg = 4,
        BaseColor_Normal_Specular_Mask_YCoCg = 5,
        WorldHeight = 6,
        Count = 7,
        ERuntimeVirtualTextureMaterialType_MAX = 8,
    }
    public enum EDepthOfFieldMethod : int
    {
        DOFM_BokehDOF = 0,
        DOFM_Gaussian = 1,
        DOFM_CircleDOF = 2,
        DOFM_MAX = 3,
    }
    public enum EAutoExposureMethod : int
    {
        AEM_Histogram = 0,
        AEM_Basic = 1,
        AEM_Manual = 2,
        AEM_MAX = 3,
    }
    public enum EBloomMethod : int
    {
        BM_SOG = 0,
        BM_FFT = 1,
        BM_MAX = 2,
    }
    public enum ETemperatureMethod : int
    {
        TEMP_WhiteBalance = 0,
        TEMP_ColorTemperature = 1,
        TEMP_MAX = 2,
    }
    public enum ELightUnits : int
    {
        Unitless = 0,
        Candelas = 1,
        Lumens = 2,
        ELightUnits_MAX = 3,
    }
    public enum EReflectionsType : int
    {
        ScreenSpace = 0,
        RayTracing = 1,
        EReflectionsType_MAX = 2,
    }
    public enum ELumenRayLightingModeOverride : int
    {
        Default = 0,
        SurfaceCache = 1,
        HitLighting = 2,
        ELumenRayLightingModeOverride_MAX = 3,
    }
    public enum ETranslucencyType : int
    {
        Raster = 0,
        RayTracing = 1,
        ETranslucencyType_MAX = 2,
    }
    public enum ERayTracingGlobalIlluminationType : int
    {
        Disabled = 0,
        BruteForce = 1,
        FinalGather = 2,
        ERayTracingGlobalIlluminationType_MAX = 3,
    }
    public enum EReflectedAndRefractedRayTracedShadows : int
    {
        Disabled = 0,
        Hard_shadows = 1,
        Area_shadows = 2,
        EReflectedAndRefractedRayTracedShadows_MAX = 3,
    }
    public enum EMobilePlanarReflectionMode : int
    {
        Usual = 0,
        MobilePPRExclusive = 1,
        MobilePPR = 2,
        EMobilePlanarReflectionMode_MAX = 3,
    }
    public enum EMobilePixelProjectedReflectionQuality : int
    {
        Disabled = 0,
        BestPerformance = 1,
        BetterQuality = 2,
        BestQuality = 3,
        EMobilePixelProjectedReflectionQuality_MAX = 4,
    }
    public enum EMaterialProperty : int
    {
        MP_EmissiveColor = 0,
        MP_Opacity = 1,
        MP_OpacityMask = 2,
        MP_DiffuseColor = 3,
        MP_SpecularColor = 4,
        MP_BaseColor = 5,
        MP_Metallic = 6,
        MP_Specular = 7,
        MP_Roughness = 8,
        MP_Anisotropy = 9,
        MP_Normal = 10,
        MP_Tangent = 11,
        MP_WorldPositionOffset = 12,
        MP_WorldDisplacement_DEPRECATED = 13,
        MP_TessellationMultiplier_DEPRECATED = 14,
        MP_SubsurfaceColor = 15,
        MP_CustomData0 = 16,
        MP_CustomData1 = 17,
        MP_AmbientOcclusion = 18,
        MP_Refraction = 19,
        MP_CustomizedUVs0 = 20,
        MP_CustomizedUVs1 = 21,
        MP_CustomizedUVs2 = 22,
        MP_CustomizedUVs3 = 23,
        MP_CustomizedUVs4 = 24,
        MP_CustomizedUVs5 = 25,
        MP_CustomizedUVs6 = 26,
        MP_CustomizedUVs7 = 27,
        MP_PixelDepthOffset = 28,
        MP_ShadingModel = 29,
        MP_FrontMaterial = 30,
        MP_MaterialAttributes = 31,
        MP_CustomOutput = 32,
        MP_MAX = 33,
    }
    public enum ESkeletalMeshGeoImportVersions : int
    {
        Before_Versionning = 0,
        SkeletalMeshBuildRefactor = 1,
        VersionPlusOne = 2,
        LatestVersion = 1,
        ESkeletalMeshGeoImportVersions_MAX = 3,
    }
    public enum ESkeletalMeshSkinningImportVersions : int
    {
        Before_Versionning = 0,
        SkeletalMeshBuildRefactor = 1,
        VersionPlusOne = 2,
        LatestVersion = 1,
        ESkeletalMeshSkinningImportVersions_MAX = 3,
    }
    public enum SkeletalMeshTerminationCriterion : int
    {
        SMTC_NumOfTriangles = 0,
        SMTC_NumOfVerts = 1,
        SMTC_TriangleOrVert = 2,
        SMTC_AbsNumOfTriangles = 3,
        SMTC_AbsNumOfVerts = 4,
        SMTC_AbsTriangleOrVert = 5,
        SMTC_MAX = 6,
    }
    public enum SkeletalMeshOptimizationType : int
    {
        SMOT_NumOfTriangles = 0,
        SMOT_MaxDeviation = 1,
        SMOT_TriangleOrDeviation = 2,
        SMOT_MAX = 3,
    }
    public enum SkeletalMeshOptimizationImportance : int
    {
        SMOI_Off = 0,
        SMOI_Lowest = 1,
        SMOI_Low = 2,
        SMOI_Normal = 3,
        SMOI_High = 4,
        SMOI_Highest = 5,
        SMOI_MAX = 6,
    }
    public enum ESkinCacheDefaultBehavior : int
    {
        Exclusive = 0,
        Inclusive = 1,
        ESkinCacheDefaultBehavior_MAX = 2,
    }
    public enum EBoneVisibilityStatus : int
    {
        BVS_HiddenByParent = 0,
        BVS_Visible = 1,
        BVS_ExplicitlyHidden = 2,
        BVS_MAX = 3,
    }
    public enum EBoneSpaces : int
    {
        WorldSpace = 0,
        ComponentSpace = 1,
        EBoneSpaces_MAX = 2,
    }
    public enum ESkyLightSourceType : int
    {
        SLS_CapturedScene = 0,
        SLS_SpecifiedCubemap = 1,
        SLS_MAX = 2,
    }
    public enum ESoundDistanceCalc : int
    {
        SOUNDDISTANCE_Normal = 0,
        SOUNDDISTANCE_InfiniteXYPlane = 1,
        SOUNDDISTANCE_InfiniteXZPlane = 2,
        SOUNDDISTANCE_InfiniteYZPlane = 3,
        SOUNDDISTANCE_MAX = 4,
    }
    public enum ESoundSpatializationAlgorithm : int
    {
        SPATIALIZATION_Default = 0,
        SPATIALIZATION_HRTF = 1,
        SPATIALIZATION_MAX = 2,
    }
    public enum EAirAbsorptionMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        EAirAbsorptionMethod_MAX = 2,
    }
    public enum EReverbSendMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        EReverbSendMethod_MAX = 3,
    }
    public enum ESubmixSendMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESubmixSendMethod_MAX = 3,
    }
    public enum EPriorityAttenuationMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        EPriorityAttenuationMethod_MAX = 3,
    }
    public enum ESoundGroup : int
    {
        SOUNDGROUP_Default = 0,
        SOUNDGROUP_Effects = 1,
        SOUNDGROUP_UI = 2,
        SOUNDGROUP_Music = 3,
        SOUNDGROUP_Voice = 4,
        SOUNDGROUP_GameSoundGroup1 = 5,
        SOUNDGROUP_GameSoundGroup2 = 6,
        SOUNDGROUP_GameSoundGroup3 = 7,
        SOUNDGROUP_GameSoundGroup4 = 8,
        SOUNDGROUP_GameSoundGroup5 = 9,
        SOUNDGROUP_GameSoundGroup6 = 10,
        SOUNDGROUP_GameSoundGroup7 = 11,
        SOUNDGROUP_GameSoundGroup8 = 12,
        SOUNDGROUP_GameSoundGroup9 = 13,
        SOUNDGROUP_GameSoundGroup10 = 14,
        SOUNDGROUP_GameSoundGroup11 = 15,
        SOUNDGROUP_GameSoundGroup12 = 16,
        SOUNDGROUP_GameSoundGroup13 = 17,
        SOUNDGROUP_GameSoundGroup14 = 18,
        SOUNDGROUP_GameSoundGroup15 = 19,
        SOUNDGROUP_GameSoundGroup16 = 20,
        SOUNDGROUP_GameSoundGroup17 = 21,
        SOUNDGROUP_GameSoundGroup18 = 22,
        SOUNDGROUP_GameSoundGroup19 = 23,
        SOUNDGROUP_GameSoundGroup20 = 24,
        SOUNDGROUP_MAX = 25,
    }
    public enum ModulationParamMode : int
    {
        MPM_Normal = 0,
        MPM_Abs = 1,
        MPM_Direct = 2,
        MPM_MAX = 3,
    }
    public enum ESourceBusSendLevelControlMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESourceBusSendLevelControlMethod_MAX = 3,
    }
    public enum EDecompressionType : int
    {
        DTYPE_Setup = 0,
        DTYPE_Invalid = 1,
        DTYPE_Preview = 2,
        DTYPE_Native = 3,
        DTYPE_RealTime = 4,
        DTYPE_Procedural = 5,
        DTYPE_Xenon = 6,
        DTYPE_Streaming = 7,
        DTYPE_MAX = 8,
    }
    public enum ESoundWaveFFTSize : int
    {
        VerySmall_65 = 0,
        Small_257 = 1,
        Medium_513 = 2,
        Large_1025 = 3,
        VeryLarge_2049 = 4,
        ESoundWaveFFTSize_MAX = 5,
    }
    public enum ESoundAssetCompressionType : int
    {
        BinkAudio = 0,
        ADPCM = 1,
        PCM = 2,
        PlatformSpecific = 3,
        ProjectDefined = 4,
        ESoundAssetCompressionType_MAX = 5,
    }
    public enum ESoundWaveLoadingBehavior : int
    {
        Inherited = 0,
        RetainOnLoad = 1,
        PrimeOnLoad = 2,
        LoadOnDemand = 3,
        ForceInline = 4,
        Uninitialized = 255,
        ESoundWaveLoadingBehavior_MAX = 256,
    }
    public enum ENormalMode : int
    {
        NM_PreserveSmoothingGroups = 0,
        NM_RecalculateNormals = 1,
        NM_RecalculateNormalsSmooth = 2,
        NM_RecalculateNormalsHard = 3,
        TEMP_BROKEN = 4,
        ENormalMode_MAX = 5,
    }
    public enum EImportanceLevel : int
    {
        IL_Off = 0,
        IL_Lowest = 1,
        IL_Low = 2,
        IL_Normal = 3,
        IL_High = 4,
        IL_Highest = 5,
        TEMP_BROKEN2 = 6,
        EImportanceLevel_MAX = 7,
    }
    public enum EOptimizationType : int
    {
        OT_NumOfTriangles = 0,
        OT_MaxDeviation = 1,
        OT_MAX = 2,
    }
    public enum EStereoLayerType : int
    {
        SLT_WorldLocked = 0,
        SLT_TrackerLocked = 1,
        SLT_FaceLocked = 2,
        SLT_MAX = 3,
    }
    public enum EStereoLayerShape : int
    {
        SLSH_QuadLayer = 0,
        SLSH_CylinderLayer = 1,
        SLSH_CubemapLayer = 2,
        SLSH_EquirectLayer = 3,
        SLSH_MAX = 4,
    }
    public enum ESubUVBoundingVertexCount : int
    {
        BVC_FourVertices = 0,
        BVC_EightVertices = 1,
        BVC_MAX = 2,
    }
    public enum EOpacitySourceMode : int
    {
        OSM_Alpha = 0,
        OSM_ColorBrightness = 1,
        OSM_RedChannel = 2,
        OSM_GreenChannel = 3,
        OSM_BlueChannel = 4,
        OSM_MAX = 5,
    }
    public enum EHorizTextAligment : int
    {
        EHTA_Left = 0,
        EHTA_Center = 1,
        EHTA_Right = 2,
        EHTA_MAX = 3,
    }
    public enum EVerticalTextAligment : int
    {
        EVRTA_TextTop = 0,
        EVRTA_TextCenter = 1,
        EVRTA_TextBottom = 2,
        EVRTA_QuadTop = 3,
        EVRTA_MAX = 4,
    }
    public enum TextureFilter : int
    {
        TF_Nearest = 0,
        TF_Bilinear = 1,
        TF_Trilinear = 2,
        TF_Default = 3,
        TF_MAX = 4,
    }
    public enum TextureAddress : int
    {
        TA_Wrap = 0,
        TA_Clamp = 1,
        TA_Mirror = 2,
        TA_MAX = 3,
    }
    public enum ETextureMipCount : int
    {
        TMC_ResidentMips = 0,
        TMC_AllMips = 1,
        TMC_AllMipsBiased = 2,
        TMC_MAX = 3,
    }
    public enum ETextureCompressionQuality : int
    {
        TCQ_Default = 0,
        TCQ_Lowest = 1,
        TCQ_Low = 2,
        TCQ_Medium = 3,
        TCQ_High = 4,
        TCQ_Highest = 5,
        TCQ_MAX = 6,
    }
    public enum TextureGroup : int
    {
        TEXTUREGROUP_World = 0,
        TEXTUREGROUP_WorldNormalMap = 1,
        TEXTUREGROUP_WorldSpecular = 2,
        TEXTUREGROUP_Character = 3,
        TEXTUREGROUP_CharacterNormalMap = 4,
        TEXTUREGROUP_CharacterSpecular = 5,
        TEXTUREGROUP_Weapon = 6,
        TEXTUREGROUP_WeaponNormalMap = 7,
        TEXTUREGROUP_WeaponSpecular = 8,
        TEXTUREGROUP_Vehicle = 9,
        TEXTUREGROUP_VehicleNormalMap = 10,
        TEXTUREGROUP_VehicleSpecular = 11,
        TEXTUREGROUP_Cinematic = 12,
        TEXTUREGROUP_Effects = 13,
        TEXTUREGROUP_EffectsNotFiltered = 14,
        TEXTUREGROUP_Skybox = 15,
        TEXTUREGROUP_UI = 16,
        TEXTUREGROUP_Lightmap = 17,
        TEXTUREGROUP_RenderTarget = 18,
        TEXTUREGROUP_MobileFlattened = 19,
        TEXTUREGROUP_ProcBuilding_Face = 20,
        TEXTUREGROUP_ProcBuilding_LightMap = 21,
        TEXTUREGROUP_Shadowmap = 22,
        TEXTUREGROUP_ColorLookupTable = 23,
        TEXTUREGROUP_Terrain_Heightmap = 24,
        TEXTUREGROUP_Terrain_Weightmap = 25,
        TEXTUREGROUP_Bokeh = 26,
        TEXTUREGROUP_IESLightProfile = 27,
        TEXTUREGROUP_Pixels2D = 28,
        TEXTUREGROUP_HierarchicalLOD = 29,
        TEXTUREGROUP_Impostor = 30,
        TEXTUREGROUP_ImpostorNormalDepth = 31,
        TEXTUREGROUP_8BitData = 32,
        TEXTUREGROUP_16BitData = 33,
        TEXTUREGROUP_Project01 = 34,
        TEXTUREGROUP_Project02 = 35,
        TEXTUREGROUP_Project03 = 36,
        TEXTUREGROUP_Project04 = 37,
        TEXTUREGROUP_Project05 = 38,
        TEXTUREGROUP_Project06 = 39,
        TEXTUREGROUP_Project07 = 40,
        TEXTUREGROUP_Project08 = 41,
        TEXTUREGROUP_Project09 = 42,
        TEXTUREGROUP_Project10 = 43,
        TEXTUREGROUP_Project11 = 44,
        TEXTUREGROUP_Project12 = 45,
        TEXTUREGROUP_Project13 = 46,
        TEXTUREGROUP_Project14 = 47,
        TEXTUREGROUP_Project15 = 48,
        TEXTUREGROUP_Project16 = 49,
        TEXTUREGROUP_Project17 = 50,
        TEXTUREGROUP_Project18 = 51,
        TEXTUREGROUP_MAX = 52,
    }
    public enum TextureMipGenSettings : int
    {
        TMGS_FromTextureGroup = 0,
        TMGS_SimpleAverage = 1,
        TMGS_Sharpen0 = 2,
        TMGS_Sharpen1 = 3,
        TMGS_Sharpen2 = 4,
        TMGS_Sharpen3 = 5,
        TMGS_Sharpen4 = 6,
        TMGS_Sharpen5 = 7,
        TMGS_Sharpen6 = 8,
        TMGS_Sharpen7 = 9,
        TMGS_Sharpen8 = 10,
        TMGS_Sharpen9 = 11,
        TMGS_Sharpen10 = 12,
        TMGS_NoMipmaps = 13,
        TMGS_LeaveExistingMips = 14,
        TMGS_Blur1 = 15,
        TMGS_Blur2 = 16,
        TMGS_Blur3 = 17,
        TMGS_Blur4 = 18,
        TMGS_Blur5 = 19,
        TMGS_Unfiltered = 20,
        TMGS_Angular = 21,
        TMGS_MAX = 22,
    }
    public enum ETexturePowerOfTwoSetting : int
    {
        None = 0,
        PadToPowerOfTwo = 1,
        PadToSquarePowerOfTwo = 2,
        ETexturePowerOfTwoSetting_MAX = 3,
    }
    public enum ETextureSamplerFilter : int
    {
        Point = 0,
        Bilinear = 1,
        Trilinear = 2,
        AnisotropicPoint = 3,
        AnisotropicLinear = 4,
        ETextureSamplerFilter_MAX = 5,
    }
    public enum ETextureMipLoadOptions : int
    {
        Default = 0,
        AllMips = 1,
        OnlyFirstMip = 2,
        ETextureMipLoadOptions_MAX = 3,
    }
    public enum ETextureDownscaleOptions : int
    {
        Default = 0,
        Unfiltered = 1,
        SimpleAverage = 2,
        Sharpen0 = 3,
        Sharpen1 = 4,
        Sharpen2 = 5,
        Sharpen3 = 6,
        Sharpen4 = 7,
        Sharpen5 = 8,
        Sharpen6 = 9,
        Sharpen7 = 10,
        Sharpen8 = 11,
        Sharpen9 = 12,
        Sharpen10 = 13,
        ETextureDownscaleOptions_MAX = 14,
    }
    public enum ETextureLossyCompressionAmount : int
    {
        TLCA_Default = 0,
        TLCA_None = 1,
        TLCA_Lowest = 2,
        TLCA_Low = 3,
        TLCA_Medium = 4,
        TLCA_High = 5,
        TLCA_Highest = 6,
        TLCA_MAX = 7,
    }
    public enum ETextureEncodeSpeed : int
    {
        Final = 0,
        FinalIfAvailable = 1,
        Fast = 2,
        ETextureEncodeSpeed_MAX = 3,
    }
    public enum ETextureClass : int
    {
        Invalid = 0,
        TwoD = 1,
        Cube = 2,
        Array = 3,
        CubeArray = 4,
        Volume = 5,
        TwoDDynamic = 6,
        RenderTarget = 7,
        Other2DNoSource = 8,
        OtherUnknown = 9,
        ETextureClass_MAX = 10,
    }
    public enum ECompositeTextureMode : int
    {
        CTM_Disabled = 0,
        CTM_NormalRoughnessToRed = 1,
        CTM_NormalRoughnessToGreen = 2,
        CTM_NormalRoughnessToBlue = 3,
        CTM_NormalRoughnessToAlpha = 4,
        CTM_MAX = 5,
    }
    public enum ETextureSourceCompressionFormat : int
    {
        TSCF_None = 0,
        TSCF_PNG = 1,
        TSCF_JPEG = 2,
        TSCF_MAX = 3,
    }
    public enum ETextureSourceFormat : int
    {
        TSF_Invalid = 0,
        TSF_G8 = 1,
        TSF_BGRA8 = 2,
        TSF_BGRE8 = 3,
        TSF_RGBA16 = 4,
        TSF_RGBA16F = 5,
        TSF_RGBA8_DEPRECATED = 6,
        TSF_RGBE8_DEPRECATED = 7,
        TSF_G16 = 8,
        TSF_RGBA32F = 9,
        TSF_R16F = 10,
        TSF_R32F = 11,
        TSF_MAX = 12,
        TSF_RGBA8 = 6,
        TSF_RGBE8 = 7,
    }
    public enum TextureCompressionSettings : int
    {
        TC_Default = 0,
        TC_Normalmap = 1,
        TC_Masks = 2,
        TC_Grayscale = 3,
        TC_Displacementmap = 4,
        TC_VectorDisplacementmap = 5,
        TC_HDR = 6,
        TC_EditorIcon = 7,
        TC_Alpha = 8,
        TC_DistanceFieldFont = 9,
        TC_HDR_Compressed = 10,
        TC_BC7 = 11,
        TC_HalfFloat = 12,
        TC_LQ = 13,
        TC_EncodedReflectionCapture = 14,
        TC_SingleFloat = 15,
        TC_HDR_F32 = 16,
        TC_MAX = 17,
    }
    public enum ETextureSourceEncoding : int
    {
        TSE_None = 0,
        TSE_Linear = 1,
        TSE_sRGB = 2,
        TSE_ST2084 = 3,
        TSE_Gamma22 = 4,
        TSE_BT1886 = 5,
        TSE_Gamma26 = 6,
        TSE_Cineon = 7,
        TSE_REDLog = 8,
        TSE_REDLog3G10 = 9,
        TSE_SLog1 = 10,
        TSE_SLog2 = 11,
        TSE_SLog3 = 12,
        TSE_AlexaV3LogC = 13,
        TSE_CanonLog = 14,
        TSE_ProTune = 15,
        TSE_VLog = 16,
        TSE_MAX = 17,
    }
    public enum ETextureColorSpace : int
    {
        TCS_None = 0,
        TCS_sRGB = 1,
        TCS_Rec2020 = 2,
        TCS_ACESAP0 = 3,
        TCS_ACESAP1 = 4,
        TCS_P3DCI = 5,
        TCS_P3D65 = 6,
        TCS_REDWideGamut = 7,
        TCS_SonySGamut3 = 8,
        TCS_SonySGamut3Cine = 9,
        TCS_AlexaWideGamut = 10,
        TCS_CanonCinemaGamut = 11,
        TCS_GoProProtuneNative = 12,
        TCS_PanasonicVGamut = 13,
        TCS_Custom = 99,
        TCS_MAX = 100,
    }
    public enum ETextureChromaticAdaptationMethod : int
    {
        TCAM_None = 0,
        TCAM_Bradford = 1,
        TCAM_CAT02 = 2,
        TCAM_MAX = 3,
    }
    public enum ETextureRenderTargetFormat : int
    {
        RTF_R8 = 0,
        RTF_RG8 = 1,
        RTF_RGBA8 = 2,
        RTF_RGBA8_SRGB = 3,
        RTF_R16f = 4,
        RTF_RG16f = 5,
        RTF_RGBA16f = 6,
        RTF_R32f = 7,
        RTF_RG32f = 8,
        RTF_RGBA32f = 9,
        RTF_RGB10A2 = 10,
        RTF_MAX = 11,
    }
    public enum ETimelineLengthMode : int
    {
        TL_TimelineLength = 0,
        TL_LastKeyFrame = 1,
        TL_MAX = 2,
    }
    public enum ETimelineDirection : int
    {
        Forward = 0,
        Backward = 1,
        ETimelineDirection_MAX = 2,
    }
    public enum ETwitterRequestMethod : int
    {
        TRM_Get = 0,
        TRM_Post = 1,
        TRM_Delete = 2,
        TRM_MAX = 3,
    }
    public enum ETwitterIntegrationDelegate : int
    {
        TID_AuthorizeComplete = 0,
        TID_TweetUIComplete = 1,
        TID_RequestComplete = 2,
        TID_MAX = 3,
    }
    public enum EUserDefinedStructureStatus : int
    {
        UDSS_UpToDate = 0,
        UDSS_Dirty = 1,
        UDSS_Error = 2,
        UDSS_Duplicate = 3,
        UDSS_MAX = 4,
    }
    public enum EVectorFieldConstructionOp : int
    {
        VFCO_Extrude = 0,
        VFCO_Revolve = 1,
        VFCO_MAX = 2,
    }
    public enum ESplitScreenType : int
    {
        None = 0,
        TwoPlayer_Horizontal = 1,
        TwoPlayer_Vertical = 2,
        ThreePlayer_FavorTop = 3,
        ThreePlayer_FavorBottom = 4,
        ThreePlayer_Vertical = 5,
        ThreePlayer_Horizontal = 6,
        FourPlayer_Grid = 7,
        FourPlayer_Vertical = 8,
        FourPlayer_Horizontal = 9,
        SplitTypeCount = 10,
        ESplitScreenType_MAX = 11,
    }
    public enum EWindSourceType : int
    {
        Directional = 0,
        Point = 1,
        EWindSourceType_MAX = 2,
    }
    public enum EStreamingSourceTargetState : int
    {
        Loaded = 0,
        Activated = 1,
        EStreamingSourceTargetState_MAX = 2,
    }
    public enum EVisibilityAggressiveness : int
    {
        VIS_LeastAggressive = 0,
        VIS_ModeratelyAggressive = 1,
        VIS_MostAggressive = 2,
        VIS_Max = 3,
    }
    public enum EVolumeLightingMethod : int
    {
        VLM_VolumetricLightmap = 0,
        VLM_SparseVolumeLightingSamples = 1,
        VLM_MAX = 2,
    }
    public enum EHierarchicalSimplificationMethod : int
    {
        None = 0,
        Merge = 1,
        Simplify = 2,
        Approximate = 3,
        EHierarchicalSimplificationMethod_MAX = 4,
    }
    public enum EQuartzTimeSignatureQuantization : int
    {
        HalfNote = 0,
        QuarterNote = 1,
        EighthNote = 2,
        SixteenthNote = 3,
        ThirtySecondNote = 4,
        Count = 5,
        EQuartzTimeSignatureQuantization_MAX = 6,
    }
    public enum EQuartzDelegateType : int
    {
        MetronomeTick = 0,
        CommandEvent = 1,
        Count = 2,
        EQuartzDelegateType_MAX = 3,
    }
    public enum EQuarztQuantizationReference : int
    {
        BarRelative = 0,
        TransportRelative = 1,
        CurrentTimeRelative = 2,
        Count = 3,
        EQuarztQuantizationReference_MAX = 4,
    }
    public enum EQuartzCommandType : int
    {
        PlaySound = 0,
        QueueSoundToPlay = 1,
        RetriggerSound = 2,
        TickRateChange = 3,
        TransportReset = 4,
        StartOtherClock = 5,
        Custom = 6,
        EQuartzCommandType_MAX = 7,
    }
    public enum FNavigationSystemRunMode : int
    {
        InvalidMode = 0,
        GameMode = 1,
        EditorMode = 2,
        SimulationMode = 3,
        PIEMode = 4,
        InferFromWorldMode = 5,
        EditorWorldPartitionBuildMode = 6,
        FNavigationSystemRunMode_MAX = 7,
    }
    public enum ENavigationOptionFlag : int
    {
        Default = 0,
        Enable = 1,
        Disable = 2,
        MAX = 3,
    }
    public enum ENavDataGatheringMode : int
    {
        Default = 0,
        Instant = 1,
        Lazy = 2,
        ENavDataGatheringMode_MAX = 3,
    }
    public enum ENavDataGatheringModeConfig : int
    {
        Invalid = 0,
        Instant = 1,
        Lazy = 2,
        ENavDataGatheringModeConfig_MAX = 3,
    }
    public enum ENavPathEvent : int
    {
        Cleared = 0,
        NewPath = 1,
        UpdatedDueToGoalMoved = 2,
        UpdatedDueToNavigationChanged = 3,
        Invalidated = 4,
        RePathFailed = 5,
        MetaPathUpdate = 6,
        Custom = 7,
        ENavPathEvent_MAX = 8,
    }
    public enum ENavigationQueryResult : int
    {
        Invalid = 0,
        Error = 1,
        Fail = 2,
        Success = 3,
        ENavigationQueryResult_MAX = 4,
    }
    public enum EAnimGroupRole : int
    {
        CanBeLeader = 0,
        AlwaysFollower = 1,
        AlwaysLeader = 2,
        TransitionLeader = 3,
        TransitionFollower = 4,
        EAnimGroupRole_MAX = 5,
    }
    public enum EAnimSyncGroupScope : int
    {
        Local = 0,
        Component = 1,
        EAnimSyncGroupScope_MAX = 2,
    }
    public enum EAnimSyncMethod : int
    {
        DoNotSync = 0,
        SyncGroup = 1,
        Graph = 2,
        EAnimSyncMethod_MAX = 3,
    }
    public enum EAnimExecutionContextConversionResult : int
    {
        Succeeded = 1,
        Failed = 0,
        EAnimExecutionContextConversionResult_MAX = 2,
    }
    public enum EDrawDebugItemType : int
    {
        DirectionalArrow = 0,
        Sphere = 1,
        Line = 2,
        OnScreenMessage = 3,
        CoordinateSystem = 4,
        Point = 5,
        Circle = 6,
        Cone = 7,
        EDrawDebugItemType_MAX = 8,
    }
    public enum EAnimNotifyEventType : int
    {
        Begin = 0,
        End = 1,
        EAnimNotifyEventType_MAX = 2,
    }
    public enum EMontageSubStepResult : int
    {
        Moved = 0,
        NotMoved = 1,
        InvalidSection = 2,
        InvalidMontage = 3,
        EMontageSubStepResult_MAX = 4,
    }
    public enum EPinHidingMode : int
    {
        NeverAsPin = 0,
        PinHiddenByDefault = 1,
        PinShownByDefault = 2,
        AlwaysAsPin = 3,
        EPinHidingMode_MAX = 4,
    }
    public enum EAnimNodeDataFlags : int
    {
        None = 0,
        HasInitialUpdateFunction = 1,
        HasBecomeRelevantFunction = 2,
        HasUpdateFunction = 4,
        EAnimNodeDataFlags_MAX = 5,
    }
    public enum EAnimNodeReferenceConversionResult : int
    {
        Succeeded = 1,
        Failed = 0,
        EAnimNodeReferenceConversionResult_MAX = 2,
    }
    public enum EInertializationState : int
    {
        Inactive = 0,
        Pending = 1,
        Active = 2,
        EInertializationState_MAX = 3,
    }
    public enum EInertializationBoneState : int
    {
        Invalid = 0,
        Valid = 1,
        Excluded = 2,
        EInertializationBoneState_MAX = 3,
    }
    public enum EInertializationSpace : int
    {
        Default = 0,
        WorldSpace = 1,
        WorldRotation = 2,
        EInertializationSpace_MAX = 3,
    }
    public enum EEvaluatorDataSource : int
    {
        EDS_SourcePose = 0,
        EDS_DestinationPose = 1,
        EDS_MAX = 2,
    }
    public enum EEvaluatorMode : int
    {
        EM_Standard = 0,
        EM_Freeze = 1,
        EM_DelayedFreeze = 2,
        EM_MAX = 3,
    }
    public enum ETransitionBlendMode : int
    {
        TBM_Linear = 0,
        TBM_Cubic = 1,
        TBM_MAX = 2,
    }
    public enum ETransitionLogicType : int
    {
        TLT_StandardBlend = 0,
        TLT_Inertialization = 1,
        TLT_Custom = 2,
        TLT_MAX = 3,
    }
    public enum EAnimPropertyAccessCallSite : int
    {
        WorkerThread_Unbatched = 0,
        WorkerThread_Batched_PreEventGraph = 1,
        WorkerThread_Batched_PostEventGraph = 2,
        GameThread_Batched_PreEventGraph = 3,
        GameThread_Batched_PostEventGraph = 4,
        EAnimPropertyAccessCallSite_MAX = 5,
    }
    public enum EBlendProfileMode : int
    {
        TimeFactor = 0,
        WeightFactor = 1,
        BlendMask = 2,
        EBlendProfileMode_MAX = 3,
    }
    public enum ETransformCurveChannel : int
    {
        Position = 0,
        Rotation = 1,
        Scale = 2,
        Invalid = 3,
        ETransformCurveChannel_MAX = 4,
    }
    public enum EVectorCurveChannel : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        Invalid = 3,
        EVectorCurveChannel_MAX = 4,
    }
    public enum EPostCopyOperation : int
    {
        None = 0,
        LogicalNegateBool = 1,
        EPostCopyOperation_MAX = 2,
    }
    public enum EAnimAlphaInputType : int
    {
        Float = 0,
        Bool = 1,
        Curve = 2,
        EAnimAlphaInputType_MAX = 3,
    }
    public enum EMirrorRowType : int
    {
        Bone = 0,
        AnimationNotify = 1,
        Curve = 2,
        SyncMarker = 3,
        Custom = 4,
        EMirrorRowType_MAX = 5,
    }
    public enum EMirrorFindReplaceMethod : int
    {
        Prefix = 0,
        Suffix = 1,
        RegularExpression = 2,
        EMirrorFindReplaceMethod_MAX = 3,
    }
    public enum ETrajectorySampleDomain : int
    {
        None = 0,
        Time = 1,
        Distance = 2,
        ETrajectorySampleDomain_MAX = 3,
    }
    public enum EControlConstraint : int
    {
        Orientation = 0,
        Translation = 1,
        MAX = 2,
    }
    public enum EConstraintTransform : int
    {
        Absolute = 0,
        Relative = 1,
        EConstraintTransform_MAX = 2,
    }
    public enum EBoneTranslationRetargetingMode : int
    {
        Animation = 0,
        Skeleton = 1,
        AnimationScaled = 2,
        AnimationRelative = 3,
        OrientAndScale = 4,
        EBoneTranslationRetargetingMode_MAX = 5,
    }
    public enum ETimeStretchCurveMapping : int
    {
        T_Original = 0,
        T_TargetMin = 1,
        T_TargetMax = 2,
        MAX = 3,
    }
    public enum EPreviewAnimationBlueprintApplicationMethod : int
    {
        LinkedLayers = 0,
        LinkedAnimGraph = 1,
        EPreviewAnimationBlueprintApplicationMethod_MAX = 2,
    }
    public enum EPrimaryAssetCookRule : int
    {
        Unknown = 0,
        NeverCook = 1,
        DevelopmentCook = 2,
        DevelopmentAlwaysCook = 3,
        AlwaysCook = 4,
        EPrimaryAssetCookRule_MAX = 5,
    }
    public enum EAttenuationDistanceModel : int
    {
        Linear = 0,
        Logarithmic = 1,
        Inverse = 2,
        LogReverse = 3,
        NaturalSound = 4,
        Custom = 5,
        EAttenuationDistanceModel_MAX = 6,
    }
    public enum EAttenuationShape : int
    {
        Sphere = 0,
        Capsule = 1,
        Box = 2,
        Cone = 3,
        EAttenuationShape_MAX = 4,
    }
    public enum ENaturalSoundFalloffMode : int
    {
        Continues = 0,
        Silent = 1,
        Hold = 2,
        ENaturalSoundFalloffMode_MAX = 3,
    }
    public enum EAudioBusChannels : int
    {
        Mono = 0,
        Stereo = 1,
        Quad = 3,
        FivePointOne = 5,
        SevenPointOne = 7,
        EAudioBusChannels_MAX = 8,
    }
    public enum EVoiceSampleRate : int
    {
        Low16000Hz = 16000,
        Normal24000Hz = 24000,
        EVoiceSampleRate_MAX = 24001,
    }
    public enum EPanningMethod : int
    {
        Linear = 0,
        EqualPower = 1,
        EPanningMethod_MAX = 2,
    }
    public enum EMonoChannelUpmixMethod : int
    {
        Linear = 0,
        EqualPower = 1,
        FullVolume = 2,
        EMonoChannelUpmixMethod_MAX = 3,
    }
    public enum EDefaultAudioCompressionType : int
    {
        BinkAudio = 0,
        ADPCM = 1,
        PCM = 2,
        PlatformSpecific = 3,
        EDefaultAudioCompressionType_MAX = 4,
    }
    public enum EAudioVolumeLocationState : int
    {
        InsideTheVolume = 0,
        OutsideTheVolume = 1,
        EAudioVolumeLocationState_MAX = 2,
    }
    public enum EInterfaceValidResult : int
    {
        Valid = 0,
        Invalid = 1,
        EInterfaceValidResult_MAX = 2,
    }
    public enum ECameraShakeUpdateResultFlags : int
    {
        ApplyAsAbsolute = 1,
        SkipAutoScale = 2,
        SkipAutoPlaySpace = 4,
        Default = 0,
        ECameraShakeUpdateResultFlags_MAX = 5,
    }
    public enum ECameraShakeDurationType : int
    {
        Fixed = 0,
        Infinite = 1,
        Custom = 2,
        ECameraShakeDurationType_MAX = 3,
    }
    public enum ECameraShakeAttenuation : int
    {
        Linear = 0,
        Quadratic = 1,
        ECameraShakeAttenuation_MAX = 2,
    }
    public enum ECameraAlphaBlendMode : int
    {
        CABM_Linear = 0,
        CABM_Cubic = 1,
        CABM_MAX = 2,
    }
    public enum EAudioFaderCurve : int
    {
        Linear = 0,
        Logarithmic = 1,
        SCurve = 2,
        Sin = 3,
        Count = 4,
        EAudioFaderCurve_MAX = 5,
    }
    public enum ESyncOption : int
    {
        Drive = 0,
        Passive = 1,
        Disabled = 2,
        ESyncOption_MAX = 3,
    }
    public enum EReflectionSourceType : int
    {
        CapturedScene = 0,
        SpecifiedCubemap = 1,
        EReflectionSourceType_MAX = 2,
    }
    public enum ESceneCapturePrimitiveRenderMode : int
    {
        PRM_LegacySceneCapture = 0,
        PRM_RenderScenePrimitives = 1,
        PRM_UseShowOnlyList = 2,
        PRM_MAX = 3,
    }
    public enum ESkyAtmosphereTransformMode : int
    {
        PlanetTopAtAbsoluteWorldOrigin = 0,
        PlanetTopAtComponentTransform = 1,
        PlanetCenterAtComponentTransform = 2,
        ESkyAtmosphereTransformMode_MAX = 3,
    }
    public enum ESplinePointType : int
    {
        Linear = 0,
        Curve = 1,
        Constant = 2,
        CurveClamped = 3,
        CurveCustomTangent = 4,
        ESplinePointType_MAX = 5,
    }
    public enum ESplineCoordinateSpace : int
    {
        Local = 0,
        World = 1,
        ESplineCoordinateSpace_MAX = 2,
    }
    public enum ESplineMeshAxis : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        ESplineMeshAxis_MAX = 3,
    }
    public enum EVolumetricCloudTracingMaxDistanceMode : int
    {
        DistanceFromCloudLayerEntryPoint = 0,
        DistanceFromPointOfView = 1,
        EVolumetricCloudTracingMaxDistanceMode_MAX = 2,
    }
    public enum ECurveTableMode : int
    {
        Empty = 0,
        SimpleCurves = 1,
        RichCurves = 2,
        ECurveTableMode_MAX = 3,
    }
    public enum FDataDrivenCVarType : int
    {
        CVarFloat = 0,
        CVarInt = 1,
        CVarBool = 2,
        FDataDrivenCVarType_MAX = 3,
    }
    public enum EEvaluateCurveTableResult : int
    {
        RowFound = 0,
        RowNotFound = 1,
        EEvaluateCurveTableResult_MAX = 2,
    }
    public enum EReporterLineStyle : int
    {
        Line = 0,
        Dash = 1,
        EReporterLineStyle_MAX = 2,
    }
    public enum EGraphAxisStyle : int
    {
        Lines = 0,
        Notches = 1,
        Grid = 2,
        EGraphAxisStyle_MAX = 3,
    }
    public enum EGraphDataStyle : int
    {
        Lines = 0,
        Filled = 1,
        EGraphDataStyle_MAX = 2,
    }
    public enum ELegendPosition : int
    {
        Outside = 0,
        Inside = 1,
        ELegendPosition_MAX = 2,
    }
    public enum EGrammaticalGender : int
    {
        Neuter = 0,
        Masculine = 1,
        Feminine = 2,
        Mixed = 3,
        EGrammaticalGender_MAX = 4,
    }
    public enum EGrammaticalNumber : int
    {
        Singular = 0,
        Plural = 1,
        EGrammaticalNumber_MAX = 2,
    }
    public enum ETypedElementWorldType : int
    {
        Game = 0,
        Editor = 1,
        ETypedElementWorldType_MAX = 2,
    }
    public enum ECustomTimeStepSynchronizationState : int
    {
        Closed = 0,
        Error = 1,
        Synchronized = 2,
        Synchronizing = 3,
        ECustomTimeStepSynchronizationState_MAX = 4,
    }
    public enum ETimecodeProviderSynchronizationState : int
    {
        Closed = 0,
        Error = 1,
        Synchronized = 2,
        Synchronizing = 3,
        ETimecodeProviderSynchronizationState_MAX = 4,
    }
    public enum EFontCacheType : int
    {
        Offline = 0,
        Runtime = 1,
        EFontCacheType_MAX = 2,
    }
    public enum ERootMotionAccumulateMode : int
    {
        Override = 0,
        Additive = 1,
        ERootMotionAccumulateMode_MAX = 2,
    }
    public enum ERootMotionSourceStatusFlags : int
    {
        Prepared = 1,
        Finished = 2,
        MarkedForRemoval = 4,
        ERootMotionSourceStatusFlags_MAX = 5,
    }
    public enum ERootMotionSourceSettingsFlags : int
    {
        UseSensitiveLiftoffCheck = 1,
        DisablePartialEndTick = 2,
        IgnoreZAccumulate = 4,
        ERootMotionSourceSettingsFlags_MAX = 5,
    }
    public enum ERootMotionFinishVelocityMode : int
    {
        MaintainLastRootMotionVelocity = 0,
        SetVelocity = 1,
        ClampVelocity = 2,
        ERootMotionFinishVelocityMode_MAX = 3,
    }
    public enum ESlateGesture : int
    {
        None = 0,
        Scroll = 1,
        Magnify = 2,
        Swipe = 3,
        Rotate = 4,
        LongPress = 5,
        ESlateGesture_MAX = 6,
    }
    public enum EMIDCreationFlags : int
    {
        None = 0,
        Transient = 1,
        EMIDCreationFlags_MAX = 2,
    }
    public enum EEasingFunc : int
    {
        Linear = 0,
        Step = 1,
        SinusoidalIn = 2,
        SinusoidalOut = 3,
        SinusoidalInOut = 4,
        EaseIn = 5,
        EaseOut = 6,
        EaseInOut = 7,
        ExpoIn = 8,
        ExpoOut = 9,
        ExpoInOut = 10,
        CircularIn = 11,
        CircularOut = 12,
        CircularInOut = 13,
        EEasingFunc_MAX = 14,
    }
    public enum ELerpInterpolationMode : int
    {
        QuatInterp = 0,
        EulerInterp = 1,
        DualQuatInterp = 2,
        ELerpInterpolationMode_MAX = 3,
    }
    public enum EMatrixColumns : int
    {
        First = 0,
        Second = 1,
        Third = 2,
        Fourth = 3,
        EMatrixColumns_MAX = 4,
    }
    public enum EImportanceWeight : int
    {
        Luminance = 0,
        Red = 1,
        Green = 2,
        Blue = 3,
        Alpha = 4,
        EImportanceWeight_MAX = 5,
    }
    public enum EMeshFeatureImportance : int
    {
        Off = 0,
        Lowest = 1,
        Low = 2,
        Normal = 3,
        High = 4,
        Highest = 5,
        EMeshFeatureImportance_MAX = 6,
    }
    public enum EStaticMeshReductionTerimationCriterion : int
    {
        Triangles = 0,
        Vertices = 1,
        Any = 2,
        EStaticMeshReductionTerimationCriterion_MAX = 3,
    }
    public enum ELandscapeCullingPrecision : int
    {
        High = 0,
        Medium = 1,
        Low = 2,
        ELandscapeCullingPrecision_MAX = 3,
    }
    public enum EProxyNormalComputationMethod : int
    {
        AngleWeighted = 0,
        AreaWeighted = 1,
        EqualWeighted = 2,
        EProxyNormalComputationMethod_MAX = 3,
    }
    public enum EMeshLODSelectionType : int
    {
        AllLODs = 0,
        SpecificLOD = 1,
        CalculateLOD = 2,
        LowestDetailLOD = 3,
        EMeshLODSelectionType_MAX = 4,
    }
    public enum EMeshMergeType : int
    {
        MeshMergeType_Default = 0,
        MeshMergeType_MergeActor = 1,
        MeshMergeType_MAX = 2,
    }
    public enum EUVOutput : int
    {
        DoNotOutputChannel = 0,
        OutputChannel = 1,
        EUVOutput_MAX = 2,
    }
    public enum EMeshApproximationType : int
    {
        MeshAndMaterials = 0,
        MeshShapeOnly = 1,
        EMeshApproximationType_MAX = 2,
    }
    public enum EMeshApproximationBaseCappingType : int
    {
        NoBaseCapping = 0,
        ConvexPolygon = 1,
        ConvexSolid = 2,
        EMeshApproximationBaseCappingType_MAX = 3,
    }
    public enum EOccludedGeometryFilteringPolicy : int
    {
        NoOcclusionFiltering = 0,
        VisibilityBasedFiltering = 1,
        EOccludedGeometryFilteringPolicy_MAX = 2,
    }
    public enum EMeshApproximationSimplificationPolicy : int
    {
        FixedTriangleCount = 0,
        TrianglesPerArea = 1,
        GeometricTolerance = 2,
        EMeshApproximationSimplificationPolicy_MAX = 3,
    }
    public enum EMeshApproximationGroundPlaneClippingPolicy : int
    {
        NoGroundClipping = 0,
        DiscardWithZPlane = 1,
        CutWithZPlane = 2,
        CutAndFillWithZPlane = 3,
        EMeshApproximationGroundPlaneClippingPolicy_MAX = 4,
    }
    public enum EMeshApproximationUVGenerationPolicy : int
    {
        PreferUVAtlas = 0,
        PreferXAtlas = 1,
        PreferPatchBuilder = 2,
        EMeshApproximationUVGenerationPolicy_MAX = 3,
    }
    public enum EVertexPaintAxis : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        EVertexPaintAxis_MAX = 3,
    }
    public enum EPSCPoolMethod : int
    {
        None = 0,
        AutoRelease = 1,
        ManualRelease = 2,
        ManualRelease_OnComplete = 3,
        FreeInPool = 4,
        EPSCPoolMethod_MAX = 5,
    }
    public enum EPerQualityLevels : int
    {
        Low = 0,
        Medium = 1,
        High = 2,
        Epic = 3,
        Cinematic = 4,
        Num = 5,
        EPerQualityLevels_MAX = 6,
    }
    public enum EAngularDriveMode : int
    {
        SLERP = 0,
        TwistAndSwing = 1,
        EAngularDriveMode_MAX = 2,
    }
    public enum EConstraintTransformComponentFlags : int
    {
        None = 0,
        ChildPosition = 1,
        ChildRotation = 2,
        ParentPosition = 4,
        ParentRotation = 8,
        AllChild = 3,
        AllParent = 12,
        AllPosition = 5,
        AllRotation = 10,
        All = 15,
        EConstraintTransformComponentFlags_MAX = 16,
    }
    public enum EPhysicsAssetSolverType : int
    {
        RBAN = 0,
        World = 1,
        EPhysicsAssetSolverType_MAX = 2,
    }
    public enum ESettingsDOF : int
    {
        Full3D = 0,
        YZPlane = 1,
        XZPlane = 2,
        XYPlane = 3,
        ESettingsDOF_MAX = 4,
    }
    public enum ESettingsLockedAxis : int
    {
        None = 0,
        X = 1,
        Y = 2,
        Z = 3,
        Invalid = 4,
        ESettingsLockedAxis_MAX = 5,
    }
    public enum EVoiceBlockReasons : int
    {
        None = 0,
        Muted = 1,
        MutedBy = 2,
        Gameplay = 4,
        Blocked = 8,
        BlockedBy = 16,
        EVoiceBlockReasons_MAX = 17,
    }
    public enum EPropertyAccessCopyBatch : int
    {
        InternalUnbatched = 0,
        ExternalUnbatched = 1,
        InternalBatched = 2,
        ExternalBatched = 3,
        Count = 4,
        EPropertyAccessCopyBatch_MAX = 5,
    }
    public enum EPropertyAccessIndirectionType : int
    {
        Offset = 0,
        Object = 1,
        Array = 2,
        ScriptFunction = 3,
        NativeFunction = 4,
        EPropertyAccessIndirectionType_MAX = 5,
    }
    public enum EPropertyAccessObjectType : int
    {
        None = 0,
        Object = 1,
        WeakObject = 2,
        SoftObject = 3,
        EPropertyAccessObjectType_MAX = 4,
    }
    public enum EPropertyAccessCopyType : int
    {
        None = 0,
        Plain = 1,
        Complex = 2,
        Bool = 3,
        Struct = 4,
        Object = 5,
        Name = 6,
        Array = 7,
        PromoteBoolToByte = 8,
        PromoteBoolToInt32 = 9,
        PromoteBoolToInt64 = 10,
        PromoteBoolToFloat = 11,
        PromoteBoolToDouble = 12,
        PromoteByteToInt32 = 13,
        PromoteByteToInt64 = 14,
        PromoteByteToFloat = 15,
        PromoteByteToDouble = 16,
        PromoteInt32ToInt64 = 17,
        PromoteInt32ToFloat = 18,
        PromoteInt32ToDouble = 19,
        PromoteFloatToDouble = 20,
        DemoteDoubleToFloat = 21,
        PromoteArrayFloatToDouble = 22,
        DemoteArrayDoubleToFloat = 23,
        PromoteMapValueFloatToDouble = 24,
        DemoteMapValueDoubleToFloat = 25,
        EPropertyAccessCopyType_MAX = 26,
    }
    public enum EClearSceneOptions : int
    {
        NoClear = 0,
        HardwareClear = 1,
        QuadAtMaxZ = 2,
        EClearSceneOptions_MAX = 3,
    }
    public enum ECompositingSampleCount : int
    {
        One = 1,
        Two = 2,
        Four = 4,
        Eight = 8,
        ECompositingSampleCount_MAX = 9,
    }
    public enum ECustomDepthStencil : int
    {
        Disabled = 0,
        Enabled = 1,
        EnabledOnDemand = 2,
        EnabledWithStencil = 3,
        ECustomDepthStencil_MAX = 4,
    }
    public enum EEarlyZPass : int
    {
        None = 0,
        OpaqueOnly = 1,
        OpaqueAndMasked = 2,
        Auto = 3,
        EEarlyZPass_MAX = 4,
    }
    public enum EVelocityOutputPass : int
    {
        DepthPass = 0,
        BasePass = 1,
        AfterBasePass = 2,
        EVelocityOutputPass_MAX = 3,
    }
    public enum EVertexDeformationOutputsVelocity : int
    {
        Off = 0,
        On = 1,
        Auto = 2,
        EVertexDeformationOutputsVelocity_MAX = 3,
    }
    public enum EAlphaChannelMode : int
    {
        Disabled = 0,
        LinearColorSpaceOnly = 1,
        AllowThroughTonemapper = 2,
        EAlphaChannelMode_MAX = 3,
    }
    public enum EAutoExposureMethodUI : int
    {
        AEM_Histogram = 0,
        AEM_Basic = 1,
        AEM_Manual = 2,
        AEM_MAX = 3,
    }
    public enum EDefaultBackBufferPixelFormat : int
    {
        DBBPF_B8G8R8A8 = 0,
        DBBPF_A16B16G16R16_DEPRECATED = 1,
        DBBPF_FloatRGB_DEPRECATED = 2,
        DBBPF_FloatRGBA = 3,
        DBBPF_A2B10G10R10 = 4,
        DBBPF_MAX = 5,
    }
    public enum EFixedFoveationLevels : int
    {
        Disabled = 0,
        Low = 1,
        Medium = 2,
        High = 3,
        HighTop = 4,
        EFixedFoveationLevels_MAX = 5,
    }
    public enum EMobileAntiAliasingMethod : int
    {
        None = 0,
        FXAA = 1,
        TemporalAA = 2,
        MSAA = 3,
        EMobileAntiAliasingMethod_MAX = 4,
    }
    public enum EMobileFloatPrecisionMode : int
    {
        Half = 0,
        Full_MaterialExpressionOnly = 1,
        Full = 2,
        EMobileFloatPrecisionMode_MAX = 3,
    }
    public enum EMobileShadingPath : int
    {
        Forward = 0,
        Deferred = 1,
        EMobileShadingPath_MAX = 2,
    }
    public enum EShaderCompressionFormat : int
    {
        None = 0,
        LZ4 = 1,
        Oodle = 2,
        Zlib = 3,
        EShaderCompressionFormat_MAX = 4,
    }
    public enum ELumenSoftwareTracingMode : int
    {
        DetailTracing = 1,
        GlobalTracing = 0,
        ELumenSoftwareTracingMode_MAX = 2,
    }
    public enum ELumenRayLightingMode : int
    {
        SurfaceCache = 0,
        HitLighting = 2,
        ELumenRayLightingMode_MAX = 3,
    }
    public enum EWorkingColorSpace : int
    {
        sRGB = 1,
        Rec2020 = 2,
        ACESAP0 = 3,
        ACESAP1 = 4,
        P3DCI = 5,
        P3D65 = 6,
        Custom = 7,
        EWorkingColorSpace_MAX = 8,
    }
    public enum ESkeletalMeshAsyncProperties : int
    {
        None = 0,
        Materials = 1,
        Skeleton = 2,
        RefSkeleton = 4,
        RetargetBasePose = 8,
        RefBasesInvMatrix = 16,
        MeshClothingAssets = 32,
        UseLegacyMeshDerivedDataKey = 64,
        HasActiveClothingAssets = 128,
        LODSettings = 256,
        HasVertexColors = 512,
        VertexColorGuid = 1024,
        MorphTargets = 2048,
        SkeletalMeshRenderData = 4096,
        MeshEditorDataObject = 8192,
        NeverStream = 16384,
        OverrideLODStreamingSettings = 32768,
        SupportLODStreaming = 65536,
        MaxNumStreamedLODs = 131072,
        MaxNumOptionalLODs = 262144,
        ImportedModel = 524288,
        LODInfo = 1048576,
        SkinWeightProfiles = 2097152,
        CachedComposedRefPoseMatrices = 4194304,
        SamplingInfo = 8388608,
        NodeMappingData = 16777216,
        ShadowPhysicsAsset = 33554432,
        SkelMirrorTable = 67108864,
        MinLod = 134217728,
        DisableBelowMinLodStripping = 268435456,
        SkelMirrorAxis = 536870912,
        SkelMirrorFlipAxis = 1073741824,
        DefaultAnimationRig = -2147483648,
        NegativeBoundsExtension = 0,
        PositiveBoundsExtension = 0,
        ExtendedBounds = 0,
        HasBeenSimplified = 0,
        EnablePerPolyCollision = 0,
        BodySetup = 0,
        MorphTargetIndexMap = 0,
        FloorOffset = 0,
        ImportedBounds = 0,
        PhysicsAsset = 0,
        AssetImportData = 0,
        ThumbnailInfo = 0,
        HasCustomDefaultEditorCamera = 0,
        DefaultEditorCameraLocation = 0,
        DefaultEditorCameraRotation = 0,
        RequiresLODScreenSizeConversion = 0,
        PostProcessAnimBlueprint = 0,
        DefaultEditorCameraLookAt = 0,
        PreviewAttachedAssetContainer = 0,
        DefaultEditorCameraOrthoZoom = 0,
        RequiresLODHysteresisConversion = 0,
        bSupportRayTracing = 0,
        RayTracingMinLOD = 0,
        ClothLODBiasMode = 0,
        DefaultMeshDeformer = 0,
        All = -1,
        ESkeletalMeshAsyncProperties_MAX = 1,
    }
    public enum EClothLODBiasMode : int
    {
        MappingsToSameLOD = 0,
        MappingsToMinLOD = 1,
        MappingsToAnyLOD = 2,
        EClothLODBiasMode_MAX = 3,
    }
    public enum EBoneFilterActionOption : int
    {
        Remove = 0,
        Keep = 1,
        Invalid = 2,
        EBoneFilterActionOption_MAX = 3,
    }
    public enum EVirtualizationMode : int
    {
        Disabled = 0,
        PlayWhenSilent = 1,
        Restart = 2,
        EVirtualizationMode_MAX = 3,
    }
    public enum EMaxConcurrentResolutionRule : int
    {
        PreventNew = 0,
        StopOldest = 1,
        StopFarthestThenPreventNew = 2,
        StopFarthestThenOldest = 3,
        StopLowestPriority = 4,
        StopQuietest = 5,
        StopLowestPriorityThenPreventNew = 6,
        Count = 7,
        EMaxConcurrentResolutionRule_MAX = 8,
    }
    public enum EConcurrencyVolumeScaleMode : int
    {
        Default = 0,
        Distance = 1,
        Priority = 2,
        EConcurrencyVolumeScaleMode_MAX = 3,
    }
    public enum EModulationRouting : int
    {
        Disable = 0,
        Inherit = 1,
        Override = 2,
        Union = 3,
        EModulationRouting_MAX = 4,
    }
    public enum ESourceBusChannels : int
    {
        Mono = 0,
        Stereo = 1,
        ESourceBusChannels_MAX = 2,
    }
    public enum EFFTSize : int
    {
        DefaultSize = 0,
        Min = 1,
        Small = 2,
        Medium = 3,
        Large = 4,
        VeryLarge = 5,
        Max = 6,
    }
    public enum EFFTPeakInterpolationMethod : int
    {
        NearestNeighbor = 0,
        Linear = 1,
        Quadratic = 2,
        ConstantQ = 3,
        EFFTPeakInterpolationMethod_MAX = 4,
    }
    public enum EFFTWindowType : int
    {
        None = 0,
        Hamming = 1,
        Hann = 2,
        Blackman = 3,
        EFFTWindowType_MAX = 4,
    }
    public enum EAudioSpectrumType : int
    {
        MagnitudeSpectrum = 0,
        PowerSpectrum = 1,
        Decibel = 2,
        EAudioSpectrumType_MAX = 3,
    }
    public enum EGainParamMode : int
    {
        Linear = 0,
        Decibels = 1,
        EGainParamMode_MAX = 2,
    }
    public enum EAudioSpectrumBandPresetType : int
    {
        KickDrum = 0,
        SnareDrum = 1,
        Voice = 2,
        Cymbals = 3,
        EAudioSpectrumBandPresetType_MAX = 4,
    }
    public enum EAudioRecordingExportType : int
    {
        SoundWave = 0,
        WavFile = 1,
        EAudioRecordingExportType_MAX = 2,
    }
    public enum ESendLevelControlMethod : int
    {
        Linear = 0,
        CustomCurve = 1,
        Manual = 2,
        ESendLevelControlMethod_MAX = 3,
    }
    public enum ESubmixSendStage : int
    {
        PostDistanceAttenuation = 0,
        PreDistanceAttenuation = 1,
        ESubmixSendStage_MAX = 2,
    }
    public enum ETextureEncodeEffort : int
    {
        Default = 0,
        Low = 10,
        Normal = 20,
        High = 30,
        ETextureEncodeEffort_MAX = 31,
    }
    public enum ETextureUniversalTiling : int
    {
        Disabled = 0,
        Enabled_256KB = 1,
        Enabled_64KB = 2,
        ETextureUniversalTiling_MAX = 3,
    }
    public enum ETextureEncodeSpeedOverride : int
    {
        Disabled = 255,
        Final = 0,
        FinalIfAvailable = 1,
        Fast = 2,
        ETextureEncodeSpeedOverride_MAX = 256,
    }
    public enum ERenderFocusRule : int
    {
        Always = 0,
        NonPointer = 1,
        NavigationOnly = 2,
        Never = 3,
        ERenderFocusRule_MAX = 4,
    }
    public enum EUIScalingRule : int
    {
        ShortestSide = 0,
        LongestSide = 1,
        Horizontal = 2,
        Vertical = 3,
        ScaleToFit = 4,
        Custom = 5,
        EUIScalingRule_MAX = 6,
    }
    public enum EDataLayerState : int
    {
        Unloaded = 0,
        Loaded = 1,
        Activated = 2,
        EDataLayerState_MAX = 3,
    }
    public enum EHLODLayerType : int
    {
        Instancing = 0,
        MeshMerge = 1,
        MeshSimplify = 2,
        MeshApproximate = 3,
        Custom = 4,
        EHLODLayerType_MAX = 5,
    }
    public enum EWorldPartitionRuntimeCellState : int
    {
        Unloaded = 0,
        Loaded = 1,
        Activated = 2,
        EWorldPartitionRuntimeCellState_MAX = 3,
    }
    public enum EWorldPartitionStreamingPerformance : int
    {
        Good = 0,
        Slow = 1,
        Critical = 2,
        EWorldPartitionStreamingPerformance_MAX = 3,
    }
    public class PostProcessSettings : Object
    {
        public PostProcessSettings(nint addr) : base(addr) { }
        public bool bOverride_TemperatureType { get { return this[nameof(bOverride_TemperatureType)].Flag; } set { this[nameof(bOverride_TemperatureType)].Flag = value; } }
        public bool bOverride_WhiteTemp { get { return this[nameof(bOverride_WhiteTemp)].Flag; } set { this[nameof(bOverride_WhiteTemp)].Flag = value; } }
        public bool bOverride_WhiteTint { get { return this[nameof(bOverride_WhiteTint)].Flag; } set { this[nameof(bOverride_WhiteTint)].Flag = value; } }
        public bool bOverride_ColorSaturation { get { return this[nameof(bOverride_ColorSaturation)].Flag; } set { this[nameof(bOverride_ColorSaturation)].Flag = value; } }
        public bool bOverride_ColorContrast { get { return this[nameof(bOverride_ColorContrast)].Flag; } set { this[nameof(bOverride_ColorContrast)].Flag = value; } }
        public bool bOverride_ColorGamma { get { return this[nameof(bOverride_ColorGamma)].Flag; } set { this[nameof(bOverride_ColorGamma)].Flag = value; } }
        public bool bOverride_ColorGain { get { return this[nameof(bOverride_ColorGain)].Flag; } set { this[nameof(bOverride_ColorGain)].Flag = value; } }
        public bool bOverride_ColorOffset { get { return this[nameof(bOverride_ColorOffset)].Flag; } set { this[nameof(bOverride_ColorOffset)].Flag = value; } }
        public bool bOverride_ColorSaturationShadows { get { return this[nameof(bOverride_ColorSaturationShadows)].Flag; } set { this[nameof(bOverride_ColorSaturationShadows)].Flag = value; } }
        public bool bOverride_ColorContrastShadows { get { return this[nameof(bOverride_ColorContrastShadows)].Flag; } set { this[nameof(bOverride_ColorContrastShadows)].Flag = value; } }
        public bool bOverride_ColorGammaShadows { get { return this[nameof(bOverride_ColorGammaShadows)].Flag; } set { this[nameof(bOverride_ColorGammaShadows)].Flag = value; } }
        public bool bOverride_ColorGainShadows { get { return this[nameof(bOverride_ColorGainShadows)].Flag; } set { this[nameof(bOverride_ColorGainShadows)].Flag = value; } }
        public bool bOverride_ColorOffsetShadows { get { return this[nameof(bOverride_ColorOffsetShadows)].Flag; } set { this[nameof(bOverride_ColorOffsetShadows)].Flag = value; } }
        public bool bOverride_ColorSaturationMidtones { get { return this[nameof(bOverride_ColorSaturationMidtones)].Flag; } set { this[nameof(bOverride_ColorSaturationMidtones)].Flag = value; } }
        public bool bOverride_ColorContrastMidtones { get { return this[nameof(bOverride_ColorContrastMidtones)].Flag; } set { this[nameof(bOverride_ColorContrastMidtones)].Flag = value; } }
        public bool bOverride_ColorGammaMidtones { get { return this[nameof(bOverride_ColorGammaMidtones)].Flag; } set { this[nameof(bOverride_ColorGammaMidtones)].Flag = value; } }
        public bool bOverride_ColorGainMidtones { get { return this[nameof(bOverride_ColorGainMidtones)].Flag; } set { this[nameof(bOverride_ColorGainMidtones)].Flag = value; } }
        public bool bOverride_ColorOffsetMidtones { get { return this[nameof(bOverride_ColorOffsetMidtones)].Flag; } set { this[nameof(bOverride_ColorOffsetMidtones)].Flag = value; } }
        public bool bOverride_ColorSaturationHighlights { get { return this[nameof(bOverride_ColorSaturationHighlights)].Flag; } set { this[nameof(bOverride_ColorSaturationHighlights)].Flag = value; } }
        public bool bOverride_ColorContrastHighlights { get { return this[nameof(bOverride_ColorContrastHighlights)].Flag; } set { this[nameof(bOverride_ColorContrastHighlights)].Flag = value; } }
        public bool bOverride_ColorGammaHighlights { get { return this[nameof(bOverride_ColorGammaHighlights)].Flag; } set { this[nameof(bOverride_ColorGammaHighlights)].Flag = value; } }
        public bool bOverride_ColorGainHighlights { get { return this[nameof(bOverride_ColorGainHighlights)].Flag; } set { this[nameof(bOverride_ColorGainHighlights)].Flag = value; } }
        public bool bOverride_ColorOffsetHighlights { get { return this[nameof(bOverride_ColorOffsetHighlights)].Flag; } set { this[nameof(bOverride_ColorOffsetHighlights)].Flag = value; } }
        public bool bOverride_ColorCorrectionShadowsMax { get { return this[nameof(bOverride_ColorCorrectionShadowsMax)].Flag; } set { this[nameof(bOverride_ColorCorrectionShadowsMax)].Flag = value; } }
        public bool bOverride_ColorCorrectionHighlightsMin { get { return this[nameof(bOverride_ColorCorrectionHighlightsMin)].Flag; } set { this[nameof(bOverride_ColorCorrectionHighlightsMin)].Flag = value; } }
        public bool bOverride_ColorCorrectionHighlightsMax { get { return this[nameof(bOverride_ColorCorrectionHighlightsMax)].Flag; } set { this[nameof(bOverride_ColorCorrectionHighlightsMax)].Flag = value; } }
        public bool bOverride_BlueCorrection { get { return this[nameof(bOverride_BlueCorrection)].Flag; } set { this[nameof(bOverride_BlueCorrection)].Flag = value; } }
        public bool bOverride_ExpandGamut { get { return this[nameof(bOverride_ExpandGamut)].Flag; } set { this[nameof(bOverride_ExpandGamut)].Flag = value; } }
        public bool bOverride_ToneCurveAmount { get { return this[nameof(bOverride_ToneCurveAmount)].Flag; } set { this[nameof(bOverride_ToneCurveAmount)].Flag = value; } }
        public bool bOverride_FilmSlope { get { return this[nameof(bOverride_FilmSlope)].Flag; } set { this[nameof(bOverride_FilmSlope)].Flag = value; } }
        public bool bOverride_FilmToe { get { return this[nameof(bOverride_FilmToe)].Flag; } set { this[nameof(bOverride_FilmToe)].Flag = value; } }
        public bool bOverride_FilmShoulder { get { return this[nameof(bOverride_FilmShoulder)].Flag; } set { this[nameof(bOverride_FilmShoulder)].Flag = value; } }
        public bool bOverride_FilmBlackClip { get { return this[nameof(bOverride_FilmBlackClip)].Flag; } set { this[nameof(bOverride_FilmBlackClip)].Flag = value; } }
        public bool bOverride_FilmWhiteClip { get { return this[nameof(bOverride_FilmWhiteClip)].Flag; } set { this[nameof(bOverride_FilmWhiteClip)].Flag = value; } }
        public bool bOverride_SceneColorTint { get { return this[nameof(bOverride_SceneColorTint)].Flag; } set { this[nameof(bOverride_SceneColorTint)].Flag = value; } }
        public bool bOverride_SceneFringeIntensity { get { return this[nameof(bOverride_SceneFringeIntensity)].Flag; } set { this[nameof(bOverride_SceneFringeIntensity)].Flag = value; } }
        public bool bOverride_ChromaticAberrationStartOffset { get { return this[nameof(bOverride_ChromaticAberrationStartOffset)].Flag; } set { this[nameof(bOverride_ChromaticAberrationStartOffset)].Flag = value; } }
        public bool bOverride_AmbientCubemapTint { get { return this[nameof(bOverride_AmbientCubemapTint)].Flag; } set { this[nameof(bOverride_AmbientCubemapTint)].Flag = value; } }
        public bool bOverride_AmbientCubemapIntensity { get { return this[nameof(bOverride_AmbientCubemapIntensity)].Flag; } set { this[nameof(bOverride_AmbientCubemapIntensity)].Flag = value; } }
        public bool bOverride_BloomMethod { get { return this[nameof(bOverride_BloomMethod)].Flag; } set { this[nameof(bOverride_BloomMethod)].Flag = value; } }
        public bool bOverride_BloomIntensity { get { return this[nameof(bOverride_BloomIntensity)].Flag; } set { this[nameof(bOverride_BloomIntensity)].Flag = value; } }
        public bool bOverride_BloomThreshold { get { return this[nameof(bOverride_BloomThreshold)].Flag; } set { this[nameof(bOverride_BloomThreshold)].Flag = value; } }
        public bool bOverride_Bloom1Tint { get { return this[nameof(bOverride_Bloom1Tint)].Flag; } set { this[nameof(bOverride_Bloom1Tint)].Flag = value; } }
        public bool bOverride_Bloom1Size { get { return this[nameof(bOverride_Bloom1Size)].Flag; } set { this[nameof(bOverride_Bloom1Size)].Flag = value; } }
        public bool bOverride_Bloom2Size { get { return this[nameof(bOverride_Bloom2Size)].Flag; } set { this[nameof(bOverride_Bloom2Size)].Flag = value; } }
        public bool bOverride_Bloom2Tint { get { return this[nameof(bOverride_Bloom2Tint)].Flag; } set { this[nameof(bOverride_Bloom2Tint)].Flag = value; } }
        public bool bOverride_Bloom3Tint { get { return this[nameof(bOverride_Bloom3Tint)].Flag; } set { this[nameof(bOverride_Bloom3Tint)].Flag = value; } }
        public bool bOverride_Bloom3Size { get { return this[nameof(bOverride_Bloom3Size)].Flag; } set { this[nameof(bOverride_Bloom3Size)].Flag = value; } }
        public bool bOverride_Bloom4Tint { get { return this[nameof(bOverride_Bloom4Tint)].Flag; } set { this[nameof(bOverride_Bloom4Tint)].Flag = value; } }
        public bool bOverride_Bloom4Size { get { return this[nameof(bOverride_Bloom4Size)].Flag; } set { this[nameof(bOverride_Bloom4Size)].Flag = value; } }
        public bool bOverride_Bloom5Tint { get { return this[nameof(bOverride_Bloom5Tint)].Flag; } set { this[nameof(bOverride_Bloom5Tint)].Flag = value; } }
        public bool bOverride_Bloom5Size { get { return this[nameof(bOverride_Bloom5Size)].Flag; } set { this[nameof(bOverride_Bloom5Size)].Flag = value; } }
        public bool bOverride_Bloom6Tint { get { return this[nameof(bOverride_Bloom6Tint)].Flag; } set { this[nameof(bOverride_Bloom6Tint)].Flag = value; } }
        public bool bOverride_Bloom6Size { get { return this[nameof(bOverride_Bloom6Size)].Flag; } set { this[nameof(bOverride_Bloom6Size)].Flag = value; } }
        public bool bOverride_BloomSizeScale { get { return this[nameof(bOverride_BloomSizeScale)].Flag; } set { this[nameof(bOverride_BloomSizeScale)].Flag = value; } }
        public bool bOverride_BloomConvolutionTexture { get { return this[nameof(bOverride_BloomConvolutionTexture)].Flag; } set { this[nameof(bOverride_BloomConvolutionTexture)].Flag = value; } }
        public bool bOverride_BloomConvolutionScatterDispersion { get { return this[nameof(bOverride_BloomConvolutionScatterDispersion)].Flag; } set { this[nameof(bOverride_BloomConvolutionScatterDispersion)].Flag = value; } }
        public bool bOverride_BloomConvolutionSize { get { return this[nameof(bOverride_BloomConvolutionSize)].Flag; } set { this[nameof(bOverride_BloomConvolutionSize)].Flag = value; } }
        public bool bOverride_BloomConvolutionCenterUV { get { return this[nameof(bOverride_BloomConvolutionCenterUV)].Flag; } set { this[nameof(bOverride_BloomConvolutionCenterUV)].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilter { get { return this[nameof(bOverride_BloomConvolutionPreFilter)].Flag; } set { this[nameof(bOverride_BloomConvolutionPreFilter)].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMin { get { return this[nameof(bOverride_BloomConvolutionPreFilterMin)].Flag; } set { this[nameof(bOverride_BloomConvolutionPreFilterMin)].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMax { get { return this[nameof(bOverride_BloomConvolutionPreFilterMax)].Flag; } set { this[nameof(bOverride_BloomConvolutionPreFilterMax)].Flag = value; } }
        public bool bOverride_BloomConvolutionPreFilterMult { get { return this[nameof(bOverride_BloomConvolutionPreFilterMult)].Flag; } set { this[nameof(bOverride_BloomConvolutionPreFilterMult)].Flag = value; } }
        public bool bOverride_BloomConvolutionBufferScale { get { return this[nameof(bOverride_BloomConvolutionBufferScale)].Flag; } set { this[nameof(bOverride_BloomConvolutionBufferScale)].Flag = value; } }
        public bool bOverride_BloomDirtMaskIntensity { get { return this[nameof(bOverride_BloomDirtMaskIntensity)].Flag; } set { this[nameof(bOverride_BloomDirtMaskIntensity)].Flag = value; } }
        public bool bOverride_BloomDirtMaskTint { get { return this[nameof(bOverride_BloomDirtMaskTint)].Flag; } set { this[nameof(bOverride_BloomDirtMaskTint)].Flag = value; } }
        public bool bOverride_BloomDirtMask { get { return this[nameof(bOverride_BloomDirtMask)].Flag; } set { this[nameof(bOverride_BloomDirtMask)].Flag = value; } }
        public bool bOverride_CameraShutterSpeed { get { return this[nameof(bOverride_CameraShutterSpeed)].Flag; } set { this[nameof(bOverride_CameraShutterSpeed)].Flag = value; } }
        public bool bOverride_CameraISO { get { return this[nameof(bOverride_CameraISO)].Flag; } set { this[nameof(bOverride_CameraISO)].Flag = value; } }
        public bool bOverride_AutoExposureMethod { get { return this[nameof(bOverride_AutoExposureMethod)].Flag; } set { this[nameof(bOverride_AutoExposureMethod)].Flag = value; } }
        public bool bOverride_AutoExposureLowPercent { get { return this[nameof(bOverride_AutoExposureLowPercent)].Flag; } set { this[nameof(bOverride_AutoExposureLowPercent)].Flag = value; } }
        public bool bOverride_AutoExposureHighPercent { get { return this[nameof(bOverride_AutoExposureHighPercent)].Flag; } set { this[nameof(bOverride_AutoExposureHighPercent)].Flag = value; } }
        public bool bOverride_AutoExposureMinBrightness { get { return this[nameof(bOverride_AutoExposureMinBrightness)].Flag; } set { this[nameof(bOverride_AutoExposureMinBrightness)].Flag = value; } }
        public bool bOverride_AutoExposureMaxBrightness { get { return this[nameof(bOverride_AutoExposureMaxBrightness)].Flag; } set { this[nameof(bOverride_AutoExposureMaxBrightness)].Flag = value; } }
        public bool bOverride_AutoExposureCalibrationConstant { get { return this[nameof(bOverride_AutoExposureCalibrationConstant)].Flag; } set { this[nameof(bOverride_AutoExposureCalibrationConstant)].Flag = value; } }
        public bool bOverride_AutoExposureSpeedUp { get { return this[nameof(bOverride_AutoExposureSpeedUp)].Flag; } set { this[nameof(bOverride_AutoExposureSpeedUp)].Flag = value; } }
        public bool bOverride_AutoExposureSpeedDown { get { return this[nameof(bOverride_AutoExposureSpeedDown)].Flag; } set { this[nameof(bOverride_AutoExposureSpeedDown)].Flag = value; } }
        public bool bOverride_AutoExposureBias { get { return this[nameof(bOverride_AutoExposureBias)].Flag; } set { this[nameof(bOverride_AutoExposureBias)].Flag = value; } }
        public bool bOverride_AutoExposureBiasCurve { get { return this[nameof(bOverride_AutoExposureBiasCurve)].Flag; } set { this[nameof(bOverride_AutoExposureBiasCurve)].Flag = value; } }
        public bool bOverride_AutoExposureMeterMask { get { return this[nameof(bOverride_AutoExposureMeterMask)].Flag; } set { this[nameof(bOverride_AutoExposureMeterMask)].Flag = value; } }
        public bool bOverride_AutoExposureApplyPhysicalCameraExposure { get { return this[nameof(bOverride_AutoExposureApplyPhysicalCameraExposure)].Flag; } set { this[nameof(bOverride_AutoExposureApplyPhysicalCameraExposure)].Flag = value; } }
        public bool bOverride_HistogramLogMin { get { return this[nameof(bOverride_HistogramLogMin)].Flag; } set { this[nameof(bOverride_HistogramLogMin)].Flag = value; } }
        public bool bOverride_HistogramLogMax { get { return this[nameof(bOverride_HistogramLogMax)].Flag; } set { this[nameof(bOverride_HistogramLogMax)].Flag = value; } }
        public bool bOverride_LocalExposureContrastScale { get { return this[nameof(bOverride_LocalExposureContrastScale)].Flag; } set { this[nameof(bOverride_LocalExposureContrastScale)].Flag = value; } }
        public bool bOverride_LocalExposureHighlightContrastScale { get { return this[nameof(bOverride_LocalExposureHighlightContrastScale)].Flag; } set { this[nameof(bOverride_LocalExposureHighlightContrastScale)].Flag = value; } }
        public bool bOverride_LocalExposureShadowContrastScale { get { return this[nameof(bOverride_LocalExposureShadowContrastScale)].Flag; } set { this[nameof(bOverride_LocalExposureShadowContrastScale)].Flag = value; } }
        public bool bOverride_LocalExposureDetailStrength { get { return this[nameof(bOverride_LocalExposureDetailStrength)].Flag; } set { this[nameof(bOverride_LocalExposureDetailStrength)].Flag = value; } }
        public bool bOverride_LocalExposureBlurredLuminanceBlend { get { return this[nameof(bOverride_LocalExposureBlurredLuminanceBlend)].Flag; } set { this[nameof(bOverride_LocalExposureBlurredLuminanceBlend)].Flag = value; } }
        public bool bOverride_LocalExposureBlurredLuminanceKernelSizePercent { get { return this[nameof(bOverride_LocalExposureBlurredLuminanceKernelSizePercent)].Flag; } set { this[nameof(bOverride_LocalExposureBlurredLuminanceKernelSizePercent)].Flag = value; } }
        public bool bOverride_LocalExposureMiddleGreyBias { get { return this[nameof(bOverride_LocalExposureMiddleGreyBias)].Flag; } set { this[nameof(bOverride_LocalExposureMiddleGreyBias)].Flag = value; } }
        public bool bOverride_LensFlareIntensity { get { return this[nameof(bOverride_LensFlareIntensity)].Flag; } set { this[nameof(bOverride_LensFlareIntensity)].Flag = value; } }
        public bool bOverride_LensFlareTint { get { return this[nameof(bOverride_LensFlareTint)].Flag; } set { this[nameof(bOverride_LensFlareTint)].Flag = value; } }
        public bool bOverride_LensFlareTints { get { return this[nameof(bOverride_LensFlareTints)].Flag; } set { this[nameof(bOverride_LensFlareTints)].Flag = value; } }
        public bool bOverride_LensFlareBokehSize { get { return this[nameof(bOverride_LensFlareBokehSize)].Flag; } set { this[nameof(bOverride_LensFlareBokehSize)].Flag = value; } }
        public bool bOverride_LensFlareBokehShape { get { return this[nameof(bOverride_LensFlareBokehShape)].Flag; } set { this[nameof(bOverride_LensFlareBokehShape)].Flag = value; } }
        public bool bOverride_LensFlareThreshold { get { return this[nameof(bOverride_LensFlareThreshold)].Flag; } set { this[nameof(bOverride_LensFlareThreshold)].Flag = value; } }
        public bool bOverride_VignetteIntensity { get { return this[nameof(bOverride_VignetteIntensity)].Flag; } set { this[nameof(bOverride_VignetteIntensity)].Flag = value; } }
        public bool bOverride_GrainIntensity { get { return this[nameof(bOverride_GrainIntensity)].Flag; } set { this[nameof(bOverride_GrainIntensity)].Flag = value; } }
        public bool bOverride_GrainJitter { get { return this[nameof(bOverride_GrainJitter)].Flag; } set { this[nameof(bOverride_GrainJitter)].Flag = value; } }
        public bool bOverride_FilmGrainIntensity { get { return this[nameof(bOverride_FilmGrainIntensity)].Flag; } set { this[nameof(bOverride_FilmGrainIntensity)].Flag = value; } }
        public bool bOverride_FilmGrainIntensityShadows { get { return this[nameof(bOverride_FilmGrainIntensityShadows)].Flag; } set { this[nameof(bOverride_FilmGrainIntensityShadows)].Flag = value; } }
        public bool bOverride_FilmGrainIntensityMidtones { get { return this[nameof(bOverride_FilmGrainIntensityMidtones)].Flag; } set { this[nameof(bOverride_FilmGrainIntensityMidtones)].Flag = value; } }
        public bool bOverride_FilmGrainIntensityHighlights { get { return this[nameof(bOverride_FilmGrainIntensityHighlights)].Flag; } set { this[nameof(bOverride_FilmGrainIntensityHighlights)].Flag = value; } }
        public bool bOverride_FilmGrainShadowsMax { get { return this[nameof(bOverride_FilmGrainShadowsMax)].Flag; } set { this[nameof(bOverride_FilmGrainShadowsMax)].Flag = value; } }
        public bool bOverride_FilmGrainHighlightsMin { get { return this[nameof(bOverride_FilmGrainHighlightsMin)].Flag; } set { this[nameof(bOverride_FilmGrainHighlightsMin)].Flag = value; } }
        public bool bOverride_FilmGrainHighlightsMax { get { return this[nameof(bOverride_FilmGrainHighlightsMax)].Flag; } set { this[nameof(bOverride_FilmGrainHighlightsMax)].Flag = value; } }
        public bool bOverride_FilmGrainTexelSize { get { return this[nameof(bOverride_FilmGrainTexelSize)].Flag; } set { this[nameof(bOverride_FilmGrainTexelSize)].Flag = value; } }
        public bool bOverride_FilmGrainTexture { get { return this[nameof(bOverride_FilmGrainTexture)].Flag; } set { this[nameof(bOverride_FilmGrainTexture)].Flag = value; } }
        public bool bOverride_AmbientOcclusionIntensity { get { return this[nameof(bOverride_AmbientOcclusionIntensity)].Flag; } set { this[nameof(bOverride_AmbientOcclusionIntensity)].Flag = value; } }
        public bool bOverride_AmbientOcclusionStaticFraction { get { return this[nameof(bOverride_AmbientOcclusionStaticFraction)].Flag; } set { this[nameof(bOverride_AmbientOcclusionStaticFraction)].Flag = value; } }
        public bool bOverride_AmbientOcclusionRadius { get { return this[nameof(bOverride_AmbientOcclusionRadius)].Flag; } set { this[nameof(bOverride_AmbientOcclusionRadius)].Flag = value; } }
        public bool bOverride_AmbientOcclusionFadeDistance { get { return this[nameof(bOverride_AmbientOcclusionFadeDistance)].Flag; } set { this[nameof(bOverride_AmbientOcclusionFadeDistance)].Flag = value; } }
        public bool bOverride_AmbientOcclusionFadeRadius { get { return this[nameof(bOverride_AmbientOcclusionFadeRadius)].Flag; } set { this[nameof(bOverride_AmbientOcclusionFadeRadius)].Flag = value; } }
        public bool bOverride_AmbientOcclusionDistance { get { return this[nameof(bOverride_AmbientOcclusionDistance)].Flag; } set { this[nameof(bOverride_AmbientOcclusionDistance)].Flag = value; } }
        public bool bOverride_AmbientOcclusionRadiusInWS { get { return this[nameof(bOverride_AmbientOcclusionRadiusInWS)].Flag; } set { this[nameof(bOverride_AmbientOcclusionRadiusInWS)].Flag = value; } }
        public bool bOverride_AmbientOcclusionPower { get { return this[nameof(bOverride_AmbientOcclusionPower)].Flag; } set { this[nameof(bOverride_AmbientOcclusionPower)].Flag = value; } }
        public bool bOverride_AmbientOcclusionBias { get { return this[nameof(bOverride_AmbientOcclusionBias)].Flag; } set { this[nameof(bOverride_AmbientOcclusionBias)].Flag = value; } }
        public bool bOverride_AmbientOcclusionQuality { get { return this[nameof(bOverride_AmbientOcclusionQuality)].Flag; } set { this[nameof(bOverride_AmbientOcclusionQuality)].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipBlend { get { return this[nameof(bOverride_AmbientOcclusionMipBlend)].Flag; } set { this[nameof(bOverride_AmbientOcclusionMipBlend)].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipScale { get { return this[nameof(bOverride_AmbientOcclusionMipScale)].Flag; } set { this[nameof(bOverride_AmbientOcclusionMipScale)].Flag = value; } }
        public bool bOverride_AmbientOcclusionMipThreshold { get { return this[nameof(bOverride_AmbientOcclusionMipThreshold)].Flag; } set { this[nameof(bOverride_AmbientOcclusionMipThreshold)].Flag = value; } }
        public bool bOverride_AmbientOcclusionTemporalBlendWeight { get { return this[nameof(bOverride_AmbientOcclusionTemporalBlendWeight)].Flag; } set { this[nameof(bOverride_AmbientOcclusionTemporalBlendWeight)].Flag = value; } }
        public bool bOverride_RayTracingAO { get { return this[nameof(bOverride_RayTracingAO)].Flag; } set { this[nameof(bOverride_RayTracingAO)].Flag = value; } }
        public bool bOverride_RayTracingAOSamplesPerPixel { get { return this[nameof(bOverride_RayTracingAOSamplesPerPixel)].Flag; } set { this[nameof(bOverride_RayTracingAOSamplesPerPixel)].Flag = value; } }
        public bool bOverride_RayTracingAOIntensity { get { return this[nameof(bOverride_RayTracingAOIntensity)].Flag; } set { this[nameof(bOverride_RayTracingAOIntensity)].Flag = value; } }
        public bool bOverride_RayTracingAORadius { get { return this[nameof(bOverride_RayTracingAORadius)].Flag; } set { this[nameof(bOverride_RayTracingAORadius)].Flag = value; } }
        public bool bOverride_LPVIntensity { get { return this[nameof(bOverride_LPVIntensity)].Flag; } set { this[nameof(bOverride_LPVIntensity)].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionIntensity { get { return this[nameof(bOverride_LPVDirectionalOcclusionIntensity)].Flag; } set { this[nameof(bOverride_LPVDirectionalOcclusionIntensity)].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionRadius { get { return this[nameof(bOverride_LPVDirectionalOcclusionRadius)].Flag; } set { this[nameof(bOverride_LPVDirectionalOcclusionRadius)].Flag = value; } }
        public bool bOverride_LPVDiffuseOcclusionExponent { get { return this[nameof(bOverride_LPVDiffuseOcclusionExponent)].Flag; } set { this[nameof(bOverride_LPVDiffuseOcclusionExponent)].Flag = value; } }
        public bool bOverride_LPVSpecularOcclusionExponent { get { return this[nameof(bOverride_LPVSpecularOcclusionExponent)].Flag; } set { this[nameof(bOverride_LPVSpecularOcclusionExponent)].Flag = value; } }
        public bool bOverride_LPVDiffuseOcclusionIntensity { get { return this[nameof(bOverride_LPVDiffuseOcclusionIntensity)].Flag; } set { this[nameof(bOverride_LPVDiffuseOcclusionIntensity)].Flag = value; } }
        public bool bOverride_LPVSpecularOcclusionIntensity { get { return this[nameof(bOverride_LPVSpecularOcclusionIntensity)].Flag; } set { this[nameof(bOverride_LPVSpecularOcclusionIntensity)].Flag = value; } }
        public bool bOverride_LPVSize { get { return this[nameof(bOverride_LPVSize)].Flag; } set { this[nameof(bOverride_LPVSize)].Flag = value; } }
        public bool bOverride_LPVSecondaryOcclusionIntensity { get { return this[nameof(bOverride_LPVSecondaryOcclusionIntensity)].Flag; } set { this[nameof(bOverride_LPVSecondaryOcclusionIntensity)].Flag = value; } }
        public bool bOverride_LPVSecondaryBounceIntensity { get { return this[nameof(bOverride_LPVSecondaryBounceIntensity)].Flag; } set { this[nameof(bOverride_LPVSecondaryBounceIntensity)].Flag = value; } }
        public bool bOverride_LPVGeometryVolumeBias { get { return this[nameof(bOverride_LPVGeometryVolumeBias)].Flag; } set { this[nameof(bOverride_LPVGeometryVolumeBias)].Flag = value; } }
        public bool bOverride_LPVVplInjectionBias { get { return this[nameof(bOverride_LPVVplInjectionBias)].Flag; } set { this[nameof(bOverride_LPVVplInjectionBias)].Flag = value; } }
        public bool bOverride_LPVEmissiveInjectionIntensity { get { return this[nameof(bOverride_LPVEmissiveInjectionIntensity)].Flag; } set { this[nameof(bOverride_LPVEmissiveInjectionIntensity)].Flag = value; } }
        public bool bOverride_LPVFadeRange { get { return this[nameof(bOverride_LPVFadeRange)].Flag; } set { this[nameof(bOverride_LPVFadeRange)].Flag = value; } }
        public bool bOverride_LPVDirectionalOcclusionFadeRange { get { return this[nameof(bOverride_LPVDirectionalOcclusionFadeRange)].Flag; } set { this[nameof(bOverride_LPVDirectionalOcclusionFadeRange)].Flag = value; } }
        public bool bOverride_IndirectLightingColor { get { return this[nameof(bOverride_IndirectLightingColor)].Flag; } set { this[nameof(bOverride_IndirectLightingColor)].Flag = value; } }
        public bool bOverride_IndirectLightingIntensity { get { return this[nameof(bOverride_IndirectLightingIntensity)].Flag; } set { this[nameof(bOverride_IndirectLightingIntensity)].Flag = value; } }
        public bool bOverride_ColorGradingIntensity { get { return this[nameof(bOverride_ColorGradingIntensity)].Flag; } set { this[nameof(bOverride_ColorGradingIntensity)].Flag = value; } }
        public bool bOverride_ColorGradingLUT { get { return this[nameof(bOverride_ColorGradingLUT)].Flag; } set { this[nameof(bOverride_ColorGradingLUT)].Flag = value; } }
        public bool bOverride_DepthOfFieldFocalDistance { get { return this[nameof(bOverride_DepthOfFieldFocalDistance)].Flag; } set { this[nameof(bOverride_DepthOfFieldFocalDistance)].Flag = value; } }
        public bool bOverride_DepthOfFieldFstop { get { return this[nameof(bOverride_DepthOfFieldFstop)].Flag; } set { this[nameof(bOverride_DepthOfFieldFstop)].Flag = value; } }
        public bool bOverride_DepthOfFieldMinFstop { get { return this[nameof(bOverride_DepthOfFieldMinFstop)].Flag; } set { this[nameof(bOverride_DepthOfFieldMinFstop)].Flag = value; } }
        public bool bOverride_DepthOfFieldBladeCount { get { return this[nameof(bOverride_DepthOfFieldBladeCount)].Flag; } set { this[nameof(bOverride_DepthOfFieldBladeCount)].Flag = value; } }
        public bool bOverride_DepthOfFieldSensorWidth { get { return this[nameof(bOverride_DepthOfFieldSensorWidth)].Flag; } set { this[nameof(bOverride_DepthOfFieldSensorWidth)].Flag = value; } }
        public bool bOverride_DepthOfFieldSqueezeFactor { get { return this[nameof(bOverride_DepthOfFieldSqueezeFactor)].Flag; } set { this[nameof(bOverride_DepthOfFieldSqueezeFactor)].Flag = value; } }
        public bool bOverride_DepthOfFieldDepthBlurRadius { get { return this[nameof(bOverride_DepthOfFieldDepthBlurRadius)].Flag; } set { this[nameof(bOverride_DepthOfFieldDepthBlurRadius)].Flag = value; } }
        public bool bOverride_DepthOfFieldDepthBlurAmount { get { return this[nameof(bOverride_DepthOfFieldDepthBlurAmount)].Flag; } set { this[nameof(bOverride_DepthOfFieldDepthBlurAmount)].Flag = value; } }
        public bool bOverride_DepthOfFieldFocalRegion { get { return this[nameof(bOverride_DepthOfFieldFocalRegion)].Flag; } set { this[nameof(bOverride_DepthOfFieldFocalRegion)].Flag = value; } }
        public bool bOverride_DepthOfFieldNearTransitionRegion { get { return this[nameof(bOverride_DepthOfFieldNearTransitionRegion)].Flag; } set { this[nameof(bOverride_DepthOfFieldNearTransitionRegion)].Flag = value; } }
        public bool bOverride_DepthOfFieldFarTransitionRegion { get { return this[nameof(bOverride_DepthOfFieldFarTransitionRegion)].Flag; } set { this[nameof(bOverride_DepthOfFieldFarTransitionRegion)].Flag = value; } }
        public bool bOverride_DepthOfFieldScale { get { return this[nameof(bOverride_DepthOfFieldScale)].Flag; } set { this[nameof(bOverride_DepthOfFieldScale)].Flag = value; } }
        public bool bOverride_DepthOfFieldNearBlurSize { get { return this[nameof(bOverride_DepthOfFieldNearBlurSize)].Flag; } set { this[nameof(bOverride_DepthOfFieldNearBlurSize)].Flag = value; } }
        public bool bOverride_DepthOfFieldFarBlurSize { get { return this[nameof(bOverride_DepthOfFieldFarBlurSize)].Flag; } set { this[nameof(bOverride_DepthOfFieldFarBlurSize)].Flag = value; } }
        public bool bOverride_MobileHQGaussian { get { return this[nameof(bOverride_MobileHQGaussian)].Flag; } set { this[nameof(bOverride_MobileHQGaussian)].Flag = value; } }
        public bool bOverride_DepthOfFieldOcclusion { get { return this[nameof(bOverride_DepthOfFieldOcclusion)].Flag; } set { this[nameof(bOverride_DepthOfFieldOcclusion)].Flag = value; } }
        public bool bOverride_DepthOfFieldSkyFocusDistance { get { return this[nameof(bOverride_DepthOfFieldSkyFocusDistance)].Flag; } set { this[nameof(bOverride_DepthOfFieldSkyFocusDistance)].Flag = value; } }
        public bool bOverride_DepthOfFieldVignetteSize { get { return this[nameof(bOverride_DepthOfFieldVignetteSize)].Flag; } set { this[nameof(bOverride_DepthOfFieldVignetteSize)].Flag = value; } }
        public bool bOverride_MotionBlurAmount { get { return this[nameof(bOverride_MotionBlurAmount)].Flag; } set { this[nameof(bOverride_MotionBlurAmount)].Flag = value; } }
        public bool bOverride_MotionBlurMax { get { return this[nameof(bOverride_MotionBlurMax)].Flag; } set { this[nameof(bOverride_MotionBlurMax)].Flag = value; } }
        public bool bOverride_MotionBlurTargetFPS { get { return this[nameof(bOverride_MotionBlurTargetFPS)].Flag; } set { this[nameof(bOverride_MotionBlurTargetFPS)].Flag = value; } }
        public bool bOverride_MotionBlurPerObjectSize { get { return this[nameof(bOverride_MotionBlurPerObjectSize)].Flag; } set { this[nameof(bOverride_MotionBlurPerObjectSize)].Flag = value; } }
        public bool bOverride_ScreenPercentage { get { return this[nameof(bOverride_ScreenPercentage)].Flag; } set { this[nameof(bOverride_ScreenPercentage)].Flag = value; } }
        public bool bOverride_ReflectionMethod { get { return this[nameof(bOverride_ReflectionMethod)].Flag; } set { this[nameof(bOverride_ReflectionMethod)].Flag = value; } }
        public bool bOverride_LumenReflectionQuality { get { return this[nameof(bOverride_LumenReflectionQuality)].Flag; } set { this[nameof(bOverride_LumenReflectionQuality)].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionIntensity { get { return this[nameof(bOverride_ScreenSpaceReflectionIntensity)].Flag; } set { this[nameof(bOverride_ScreenSpaceReflectionIntensity)].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionQuality { get { return this[nameof(bOverride_ScreenSpaceReflectionQuality)].Flag; } set { this[nameof(bOverride_ScreenSpaceReflectionQuality)].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionMaxRoughness { get { return this[nameof(bOverride_ScreenSpaceReflectionMaxRoughness)].Flag; } set { this[nameof(bOverride_ScreenSpaceReflectionMaxRoughness)].Flag = value; } }
        public bool bOverride_ScreenSpaceReflectionRoughnessScale { get { return this[nameof(bOverride_ScreenSpaceReflectionRoughnessScale)].Flag; } set { this[nameof(bOverride_ScreenSpaceReflectionRoughnessScale)].Flag = value; } }
        public bool bOverride_ReflectionsType { get { return this[nameof(bOverride_ReflectionsType)].Flag; } set { this[nameof(bOverride_ReflectionsType)].Flag = value; } }
        public bool bOverride_RayTracingReflectionsMaxRoughness { get { return this[nameof(bOverride_RayTracingReflectionsMaxRoughness)].Flag; } set { this[nameof(bOverride_RayTracingReflectionsMaxRoughness)].Flag = value; } }
        public bool bOverride_RayTracingReflectionsMaxBounces { get { return this[nameof(bOverride_RayTracingReflectionsMaxBounces)].Flag; } set { this[nameof(bOverride_RayTracingReflectionsMaxBounces)].Flag = value; } }
        public bool bOverride_RayTracingReflectionsSamplesPerPixel { get { return this[nameof(bOverride_RayTracingReflectionsSamplesPerPixel)].Flag; } set { this[nameof(bOverride_RayTracingReflectionsSamplesPerPixel)].Flag = value; } }
        public bool bOverride_RayTracingReflectionsShadows { get { return this[nameof(bOverride_RayTracingReflectionsShadows)].Flag; } set { this[nameof(bOverride_RayTracingReflectionsShadows)].Flag = value; } }
        public bool bOverride_RayTracingReflectionsTranslucency { get { return this[nameof(bOverride_RayTracingReflectionsTranslucency)].Flag; } set { this[nameof(bOverride_RayTracingReflectionsTranslucency)].Flag = value; } }
        public bool bOverride_TranslucencyType { get { return this[nameof(bOverride_TranslucencyType)].Flag; } set { this[nameof(bOverride_TranslucencyType)].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyMaxRoughness { get { return this[nameof(bOverride_RayTracingTranslucencyMaxRoughness)].Flag; } set { this[nameof(bOverride_RayTracingTranslucencyMaxRoughness)].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyRefractionRays { get { return this[nameof(bOverride_RayTracingTranslucencyRefractionRays)].Flag; } set { this[nameof(bOverride_RayTracingTranslucencyRefractionRays)].Flag = value; } }
        public bool bOverride_RayTracingTranslucencySamplesPerPixel { get { return this[nameof(bOverride_RayTracingTranslucencySamplesPerPixel)].Flag; } set { this[nameof(bOverride_RayTracingTranslucencySamplesPerPixel)].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyShadows { get { return this[nameof(bOverride_RayTracingTranslucencyShadows)].Flag; } set { this[nameof(bOverride_RayTracingTranslucencyShadows)].Flag = value; } }
        public bool bOverride_RayTracingTranslucencyRefraction { get { return this[nameof(bOverride_RayTracingTranslucencyRefraction)].Flag; } set { this[nameof(bOverride_RayTracingTranslucencyRefraction)].Flag = value; } }
        public bool bOverride_DynamicGlobalIlluminationMethod { get { return this[nameof(bOverride_DynamicGlobalIlluminationMethod)].Flag; } set { this[nameof(bOverride_DynamicGlobalIlluminationMethod)].Flag = value; } }
        public bool bOverride_LumenSceneLightingQuality { get { return this[nameof(bOverride_LumenSceneLightingQuality)].Flag; } set { this[nameof(bOverride_LumenSceneLightingQuality)].Flag = value; } }
        public bool bOverride_LumenSceneDetail { get { return this[nameof(bOverride_LumenSceneDetail)].Flag; } set { this[nameof(bOverride_LumenSceneDetail)].Flag = value; } }
        public bool bOverride_LumenSceneViewDistance { get { return this[nameof(bOverride_LumenSceneViewDistance)].Flag; } set { this[nameof(bOverride_LumenSceneViewDistance)].Flag = value; } }
        public bool bOverride_LumenSceneLightingUpdateSpeed { get { return this[nameof(bOverride_LumenSceneLightingUpdateSpeed)].Flag; } set { this[nameof(bOverride_LumenSceneLightingUpdateSpeed)].Flag = value; } }
        public bool bOverride_LumenFinalGatherQuality { get { return this[nameof(bOverride_LumenFinalGatherQuality)].Flag; } set { this[nameof(bOverride_LumenFinalGatherQuality)].Flag = value; } }
        public bool bOverride_LumenFinalGatherLightingUpdateSpeed { get { return this[nameof(bOverride_LumenFinalGatherLightingUpdateSpeed)].Flag; } set { this[nameof(bOverride_LumenFinalGatherLightingUpdateSpeed)].Flag = value; } }
        public bool bOverride_LumenMaxTraceDistance { get { return this[nameof(bOverride_LumenMaxTraceDistance)].Flag; } set { this[nameof(bOverride_LumenMaxTraceDistance)].Flag = value; } }
        public bool bOverride_LumenDiffuseColorBoost { get { return this[nameof(bOverride_LumenDiffuseColorBoost)].Flag; } set { this[nameof(bOverride_LumenDiffuseColorBoost)].Flag = value; } }
        public bool bOverride_LumenSkylightLeaking { get { return this[nameof(bOverride_LumenSkylightLeaking)].Flag; } set { this[nameof(bOverride_LumenSkylightLeaking)].Flag = value; } }
        public bool bOverride_LumenFullSkylightLeakingDistance { get { return this[nameof(bOverride_LumenFullSkylightLeakingDistance)].Flag; } set { this[nameof(bOverride_LumenFullSkylightLeakingDistance)].Flag = value; } }
        public bool bOverride_LumenRayLightingMode { get { return this[nameof(bOverride_LumenRayLightingMode)].Flag; } set { this[nameof(bOverride_LumenRayLightingMode)].Flag = value; } }
        public bool bOverride_LumenFrontLayerTranslucencyReflections { get { return this[nameof(bOverride_LumenFrontLayerTranslucencyReflections)].Flag; } set { this[nameof(bOverride_LumenFrontLayerTranslucencyReflections)].Flag = value; } }
        public bool bOverride_LumenSurfaceCacheResolution { get { return this[nameof(bOverride_LumenSurfaceCacheResolution)].Flag; } set { this[nameof(bOverride_LumenSurfaceCacheResolution)].Flag = value; } }
        public bool bOverride_RayTracingGI { get { return this[nameof(bOverride_RayTracingGI)].Flag; } set { this[nameof(bOverride_RayTracingGI)].Flag = value; } }
        public bool bOverride_RayTracingGIMaxBounces { get { return this[nameof(bOverride_RayTracingGIMaxBounces)].Flag; } set { this[nameof(bOverride_RayTracingGIMaxBounces)].Flag = value; } }
        public bool bOverride_RayTracingGISamplesPerPixel { get { return this[nameof(bOverride_RayTracingGISamplesPerPixel)].Flag; } set { this[nameof(bOverride_RayTracingGISamplesPerPixel)].Flag = value; } }
        public bool bOverride_PathTracingMaxBounces { get { return this[nameof(bOverride_PathTracingMaxBounces)].Flag; } set { this[nameof(bOverride_PathTracingMaxBounces)].Flag = value; } }
        public bool bOverride_PathTracingSamplesPerPixel { get { return this[nameof(bOverride_PathTracingSamplesPerPixel)].Flag; } set { this[nameof(bOverride_PathTracingSamplesPerPixel)].Flag = value; } }
        public bool bOverride_PathTracingFilterWidth { get { return this[nameof(bOverride_PathTracingFilterWidth)].Flag; } set { this[nameof(bOverride_PathTracingFilterWidth)].Flag = value; } }
        public bool bOverride_PathTracingEnableEmissive { get { return this[nameof(bOverride_PathTracingEnableEmissive)].Flag; } set { this[nameof(bOverride_PathTracingEnableEmissive)].Flag = value; } }
        public bool bOverride_PathTracingMaxPathExposure { get { return this[nameof(bOverride_PathTracingMaxPathExposure)].Flag; } set { this[nameof(bOverride_PathTracingMaxPathExposure)].Flag = value; } }
        public bool bOverride_PathTracingEnableReferenceDOF { get { return this[nameof(bOverride_PathTracingEnableReferenceDOF)].Flag; } set { this[nameof(bOverride_PathTracingEnableReferenceDOF)].Flag = value; } }
        public bool bOverride_PathTracingEnableReferenceAtmosphere { get { return this[nameof(bOverride_PathTracingEnableReferenceAtmosphere)].Flag; } set { this[nameof(bOverride_PathTracingEnableReferenceAtmosphere)].Flag = value; } }
        public bool bOverride_PathTracingEnableDenoiser { get { return this[nameof(bOverride_PathTracingEnableDenoiser)].Flag; } set { this[nameof(bOverride_PathTracingEnableDenoiser)].Flag = value; } }
        public bool bMobileHQGaussian { get { return this[nameof(bMobileHQGaussian)].Flag; } set { this[nameof(bMobileHQGaussian)].Flag = value; } }
        public byte BloomMethod { get { return this[nameof(BloomMethod)].GetValue<byte>(); } set { this[nameof(BloomMethod)].SetValue<byte>(value); } }
        public byte AutoExposureMethod { get { return this[nameof(AutoExposureMethod)].GetValue<byte>(); } set { this[nameof(AutoExposureMethod)].SetValue<byte>(value); } }
        public byte TemperatureType { get { return this[nameof(TemperatureType)].GetValue<byte>(); } set { this[nameof(TemperatureType)].SetValue<byte>(value); } }
        public float WhiteTemp { get { return this[nameof(WhiteTemp)].GetValue<float>(); } set { this[nameof(WhiteTemp)].SetValue<float>(value); } }
        public float WhiteTint { get { return this[nameof(WhiteTint)].GetValue<float>(); } set { this[nameof(WhiteTint)].SetValue<float>(value); } }
        public Vector4 ColorSaturation { get { return this[nameof(ColorSaturation)].As<Vector4>(); } set { this["ColorSaturation"] = value; } }
        public Vector4 ColorContrast { get { return this[nameof(ColorContrast)].As<Vector4>(); } set { this["ColorContrast"] = value; } }
        public Vector4 ColorGamma { get { return this[nameof(ColorGamma)].As<Vector4>(); } set { this["ColorGamma"] = value; } }
        public Vector4 ColorGain { get { return this[nameof(ColorGain)].As<Vector4>(); } set { this["ColorGain"] = value; } }
        public Vector4 ColorOffset { get { return this[nameof(ColorOffset)].As<Vector4>(); } set { this["ColorOffset"] = value; } }
        public Vector4 ColorSaturationShadows { get { return this[nameof(ColorSaturationShadows)].As<Vector4>(); } set { this["ColorSaturationShadows"] = value; } }
        public Vector4 ColorContrastShadows { get { return this[nameof(ColorContrastShadows)].As<Vector4>(); } set { this["ColorContrastShadows"] = value; } }
        public Vector4 ColorGammaShadows { get { return this[nameof(ColorGammaShadows)].As<Vector4>(); } set { this["ColorGammaShadows"] = value; } }
        public Vector4 ColorGainShadows { get { return this[nameof(ColorGainShadows)].As<Vector4>(); } set { this["ColorGainShadows"] = value; } }
        public Vector4 ColorOffsetShadows { get { return this[nameof(ColorOffsetShadows)].As<Vector4>(); } set { this["ColorOffsetShadows"] = value; } }
        public Vector4 ColorSaturationMidtones { get { return this[nameof(ColorSaturationMidtones)].As<Vector4>(); } set { this["ColorSaturationMidtones"] = value; } }
        public Vector4 ColorContrastMidtones { get { return this[nameof(ColorContrastMidtones)].As<Vector4>(); } set { this["ColorContrastMidtones"] = value; } }
        public Vector4 ColorGammaMidtones { get { return this[nameof(ColorGammaMidtones)].As<Vector4>(); } set { this["ColorGammaMidtones"] = value; } }
        public Vector4 ColorGainMidtones { get { return this[nameof(ColorGainMidtones)].As<Vector4>(); } set { this["ColorGainMidtones"] = value; } }
        public Vector4 ColorOffsetMidtones { get { return this[nameof(ColorOffsetMidtones)].As<Vector4>(); } set { this["ColorOffsetMidtones"] = value; } }
        public Vector4 ColorSaturationHighlights { get { return this[nameof(ColorSaturationHighlights)].As<Vector4>(); } set { this["ColorSaturationHighlights"] = value; } }
        public Vector4 ColorContrastHighlights { get { return this[nameof(ColorContrastHighlights)].As<Vector4>(); } set { this["ColorContrastHighlights"] = value; } }
        public Vector4 ColorGammaHighlights { get { return this[nameof(ColorGammaHighlights)].As<Vector4>(); } set { this["ColorGammaHighlights"] = value; } }
        public Vector4 ColorGainHighlights { get { return this[nameof(ColorGainHighlights)].As<Vector4>(); } set { this["ColorGainHighlights"] = value; } }
        public Vector4 ColorOffsetHighlights { get { return this[nameof(ColorOffsetHighlights)].As<Vector4>(); } set { this["ColorOffsetHighlights"] = value; } }
        public float ColorCorrectionHighlightsMin { get { return this[nameof(ColorCorrectionHighlightsMin)].GetValue<float>(); } set { this[nameof(ColorCorrectionHighlightsMin)].SetValue<float>(value); } }
        public float ColorCorrectionHighlightsMax { get { return this[nameof(ColorCorrectionHighlightsMax)].GetValue<float>(); } set { this[nameof(ColorCorrectionHighlightsMax)].SetValue<float>(value); } }
        public float ColorCorrectionShadowsMax { get { return this[nameof(ColorCorrectionShadowsMax)].GetValue<float>(); } set { this[nameof(ColorCorrectionShadowsMax)].SetValue<float>(value); } }
        public float BlueCorrection { get { return this[nameof(BlueCorrection)].GetValue<float>(); } set { this[nameof(BlueCorrection)].SetValue<float>(value); } }
        public float ExpandGamut { get { return this[nameof(ExpandGamut)].GetValue<float>(); } set { this[nameof(ExpandGamut)].SetValue<float>(value); } }
        public float ToneCurveAmount { get { return this[nameof(ToneCurveAmount)].GetValue<float>(); } set { this[nameof(ToneCurveAmount)].SetValue<float>(value); } }
        public float FilmSlope { get { return this[nameof(FilmSlope)].GetValue<float>(); } set { this[nameof(FilmSlope)].SetValue<float>(value); } }
        public float FilmToe { get { return this[nameof(FilmToe)].GetValue<float>(); } set { this[nameof(FilmToe)].SetValue<float>(value); } }
        public float FilmShoulder { get { return this[nameof(FilmShoulder)].GetValue<float>(); } set { this[nameof(FilmShoulder)].SetValue<float>(value); } }
        public float FilmBlackClip { get { return this[nameof(FilmBlackClip)].GetValue<float>(); } set { this[nameof(FilmBlackClip)].SetValue<float>(value); } }
        public float FilmWhiteClip { get { return this[nameof(FilmWhiteClip)].GetValue<float>(); } set { this[nameof(FilmWhiteClip)].SetValue<float>(value); } }
        public LinearColor SceneColorTint { get { return this[nameof(SceneColorTint)].As<LinearColor>(); } set { this["SceneColorTint"] = value; } }
        public float SceneFringeIntensity { get { return this[nameof(SceneFringeIntensity)].GetValue<float>(); } set { this[nameof(SceneFringeIntensity)].SetValue<float>(value); } }
        public float ChromaticAberrationStartOffset { get { return this[nameof(ChromaticAberrationStartOffset)].GetValue<float>(); } set { this[nameof(ChromaticAberrationStartOffset)].SetValue<float>(value); } }
        public float BloomIntensity { get { return this[nameof(BloomIntensity)].GetValue<float>(); } set { this[nameof(BloomIntensity)].SetValue<float>(value); } }
        public float BloomThreshold { get { return this[nameof(BloomThreshold)].GetValue<float>(); } set { this[nameof(BloomThreshold)].SetValue<float>(value); } }
        public float BloomSizeScale { get { return this[nameof(BloomSizeScale)].GetValue<float>(); } set { this[nameof(BloomSizeScale)].SetValue<float>(value); } }
        public float Bloom1Size { get { return this[nameof(Bloom1Size)].GetValue<float>(); } set { this[nameof(Bloom1Size)].SetValue<float>(value); } }
        public float Bloom2Size { get { return this[nameof(Bloom2Size)].GetValue<float>(); } set { this[nameof(Bloom2Size)].SetValue<float>(value); } }
        public float Bloom3Size { get { return this[nameof(Bloom3Size)].GetValue<float>(); } set { this[nameof(Bloom3Size)].SetValue<float>(value); } }
        public float Bloom4Size { get { return this[nameof(Bloom4Size)].GetValue<float>(); } set { this[nameof(Bloom4Size)].SetValue<float>(value); } }
        public float Bloom5Size { get { return this[nameof(Bloom5Size)].GetValue<float>(); } set { this[nameof(Bloom5Size)].SetValue<float>(value); } }
        public float Bloom6Size { get { return this[nameof(Bloom6Size)].GetValue<float>(); } set { this[nameof(Bloom6Size)].SetValue<float>(value); } }
        public LinearColor Bloom1Tint { get { return this[nameof(Bloom1Tint)].As<LinearColor>(); } set { this["Bloom1Tint"] = value; } }
        public LinearColor Bloom2Tint { get { return this[nameof(Bloom2Tint)].As<LinearColor>(); } set { this["Bloom2Tint"] = value; } }
        public LinearColor Bloom3Tint { get { return this[nameof(Bloom3Tint)].As<LinearColor>(); } set { this["Bloom3Tint"] = value; } }
        public LinearColor Bloom4Tint { get { return this[nameof(Bloom4Tint)].As<LinearColor>(); } set { this["Bloom4Tint"] = value; } }
        public LinearColor Bloom5Tint { get { return this[nameof(Bloom5Tint)].As<LinearColor>(); } set { this["Bloom5Tint"] = value; } }
        public LinearColor Bloom6Tint { get { return this[nameof(Bloom6Tint)].As<LinearColor>(); } set { this["Bloom6Tint"] = value; } }
        public float BloomConvolutionScatterDispersion { get { return this[nameof(BloomConvolutionScatterDispersion)].GetValue<float>(); } set { this[nameof(BloomConvolutionScatterDispersion)].SetValue<float>(value); } }
        public float BloomConvolutionSize { get { return this[nameof(BloomConvolutionSize)].GetValue<float>(); } set { this[nameof(BloomConvolutionSize)].SetValue<float>(value); } }
        public Texture2D BloomConvolutionTexture { get { return this[nameof(BloomConvolutionTexture)].As<Texture2D>(); } set { this["BloomConvolutionTexture"] = value; } }
        public Vector2D BloomConvolutionCenterUV { get { return this[nameof(BloomConvolutionCenterUV)].As<Vector2D>(); } set { this["BloomConvolutionCenterUV"] = value; } }
        public float BloomConvolutionPreFilterMin { get { return this[nameof(BloomConvolutionPreFilterMin)].GetValue<float>(); } set { this[nameof(BloomConvolutionPreFilterMin)].SetValue<float>(value); } }
        public float BloomConvolutionPreFilterMax { get { return this[nameof(BloomConvolutionPreFilterMax)].GetValue<float>(); } set { this[nameof(BloomConvolutionPreFilterMax)].SetValue<float>(value); } }
        public float BloomConvolutionPreFilterMult { get { return this[nameof(BloomConvolutionPreFilterMult)].GetValue<float>(); } set { this[nameof(BloomConvolutionPreFilterMult)].SetValue<float>(value); } }
        public float BloomConvolutionBufferScale { get { return this[nameof(BloomConvolutionBufferScale)].GetValue<float>(); } set { this[nameof(BloomConvolutionBufferScale)].SetValue<float>(value); } }
        public Texture BloomDirtMask { get { return this[nameof(BloomDirtMask)].As<Texture>(); } set { this["BloomDirtMask"] = value; } }
        public float BloomDirtMaskIntensity { get { return this[nameof(BloomDirtMaskIntensity)].GetValue<float>(); } set { this[nameof(BloomDirtMaskIntensity)].SetValue<float>(value); } }
        public LinearColor BloomDirtMaskTint { get { return this[nameof(BloomDirtMaskTint)].As<LinearColor>(); } set { this["BloomDirtMaskTint"] = value; } }
        public byte DynamicGlobalIlluminationMethod { get { return this[nameof(DynamicGlobalIlluminationMethod)].GetValue<byte>(); } set { this[nameof(DynamicGlobalIlluminationMethod)].SetValue<byte>(value); } }
        public LinearColor IndirectLightingColor { get { return this[nameof(IndirectLightingColor)].As<LinearColor>(); } set { this["IndirectLightingColor"] = value; } }
        public float IndirectLightingIntensity { get { return this[nameof(IndirectLightingIntensity)].GetValue<float>(); } set { this[nameof(IndirectLightingIntensity)].SetValue<float>(value); } }
        public float LumenSceneLightingQuality { get { return this[nameof(LumenSceneLightingQuality)].GetValue<float>(); } set { this[nameof(LumenSceneLightingQuality)].SetValue<float>(value); } }
        public float LumenSceneDetail { get { return this[nameof(LumenSceneDetail)].GetValue<float>(); } set { this[nameof(LumenSceneDetail)].SetValue<float>(value); } }
        public float LumenSceneViewDistance { get { return this[nameof(LumenSceneViewDistance)].GetValue<float>(); } set { this[nameof(LumenSceneViewDistance)].SetValue<float>(value); } }
        public float LumenSceneLightingUpdateSpeed { get { return this[nameof(LumenSceneLightingUpdateSpeed)].GetValue<float>(); } set { this[nameof(LumenSceneLightingUpdateSpeed)].SetValue<float>(value); } }
        public float LumenFinalGatherQuality { get { return this[nameof(LumenFinalGatherQuality)].GetValue<float>(); } set { this[nameof(LumenFinalGatherQuality)].SetValue<float>(value); } }
        public float LumenFinalGatherLightingUpdateSpeed { get { return this[nameof(LumenFinalGatherLightingUpdateSpeed)].GetValue<float>(); } set { this[nameof(LumenFinalGatherLightingUpdateSpeed)].SetValue<float>(value); } }
        public float LumenMaxTraceDistance { get { return this[nameof(LumenMaxTraceDistance)].GetValue<float>(); } set { this[nameof(LumenMaxTraceDistance)].SetValue<float>(value); } }
        public float LumenDiffuseColorBoost { get { return this[nameof(LumenDiffuseColorBoost)].GetValue<float>(); } set { this[nameof(LumenDiffuseColorBoost)].SetValue<float>(value); } }
        public float LumenSkylightLeaking { get { return this[nameof(LumenSkylightLeaking)].GetValue<float>(); } set { this[nameof(LumenSkylightLeaking)].SetValue<float>(value); } }
        public float LumenFullSkylightLeakingDistance { get { return this[nameof(LumenFullSkylightLeakingDistance)].GetValue<float>(); } set { this[nameof(LumenFullSkylightLeakingDistance)].SetValue<float>(value); } }
        public float LumenSurfaceCacheResolution { get { return this[nameof(LumenSurfaceCacheResolution)].GetValue<float>(); } set { this[nameof(LumenSurfaceCacheResolution)].SetValue<float>(value); } }
        public ERayTracingGlobalIlluminationType RayTracingGIType { get { return (ERayTracingGlobalIlluminationType)this[nameof(RayTracingGIType)].GetValue<int>(); } set { this[nameof(RayTracingGIType)].SetValue<int>((int)value); } }
        public int RayTracingGIMaxBounces { get { return this[nameof(RayTracingGIMaxBounces)].GetValue<int>(); } set { this[nameof(RayTracingGIMaxBounces)].SetValue<int>(value); } }
        public int RayTracingGISamplesPerPixel { get { return this[nameof(RayTracingGISamplesPerPixel)].GetValue<int>(); } set { this[nameof(RayTracingGISamplesPerPixel)].SetValue<int>(value); } }
        public byte ReflectionMethod { get { return this[nameof(ReflectionMethod)].GetValue<byte>(); } set { this[nameof(ReflectionMethod)].SetValue<byte>(value); } }
        public EReflectionsType ReflectionsType { get { return (EReflectionsType)this[nameof(ReflectionsType)].GetValue<int>(); } set { this[nameof(ReflectionsType)].SetValue<int>((int)value); } }
        public float LumenReflectionQuality { get { return this[nameof(LumenReflectionQuality)].GetValue<float>(); } set { this[nameof(LumenReflectionQuality)].SetValue<float>(value); } }
        public ELumenRayLightingModeOverride LumenRayLightingMode { get { return (ELumenRayLightingModeOverride)this[nameof(LumenRayLightingMode)].GetValue<int>(); } set { this[nameof(LumenRayLightingMode)].SetValue<int>((int)value); } }
        public bool LumenFrontLayerTranslucencyReflections { get { return this[nameof(LumenFrontLayerTranslucencyReflections)].Flag; } set { this[nameof(LumenFrontLayerTranslucencyReflections)].Flag = value; } }
        public float ScreenSpaceReflectionIntensity { get { return this[nameof(ScreenSpaceReflectionIntensity)].GetValue<float>(); } set { this[nameof(ScreenSpaceReflectionIntensity)].SetValue<float>(value); } }
        public float ScreenSpaceReflectionQuality { get { return this[nameof(ScreenSpaceReflectionQuality)].GetValue<float>(); } set { this[nameof(ScreenSpaceReflectionQuality)].SetValue<float>(value); } }
        public float ScreenSpaceReflectionMaxRoughness { get { return this[nameof(ScreenSpaceReflectionMaxRoughness)].GetValue<float>(); } set { this[nameof(ScreenSpaceReflectionMaxRoughness)].SetValue<float>(value); } }
        public float RayTracingReflectionsMaxRoughness { get { return this[nameof(RayTracingReflectionsMaxRoughness)].GetValue<float>(); } set { this[nameof(RayTracingReflectionsMaxRoughness)].SetValue<float>(value); } }
        public int RayTracingReflectionsMaxBounces { get { return this[nameof(RayTracingReflectionsMaxBounces)].GetValue<int>(); } set { this[nameof(RayTracingReflectionsMaxBounces)].SetValue<int>(value); } }
        public int RayTracingReflectionsSamplesPerPixel { get { return this[nameof(RayTracingReflectionsSamplesPerPixel)].GetValue<int>(); } set { this[nameof(RayTracingReflectionsSamplesPerPixel)].SetValue<int>(value); } }
        public EReflectedAndRefractedRayTracedShadows RayTracingReflectionsShadows { get { return (EReflectedAndRefractedRayTracedShadows)this[nameof(RayTracingReflectionsShadows)].GetValue<int>(); } set { this[nameof(RayTracingReflectionsShadows)].SetValue<int>((int)value); } }
        public bool RayTracingReflectionsTranslucency { get { return this[nameof(RayTracingReflectionsTranslucency)].Flag; } set { this[nameof(RayTracingReflectionsTranslucency)].Flag = value; } }
        public LinearColor AmbientCubemapTint { get { return this[nameof(AmbientCubemapTint)].As<LinearColor>(); } set { this["AmbientCubemapTint"] = value; } }
        public float AmbientCubemapIntensity { get { return this[nameof(AmbientCubemapIntensity)].GetValue<float>(); } set { this[nameof(AmbientCubemapIntensity)].SetValue<float>(value); } }
        public TextureCube AmbientCubemap { get { return this[nameof(AmbientCubemap)].As<TextureCube>(); } set { this["AmbientCubemap"] = value; } }
        public float CameraShutterSpeed { get { return this[nameof(CameraShutterSpeed)].GetValue<float>(); } set { this[nameof(CameraShutterSpeed)].SetValue<float>(value); } }
        public float CameraISO { get { return this[nameof(CameraISO)].GetValue<float>(); } set { this[nameof(CameraISO)].SetValue<float>(value); } }
        public float DepthOfFieldFstop { get { return this[nameof(DepthOfFieldFstop)].GetValue<float>(); } set { this[nameof(DepthOfFieldFstop)].SetValue<float>(value); } }
        public float DepthOfFieldMinFstop { get { return this[nameof(DepthOfFieldMinFstop)].GetValue<float>(); } set { this[nameof(DepthOfFieldMinFstop)].SetValue<float>(value); } }
        public int DepthOfFieldBladeCount { get { return this[nameof(DepthOfFieldBladeCount)].GetValue<int>(); } set { this[nameof(DepthOfFieldBladeCount)].SetValue<int>(value); } }
        public float AutoExposureBias { get { return this[nameof(AutoExposureBias)].GetValue<float>(); } set { this[nameof(AutoExposureBias)].SetValue<float>(value); } }
        public float AutoExposureBiasBackup { get { return this[nameof(AutoExposureBiasBackup)].GetValue<float>(); } set { this[nameof(AutoExposureBiasBackup)].SetValue<float>(value); } }
        public bool bOverride_AutoExposureBiasBackup { get { return this[nameof(bOverride_AutoExposureBiasBackup)].Flag; } set { this[nameof(bOverride_AutoExposureBiasBackup)].Flag = value; } }
        public bool AutoExposureApplyPhysicalCameraExposure { get { return this[nameof(AutoExposureApplyPhysicalCameraExposure)].Flag; } set { this[nameof(AutoExposureApplyPhysicalCameraExposure)].Flag = value; } }
        public CurveFloat AutoExposureBiasCurve { get { return this[nameof(AutoExposureBiasCurve)].As<CurveFloat>(); } set { this["AutoExposureBiasCurve"] = value; } }
        public Texture AutoExposureMeterMask { get { return this[nameof(AutoExposureMeterMask)].As<Texture>(); } set { this["AutoExposureMeterMask"] = value; } }
        public float AutoExposureLowPercent { get { return this[nameof(AutoExposureLowPercent)].GetValue<float>(); } set { this[nameof(AutoExposureLowPercent)].SetValue<float>(value); } }
        public float AutoExposureHighPercent { get { return this[nameof(AutoExposureHighPercent)].GetValue<float>(); } set { this[nameof(AutoExposureHighPercent)].SetValue<float>(value); } }
        public float AutoExposureMinBrightness { get { return this[nameof(AutoExposureMinBrightness)].GetValue<float>(); } set { this[nameof(AutoExposureMinBrightness)].SetValue<float>(value); } }
        public float AutoExposureMaxBrightness { get { return this[nameof(AutoExposureMaxBrightness)].GetValue<float>(); } set { this[nameof(AutoExposureMaxBrightness)].SetValue<float>(value); } }
        public float AutoExposureSpeedUp { get { return this[nameof(AutoExposureSpeedUp)].GetValue<float>(); } set { this[nameof(AutoExposureSpeedUp)].SetValue<float>(value); } }
        public float AutoExposureSpeedDown { get { return this[nameof(AutoExposureSpeedDown)].GetValue<float>(); } set { this[nameof(AutoExposureSpeedDown)].SetValue<float>(value); } }
        public float HistogramLogMin { get { return this[nameof(HistogramLogMin)].GetValue<float>(); } set { this[nameof(HistogramLogMin)].SetValue<float>(value); } }
        public float HistogramLogMax { get { return this[nameof(HistogramLogMax)].GetValue<float>(); } set { this[nameof(HistogramLogMax)].SetValue<float>(value); } }
        public float AutoExposureCalibrationConstant { get { return this[nameof(AutoExposureCalibrationConstant)].GetValue<float>(); } set { this[nameof(AutoExposureCalibrationConstant)].SetValue<float>(value); } }
        public float LocalExposureContrastScale { get { return this[nameof(LocalExposureContrastScale)].GetValue<float>(); } set { this[nameof(LocalExposureContrastScale)].SetValue<float>(value); } }
        public float LocalExposureHighlightContrastScale { get { return this[nameof(LocalExposureHighlightContrastScale)].GetValue<float>(); } set { this[nameof(LocalExposureHighlightContrastScale)].SetValue<float>(value); } }
        public float LocalExposureShadowContrastScale { get { return this[nameof(LocalExposureShadowContrastScale)].GetValue<float>(); } set { this[nameof(LocalExposureShadowContrastScale)].SetValue<float>(value); } }
        public float LocalExposureDetailStrength { get { return this[nameof(LocalExposureDetailStrength)].GetValue<float>(); } set { this[nameof(LocalExposureDetailStrength)].SetValue<float>(value); } }
        public float LocalExposureBlurredLuminanceBlend { get { return this[nameof(LocalExposureBlurredLuminanceBlend)].GetValue<float>(); } set { this[nameof(LocalExposureBlurredLuminanceBlend)].SetValue<float>(value); } }
        public float LocalExposureBlurredLuminanceKernelSizePercent { get { return this[nameof(LocalExposureBlurredLuminanceKernelSizePercent)].GetValue<float>(); } set { this[nameof(LocalExposureBlurredLuminanceKernelSizePercent)].SetValue<float>(value); } }
        public float LocalExposureMiddleGreyBias { get { return this[nameof(LocalExposureMiddleGreyBias)].GetValue<float>(); } set { this[nameof(LocalExposureMiddleGreyBias)].SetValue<float>(value); } }
        public float LensFlareIntensity { get { return this[nameof(LensFlareIntensity)].GetValue<float>(); } set { this[nameof(LensFlareIntensity)].SetValue<float>(value); } }
        public LinearColor LensFlareTint { get { return this[nameof(LensFlareTint)].As<LinearColor>(); } set { this["LensFlareTint"] = value; } }
        public float LensFlareBokehSize { get { return this[nameof(LensFlareBokehSize)].GetValue<float>(); } set { this[nameof(LensFlareBokehSize)].SetValue<float>(value); } }
        public float LensFlareThreshold { get { return this[nameof(LensFlareThreshold)].GetValue<float>(); } set { this[nameof(LensFlareThreshold)].SetValue<float>(value); } }
        public Texture LensFlareBokehShape { get { return this[nameof(LensFlareBokehShape)].As<Texture>(); } set { this["LensFlareBokehShape"] = value; } }
        public LinearColor LensFlareTints { get { return this[nameof(LensFlareTints)].As<LinearColor>(); } set { this["LensFlareTints"] = value; } }
        public float VignetteIntensity { get { return this[nameof(VignetteIntensity)].GetValue<float>(); } set { this[nameof(VignetteIntensity)].SetValue<float>(value); } }
        public float GrainJitter { get { return this[nameof(GrainJitter)].GetValue<float>(); } set { this[nameof(GrainJitter)].SetValue<float>(value); } }
        public float GrainIntensity { get { return this[nameof(GrainIntensity)].GetValue<float>(); } set { this[nameof(GrainIntensity)].SetValue<float>(value); } }
        public float FilmGrainIntensity { get { return this[nameof(FilmGrainIntensity)].GetValue<float>(); } set { this[nameof(FilmGrainIntensity)].SetValue<float>(value); } }
        public float FilmGrainIntensityShadows { get { return this[nameof(FilmGrainIntensityShadows)].GetValue<float>(); } set { this[nameof(FilmGrainIntensityShadows)].SetValue<float>(value); } }
        public float FilmGrainIntensityMidtones { get { return this[nameof(FilmGrainIntensityMidtones)].GetValue<float>(); } set { this[nameof(FilmGrainIntensityMidtones)].SetValue<float>(value); } }
        public float FilmGrainIntensityHighlights { get { return this[nameof(FilmGrainIntensityHighlights)].GetValue<float>(); } set { this[nameof(FilmGrainIntensityHighlights)].SetValue<float>(value); } }
        public float FilmGrainShadowsMax { get { return this[nameof(FilmGrainShadowsMax)].GetValue<float>(); } set { this[nameof(FilmGrainShadowsMax)].SetValue<float>(value); } }
        public float FilmGrainHighlightsMin { get { return this[nameof(FilmGrainHighlightsMin)].GetValue<float>(); } set { this[nameof(FilmGrainHighlightsMin)].SetValue<float>(value); } }
        public float FilmGrainHighlightsMax { get { return this[nameof(FilmGrainHighlightsMax)].GetValue<float>(); } set { this[nameof(FilmGrainHighlightsMax)].SetValue<float>(value); } }
        public float FilmGrainTexelSize { get { return this[nameof(FilmGrainTexelSize)].GetValue<float>(); } set { this[nameof(FilmGrainTexelSize)].SetValue<float>(value); } }
        public Texture2D FilmGrainTexture { get { return this[nameof(FilmGrainTexture)].As<Texture2D>(); } set { this["FilmGrainTexture"] = value; } }
        public float AmbientOcclusionIntensity { get { return this[nameof(AmbientOcclusionIntensity)].GetValue<float>(); } set { this[nameof(AmbientOcclusionIntensity)].SetValue<float>(value); } }
        public float AmbientOcclusionStaticFraction { get { return this[nameof(AmbientOcclusionStaticFraction)].GetValue<float>(); } set { this[nameof(AmbientOcclusionStaticFraction)].SetValue<float>(value); } }
        public float AmbientOcclusionRadius { get { return this[nameof(AmbientOcclusionRadius)].GetValue<float>(); } set { this[nameof(AmbientOcclusionRadius)].SetValue<float>(value); } }
        public bool AmbientOcclusionRadiusInWS { get { return this[nameof(AmbientOcclusionRadiusInWS)].Flag; } set { this[nameof(AmbientOcclusionRadiusInWS)].Flag = value; } }
        public float AmbientOcclusionFadeDistance { get { return this[nameof(AmbientOcclusionFadeDistance)].GetValue<float>(); } set { this[nameof(AmbientOcclusionFadeDistance)].SetValue<float>(value); } }
        public float AmbientOcclusionFadeRadius { get { return this[nameof(AmbientOcclusionFadeRadius)].GetValue<float>(); } set { this[nameof(AmbientOcclusionFadeRadius)].SetValue<float>(value); } }
        public float AmbientOcclusionDistance { get { return this[nameof(AmbientOcclusionDistance)].GetValue<float>(); } set { this[nameof(AmbientOcclusionDistance)].SetValue<float>(value); } }
        public float AmbientOcclusionPower { get { return this[nameof(AmbientOcclusionPower)].GetValue<float>(); } set { this[nameof(AmbientOcclusionPower)].SetValue<float>(value); } }
        public float AmbientOcclusionBias { get { return this[nameof(AmbientOcclusionBias)].GetValue<float>(); } set { this[nameof(AmbientOcclusionBias)].SetValue<float>(value); } }
        public float AmbientOcclusionQuality { get { return this[nameof(AmbientOcclusionQuality)].GetValue<float>(); } set { this[nameof(AmbientOcclusionQuality)].SetValue<float>(value); } }
        public float AmbientOcclusionMipBlend { get { return this[nameof(AmbientOcclusionMipBlend)].GetValue<float>(); } set { this[nameof(AmbientOcclusionMipBlend)].SetValue<float>(value); } }
        public float AmbientOcclusionMipScale { get { return this[nameof(AmbientOcclusionMipScale)].GetValue<float>(); } set { this[nameof(AmbientOcclusionMipScale)].SetValue<float>(value); } }
        public float AmbientOcclusionMipThreshold { get { return this[nameof(AmbientOcclusionMipThreshold)].GetValue<float>(); } set { this[nameof(AmbientOcclusionMipThreshold)].SetValue<float>(value); } }
        public float AmbientOcclusionTemporalBlendWeight { get { return this[nameof(AmbientOcclusionTemporalBlendWeight)].GetValue<float>(); } set { this[nameof(AmbientOcclusionTemporalBlendWeight)].SetValue<float>(value); } }
        public bool RayTracingAO { get { return this[nameof(RayTracingAO)].Flag; } set { this[nameof(RayTracingAO)].Flag = value; } }
        public int RayTracingAOSamplesPerPixel { get { return this[nameof(RayTracingAOSamplesPerPixel)].GetValue<int>(); } set { this[nameof(RayTracingAOSamplesPerPixel)].SetValue<int>(value); } }
        public float RayTracingAOIntensity { get { return this[nameof(RayTracingAOIntensity)].GetValue<float>(); } set { this[nameof(RayTracingAOIntensity)].SetValue<float>(value); } }
        public float RayTracingAORadius { get { return this[nameof(RayTracingAORadius)].GetValue<float>(); } set { this[nameof(RayTracingAORadius)].SetValue<float>(value); } }
        public float ColorGradingIntensity { get { return this[nameof(ColorGradingIntensity)].GetValue<float>(); } set { this[nameof(ColorGradingIntensity)].SetValue<float>(value); } }
        public Texture ColorGradingLUT { get { return this[nameof(ColorGradingLUT)].As<Texture>(); } set { this["ColorGradingLUT"] = value; } }
        public float DepthOfFieldSensorWidth { get { return this[nameof(DepthOfFieldSensorWidth)].GetValue<float>(); } set { this[nameof(DepthOfFieldSensorWidth)].SetValue<float>(value); } }
        public float DepthOfFieldSqueezeFactor { get { return this[nameof(DepthOfFieldSqueezeFactor)].GetValue<float>(); } set { this[nameof(DepthOfFieldSqueezeFactor)].SetValue<float>(value); } }
        public float DepthOfFieldFocalDistance { get { return this[nameof(DepthOfFieldFocalDistance)].GetValue<float>(); } set { this[nameof(DepthOfFieldFocalDistance)].SetValue<float>(value); } }
        public float DepthOfFieldDepthBlurAmount { get { return this[nameof(DepthOfFieldDepthBlurAmount)].GetValue<float>(); } set { this[nameof(DepthOfFieldDepthBlurAmount)].SetValue<float>(value); } }
        public float DepthOfFieldDepthBlurRadius { get { return this[nameof(DepthOfFieldDepthBlurRadius)].GetValue<float>(); } set { this[nameof(DepthOfFieldDepthBlurRadius)].SetValue<float>(value); } }
        public float DepthOfFieldFocalRegion { get { return this[nameof(DepthOfFieldFocalRegion)].GetValue<float>(); } set { this[nameof(DepthOfFieldFocalRegion)].SetValue<float>(value); } }
        public float DepthOfFieldNearTransitionRegion { get { return this[nameof(DepthOfFieldNearTransitionRegion)].GetValue<float>(); } set { this[nameof(DepthOfFieldNearTransitionRegion)].SetValue<float>(value); } }
        public float DepthOfFieldFarTransitionRegion { get { return this[nameof(DepthOfFieldFarTransitionRegion)].GetValue<float>(); } set { this[nameof(DepthOfFieldFarTransitionRegion)].SetValue<float>(value); } }
        public float DepthOfFieldScale { get { return this[nameof(DepthOfFieldScale)].GetValue<float>(); } set { this[nameof(DepthOfFieldScale)].SetValue<float>(value); } }
        public float DepthOfFieldNearBlurSize { get { return this[nameof(DepthOfFieldNearBlurSize)].GetValue<float>(); } set { this[nameof(DepthOfFieldNearBlurSize)].SetValue<float>(value); } }
        public float DepthOfFieldFarBlurSize { get { return this[nameof(DepthOfFieldFarBlurSize)].GetValue<float>(); } set { this[nameof(DepthOfFieldFarBlurSize)].SetValue<float>(value); } }
        public float DepthOfFieldOcclusion { get { return this[nameof(DepthOfFieldOcclusion)].GetValue<float>(); } set { this[nameof(DepthOfFieldOcclusion)].SetValue<float>(value); } }
        public float DepthOfFieldSkyFocusDistance { get { return this[nameof(DepthOfFieldSkyFocusDistance)].GetValue<float>(); } set { this[nameof(DepthOfFieldSkyFocusDistance)].SetValue<float>(value); } }
        public float DepthOfFieldVignetteSize { get { return this[nameof(DepthOfFieldVignetteSize)].GetValue<float>(); } set { this[nameof(DepthOfFieldVignetteSize)].SetValue<float>(value); } }
        public float MotionBlurAmount { get { return this[nameof(MotionBlurAmount)].GetValue<float>(); } set { this[nameof(MotionBlurAmount)].SetValue<float>(value); } }
        public float MotionBlurMax { get { return this[nameof(MotionBlurMax)].GetValue<float>(); } set { this[nameof(MotionBlurMax)].SetValue<float>(value); } }
        public int MotionBlurTargetFPS { get { return this[nameof(MotionBlurTargetFPS)].GetValue<int>(); } set { this[nameof(MotionBlurTargetFPS)].SetValue<int>(value); } }
        public float MotionBlurPerObjectSize { get { return this[nameof(MotionBlurPerObjectSize)].GetValue<float>(); } set { this[nameof(MotionBlurPerObjectSize)].SetValue<float>(value); } }
        public float LPVIntensity { get { return this[nameof(LPVIntensity)].GetValue<float>(); } set { this[nameof(LPVIntensity)].SetValue<float>(value); } }
        public float LPVVplInjectionBias { get { return this[nameof(LPVVplInjectionBias)].GetValue<float>(); } set { this[nameof(LPVVplInjectionBias)].SetValue<float>(value); } }
        public float LPVSize { get { return this[nameof(LPVSize)].GetValue<float>(); } set { this[nameof(LPVSize)].SetValue<float>(value); } }
        public float LPVSecondaryOcclusionIntensity { get { return this[nameof(LPVSecondaryOcclusionIntensity)].GetValue<float>(); } set { this[nameof(LPVSecondaryOcclusionIntensity)].SetValue<float>(value); } }
        public float LPVSecondaryBounceIntensity { get { return this[nameof(LPVSecondaryBounceIntensity)].GetValue<float>(); } set { this[nameof(LPVSecondaryBounceIntensity)].SetValue<float>(value); } }
        public float LPVGeometryVolumeBias { get { return this[nameof(LPVGeometryVolumeBias)].GetValue<float>(); } set { this[nameof(LPVGeometryVolumeBias)].SetValue<float>(value); } }
        public float LPVEmissiveInjectionIntensity { get { return this[nameof(LPVEmissiveInjectionIntensity)].GetValue<float>(); } set { this[nameof(LPVEmissiveInjectionIntensity)].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionIntensity { get { return this[nameof(LPVDirectionalOcclusionIntensity)].GetValue<float>(); } set { this[nameof(LPVDirectionalOcclusionIntensity)].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionRadius { get { return this[nameof(LPVDirectionalOcclusionRadius)].GetValue<float>(); } set { this[nameof(LPVDirectionalOcclusionRadius)].SetValue<float>(value); } }
        public float LPVDiffuseOcclusionExponent { get { return this[nameof(LPVDiffuseOcclusionExponent)].GetValue<float>(); } set { this[nameof(LPVDiffuseOcclusionExponent)].SetValue<float>(value); } }
        public float LPVSpecularOcclusionExponent { get { return this[nameof(LPVSpecularOcclusionExponent)].GetValue<float>(); } set { this[nameof(LPVSpecularOcclusionExponent)].SetValue<float>(value); } }
        public float LPVDiffuseOcclusionIntensity { get { return this[nameof(LPVDiffuseOcclusionIntensity)].GetValue<float>(); } set { this[nameof(LPVDiffuseOcclusionIntensity)].SetValue<float>(value); } }
        public float LPVSpecularOcclusionIntensity { get { return this[nameof(LPVSpecularOcclusionIntensity)].GetValue<float>(); } set { this[nameof(LPVSpecularOcclusionIntensity)].SetValue<float>(value); } }
        public ETranslucencyType TranslucencyType { get { return (ETranslucencyType)this[nameof(TranslucencyType)].GetValue<int>(); } set { this[nameof(TranslucencyType)].SetValue<int>((int)value); } }
        public float RayTracingTranslucencyMaxRoughness { get { return this[nameof(RayTracingTranslucencyMaxRoughness)].GetValue<float>(); } set { this[nameof(RayTracingTranslucencyMaxRoughness)].SetValue<float>(value); } }
        public int RayTracingTranslucencyRefractionRays { get { return this[nameof(RayTracingTranslucencyRefractionRays)].GetValue<int>(); } set { this[nameof(RayTracingTranslucencyRefractionRays)].SetValue<int>(value); } }
        public int RayTracingTranslucencySamplesPerPixel { get { return this[nameof(RayTracingTranslucencySamplesPerPixel)].GetValue<int>(); } set { this[nameof(RayTracingTranslucencySamplesPerPixel)].SetValue<int>(value); } }
        public EReflectedAndRefractedRayTracedShadows RayTracingTranslucencyShadows { get { return (EReflectedAndRefractedRayTracedShadows)this[nameof(RayTracingTranslucencyShadows)].GetValue<int>(); } set { this[nameof(RayTracingTranslucencyShadows)].SetValue<int>((int)value); } }
        public bool RayTracingTranslucencyRefraction { get { return this[nameof(RayTracingTranslucencyRefraction)].Flag; } set { this[nameof(RayTracingTranslucencyRefraction)].Flag = value; } }
        public int PathTracingMaxBounces { get { return this[nameof(PathTracingMaxBounces)].GetValue<int>(); } set { this[nameof(PathTracingMaxBounces)].SetValue<int>(value); } }
        public int PathTracingSamplesPerPixel { get { return this[nameof(PathTracingSamplesPerPixel)].GetValue<int>(); } set { this[nameof(PathTracingSamplesPerPixel)].SetValue<int>(value); } }
        public float PathTracingFilterWidth { get { return this[nameof(PathTracingFilterWidth)].GetValue<float>(); } set { this[nameof(PathTracingFilterWidth)].SetValue<float>(value); } }
        public bool PathTracingEnableEmissive { get { return this[nameof(PathTracingEnableEmissive)].Flag; } set { this[nameof(PathTracingEnableEmissive)].Flag = value; } }
        public float PathTracingMaxPathExposure { get { return this[nameof(PathTracingMaxPathExposure)].GetValue<float>(); } set { this[nameof(PathTracingMaxPathExposure)].SetValue<float>(value); } }
        public bool PathTracingEnableReferenceDOF { get { return this[nameof(PathTracingEnableReferenceDOF)].Flag; } set { this[nameof(PathTracingEnableReferenceDOF)].Flag = value; } }
        public bool PathTracingEnableReferenceAtmosphere { get { return this[nameof(PathTracingEnableReferenceAtmosphere)].Flag; } set { this[nameof(PathTracingEnableReferenceAtmosphere)].Flag = value; } }
        public bool PathTracingEnableDenoiser { get { return this[nameof(PathTracingEnableDenoiser)].Flag; } set { this[nameof(PathTracingEnableDenoiser)].Flag = value; } }
        public float LPVFadeRange { get { return this[nameof(LPVFadeRange)].GetValue<float>(); } set { this[nameof(LPVFadeRange)].SetValue<float>(value); } }
        public float LPVDirectionalOcclusionFadeRange { get { return this[nameof(LPVDirectionalOcclusionFadeRange)].GetValue<float>(); } set { this[nameof(LPVDirectionalOcclusionFadeRange)].SetValue<float>(value); } }
        public float ScreenPercentage { get { return this[nameof(ScreenPercentage)].GetValue<float>(); } set { this[nameof(ScreenPercentage)].SetValue<float>(value); } }
        public WeightedBlendables WeightedBlendables { get { return this[nameof(WeightedBlendables)].As<WeightedBlendables>(); } set { this["WeightedBlendables"] = value; } }
    }
    public class WeightedBlendables : Object
    {
        public WeightedBlendables(nint addr) : base(addr) { }
        public Array<WeightedBlendable> Array { get { return new Array<WeightedBlendable>(this[nameof(Array)].Address); } }
    }
    public class WeightedBlendable : Object
    {
        public WeightedBlendable(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public Object Object { get { return this[nameof(Object)].As<Object>(); } set { this["Object"] = value; } }
    }
    public class KeyHandleLookupTable : Object
    {
        public KeyHandleLookupTable(nint addr) : base(addr) { }
    }
    public class InstanceCacheDataBase : Object
    {
        public InstanceCacheDataBase(nint addr) : base(addr) { }
        public Array<byte> SavedProperties { get { return new Array<byte>(this[nameof(SavedProperties)].Address); } }
        public DataCacheDuplicatedObjectData UniqueTransientPackage { get { return this[nameof(UniqueTransientPackage)].As<DataCacheDuplicatedObjectData>(); } set { this["UniqueTransientPackage"] = value; } }
        public Array<DataCacheDuplicatedObjectData> DuplicatedObjects { get { return new Array<DataCacheDuplicatedObjectData>(this[nameof(DuplicatedObjects)].Address); } }
        public Array<Object> ReferencedObjects { get { return new Array<Object>(this[nameof(ReferencedObjects)].Address); } }
        public Array<Object> ReferencedNames { get { return new Array<Object>(this[nameof(ReferencedNames)].Address); } }
    }
    public class DataCacheDuplicatedObjectData : Object
    {
        public DataCacheDuplicatedObjectData(nint addr) : base(addr) { }
    }
    public class ActorComponentInstanceData : InstanceCacheDataBase
    {
        public ActorComponentInstanceData(nint addr) : base(addr) { }
        public Object SourceComponentTemplate { get { return this[nameof(SourceComponentTemplate)].As<Object>(); } set { this["SourceComponentTemplate"] = value; } }
        public EComponentCreationMethod SourceComponentCreationMethod { get { return (EComponentCreationMethod)this[nameof(SourceComponentCreationMethod)].GetValue<int>(); } set { this[nameof(SourceComponentCreationMethod)].SetValue<int>((int)value); } }
        public int SourceComponentTypeSerializedIndex { get { return this[nameof(SourceComponentTypeSerializedIndex)].GetValue<int>(); } set { this[nameof(SourceComponentTypeSerializedIndex)].SetValue<int>(value); } }
    }
    public class IndexedCurve : Object
    {
        public IndexedCurve(nint addr) : base(addr) { }
        public KeyHandleMap KeyHandlesToIndices { get { return this[nameof(KeyHandlesToIndices)].As<KeyHandleMap>(); } set { this["KeyHandlesToIndices"] = value; } }
    }
    public class KeyHandleMap : Object
    {
        public KeyHandleMap(nint addr) : base(addr) { }
    }
    public class RealCurve : IndexedCurve
    {
        public RealCurve(nint addr) : base(addr) { }
        public float DefaultValue { get { return this[nameof(DefaultValue)].GetValue<float>(); } set { this[nameof(DefaultValue)].SetValue<float>(value); } }
        public byte PreInfinityExtrap { get { return this[nameof(PreInfinityExtrap)].GetValue<byte>(); } set { this[nameof(PreInfinityExtrap)].SetValue<byte>(value); } }
        public byte PostInfinityExtrap { get { return this[nameof(PostInfinityExtrap)].GetValue<byte>(); } set { this[nameof(PostInfinityExtrap)].SetValue<byte>(value); } }
    }
    public class RichCurve : RealCurve
    {
        public RichCurve(nint addr) : base(addr) { }
        public Array<RichCurveKey> Keys { get { return new Array<RichCurveKey>(this[nameof(Keys)].Address); } }
    }
    public class RichCurveKey : Object
    {
        public RichCurveKey(nint addr) : base(addr) { }
        public byte InterpMode { get { return this[nameof(InterpMode)].GetValue<byte>(); } set { this[nameof(InterpMode)].SetValue<byte>(value); } }
        public byte TangentMode { get { return this[nameof(TangentMode)].GetValue<byte>(); } set { this[nameof(TangentMode)].SetValue<byte>(value); } }
        public byte TangentWeightMode { get { return this[nameof(TangentWeightMode)].GetValue<byte>(); } set { this[nameof(TangentWeightMode)].SetValue<byte>(value); } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public float ArriveTangent { get { return this[nameof(ArriveTangent)].GetValue<float>(); } set { this[nameof(ArriveTangent)].SetValue<float>(value); } }
        public float ArriveTangentWeight { get { return this[nameof(ArriveTangentWeight)].GetValue<float>(); } set { this[nameof(ArriveTangentWeight)].SetValue<float>(value); } }
        public float LeaveTangent { get { return this[nameof(LeaveTangent)].GetValue<float>(); } set { this[nameof(LeaveTangent)].SetValue<float>(value); } }
        public float LeaveTangentWeight { get { return this[nameof(LeaveTangentWeight)].GetValue<float>(); } set { this[nameof(LeaveTangentWeight)].SetValue<float>(value); } }
    }
    public class KShapeElem : Object
    {
        public KShapeElem(nint addr) : base(addr) { }
        public float RestOffset { get { return this[nameof(RestOffset)].GetValue<float>(); } set { this[nameof(RestOffset)].SetValue<float>(value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public bool bContributeToMass { get { return this[nameof(bContributeToMass)].Flag; } set { this[nameof(bContributeToMass)].Flag = value; } }
        public byte CollisionEnabled { get { return this[nameof(CollisionEnabled)].GetValue<byte>(); } set { this[nameof(CollisionEnabled)].SetValue<byte>(value); } }
    }
    public class MeshNaniteSettings : Object
    {
        public MeshNaniteSettings(nint addr) : base(addr) { }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bPreserveArea { get { return this[nameof(bPreserveArea)].Flag; } set { this[nameof(bPreserveArea)].Flag = value; } }
        public int PositionPrecision { get { return this[nameof(PositionPrecision)].GetValue<int>(); } set { this[nameof(PositionPrecision)].SetValue<int>(value); } }
        public uint TargetMinimumResidencyInKB { get { return this[nameof(TargetMinimumResidencyInKB)].GetValue<uint>(); } set { this[nameof(TargetMinimumResidencyInKB)].SetValue<uint>(value); } }
        public float KeepPercentTriangles { get { return this[nameof(KeepPercentTriangles)].GetValue<float>(); } set { this[nameof(KeepPercentTriangles)].SetValue<float>(value); } }
        public float TrimRelativeError { get { return this[nameof(TrimRelativeError)].GetValue<float>(); } set { this[nameof(TrimRelativeError)].SetValue<float>(value); } }
        public float FallbackPercentTriangles { get { return this[nameof(FallbackPercentTriangles)].GetValue<float>(); } set { this[nameof(FallbackPercentTriangles)].SetValue<float>(value); } }
        public float FallbackRelativeError { get { return this[nameof(FallbackRelativeError)].GetValue<float>(); } set { this[nameof(FallbackRelativeError)].SetValue<float>(value); } }
    }
    public class RuntimeFloatCurve : Object
    {
        public RuntimeFloatCurve(nint addr) : base(addr) { }
        public RichCurve EditorCurveData { get { return this[nameof(EditorCurveData)].As<RichCurve>(); } set { this["EditorCurveData"] = value; } }
        public CurveFloat ExternalCurve { get { return this[nameof(ExternalCurve)].As<CurveFloat>(); } set { this["ExternalCurve"] = value; } }
    }
    public class BoneReference : Object
    {
        public BoneReference(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class AnimNode_Base : Object
    {
        public AnimNode_Base(nint addr) : base(addr) { }
    }
    public class InputScaleBiasClamp : Object
    {
        public InputScaleBiasClamp(nint addr) : base(addr) { }
        public bool bMapRange { get { return this[nameof(bMapRange)].Flag; } set { this[nameof(bMapRange)].Flag = value; } }
        public bool bClampResult { get { return this[nameof(bClampResult)].Flag; } set { this[nameof(bClampResult)].Flag = value; } }
        public bool bInterpResult { get { return this[nameof(bInterpResult)].Flag; } set { this[nameof(bInterpResult)].Flag = value; } }
        public InputRange InRange { get { return this[nameof(InRange)].As<InputRange>(); } set { this["InRange"] = value; } }
        public InputRange OutRange { get { return this[nameof(OutRange)].As<InputRange>(); } set { this["OutRange"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public float Bias { get { return this[nameof(Bias)].GetValue<float>(); } set { this[nameof(Bias)].SetValue<float>(value); } }
        public float ClampMin { get { return this[nameof(ClampMin)].GetValue<float>(); } set { this[nameof(ClampMin)].SetValue<float>(value); } }
        public float ClampMax { get { return this[nameof(ClampMax)].GetValue<float>(); } set { this[nameof(ClampMax)].SetValue<float>(value); } }
        public float InterpSpeedIncreasing { get { return this[nameof(InterpSpeedIncreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedIncreasing)].SetValue<float>(value); } }
        public float InterpSpeedDecreasing { get { return this[nameof(InterpSpeedDecreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedDecreasing)].SetValue<float>(value); } }
    }
    public class InputRange : Object
    {
        public InputRange(nint addr) : base(addr) { }
        public float Min { get { return this[nameof(Min)].GetValue<float>(); } set { this[nameof(Min)].SetValue<float>(value); } }
        public float Max { get { return this[nameof(Max)].GetValue<float>(); } set { this[nameof(Max)].SetValue<float>(value); } }
    }
    public class InputAlphaBoolBlend : Object
    {
        public InputAlphaBoolBlend(nint addr) : base(addr) { }
        public float BlendInTime { get { return this[nameof(BlendInTime)].GetValue<float>(); } set { this[nameof(BlendInTime)].SetValue<float>(value); } }
        public float BlendOutTime { get { return this[nameof(BlendOutTime)].GetValue<float>(); } set { this[nameof(BlendOutTime)].SetValue<float>(value); } }
        public EAlphaBlendOption BlendOption { get { return (EAlphaBlendOption)this[nameof(BlendOption)].GetValue<int>(); } set { this[nameof(BlendOption)].SetValue<int>((int)value); } }
        public bool bInitialized { get { return this[nameof(bInitialized)].Flag; } set { this[nameof(bInitialized)].Flag = value; } }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public AlphaBlend AlphaBlend { get { return this[nameof(AlphaBlend)].As<AlphaBlend>(); } set { this["AlphaBlend"] = value; } }
    }
    public class AlphaBlend : Object
    {
        public AlphaBlend(nint addr) : base(addr) { }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public EAlphaBlendOption BlendOption { get { return (EAlphaBlendOption)this[nameof(BlendOption)].GetValue<int>(); } set { this[nameof(BlendOption)].SetValue<int>((int)value); } }
    }
    public class InputScaleBias : Object
    {
        public InputScaleBias(nint addr) : base(addr) { }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public float Bias { get { return this[nameof(Bias)].GetValue<float>(); } set { this[nameof(Bias)].SetValue<float>(value); } }
    }
    public class PoseLinkBase : Object
    {
        public PoseLinkBase(nint addr) : base(addr) { }
        public int LinkID { get { return this[nameof(LinkID)].GetValue<int>(); } set { this[nameof(LinkID)].SetValue<int>(value); } }
    }
    public class ComponentSpacePoseLink : PoseLinkBase
    {
        public ComponentSpacePoseLink(nint addr) : base(addr) { }
    }
    public class InputBlendPose : Object
    {
        public InputBlendPose(nint addr) : base(addr) { }
        public Array<BranchFilter> BranchFilters { get { return new Array<BranchFilter>(this[nameof(BranchFilters)].Address); } }
    }
    public class BranchFilter : Object
    {
        public BranchFilter(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public int BlendDepth { get { return this[nameof(BlendDepth)].GetValue<int>(); } set { this[nameof(BlendDepth)].SetValue<int>(value); } }
    }
    public class AnimNode_CustomProperty : AnimNode_Base
    {
        public AnimNode_CustomProperty(nint addr) : base(addr) { }
        public Array<Object> SourcePropertyNames { get { return new Array<Object>(this[nameof(SourcePropertyNames)].Address); } }
        public Array<Object> DestPropertyNames { get { return new Array<Object>(this[nameof(DestPropertyNames)].Address); } }
        public Object TargetInstance { get { return this[nameof(TargetInstance)].As<Object>(); } set { this["TargetInstance"] = value; } }
    }
    public class PoseLink : PoseLinkBase
    {
        public PoseLink(nint addr) : base(addr) { }
    }
    public class AnimInstanceProxy : Object
    {
        public AnimInstanceProxy(nint addr) : base(addr) { }
    }
    public class FloatSpringState : Object
    {
        public FloatSpringState(nint addr) : base(addr) { }
    }
    public class VectorSpringState : Object
    {
        public VectorSpringState(nint addr) : base(addr) { }
    }
    public class QuaternionSpringState : Object
    {
        public QuaternionSpringState(nint addr) : base(addr) { }
    }
    public class PerPlatformBool : Object
    {
        public PerPlatformBool(nint addr) : base(addr) { }
        public bool Default { get { return this[nameof(Default)].Flag; } set { this[nameof(Default)].Flag = value; } }
    }
    public class PerPlatformInt : Object
    {
        public PerPlatformInt(nint addr) : base(addr) { }
        public int Default { get { return this[nameof(Default)].GetValue<int>(); } set { this[nameof(Default)].SetValue<int>(value); } }
    }
    public class PerPlatformFloat : Object
    {
        public PerPlatformFloat(nint addr) : base(addr) { }
        public float Default { get { return this[nameof(Default)].GetValue<float>(); } set { this[nameof(Default)].SetValue<float>(value); } }
    }
    public class SoftComponentReference : BaseComponentReference
    {
        public SoftComponentReference(nint addr) : base(addr) { }
        public Object OtherActor { get { return this[nameof(OtherActor)]; } set { this[nameof(OtherActor)] = value; } }
    }
    public class RawAnimSequenceTrack : Object
    {
        public RawAnimSequenceTrack(nint addr) : base(addr) { }
        public Array<Vector3f> PosKeys { get { return new Array<Vector3f>(this[nameof(PosKeys)].Address); } }
        public Array<Quat4f> RotKeys { get { return new Array<Quat4f>(this[nameof(RotKeys)].Address); } }
        public Array<Vector3f> ScaleKeys { get { return new Array<Vector3f>(this[nameof(ScaleKeys)].Address); } }
    }
    public class SoundModulationDestinationSettings : Object
    {
        public SoundModulationDestinationSettings(nint addr) : base(addr) { }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public SoundModulatorBase Modulator { get { return this[nameof(Modulator)].As<SoundModulatorBase>(); } set { this["Modulator"] = value; } }
        public Object Modulators { get { return this[nameof(Modulators)]; } set { this[nameof(Modulators)] = value; } }
    }
    public class WorldPartitionStreamingQuerySource : Object
    {
        public WorldPartitionStreamingQuerySource(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public bool bUseGridLoadingRange { get { return this[nameof(bUseGridLoadingRange)].Flag; } set { this[nameof(bUseGridLoadingRange)].Flag = value; } }
        public Array<Object> DataLayers { get { return new Array<Object>(this[nameof(DataLayers)].Address); } }
        public bool bDataLayersOnly { get { return this[nameof(bDataLayersOnly)].Flag; } set { this[nameof(bDataLayersOnly)].Flag = value; } }
        public bool bSpatialQuery { get { return this[nameof(bSpatialQuery)].Flag; } set { this[nameof(bSpatialQuery)].Flag = value; } }
    }
    public class AnimNode_Root : AnimNode_Base
    {
        public AnimNode_Root(nint addr) : base(addr) { }
        public PoseLink Result { get { return this[nameof(Result)].As<PoseLink>(); } set { this["Result"] = value; } }
    }
    public class AnimNodeReference : Object
    {
        public AnimNodeReference(nint addr) : base(addr) { }
    }
    public class AnimNode_AssetPlayerRelevancyBase : AnimNode_Base
    {
        public AnimNode_AssetPlayerRelevancyBase(nint addr) : base(addr) { }
    }
    public class AnimNode_AssetPlayerBase : AnimNode_AssetPlayerRelevancyBase
    {
        public AnimNode_AssetPlayerBase(nint addr) : base(addr) { }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
        public float InternalTimeAccumulator { get { return this[nameof(InternalTimeAccumulator)].GetValue<float>(); } set { this[nameof(InternalTimeAccumulator)].SetValue<float>(value); } }
    }
    public class PerBoneBlendWeight : Object
    {
        public PerBoneBlendWeight(nint addr) : base(addr) { }
        public int SourceIndex { get { return this[nameof(SourceIndex)].GetValue<int>(); } set { this[nameof(SourceIndex)].SetValue<int>(value); } }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
    }
    public class BoneSocketTarget : Object
    {
        public BoneSocketTarget(nint addr) : base(addr) { }
        public bool bUseSocket { get { return this[nameof(bUseSocket)].Flag; } set { this[nameof(bUseSocket)].Flag = value; } }
        public BoneReference BoneReference { get { return this[nameof(BoneReference)].As<BoneReference>(); } set { this["BoneReference"] = value; } }
        public SocketReference SocketReference { get { return this[nameof(SocketReference)].As<SocketReference>(); } set { this["SocketReference"] = value; } }
    }
    public class SocketReference : Object
    {
        public SocketReference(nint addr) : base(addr) { }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
    }
    public class AnimCurveParam : Object
    {
        public AnimCurveParam(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class SceneComponentInstanceData : ActorComponentInstanceData
    {
        public SceneComponentInstanceData(nint addr) : base(addr) { }
        public Object AttachedInstanceComponents { get { return this[nameof(AttachedInstanceComponents)]; } set { this[nameof(AttachedInstanceComponents)] = value; } }
    }
    public class ActorDataLayer : Object
    {
        public ActorDataLayer(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class KAggregateGeom : Object
    {
        public KAggregateGeom(nint addr) : base(addr) { }
        public Array<KSphereElem> SphereElems { get { return new Array<KSphereElem>(this[nameof(SphereElems)].Address); } }
        public Array<KBoxElem> BoxElems { get { return new Array<KBoxElem>(this[nameof(BoxElems)].Address); } }
        public Array<KSphylElem> SphylElems { get { return new Array<KSphylElem>(this[nameof(SphylElems)].Address); } }
        public Array<KConvexElem> ConvexElems { get { return new Array<KConvexElem>(this[nameof(ConvexElems)].Address); } }
        public Array<KTaperedCapsuleElem> TaperedCapsuleElems { get { return new Array<KTaperedCapsuleElem>(this[nameof(TaperedCapsuleElems)].Address); } }
        public Array<KLevelSetElem> LevelSetElems { get { return new Array<KLevelSetElem>(this[nameof(LevelSetElems)].Address); } }
    }
    public class KLevelSetElem : KShapeElem
    {
        public KLevelSetElem(nint addr) : base(addr) { }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
    }
    public class KTaperedCapsuleElem : KShapeElem
    {
        public KTaperedCapsuleElem(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Radius0 { get { return this[nameof(Radius0)].GetValue<float>(); } set { this[nameof(Radius0)].SetValue<float>(value); } }
        public float Radius1 { get { return this[nameof(Radius1)].GetValue<float>(); } set { this[nameof(Radius1)].SetValue<float>(value); } }
        public float Length { get { return this[nameof(Length)].GetValue<float>(); } set { this[nameof(Length)].SetValue<float>(value); } }
    }
    public class KConvexElem : KShapeElem
    {
        public KConvexElem(nint addr) : base(addr) { }
        public Array<Vector> VertexData { get { return new Array<Vector>(this[nameof(VertexData)].Address); } }
        public Array<int> IndexData { get { return new Array<int>(this[nameof(IndexData)].Address); } }
        public Box ElemBox { get { return this[nameof(ElemBox)].As<Box>(); } set { this["ElemBox"] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
    }
    public class KSphylElem : KShapeElem
    {
        public KSphylElem(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float Length { get { return this[nameof(Length)].GetValue<float>(); } set { this[nameof(Length)].SetValue<float>(value); } }
    }
    public class KBoxElem : KShapeElem
    {
        public KBoxElem(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float X { get { return this[nameof(X)].GetValue<float>(); } set { this[nameof(X)].SetValue<float>(value); } }
        public float Y { get { return this[nameof(Y)].GetValue<float>(); } set { this[nameof(Y)].SetValue<float>(value); } }
        public float Z { get { return this[nameof(Z)].GetValue<float>(); } set { this[nameof(Z)].SetValue<float>(value); } }
    }
    public class KSphereElem : KShapeElem
    {
        public KSphereElem(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class NamedFloat : Object
    {
        public NamedFloat(nint addr) : base(addr) { }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class NamedVector : Object
    {
        public NamedVector(nint addr) : base(addr) { }
        public Vector Value { get { return this[nameof(Value)].As<Vector>(); } set { this["Value"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class NamedColor : Object
    {
        public NamedColor(nint addr) : base(addr) { }
        public Color Value { get { return this[nameof(Value)].As<Color>(); } set { this["Value"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class NamedTransform : Object
    {
        public NamedTransform(nint addr) : base(addr) { }
        public Transform Value { get { return this[nameof(Value)].As<Transform>(); } set { this["Value"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class LocalSpacePose : Object
    {
        public LocalSpacePose(nint addr) : base(addr) { }
        public Array<Transform> Transforms { get { return new Array<Transform>(this[nameof(Transforms)].Address); } }
        public Array<Object> Names { get { return new Array<Object>(this[nameof(Names)].Address); } }
    }
    public class ComponentSpacePose : Object
    {
        public ComponentSpacePose(nint addr) : base(addr) { }
        public Array<Transform> Transforms { get { return new Array<Transform>(this[nameof(Transforms)].Address); } }
        public Array<Object> Names { get { return new Array<Object>(this[nameof(Names)].Address); } }
    }
    public class AnimationErrorStats : Object
    {
        public AnimationErrorStats(nint addr) : base(addr) { }
    }
    public class AnimCurveBase : Object
    {
        public AnimCurveBase(nint addr) : base(addr) { }
        public Object LastObservedName { get { return this[nameof(LastObservedName)]; } set { this[nameof(LastObservedName)] = value; } }
        public SmartName Name { get { return this[nameof(Name)].As<SmartName>(); } set { this["Name"] = value; } }
        public int CurveTypeFlags { get { return this[nameof(CurveTypeFlags)].GetValue<int>(); } set { this[nameof(CurveTypeFlags)].SetValue<int>(value); } }
    }
    public class SmartName : Object
    {
        public SmartName(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
    }
    public class FloatCurve : AnimCurveBase
    {
        public FloatCurve(nint addr) : base(addr) { }
        //public RichCurve FloatCurve_value { get { return this[nameof(FloatCurve)].As<RichCurve>(); } set { this["FloatCurve"] = value; } }
    }
    public class VectorCurve : AnimCurveBase
    {
        public VectorCurve(nint addr) : base(addr) { }
        //public RichCurve FloatCurves { get { return this[nameof(FloatCurves)].As<RichCurve>(); } set { this["FloatCurves"] = value; } }
    }
    public class TransformCurve : AnimCurveBase
    {
        public TransformCurve(nint addr) : base(addr) { }
        public VectorCurve TranslationCurve { get { return this[nameof(TranslationCurve)].As<VectorCurve>(); } set { this["TranslationCurve"] = value; } }
        public VectorCurve RotationCurve { get { return this[nameof(RotationCurve)].As<VectorCurve>(); } set { this["RotationCurve"] = value; } }
        public VectorCurve ScaleCurve { get { return this[nameof(ScaleCurve)].As<VectorCurve>(); } set { this["ScaleCurve"] = value; } }
    }
    public class CachedFloatCurve : Object
    {
        public CachedFloatCurve(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
    }
    public class RawCurveTracks : Object
    {
        public RawCurveTracks(nint addr) : base(addr) { }
        //public Array<FloatCurve> FloatCurves { get { return new Array<FloatCurve>(this[nameof(FloatCurves)].Address); } }
    }
    public class EmptyPayload : Object
    {
        public EmptyPayload(nint addr) : base(addr) { }
    }
    public class BracketPayload : EmptyPayload
    {
        public BracketPayload(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
    }
    public class AnimationTrackPayload : EmptyPayload
    {
        public AnimationTrackPayload(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class AnimationTrackAddedPayload : AnimationTrackPayload
    {
        public AnimationTrackAddedPayload(nint addr) : base(addr) { }
        public int TrackIndex { get { return this[nameof(TrackIndex)].GetValue<int>(); } set { this[nameof(TrackIndex)].SetValue<int>(value); } }
    }
    public class SequenceLengthChangedPayload : EmptyPayload
    {
        public SequenceLengthChangedPayload(nint addr) : base(addr) { }
        public float PreviousLength { get { return this[nameof(PreviousLength)].GetValue<float>(); } set { this[nameof(PreviousLength)].SetValue<float>(value); } }
        public float T0 { get { return this[nameof(T0)].GetValue<float>(); } set { this[nameof(T0)].SetValue<float>(value); } }
        public float T1 { get { return this[nameof(T1)].GetValue<float>(); } set { this[nameof(T1)].SetValue<float>(value); } }
    }
    public class FrameRateChangedPayload : EmptyPayload
    {
        public FrameRateChangedPayload(nint addr) : base(addr) { }
        public FrameRate PreviousFrameRate { get { return this[nameof(PreviousFrameRate)].As<FrameRate>(); } set { this["PreviousFrameRate"] = value; } }
    }
    public class CurvePayload : EmptyPayload
    {
        public CurvePayload(nint addr) : base(addr) { }
        public AnimationCurveIdentifier Identifier { get { return this[nameof(Identifier)].As<AnimationCurveIdentifier>(); } set { this["Identifier"] = value; } }
    }
    public class AnimationCurveIdentifier : Object
    {
        public AnimationCurveIdentifier(nint addr) : base(addr) { }
    }
    public class CurveScaledPayload : CurvePayload
    {
        public CurveScaledPayload(nint addr) : base(addr) { }
        public float Factor { get { return this[nameof(Factor)].GetValue<float>(); } set { this[nameof(Factor)].SetValue<float>(value); } }
        public float Origin { get { return this[nameof(Origin)].GetValue<float>(); } set { this[nameof(Origin)].SetValue<float>(value); } }
    }
    public class CurveRenamedPayload : CurvePayload
    {
        public CurveRenamedPayload(nint addr) : base(addr) { }
        public AnimationCurveIdentifier NewIdentifier { get { return this[nameof(NewIdentifier)].As<AnimationCurveIdentifier>(); } set { this["NewIdentifier"] = value; } }
    }
    public class CurveFlagsChangedPayload : CurvePayload
    {
        public CurveFlagsChangedPayload(nint addr) : base(addr) { }
        public int OldFlags { get { return this[nameof(OldFlags)].GetValue<int>(); } set { this[nameof(OldFlags)].SetValue<int>(value); } }
    }
    public class AttributePayload : EmptyPayload
    {
        public AttributePayload(nint addr) : base(addr) { }
        public AnimationAttributeIdentifier Identifier { get { return this[nameof(Identifier)].As<AnimationAttributeIdentifier>(); } set { this["Identifier"] = value; } }
    }
    public class AnimationAttributeIdentifier : Object
    {
        public AnimationAttributeIdentifier(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public int BoneIndex { get { return this[nameof(BoneIndex)].GetValue<int>(); } set { this[nameof(BoneIndex)].SetValue<int>(value); } }
        public ScriptStruct ScriptStruct { get { return this[nameof(ScriptStruct)].As<ScriptStruct>(); } set { this["ScriptStruct"] = value; } }
        public SoftObjectPath ScriptStructPath { get { return this[nameof(ScriptStructPath)].As<SoftObjectPath>(); } set { this["ScriptStructPath"] = value; } }
    }
    public class AnimNodeConstantData : Object
    {
        public AnimNodeConstantData(nint addr) : base(addr) { }
        public Object AnimClassInterface { get { return this[nameof(AnimClassInterface)]; } set { this[nameof(AnimClassInterface)] = value; } }
        public int NodeIndex { get { return this[nameof(NodeIndex)].GetValue<int>(); } set { this[nameof(NodeIndex)].SetValue<int>(value); } }
    }
    public class AnimSubsystem : Object
    {
        public AnimSubsystem(nint addr) : base(addr) { }
    }
    public class AnimSubsystemInstance : Object
    {
        public AnimSubsystemInstance(nint addr) : base(addr) { }
    }
    public class AnimSubsystem_BlendSpaceGraph : AnimSubsystem
    {
        public AnimSubsystem_BlendSpaceGraph(nint addr) : base(addr) { }
        public Array<BlendSpace> BlendSpaces { get { return new Array<BlendSpace>(this[nameof(BlendSpaces)].Address); } }
    }
    public class PerBoneBlendWeights : Object
    {
        public PerBoneBlendWeights(nint addr) : base(addr) { }
        public Array<PerBoneBlendWeight> BoneBlendWeights { get { return new Array<PerBoneBlendWeight>(this[nameof(BoneBlendWeights)].Address); } }
    }
    public class AnimSyncMarker : Object
    {
        public AnimSyncMarker(nint addr) : base(addr) { }
        public Object MarkerName { get { return this[nameof(MarkerName)]; } set { this[nameof(MarkerName)] = value; } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
    }
    public class AnimNotifyTrack : Object
    {
        public AnimNotifyTrack(nint addr) : base(addr) { }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public LinearColor TrackColor { get { return this[nameof(TrackColor)].As<LinearColor>(); } set { this["TrackColor"] = value; } }
    }
    public class MarkerSyncData : Object
    {
        public MarkerSyncData(nint addr) : base(addr) { }
        public Array<AnimSyncMarker> AuthoredSyncMarkers { get { return new Array<AnimSyncMarker>(this[nameof(AuthoredSyncMarkers)].Address); } }
    }
    public class TrackToSkeletonMap : Object
    {
        public TrackToSkeletonMap(nint addr) : base(addr) { }
        public int BoneTreeIndex { get { return this[nameof(BoneTreeIndex)].GetValue<int>(); } set { this[nameof(BoneTreeIndex)].SetValue<int>(value); } }
    }
    public class AssetManagerRedirect : Object
    {
        public AssetManagerRedirect(nint addr) : base(addr) { }
        public Object Old { get { return this[nameof(Old)]; } set { this[nameof(Old)] = value; } }
        public Object New { get { return this[nameof(New)]; } set { this[nameof(New)] = value; } }
    }
    public class PrimaryAssetRulesOverride : Object
    {
        public PrimaryAssetRulesOverride(nint addr) : base(addr) { }
        public PrimaryAssetId PrimaryAssetId { get { return this[nameof(PrimaryAssetId)].As<PrimaryAssetId>(); } set { this["PrimaryAssetId"] = value; } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
    }
    public class PrimaryAssetRules : Object
    {
        public PrimaryAssetRules(nint addr) : base(addr) { }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public int ChunkId { get { return this[nameof(ChunkId)].GetValue<int>(); } set { this[nameof(ChunkId)].SetValue<int>(value); } }
        public bool bApplyRecursively { get { return this[nameof(bApplyRecursively)].Flag; } set { this[nameof(bApplyRecursively)].Flag = value; } }
        public EPrimaryAssetCookRule CookRule { get { return (EPrimaryAssetCookRule)this[nameof(CookRule)].GetValue<int>(); } set { this[nameof(CookRule)].SetValue<int>((int)value); } }
    }
    public class PrimaryAssetRulesCustomOverride : Object
    {
        public PrimaryAssetRulesCustomOverride(nint addr) : base(addr) { }
        public PrimaryAssetType PrimaryAssetType { get { return this[nameof(PrimaryAssetType)].As<PrimaryAssetType>(); } set { this["PrimaryAssetType"] = value; } }
        public DirectoryPath FilterDirectory { get { return this[nameof(FilterDirectory)].As<DirectoryPath>(); } set { this["FilterDirectory"] = value; } }
        public Object FilterString { get { return this[nameof(FilterString)]; } set { this[nameof(FilterString)] = value; } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
    }
    public class InterpolationParameter : Object
    {
        public InterpolationParameter(nint addr) : base(addr) { }
        public float InterpolationTime { get { return this[nameof(InterpolationTime)].GetValue<float>(); } set { this[nameof(InterpolationTime)].SetValue<float>(value); } }
        public float DampingRatio { get { return this[nameof(DampingRatio)].GetValue<float>(); } set { this[nameof(DampingRatio)].SetValue<float>(value); } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public byte InterpolationType { get { return this[nameof(InterpolationType)].GetValue<byte>(); } set { this[nameof(InterpolationType)].SetValue<byte>(value); } }
    }
    public class BlendParameter : Object
    {
        public BlendParameter(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public float Min { get { return this[nameof(Min)].GetValue<float>(); } set { this[nameof(Min)].SetValue<float>(value); } }
        public float Max { get { return this[nameof(Max)].GetValue<float>(); } set { this[nameof(Max)].SetValue<float>(value); } }
        public int GridNum { get { return this[nameof(GridNum)].GetValue<int>(); } set { this[nameof(GridNum)].SetValue<int>(value); } }
        public bool bSnapToGrid { get { return this[nameof(bSnapToGrid)].Flag; } set { this[nameof(bSnapToGrid)].Flag = value; } }
        public bool bWrapInput { get { return this[nameof(bWrapInput)].Flag; } set { this[nameof(bWrapInput)].Flag = value; } }
    }
    public class BlendSample : Object
    {
        public BlendSample(nint addr) : base(addr) { }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public Vector SampleValue { get { return this[nameof(SampleValue)].As<Vector>(); } set { this["SampleValue"] = value; } }
        public float RateScale { get { return this[nameof(RateScale)].GetValue<float>(); } set { this[nameof(RateScale)].SetValue<float>(value); } }
    }
    public class BlendSpaceSegment : Object
    {
        public BlendSpaceSegment(nint addr) : base(addr) { }
        public int SampleIndices { get { return this[nameof(SampleIndices)].GetValue<int>(); } set { this[nameof(SampleIndices)].SetValue<int>(value); } }
        public float Vertices { get { return this[nameof(Vertices)].GetValue<float>(); } set { this[nameof(Vertices)].SetValue<float>(value); } }
    }
    public class BlendSpaceTriangleEdgeInfo : Object
    {
        public BlendSpaceTriangleEdgeInfo(nint addr) : base(addr) { }
        public Vector2D Normal { get { return this[nameof(Normal)].As<Vector2D>(); } set { this["Normal"] = value; } }
        public int NeighbourTriangleIndex { get { return this[nameof(NeighbourTriangleIndex)].GetValue<int>(); } set { this[nameof(NeighbourTriangleIndex)].SetValue<int>(value); } }
        public int AdjacentPerimeterTriangleIndices { get { return this[nameof(AdjacentPerimeterTriangleIndices)].GetValue<int>(); } set { this[nameof(AdjacentPerimeterTriangleIndices)].SetValue<int>(value); } }
        public int AdjacentPerimeterVertexIndices { get { return this[nameof(AdjacentPerimeterVertexIndices)].GetValue<int>(); } set { this[nameof(AdjacentPerimeterVertexIndices)].SetValue<int>(value); } }
    }
    public class BlendSpaceTriangle : Object
    {
        public BlendSpaceTriangle(nint addr) : base(addr) { }
        public int SampleIndices { get { return this[nameof(SampleIndices)].GetValue<int>(); } set { this[nameof(SampleIndices)].SetValue<int>(value); } }
        public Vector2D Vertices { get { return this[nameof(Vertices)].As<Vector2D>(); } set { this["Vertices"] = value; } }
        public BlendSpaceTriangleEdgeInfo EdgeInfo { get { return this[nameof(EdgeInfo)].As<BlendSpaceTriangleEdgeInfo>(); } set { this["EdgeInfo"] = value; } }
    }
    public class WeightedBlendSample : Object
    {
        public WeightedBlendSample(nint addr) : base(addr) { }
        public int SampleIndex { get { return this[nameof(SampleIndex)].GetValue<int>(); } set { this[nameof(SampleIndex)].SetValue<int>(value); } }
        public float SampleWeight { get { return this[nameof(SampleWeight)].GetValue<float>(); } set { this[nameof(SampleWeight)].SetValue<float>(value); } }
    }
    public class BlendSpaceData : Object
    {
        public BlendSpaceData(nint addr) : base(addr) { }
        public Array<BlendSpaceSegment> Segments { get { return new Array<BlendSpaceSegment>(this[nameof(Segments)].Address); } }
        public Array<BlendSpaceTriangle> Triangles { get { return new Array<BlendSpaceTriangle>(this[nameof(Triangles)].Address); } }
    }
    public class EditorElement : Object
    {
        public EditorElement(nint addr) : base(addr) { }
        public int Indices { get { return this[nameof(Indices)].GetValue<int>(); } set { this[nameof(Indices)].SetValue<int>(value); } }
        public float Weights { get { return this[nameof(Weights)].GetValue<float>(); } set { this[nameof(Weights)].SetValue<float>(value); } }
    }
    public class GridBlendSample : Object
    {
        public GridBlendSample(nint addr) : base(addr) { }
        public EditorElement GridElement { get { return this[nameof(GridElement)].As<EditorElement>(); } set { this["GridElement"] = value; } }
        public float BlendWeight { get { return this[nameof(BlendWeight)].GetValue<float>(); } set { this[nameof(BlendWeight)].SetValue<float>(value); } }
    }
    public class PerBoneInterpolation : Object
    {
        public PerBoneInterpolation(nint addr) : base(addr) { }
        public BoneReference BoneReference { get { return this[nameof(BoneReference)].As<BoneReference>(); } set { this["BoneReference"] = value; } }
        public float InterpolationSpeedPerSec { get { return this[nameof(InterpolationSpeedPerSec)].GetValue<float>(); } set { this[nameof(InterpolationSpeedPerSec)].SetValue<float>(value); } }
    }
    public class CompilerNativizationOptions : Object
    {
        public CompilerNativizationOptions(nint addr) : base(addr) { }
        public Object PlatformName { get { return this[nameof(PlatformName)]; } set { this[nameof(PlatformName)] = value; } }
        public bool ServerOnlyPlatform { get { return this[nameof(ServerOnlyPlatform)].Flag; } set { this[nameof(ServerOnlyPlatform)].Flag = value; } }
        public bool ClientOnlyPlatform { get { return this[nameof(ClientOnlyPlatform)].Flag; } set { this[nameof(ClientOnlyPlatform)].Flag = value; } }
        public bool bExcludeMonolithicHeaders { get { return this[nameof(bExcludeMonolithicHeaders)].Flag; } set { this[nameof(bExcludeMonolithicHeaders)].Flag = value; } }
        public Array<Object> ExcludedModules { get { return new Array<Object>(this[nameof(ExcludedModules)].Address); } }
        public Object ExcludedAssets { get { return this[nameof(ExcludedAssets)]; } set { this[nameof(ExcludedAssets)] = value; } }
        public Array<Object> ExcludedFolderPaths { get { return new Array<Object>(this[nameof(ExcludedFolderPaths)].Address); } }
    }
    public class BlueprintMacroCosmeticInfo : Object
    {
        public BlueprintMacroCosmeticInfo(nint addr) : base(addr) { }
    }
    public class BPVariableMetaDataEntry : Object
    {
        public BPVariableMetaDataEntry(nint addr) : base(addr) { }
        public Object DataKey { get { return this[nameof(DataKey)]; } set { this[nameof(DataKey)] = value; } }
        public Object DataValue { get { return this[nameof(DataValue)]; } set { this[nameof(DataValue)] = value; } }
    }
    public class BPVariableDescription : Object
    {
        public BPVariableDescription(nint addr) : base(addr) { }
        public Object VarName { get { return this[nameof(VarName)]; } set { this[nameof(VarName)] = value; } }
        public Guid VarGuid { get { return this[nameof(VarGuid)].As<Guid>(); } set { this["VarGuid"] = value; } }
        public EdGraphPinType VarType { get { return this[nameof(VarType)].As<EdGraphPinType>(); } set { this["VarType"] = value; } }
        public Object FriendlyName { get { return this[nameof(FriendlyName)]; } set { this[nameof(FriendlyName)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public ulong PropertyFlags { get { return this[nameof(PropertyFlags)].GetValue<ulong>(); } set { this[nameof(PropertyFlags)].SetValue<ulong>(value); } }
        public Object RepNotifyFunc { get { return this[nameof(RepNotifyFunc)]; } set { this[nameof(RepNotifyFunc)] = value; } }
        public byte ReplicationCondition { get { return this[nameof(ReplicationCondition)].GetValue<byte>(); } set { this[nameof(ReplicationCondition)].SetValue<byte>(value); } }
        public Array<BPVariableMetaDataEntry> MetaDataArray { get { return new Array<BPVariableMetaDataEntry>(this[nameof(MetaDataArray)].Address); } }
        public Object DefaultValue { get { return this[nameof(DefaultValue)]; } set { this[nameof(DefaultValue)] = value; } }
    }
    public class EdGraphPinType : Object
    {
        public EdGraphPinType(nint addr) : base(addr) { }
        public Object PinCategory { get { return this[nameof(PinCategory)]; } set { this[nameof(PinCategory)] = value; } }
        public Object PinSubCategory { get { return this[nameof(PinSubCategory)]; } set { this[nameof(PinSubCategory)] = value; } }
        public Object PinSubCategoryObject { get { return this[nameof(PinSubCategoryObject)]; } set { this[nameof(PinSubCategoryObject)] = value; } }
        public SimpleMemberReference PinSubCategoryMemberReference { get { return this[nameof(PinSubCategoryMemberReference)].As<SimpleMemberReference>(); } set { this["PinSubCategoryMemberReference"] = value; } }
        public EdGraphTerminalType PinValueType { get { return this[nameof(PinValueType)].As<EdGraphTerminalType>(); } set { this["PinValueType"] = value; } }
        public EPinContainerType ContainerType { get { return (EPinContainerType)this[nameof(ContainerType)].GetValue<int>(); } set { this[nameof(ContainerType)].SetValue<int>((int)value); } }
        public bool bIsArray { get { return this[nameof(bIsArray)].Flag; } set { this[nameof(bIsArray)].Flag = value; } }
        public bool bIsReference { get { return this[nameof(bIsReference)].Flag; } set { this[nameof(bIsReference)].Flag = value; } }
        public bool bIsConst { get { return this[nameof(bIsConst)].Flag; } set { this[nameof(bIsConst)].Flag = value; } }
        public bool bIsWeakPointer { get { return this[nameof(bIsWeakPointer)].Flag; } set { this[nameof(bIsWeakPointer)].Flag = value; } }
        public bool bIsUObjectWrapper { get { return this[nameof(bIsUObjectWrapper)].Flag; } set { this[nameof(bIsUObjectWrapper)].Flag = value; } }
        public bool bSerializeAsSinglePrecisionFloat { get { return this[nameof(bSerializeAsSinglePrecisionFloat)].Flag; } set { this[nameof(bSerializeAsSinglePrecisionFloat)].Flag = value; } }
    }
    public class EdGraphTerminalType : Object
    {
        public EdGraphTerminalType(nint addr) : base(addr) { }
        public Object TerminalCategory { get { return this[nameof(TerminalCategory)]; } set { this[nameof(TerminalCategory)] = value; } }
        public Object TerminalSubCategory { get { return this[nameof(TerminalSubCategory)]; } set { this[nameof(TerminalSubCategory)] = value; } }
        public Object TerminalSubCategoryObject { get { return this[nameof(TerminalSubCategoryObject)]; } set { this[nameof(TerminalSubCategoryObject)] = value; } }
        public bool bTerminalIsConst { get { return this[nameof(bTerminalIsConst)].Flag; } set { this[nameof(bTerminalIsConst)].Flag = value; } }
        public bool bTerminalIsWeakPointer { get { return this[nameof(bTerminalIsWeakPointer)].Flag; } set { this[nameof(bTerminalIsWeakPointer)].Flag = value; } }
        public bool bTerminalIsUObjectWrapper { get { return this[nameof(bTerminalIsUObjectWrapper)].Flag; } set { this[nameof(bTerminalIsUObjectWrapper)].Flag = value; } }
    }
    public class SimpleMemberReference : Object
    {
        public SimpleMemberReference(nint addr) : base(addr) { }
        public Object MemberParent { get { return this[nameof(MemberParent)].As<Object>(); } set { this["MemberParent"] = value; } }
        public Object MemberName { get { return this[nameof(MemberName)]; } set { this[nameof(MemberName)] = value; } }
        public Guid MemberGuid { get { return this[nameof(MemberGuid)].As<Guid>(); } set { this["MemberGuid"] = value; } }
    }
    public class BPInterfaceDescription : Object
    {
        public BPInterfaceDescription(nint addr) : base(addr) { }
        public Object Interface { get { return this[nameof(Interface)]; } set { this[nameof(Interface)] = value; } }
        public Array<EdGraph> Graphs { get { return new Array<EdGraph>(this[nameof(Graphs)].Address); } }
    }
    public class EditedDocumentInfo : Object
    {
        public EditedDocumentInfo(nint addr) : base(addr) { }
        public SoftObjectPath EditedObjectPath { get { return this[nameof(EditedObjectPath)].As<SoftObjectPath>(); } set { this["EditedObjectPath"] = value; } }
        public Vector2D SavedViewOffset { get { return this[nameof(SavedViewOffset)].As<Vector2D>(); } set { this["SavedViewOffset"] = value; } }
        public float SavedZoomAmount { get { return this[nameof(SavedZoomAmount)].GetValue<float>(); } set { this[nameof(SavedZoomAmount)].SetValue<float>(value); } }
        public Object EditedObject { get { return this[nameof(EditedObject)].As<Object>(); } set { this["EditedObject"] = value; } }
    }
    public class BPEditorBookmarkNode : Object
    {
        public BPEditorBookmarkNode(nint addr) : base(addr) { }
        public Guid NodeGuid { get { return this[nameof(NodeGuid)].As<Guid>(); } set { this["NodeGuid"] = value; } }
        public Guid ParentGuid { get { return this[nameof(ParentGuid)].As<Guid>(); } set { this["ParentGuid"] = value; } }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
    }
    public class Bookmark2DJumpToSettings : Object
    {
        public Bookmark2DJumpToSettings(nint addr) : base(addr) { }
    }
    public class BookmarkBaseJumpToSettings : Object
    {
        public BookmarkBaseJumpToSettings(nint addr) : base(addr) { }
    }
    public class GeomSelection : Object
    {
        public GeomSelection(nint addr) : base(addr) { }
        public int Type { get { return this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>(value); } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public int SelectionIndex { get { return this[nameof(SelectionIndex)].GetValue<int>(); } set { this[nameof(SelectionIndex)].SetValue<int>(value); } }
    }
    public class FloatAnimationAttribute : Object
    {
        public FloatAnimationAttribute(nint addr) : base(addr) { }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class IntegerAnimationAttribute : Object
    {
        public IntegerAnimationAttribute(nint addr) : base(addr) { }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public class StringAnimationAttribute : Object
    {
        public StringAnimationAttribute(nint addr) : base(addr) { }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class TransformAnimationAttribute : Object
    {
        public TransformAnimationAttribute(nint addr) : base(addr) { }
        public Transform Value { get { return this[nameof(Value)].As<Transform>(); } set { this["Value"] = value; } }
    }
    public class VectorAnimationAttribute : Object
    {
        public VectorAnimationAttribute(nint addr) : base(addr) { }
        public Vector Value { get { return this[nameof(Value)].As<Vector>(); } set { this["Value"] = value; } }
    }
    public class QuaternionAnimationAttribute : Object
    {
        public QuaternionAnimationAttribute(nint addr) : base(addr) { }
        public Quat Value { get { return this[nameof(Value)].As<Quat>(); } set { this["Value"] = value; } }
    }
    public class NonBlendableQuaternionAnimationAttribute : QuaternionAnimationAttribute
    {
        public NonBlendableQuaternionAnimationAttribute(nint addr) : base(addr) { }
    }
    public class NonBlendableVectorAnimationAttribute : VectorAnimationAttribute
    {
        public NonBlendableVectorAnimationAttribute(nint addr) : base(addr) { }
    }
    public class NonBlendableTransformAnimationAttribute : TransformAnimationAttribute
    {
        public NonBlendableTransformAnimationAttribute(nint addr) : base(addr) { }
    }
    public class NonBlendableFloatAnimationAttribute : FloatAnimationAttribute
    {
        public NonBlendableFloatAnimationAttribute(nint addr) : base(addr) { }
    }
    public class NonBlendableIntegerAnimationAttribute : IntegerAnimationAttribute
    {
        public NonBlendableIntegerAnimationAttribute(nint addr) : base(addr) { }
    }
    public class MinimalViewInfo : Object
    {
        public MinimalViewInfo(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float FOV { get { return this[nameof(FOV)].GetValue<float>(); } set { this[nameof(FOV)].SetValue<float>(value); } }
        public float DesiredFOV { get { return this[nameof(DesiredFOV)].GetValue<float>(); } set { this[nameof(DesiredFOV)].SetValue<float>(value); } }
        public float OrthoWidth { get { return this[nameof(OrthoWidth)].GetValue<float>(); } set { this[nameof(OrthoWidth)].SetValue<float>(value); } }
        public float OrthoNearClipPlane { get { return this[nameof(OrthoNearClipPlane)].GetValue<float>(); } set { this[nameof(OrthoNearClipPlane)].SetValue<float>(value); } }
        public float OrthoFarClipPlane { get { return this[nameof(OrthoFarClipPlane)].GetValue<float>(); } set { this[nameof(OrthoFarClipPlane)].SetValue<float>(value); } }
        public float PerspectiveNearClipPlane { get { return this[nameof(PerspectiveNearClipPlane)].GetValue<float>(); } set { this[nameof(PerspectiveNearClipPlane)].SetValue<float>(value); } }
        public float AspectRatio { get { return this[nameof(AspectRatio)].GetValue<float>(); } set { this[nameof(AspectRatio)].SetValue<float>(value); } }
        public bool bConstrainAspectRatio { get { return this[nameof(bConstrainAspectRatio)].Flag; } set { this[nameof(bConstrainAspectRatio)].Flag = value; } }
        public bool bUseFieldOfViewForLOD { get { return this[nameof(bUseFieldOfViewForLOD)].Flag; } set { this[nameof(bUseFieldOfViewForLOD)].Flag = value; } }
        public byte ProjectionMode { get { return this[nameof(ProjectionMode)].GetValue<byte>(); } set { this[nameof(ProjectionMode)].SetValue<byte>(value); } }
        public float PostProcessBlendWeight { get { return this[nameof(PostProcessBlendWeight)].GetValue<float>(); } set { this[nameof(PostProcessBlendWeight)].SetValue<float>(value); } }
        public PostProcessSettings PostProcessSettings { get { return this[nameof(PostProcessSettings)].As<PostProcessSettings>(); } set { this["PostProcessSettings"] = value; } }
        public Vector2D OffCenterProjectionOffset { get { return this[nameof(OffCenterProjectionOffset)].As<Vector2D>(); } set { this["OffCenterProjectionOffset"] = value; } }
    }
    public class TextSizingParameters : Object
    {
        public TextSizingParameters(nint addr) : base(addr) { }
        public float DrawX { get { return this[nameof(DrawX)].GetValue<float>(); } set { this[nameof(DrawX)].SetValue<float>(value); } }
        public float DrawY { get { return this[nameof(DrawY)].GetValue<float>(); } set { this[nameof(DrawY)].SetValue<float>(value); } }
        public float DrawXL { get { return this[nameof(DrawXL)].GetValue<float>(); } set { this[nameof(DrawXL)].SetValue<float>(value); } }
        public float DrawYL { get { return this[nameof(DrawYL)].GetValue<float>(); } set { this[nameof(DrawYL)].SetValue<float>(value); } }
        public Vector2D Scaling { get { return this[nameof(Scaling)].As<Vector2D>(); } set { this["Scaling"] = value; } }
        public Font DrawFont { get { return this[nameof(DrawFont)].As<Font>(); } set { this["DrawFont"] = value; } }
        public Vector2D SpacingAdjust { get { return this[nameof(SpacingAdjust)].As<Vector2D>(); } set { this["SpacingAdjust"] = value; } }
    }
    public class WrappedStringElement : Object
    {
        public WrappedStringElement(nint addr) : base(addr) { }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
        public Vector2D LineExtent { get { return this[nameof(LineExtent)].As<Vector2D>(); } set { this["LineExtent"] = value; } }
    }
    public class MeshUVChannelInfo : Object
    {
        public MeshUVChannelInfo(nint addr) : base(addr) { }
        public bool bInitialized { get { return this[nameof(bInitialized)].Flag; } set { this[nameof(bInitialized)].Flag = value; } }
        public bool bOverrideDensities { get { return this[nameof(bOverrideDensities)].Flag; } set { this[nameof(bOverrideDensities)].Flag = value; } }
        public float LocalUVDensities { get { return this[nameof(LocalUVDensities)].GetValue<float>(); } set { this[nameof(LocalUVDensities)].SetValue<float>(value); } }
    }
    public class CustomAttributeSetting : Object
    {
        public CustomAttributeSetting(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Meaning { get { return this[nameof(Meaning)]; } set { this[nameof(Meaning)] = value; } }
    }
    public class TimecodeCustomAttributeNameSettings : Object
    {
        public TimecodeCustomAttributeNameSettings(nint addr) : base(addr) { }
        public Object HourAttributeName { get { return this[nameof(HourAttributeName)]; } set { this[nameof(HourAttributeName)] = value; } }
        public Object MinuteAttributeName { get { return this[nameof(MinuteAttributeName)]; } set { this[nameof(MinuteAttributeName)] = value; } }
        public Object SecondAttributeName { get { return this[nameof(SecondAttributeName)]; } set { this[nameof(SecondAttributeName)] = value; } }
        public Object FrameAttributeName { get { return this[nameof(FrameAttributeName)]; } set { this[nameof(FrameAttributeName)] = value; } }
        public Object SubframeAttributeName { get { return this[nameof(SubframeAttributeName)]; } set { this[nameof(SubframeAttributeName)] = value; } }
        public Object RateAttributeName { get { return this[nameof(RateAttributeName)]; } set { this[nameof(RateAttributeName)] = value; } }
        public Object TakenameAttributeName { get { return this[nameof(TakenameAttributeName)]; } set { this[nameof(TakenameAttributeName)] = value; } }
    }
    public class CustomAttribute : Object
    {
        public CustomAttribute(nint addr) : base(addr) { }
    }
    public class CustomAttributePerBoneData : Object
    {
        public CustomAttributePerBoneData(nint addr) : base(addr) { }
    }
    public class BakedStringCustomAttribute : Object
    {
        public BakedStringCustomAttribute(nint addr) : base(addr) { }
    }
    public class BakedIntegerCustomAttribute : Object
    {
        public BakedIntegerCustomAttribute(nint addr) : base(addr) { }
    }
    public class BakedFloatCustomAttribute : Object
    {
        public BakedFloatCustomAttribute(nint addr) : base(addr) { }
    }
    public class BakedCustomAttributePerBoneData : Object
    {
        public BakedCustomAttributePerBoneData(nint addr) : base(addr) { }
    }
    public class DebugDisplayProperty : Object
    {
        public DebugDisplayProperty(nint addr) : base(addr) { }
        public Object Obj { get { return this[nameof(Obj)].As<Object>(); } set { this["Obj"] = value; } }
        public Object WithinClass { get { return this[nameof(WithinClass)]; } set { this[nameof(WithinClass)] = value; } }
    }
    public class DebugTextInfo : Object
    {
        public DebugTextInfo(nint addr) : base(addr) { }
        public Actor SrcActor { get { return this[nameof(SrcActor)].As<Actor>(); } set { this["SrcActor"] = value; } }
        public Vector SrcActorOffset { get { return this[nameof(SrcActorOffset)].As<Vector>(); } set { this["SrcActorOffset"] = value; } }
        public Vector SrcActorDesiredOffset { get { return this[nameof(SrcActorDesiredOffset)].As<Vector>(); } set { this["SrcActorDesiredOffset"] = value; } }
        public Object DebugText { get { return this[nameof(DebugText)]; } set { this[nameof(DebugText)] = value; } }
        public float TimeRemaining { get { return this[nameof(TimeRemaining)].GetValue<float>(); } set { this[nameof(TimeRemaining)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public Color TextColor { get { return this[nameof(TextColor)].As<Color>(); } set { this["TextColor"] = value; } }
        public bool bAbsoluteLocation { get { return this[nameof(bAbsoluteLocation)].Flag; } set { this[nameof(bAbsoluteLocation)].Flag = value; } }
        public bool bKeepAttachedToActor { get { return this[nameof(bKeepAttachedToActor)].Flag; } set { this[nameof(bKeepAttachedToActor)].Flag = value; } }
        public bool bDrawShadow { get { return this[nameof(bDrawShadow)].Flag; } set { this[nameof(bDrawShadow)].Flag = value; } }
        public Vector OrigActorLocation { get { return this[nameof(OrigActorLocation)].As<Vector>(); } set { this["OrigActorLocation"] = value; } }
        public Font Font { get { return this[nameof(Font)].As<Font>(); } set { this["Font"] = value; } }
        public float FontScale { get { return this[nameof(FontScale)].GetValue<float>(); } set { this[nameof(FontScale)].SetValue<float>(value); } }
    }
    public class RawDistributionFloat : RawDistribution
    {
        public RawDistributionFloat(nint addr) : base(addr) { }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public DistributionFloat Distribution { get { return this[nameof(Distribution)].As<DistributionFloat>(); } set { this["Distribution"] = value; } }
    }
    public class RawDistributionVector : RawDistribution
    {
        public RawDistributionVector(nint addr) : base(addr) { }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public Vector MinValueVec { get { return this[nameof(MinValueVec)].As<Vector>(); } set { this["MinValueVec"] = value; } }
        public Vector MaxValueVec { get { return this[nameof(MaxValueVec)].As<Vector>(); } set { this["MaxValueVec"] = value; } }
        public DistributionVector Distribution { get { return this[nameof(Distribution)].As<DistributionVector>(); } set { this["Distribution"] = value; } }
    }
    public class EdGraphPinReference : Object
    {
        public EdGraphPinReference(nint addr) : base(addr) { }
        public Object OwningNode { get { return this[nameof(OwningNode)]; } set { this[nameof(OwningNode)] = value; } }
        public Guid PinId { get { return this[nameof(PinId)].As<Guid>(); } set { this["PinId"] = value; } }
    }
    public class EdGraphSchemaAction : Object
    {
        public EdGraphSchemaAction(nint addr) : base(addr) { }
        public Object MenuDescription { get { return this[nameof(MenuDescription)]; } set { this[nameof(MenuDescription)] = value; } }
        public Object TooltipDescription { get { return this[nameof(TooltipDescription)]; } set { this[nameof(TooltipDescription)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Keywords { get { return this[nameof(Keywords)]; } set { this[nameof(Keywords)] = value; } }
        public int Grouping { get { return this[nameof(Grouping)].GetValue<int>(); } set { this[nameof(Grouping)].SetValue<int>(value); } }
        public int SectionID { get { return this[nameof(SectionID)].GetValue<int>(); } set { this[nameof(SectionID)].SetValue<int>(value); } }
        public Array<Object> MenuDescriptionArray { get { return new Array<Object>(this[nameof(MenuDescriptionArray)].Address); } }
        public Array<Object> FullSearchTitlesArray { get { return new Array<Object>(this[nameof(FullSearchTitlesArray)].Address); } }
        public Array<Object> FullSearchKeywordsArray { get { return new Array<Object>(this[nameof(FullSearchKeywordsArray)].Address); } }
        public Array<Object> FullSearchCategoryArray { get { return new Array<Object>(this[nameof(FullSearchCategoryArray)].Address); } }
        public Array<Object> LocalizedMenuDescriptionArray { get { return new Array<Object>(this[nameof(LocalizedMenuDescriptionArray)].Address); } }
        public Array<Object> LocalizedFullSearchTitlesArray { get { return new Array<Object>(this[nameof(LocalizedFullSearchTitlesArray)].Address); } }
        public Array<Object> LocalizedFullSearchKeywordsArray { get { return new Array<Object>(this[nameof(LocalizedFullSearchKeywordsArray)].Address); } }
        public Array<Object> LocalizedFullSearchCategoryArray { get { return new Array<Object>(this[nameof(LocalizedFullSearchCategoryArray)].Address); } }
        public Object SearchText { get { return this[nameof(SearchText)]; } set { this[nameof(SearchText)] = value; } }
    }
    public class EdGraphSchemaAction_NewNode : EdGraphSchemaAction
    {
        public EdGraphSchemaAction_NewNode(nint addr) : base(addr) { }
        public EdGraphNode NodeTemplate { get { return this[nameof(NodeTemplate)].As<EdGraphNode>(); } set { this["NodeTemplate"] = value; } }
    }
    public class FullyLoadedPackagesInfo : Object
    {
        public FullyLoadedPackagesInfo(nint addr) : base(addr) { }
        public byte FullyLoadType { get { return this[nameof(FullyLoadType)].GetValue<byte>(); } set { this[nameof(FullyLoadType)].SetValue<byte>(value); } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Array<Object> PackagesToLoad { get { return new Array<Object>(this[nameof(PackagesToLoad)].Address); } }
        public Array<Object> LoadedObjects { get { return new Array<Object>(this[nameof(LoadedObjects)].Address); } }
    }
    public class LevelStreamingStatus : Object
    {
        public LevelStreamingStatus(nint addr) : base(addr) { }
        public Object PackageName { get { return this[nameof(PackageName)]; } set { this[nameof(PackageName)] = value; } }
        public bool bShouldBeLoaded { get { return this[nameof(bShouldBeLoaded)].Flag; } set { this[nameof(bShouldBeLoaded)].Flag = value; } }
        public bool bShouldBeVisible { get { return this[nameof(bShouldBeVisible)].Flag; } set { this[nameof(bShouldBeVisible)].Flag = value; } }
        public uint LODIndex { get { return this[nameof(LODIndex)].GetValue<uint>(); } set { this[nameof(LODIndex)].SetValue<uint>(value); } }
    }
    public class NetDriverDefinition : Object
    {
        public NetDriverDefinition(nint addr) : base(addr) { }
        public Object DefName { get { return this[nameof(DefName)]; } set { this[nameof(DefName)] = value; } }
        public Object DriverClassName { get { return this[nameof(DriverClassName)]; } set { this[nameof(DriverClassName)] = value; } }
        public Object DriverClassNameFallback { get { return this[nameof(DriverClassNameFallback)]; } set { this[nameof(DriverClassNameFallback)] = value; } }
        public int MaxChannelsOverride { get { return this[nameof(MaxChannelsOverride)].GetValue<int>(); } set { this[nameof(MaxChannelsOverride)].SetValue<int>(value); } }
    }
    public class IrisNetDriverConfig : Object
    {
        public IrisNetDriverConfig(nint addr) : base(addr) { }
        public Object NetDriverDefinition { get { return this[nameof(NetDriverDefinition)]; } set { this[nameof(NetDriverDefinition)] = value; } }
        public Object NetDriverName { get { return this[nameof(NetDriverName)]; } set { this[nameof(NetDriverName)] = value; } }
        public Object NetDriverWildcardName { get { return this[nameof(NetDriverWildcardName)]; } set { this[nameof(NetDriverWildcardName)] = value; } }
        public bool bEnableIris { get { return this[nameof(bEnableIris)].Flag; } set { this[nameof(bEnableIris)].Flag = value; } }
    }
    public class NamedNetDriver : Object
    {
        public NamedNetDriver(nint addr) : base(addr) { }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
    }
    public class WorldContext : Object
    {
        public WorldContext(nint addr) : base(addr) { }
        public URL LastURL { get { return this[nameof(LastURL)].As<URL>(); } set { this["LastURL"] = value; } }
        public URL LastRemoteURL { get { return this[nameof(LastRemoteURL)].As<URL>(); } set { this["LastRemoteURL"] = value; } }
        public PendingNetGame PendingNetGame { get { return this[nameof(PendingNetGame)].As<PendingNetGame>(); } set { this["PendingNetGame"] = value; } }
        public Array<FullyLoadedPackagesInfo> PackagesToFullyLoad { get { return new Array<FullyLoadedPackagesInfo>(this[nameof(PackagesToFullyLoad)].Address); } }
        public Array<Level> LoadedLevelsForPendingMapChange { get { return new Array<Level>(this[nameof(LoadedLevelsForPendingMapChange)].Address); } }
        public Array<ObjectReferencer> ObjectReferencers { get { return new Array<ObjectReferencer>(this[nameof(ObjectReferencers)].Address); } }
        public Array<LevelStreamingStatus> PendingLevelStreamingStatusUpdates { get { return new Array<LevelStreamingStatus>(this[nameof(PendingLevelStreamingStatusUpdates)].Address); } }
        public GameViewportClient GameViewport { get { return this[nameof(GameViewport)].As<GameViewportClient>(); } set { this["GameViewport"] = value; } }
        public GameInstance OwningGameInstance { get { return this[nameof(OwningGameInstance)].As<GameInstance>(); } set { this["OwningGameInstance"] = value; } }
        public Array<NamedNetDriver> ActiveNetDrivers { get { return new Array<NamedNetDriver>(this[nameof(ActiveNetDrivers)].Address); } }
    }
    public class URL : Object
    {
        public URL(nint addr) : base(addr) { }
        public Object protocol { get { return this[nameof(protocol)]; } set { this[nameof(protocol)] = value; } }
        public Object Host { get { return this[nameof(Host)]; } set { this[nameof(Host)] = value; } }
        public int Port { get { return this[nameof(Port)].GetValue<int>(); } set { this[nameof(Port)].SetValue<int>(value); } }
        public int Valid { get { return this[nameof(Valid)].GetValue<int>(); } set { this[nameof(Valid)].SetValue<int>(value); } }
        public Object Map { get { return this[nameof(Map)]; } set { this[nameof(Map)] = value; } }
        public Object RedirectURL { get { return this[nameof(RedirectURL)]; } set { this[nameof(RedirectURL)] = value; } }
        public Array<Object> Op { get { return new Array<Object>(this[nameof(Op)].Address); } }
        public Object Portal { get { return this[nameof(Portal)]; } set { this[nameof(Portal)] = value; } }
    }
    public class StatColorMapEntry : Object
    {
        public StatColorMapEntry(nint addr) : base(addr) { }
        public float In { get { return this[nameof(In)].GetValue<float>(); } set { this[nameof(In)].SetValue<float>(value); } }
        public Color Out { get { return this[nameof(Out)].As<Color>(); } set { this["Out"] = value; } }
    }
    public class StatColorMapping : Object
    {
        public StatColorMapping(nint addr) : base(addr) { }
        public Object StatName { get { return this[nameof(StatName)]; } set { this[nameof(StatName)] = value; } }
        public Array<StatColorMapEntry> ColorMap { get { return new Array<StatColorMapEntry>(this[nameof(ColorMap)].Address); } }
        public bool DisableBlend { get { return this[nameof(DisableBlend)].Flag; } set { this[nameof(DisableBlend)].Flag = value; } }
    }
    public class DropNoteInfo : Object
    {
        public DropNoteInfo(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Object Comment { get { return this[nameof(Comment)]; } set { this[nameof(Comment)] = value; } }
    }
    public class ScreenMessageString : Object
    {
        public ScreenMessageString(nint addr) : base(addr) { }
        public ulong Key { get { return this[nameof(Key)].GetValue<ulong>(); } set { this[nameof(Key)].SetValue<ulong>(value); } }
        public Object ScreenMessage { get { return this[nameof(ScreenMessage)]; } set { this[nameof(ScreenMessage)] = value; } }
        public Color DisplayColor { get { return this[nameof(DisplayColor)].As<Color>(); } set { this["DisplayColor"] = value; } }
        public float TimeToDisplay { get { return this[nameof(TimeToDisplay)].GetValue<float>(); } set { this[nameof(TimeToDisplay)].SetValue<float>(value); } }
        public float CurrentTimeDisplayed { get { return this[nameof(CurrentTimeDisplayed)].GetValue<float>(); } set { this[nameof(CurrentTimeDisplayed)].SetValue<float>(value); } }
        public Vector2D TextScale { get { return this[nameof(TextScale)].As<Vector2D>(); } set { this["TextScale"] = value; } }
    }
    public class GameNameRedirect : Object
    {
        public GameNameRedirect(nint addr) : base(addr) { }
        public Object OldGameName { get { return this[nameof(OldGameName)]; } set { this[nameof(OldGameName)] = value; } }
        public Object NewGameName { get { return this[nameof(NewGameName)]; } set { this[nameof(NewGameName)] = value; } }
    }
    public class ClassRedirect : Object
    {
        public ClassRedirect(nint addr) : base(addr) { }
        public Object ObjectName { get { return this[nameof(ObjectName)]; } set { this[nameof(ObjectName)] = value; } }
        public Object OldClassName { get { return this[nameof(OldClassName)]; } set { this[nameof(OldClassName)] = value; } }
        public Object NewClassName { get { return this[nameof(NewClassName)]; } set { this[nameof(NewClassName)] = value; } }
        public Object OldSubobjName { get { return this[nameof(OldSubobjName)]; } set { this[nameof(OldSubobjName)] = value; } }
        public Object NewSubobjName { get { return this[nameof(NewSubobjName)]; } set { this[nameof(NewSubobjName)] = value; } }
        public Object NewClassClass { get { return this[nameof(NewClassClass)]; } set { this[nameof(NewClassClass)] = value; } }
        public Object NewClassPackage { get { return this[nameof(NewClassPackage)]; } set { this[nameof(NewClassPackage)] = value; } }
        public bool InstanceOnly { get { return this[nameof(InstanceOnly)].Flag; } set { this[nameof(InstanceOnly)].Flag = value; } }
    }
    public class StructRedirect : Object
    {
        public StructRedirect(nint addr) : base(addr) { }
        public Object OldStructName { get { return this[nameof(OldStructName)]; } set { this[nameof(OldStructName)] = value; } }
        public Object NewStructName { get { return this[nameof(NewStructName)]; } set { this[nameof(NewStructName)] = value; } }
    }
    public class PluginRedirect : Object
    {
        public PluginRedirect(nint addr) : base(addr) { }
        public Object OldPluginName { get { return this[nameof(OldPluginName)]; } set { this[nameof(OldPluginName)] = value; } }
        public Object NewPluginName { get { return this[nameof(NewPluginName)]; } set { this[nameof(NewPluginName)] = value; } }
    }
    public class TickPrerequisite : Object
    {
        public TickPrerequisite(nint addr) : base(addr) { }
    }
    public class ExposureSettings : Object
    {
        public ExposureSettings(nint addr) : base(addr) { }
        public float FixedEV100 { get { return this[nameof(FixedEV100)].GetValue<float>(); } set { this[nameof(FixedEV100)].SetValue<float>(value); } }
        public bool bFixed { get { return this[nameof(bFixed)].Flag; } set { this[nameof(bFixed)].Flag = value; } }
    }
    public class MaterialShadingModelField : Object
    {
        public MaterialShadingModelField(nint addr) : base(addr) { }
        public ushort ShadingModelField { get { return this[nameof(ShadingModelField)].GetValue<ushort>(); } set { this[nameof(ShadingModelField)].SetValue<ushort>(value); } }
    }
    public class StrataMaterialInfo : Object
    {
        public StrataMaterialInfo(nint addr) : base(addr) { }
        public ushort ShadingModelField { get { return this[nameof(ShadingModelField)].GetValue<ushort>(); } set { this[nameof(ShadingModelField)].SetValue<ushort>(value); } }
        public byte bHasShadingModelFromExpression { get { return this[nameof(bHasShadingModelFromExpression)].GetValue<byte>(); } set { this[nameof(bHasShadingModelFromExpression)].SetValue<byte>(value); } }
        public uint ConnectedProperties { get { return this[nameof(ConnectedProperties)].GetValue<uint>(); } set { this[nameof(ConnectedProperties)].SetValue<uint>(value); } }
        public Array<SubsurfaceProfile> SubsurfaceProfiles { get { return new Array<SubsurfaceProfile>(this[nameof(SubsurfaceProfiles)].Address); } }
    }
    public class RigidBodyErrorCorrection : Object
    {
        public RigidBodyErrorCorrection(nint addr) : base(addr) { }
        public float PingExtrapolation { get { return this[nameof(PingExtrapolation)].GetValue<float>(); } set { this[nameof(PingExtrapolation)].SetValue<float>(value); } }
        public float PingLimit { get { return this[nameof(PingLimit)].GetValue<float>(); } set { this[nameof(PingLimit)].SetValue<float>(value); } }
        public float ErrorPerLinearDifference { get { return this[nameof(ErrorPerLinearDifference)].GetValue<float>(); } set { this[nameof(ErrorPerLinearDifference)].SetValue<float>(value); } }
        public float ErrorPerAngularDifference { get { return this[nameof(ErrorPerAngularDifference)].GetValue<float>(); } set { this[nameof(ErrorPerAngularDifference)].SetValue<float>(value); } }
        public float MaxRestoredStateError { get { return this[nameof(MaxRestoredStateError)].GetValue<float>(); } set { this[nameof(MaxRestoredStateError)].SetValue<float>(value); } }
        public float MaxLinearHardSnapDistance { get { return this[nameof(MaxLinearHardSnapDistance)].GetValue<float>(); } set { this[nameof(MaxLinearHardSnapDistance)].SetValue<float>(value); } }
        public float PositionLerp { get { return this[nameof(PositionLerp)].GetValue<float>(); } set { this[nameof(PositionLerp)].SetValue<float>(value); } }
        public float AngleLerp { get { return this[nameof(AngleLerp)].GetValue<float>(); } set { this[nameof(AngleLerp)].SetValue<float>(value); } }
        public float LinearVelocityCoefficient { get { return this[nameof(LinearVelocityCoefficient)].GetValue<float>(); } set { this[nameof(LinearVelocityCoefficient)].SetValue<float>(value); } }
        public float AngularVelocityCoefficient { get { return this[nameof(AngularVelocityCoefficient)].GetValue<float>(); } set { this[nameof(AngularVelocityCoefficient)].SetValue<float>(value); } }
        public float ErrorAccumulationSeconds { get { return this[nameof(ErrorAccumulationSeconds)].GetValue<float>(); } set { this[nameof(ErrorAccumulationSeconds)].SetValue<float>(value); } }
        public float ErrorAccumulationDistanceSq { get { return this[nameof(ErrorAccumulationDistanceSq)].GetValue<float>(); } set { this[nameof(ErrorAccumulationDistanceSq)].SetValue<float>(value); } }
        public float ErrorAccumulationSimilarity { get { return this[nameof(ErrorAccumulationSimilarity)].GetValue<float>(); } set { this[nameof(ErrorAccumulationSimilarity)].SetValue<float>(value); } }
    }
    public class RigidBodyContactInfo : Object
    {
        public RigidBodyContactInfo(nint addr) : base(addr) { }
        public Vector ContactPosition { get { return this[nameof(ContactPosition)].As<Vector>(); } set { this["ContactPosition"] = value; } }
        public Vector ContactNormal { get { return this[nameof(ContactNormal)].As<Vector>(); } set { this["ContactNormal"] = value; } }
        public float ContactPenetration { get { return this[nameof(ContactPenetration)].GetValue<float>(); } set { this[nameof(ContactPenetration)].SetValue<float>(value); } }
        public bool bContactProbe { get { return this[nameof(bContactProbe)].Flag; } set { this[nameof(bContactProbe)].Flag = value; } }
        public PhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<PhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
    }
    public class CollisionImpactData : Object
    {
        public CollisionImpactData(nint addr) : base(addr) { }
        public Array<RigidBodyContactInfo> ContactInfos { get { return new Array<RigidBodyContactInfo>(this[nameof(ContactInfos)].Address); } }
        public Vector TotalNormalImpulse { get { return this[nameof(TotalNormalImpulse)].As<Vector>(); } set { this["TotalNormalImpulse"] = value; } }
        public Vector TotalFrictionImpulse { get { return this[nameof(TotalFrictionImpulse)].As<Vector>(); } set { this["TotalFrictionImpulse"] = value; } }
        public bool bIsVelocityDeltaUnderThreshold { get { return this[nameof(bIsVelocityDeltaUnderThreshold)].Flag; } set { this[nameof(bIsVelocityDeltaUnderThreshold)].Flag = value; } }
    }
    public class FractureEffect : Object
    {
        public FractureEffect(nint addr) : base(addr) { }
        public ParticleSystem ParticleSystem { get { return this[nameof(ParticleSystem)].As<ParticleSystem>(); } set { this["ParticleSystem"] = value; } }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
    }
    public class BasedPosition : Object
    {
        public BasedPosition(nint addr) : base(addr) { }
        public Actor Base { get { return this[nameof(Base)].As<Actor>(); } set { this["Base"] = value; } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector CachedBaseLocation { get { return this[nameof(CachedBaseLocation)].As<Vector>(); } set { this["CachedBaseLocation"] = value; } }
        public Rotator CachedBaseRotation { get { return this[nameof(CachedBaseRotation)].As<Rotator>(); } set { this["CachedBaseRotation"] = value; } }
        public Vector CachedTransPosition { get { return this[nameof(CachedTransPosition)].As<Vector>(); } set { this["CachedTransPosition"] = value; } }
    }
    public class LightmassLightSettings : Object
    {
        public LightmassLightSettings(nint addr) : base(addr) { }
        public float IndirectLightingSaturation { get { return this[nameof(IndirectLightingSaturation)].GetValue<float>(); } set { this[nameof(IndirectLightingSaturation)].SetValue<float>(value); } }
        public float ShadowExponent { get { return this[nameof(ShadowExponent)].GetValue<float>(); } set { this[nameof(ShadowExponent)].SetValue<float>(value); } }
        public bool bUseAreaShadowsForStationaryLight { get { return this[nameof(bUseAreaShadowsForStationaryLight)].Flag; } set { this[nameof(bUseAreaShadowsForStationaryLight)].Flag = value; } }
    }
    public class LightmassPointLightSettings : LightmassLightSettings
    {
        public LightmassPointLightSettings(nint addr) : base(addr) { }
    }
    public class LightmassDirectionalLightSettings : LightmassLightSettings
    {
        public LightmassDirectionalLightSettings(nint addr) : base(addr) { }
        public float LightSourceAngle { get { return this[nameof(LightSourceAngle)].GetValue<float>(); } set { this[nameof(LightSourceAngle)].SetValue<float>(value); } }
    }
    public class LightmassDebugOptions : Object
    {
        public LightmassDebugOptions(nint addr) : base(addr) { }
        public bool bDebugMode { get { return this[nameof(bDebugMode)].Flag; } set { this[nameof(bDebugMode)].Flag = value; } }
        public bool bStatsEnabled { get { return this[nameof(bStatsEnabled)].Flag; } set { this[nameof(bStatsEnabled)].Flag = value; } }
        public bool bGatherBSPSurfacesAcrossComponents { get { return this[nameof(bGatherBSPSurfacesAcrossComponents)].Flag; } set { this[nameof(bGatherBSPSurfacesAcrossComponents)].Flag = value; } }
        public float CoplanarTolerance { get { return this[nameof(CoplanarTolerance)].GetValue<float>(); } set { this[nameof(CoplanarTolerance)].SetValue<float>(value); } }
        public bool bUseImmediateImport { get { return this[nameof(bUseImmediateImport)].Flag; } set { this[nameof(bUseImmediateImport)].Flag = value; } }
        public bool bImmediateProcessMappings { get { return this[nameof(bImmediateProcessMappings)].Flag; } set { this[nameof(bImmediateProcessMappings)].Flag = value; } }
        public bool bSortMappings { get { return this[nameof(bSortMappings)].Flag; } set { this[nameof(bSortMappings)].Flag = value; } }
        public bool bDumpBinaryFiles { get { return this[nameof(bDumpBinaryFiles)].Flag; } set { this[nameof(bDumpBinaryFiles)].Flag = value; } }
        public bool bDebugMaterials { get { return this[nameof(bDebugMaterials)].Flag; } set { this[nameof(bDebugMaterials)].Flag = value; } }
        public bool bPadMappings { get { return this[nameof(bPadMappings)].Flag; } set { this[nameof(bPadMappings)].Flag = value; } }
        public bool bDebugPaddings { get { return this[nameof(bDebugPaddings)].Flag; } set { this[nameof(bDebugPaddings)].Flag = value; } }
        public bool bOnlyCalcDebugTexelMappings { get { return this[nameof(bOnlyCalcDebugTexelMappings)].Flag; } set { this[nameof(bOnlyCalcDebugTexelMappings)].Flag = value; } }
        public bool bUseRandomColors { get { return this[nameof(bUseRandomColors)].Flag; } set { this[nameof(bUseRandomColors)].Flag = value; } }
        public bool bColorBordersGreen { get { return this[nameof(bColorBordersGreen)].Flag; } set { this[nameof(bColorBordersGreen)].Flag = value; } }
        public bool bColorByExecutionTime { get { return this[nameof(bColorByExecutionTime)].Flag; } set { this[nameof(bColorByExecutionTime)].Flag = value; } }
        public float ExecutionTimeDivisor { get { return this[nameof(ExecutionTimeDivisor)].GetValue<float>(); } set { this[nameof(ExecutionTimeDivisor)].SetValue<float>(value); } }
    }
    public class SwarmDebugOptions : Object
    {
        public SwarmDebugOptions(nint addr) : base(addr) { }
        public bool bDistributionEnabled { get { return this[nameof(bDistributionEnabled)].Flag; } set { this[nameof(bDistributionEnabled)].Flag = value; } }
        public bool bForceContentExport { get { return this[nameof(bForceContentExport)].Flag; } set { this[nameof(bForceContentExport)].Flag = value; } }
        public bool bInitialized { get { return this[nameof(bInitialized)].Flag; } set { this[nameof(bInitialized)].Flag = value; } }
    }
    public class MTDResult : Object
    {
        public MTDResult(nint addr) : base(addr) { }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class AnimSlotDesc : Object
    {
        public AnimSlotDesc(nint addr) : base(addr) { }
        public Object SlotName { get { return this[nameof(SlotName)]; } set { this[nameof(SlotName)] = value; } }
        public int NumChannels { get { return this[nameof(NumChannels)].GetValue<int>(); } set { this[nameof(NumChannels)].SetValue<int>(value); } }
    }
    public class AnimUpdateRateParameters : Object
    {
        public AnimUpdateRateParameters(nint addr) : base(addr) { }
        public EUpdateRateShiftBucket ShiftBucket { get { return (EUpdateRateShiftBucket)this[nameof(ShiftBucket)].GetValue<int>(); } set { this[nameof(ShiftBucket)].SetValue<int>((int)value); } }
        public bool bInterpolateSkippedFrames { get { return this[nameof(bInterpolateSkippedFrames)].Flag; } set { this[nameof(bInterpolateSkippedFrames)].Flag = value; } }
        public bool bShouldUseLodMap { get { return this[nameof(bShouldUseLodMap)].Flag; } set { this[nameof(bShouldUseLodMap)].Flag = value; } }
        public bool bShouldUseMinLod { get { return this[nameof(bShouldUseMinLod)].Flag; } set { this[nameof(bShouldUseMinLod)].Flag = value; } }
        public bool bSkipUpdate { get { return this[nameof(bSkipUpdate)].Flag; } set { this[nameof(bSkipUpdate)].Flag = value; } }
        public bool bSkipEvaluation { get { return this[nameof(bSkipEvaluation)].Flag; } set { this[nameof(bSkipEvaluation)].Flag = value; } }
        public int UpdateRate { get { return this[nameof(UpdateRate)].GetValue<int>(); } set { this[nameof(UpdateRate)].SetValue<int>(value); } }
        public int EvaluationRate { get { return this[nameof(EvaluationRate)].GetValue<int>(); } set { this[nameof(EvaluationRate)].SetValue<int>(value); } }
        public float TickedPoseOffestTime { get { return this[nameof(TickedPoseOffestTime)].GetValue<float>(); } set { this[nameof(TickedPoseOffestTime)].SetValue<float>(value); } }
        public float AdditionalTime { get { return this[nameof(AdditionalTime)].GetValue<float>(); } set { this[nameof(AdditionalTime)].SetValue<float>(value); } }
        public int BaseNonRenderedUpdateRate { get { return this[nameof(BaseNonRenderedUpdateRate)].GetValue<int>(); } set { this[nameof(BaseNonRenderedUpdateRate)].SetValue<int>(value); } }
        public int MaxEvalRateForInterpolation { get { return this[nameof(MaxEvalRateForInterpolation)].GetValue<int>(); } set { this[nameof(MaxEvalRateForInterpolation)].SetValue<int>(value); } }
        public Array<float> BaseVisibleDistanceFactorThesholds { get { return new Array<float>(this[nameof(BaseVisibleDistanceFactorThesholds)].Address); } }
        public Object LODToFrameSkipMap { get { return this[nameof(LODToFrameSkipMap)]; } set { this[nameof(LODToFrameSkipMap)] = value; } }
        public int SkippedUpdateFrames { get { return this[nameof(SkippedUpdateFrames)].GetValue<int>(); } set { this[nameof(SkippedUpdateFrames)].SetValue<int>(value); } }
        public int SkippedEvalFrames { get { return this[nameof(SkippedEvalFrames)].GetValue<int>(); } set { this[nameof(SkippedEvalFrames)].SetValue<int>(value); } }
    }
    public class POV : Object
    {
        public POV(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float FOV { get { return this[nameof(FOV)].GetValue<float>(); } set { this[nameof(FOV)].SetValue<float>(value); } }
    }
    public class MeshBuildSettings : Object
    {
        public MeshBuildSettings(nint addr) : base(addr) { }
        public bool bUseMikkTSpace { get { return this[nameof(bUseMikkTSpace)].Flag; } set { this[nameof(bUseMikkTSpace)].Flag = value; } }
        public bool bRecomputeNormals { get { return this[nameof(bRecomputeNormals)].Flag; } set { this[nameof(bRecomputeNormals)].Flag = value; } }
        public bool bRecomputeTangents { get { return this[nameof(bRecomputeTangents)].Flag; } set { this[nameof(bRecomputeTangents)].Flag = value; } }
        public bool bComputeWeightedNormals { get { return this[nameof(bComputeWeightedNormals)].Flag; } set { this[nameof(bComputeWeightedNormals)].Flag = value; } }
        public bool bRemoveDegenerates { get { return this[nameof(bRemoveDegenerates)].Flag; } set { this[nameof(bRemoveDegenerates)].Flag = value; } }
        public bool bBuildReversedIndexBuffer { get { return this[nameof(bBuildReversedIndexBuffer)].Flag; } set { this[nameof(bBuildReversedIndexBuffer)].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this[nameof(bUseHighPrecisionTangentBasis)].Flag; } set { this[nameof(bUseHighPrecisionTangentBasis)].Flag = value; } }
        public bool bUseFullPrecisionUVs { get { return this[nameof(bUseFullPrecisionUVs)].Flag; } set { this[nameof(bUseFullPrecisionUVs)].Flag = value; } }
        public bool bUseBackwardsCompatibleF16TruncUVs { get { return this[nameof(bUseBackwardsCompatibleF16TruncUVs)].Flag; } set { this[nameof(bUseBackwardsCompatibleF16TruncUVs)].Flag = value; } }
        public bool bGenerateLightmapUVs { get { return this[nameof(bGenerateLightmapUVs)].Flag; } set { this[nameof(bGenerateLightmapUVs)].Flag = value; } }
        public bool bGenerateDistanceFieldAsIfTwoSided { get { return this[nameof(bGenerateDistanceFieldAsIfTwoSided)].Flag; } set { this[nameof(bGenerateDistanceFieldAsIfTwoSided)].Flag = value; } }
        public bool bSupportFaceRemap { get { return this[nameof(bSupportFaceRemap)].Flag; } set { this[nameof(bSupportFaceRemap)].Flag = value; } }
        public int MinLightmapResolution { get { return this[nameof(MinLightmapResolution)].GetValue<int>(); } set { this[nameof(MinLightmapResolution)].SetValue<int>(value); } }
        public int SrcLightmapIndex { get { return this[nameof(SrcLightmapIndex)].GetValue<int>(); } set { this[nameof(SrcLightmapIndex)].SetValue<int>(value); } }
        public int DstLightmapIndex { get { return this[nameof(DstLightmapIndex)].GetValue<int>(); } set { this[nameof(DstLightmapIndex)].SetValue<int>(value); } }
        public float BuildScale { get { return this[nameof(BuildScale)].GetValue<float>(); } set { this[nameof(BuildScale)].SetValue<float>(value); } }
        public Vector BuildScale3D { get { return this[nameof(BuildScale3D)].As<Vector>(); } set { this["BuildScale3D"] = value; } }
        public float DistanceFieldResolutionScale { get { return this[nameof(DistanceFieldResolutionScale)].GetValue<float>(); } set { this[nameof(DistanceFieldResolutionScale)].SetValue<float>(value); } }
        public StaticMesh DistanceFieldReplacementMesh { get { return this[nameof(DistanceFieldReplacementMesh)].As<StaticMesh>(); } set { this["DistanceFieldReplacementMesh"] = value; } }
        public int MaxLumenMeshCards { get { return this[nameof(MaxLumenMeshCards)].GetValue<int>(); } set { this[nameof(MaxLumenMeshCards)].SetValue<int>(value); } }
    }
    public class SkeletalMeshBuildSettings : Object
    {
        public SkeletalMeshBuildSettings(nint addr) : base(addr) { }
        public bool bRecomputeNormals { get { return this[nameof(bRecomputeNormals)].Flag; } set { this[nameof(bRecomputeNormals)].Flag = value; } }
        public bool bRecomputeTangents { get { return this[nameof(bRecomputeTangents)].Flag; } set { this[nameof(bRecomputeTangents)].Flag = value; } }
        public bool bUseMikkTSpace { get { return this[nameof(bUseMikkTSpace)].Flag; } set { this[nameof(bUseMikkTSpace)].Flag = value; } }
        public bool bComputeWeightedNormals { get { return this[nameof(bComputeWeightedNormals)].Flag; } set { this[nameof(bComputeWeightedNormals)].Flag = value; } }
        public bool bRemoveDegenerates { get { return this[nameof(bRemoveDegenerates)].Flag; } set { this[nameof(bRemoveDegenerates)].Flag = value; } }
        public bool bUseHighPrecisionTangentBasis { get { return this[nameof(bUseHighPrecisionTangentBasis)].Flag; } set { this[nameof(bUseHighPrecisionTangentBasis)].Flag = value; } }
        public bool bUseFullPrecisionUVs { get { return this[nameof(bUseFullPrecisionUVs)].Flag; } set { this[nameof(bUseFullPrecisionUVs)].Flag = value; } }
        public bool bUseBackwardsCompatibleF16TruncUVs { get { return this[nameof(bUseBackwardsCompatibleF16TruncUVs)].Flag; } set { this[nameof(bUseBackwardsCompatibleF16TruncUVs)].Flag = value; } }
        public float ThresholdPosition { get { return this[nameof(ThresholdPosition)].GetValue<float>(); } set { this[nameof(ThresholdPosition)].SetValue<float>(value); } }
        public float ThresholdTangentNormal { get { return this[nameof(ThresholdTangentNormal)].GetValue<float>(); } set { this[nameof(ThresholdTangentNormal)].SetValue<float>(value); } }
        public float ThresholdUV { get { return this[nameof(ThresholdUV)].GetValue<float>(); } set { this[nameof(ThresholdUV)].SetValue<float>(value); } }
        public float MorphThresholdPosition { get { return this[nameof(MorphThresholdPosition)].GetValue<float>(); } set { this[nameof(MorphThresholdPosition)].SetValue<float>(value); } }
    }
    public class ConstrainComponentPropName : Object
    {
        public ConstrainComponentPropName(nint addr) : base(addr) { }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
    }
    public class CollectionReference : Object
    {
        public CollectionReference(nint addr) : base(addr) { }
        public Object CollectionName { get { return this[nameof(CollectionName)]; } set { this[nameof(CollectionName)] = value; } }
    }
    public class Redirector : Object
    {
        public Redirector(nint addr) : base(addr) { }
        public Object OldName { get { return this[nameof(OldName)]; } set { this[nameof(OldName)] = value; } }
        public Object NewName { get { return this[nameof(NewName)]; } set { this[nameof(NewName)] = value; } }
    }
    public class DepthFieldGlowInfo : Object
    {
        public DepthFieldGlowInfo(nint addr) : base(addr) { }
        public bool bEnableGlow { get { return this[nameof(bEnableGlow)].Flag; } set { this[nameof(bEnableGlow)].Flag = value; } }
        public LinearColor GlowColor { get { return this[nameof(GlowColor)].As<LinearColor>(); } set { this["GlowColor"] = value; } }
        public Vector2D GlowOuterRadius { get { return this[nameof(GlowOuterRadius)].As<Vector2D>(); } set { this["GlowOuterRadius"] = value; } }
        public Vector2D GlowInnerRadius { get { return this[nameof(GlowInnerRadius)].As<Vector2D>(); } set { this["GlowInnerRadius"] = value; } }
    }
    public class FontRenderInfo : Object
    {
        public FontRenderInfo(nint addr) : base(addr) { }
        public bool bClipText { get { return this[nameof(bClipText)].Flag; } set { this[nameof(bClipText)].Flag = value; } }
        public bool bEnableShadow { get { return this[nameof(bEnableShadow)].Flag; } set { this[nameof(bEnableShadow)].Flag = value; } }
        public DepthFieldGlowInfo GlowInfo { get { return this[nameof(GlowInfo)].As<DepthFieldGlowInfo>(); } set { this["GlowInfo"] = value; } }
    }
    public class CanvasUVTri : Object
    {
        public CanvasUVTri(nint addr) : base(addr) { }
        public Vector2D V0_Pos { get { return this[nameof(V0_Pos)].As<Vector2D>(); } set { this["V0_Pos"] = value; } }
        public Vector2D V0_UV { get { return this[nameof(V0_UV)].As<Vector2D>(); } set { this["V0_UV"] = value; } }
        public LinearColor V0_Color { get { return this[nameof(V0_Color)].As<LinearColor>(); } set { this["V0_Color"] = value; } }
        public Vector2D V1_Pos { get { return this[nameof(V1_Pos)].As<Vector2D>(); } set { this["V1_Pos"] = value; } }
        public Vector2D V1_UV { get { return this[nameof(V1_UV)].As<Vector2D>(); } set { this["V1_UV"] = value; } }
        public LinearColor V1_Color { get { return this[nameof(V1_Color)].As<LinearColor>(); } set { this["V1_Color"] = value; } }
        public Vector2D V2_Pos { get { return this[nameof(V2_Pos)].As<Vector2D>(); } set { this["V2_Pos"] = value; } }
        public Vector2D V2_UV { get { return this[nameof(V2_UV)].As<Vector2D>(); } set { this["V2_UV"] = value; } }
        public LinearColor V2_Color { get { return this[nameof(V2_Color)].As<LinearColor>(); } set { this["V2_Color"] = value; } }
    }
    public class ExponentialHeightFogData : Object
    {
        public ExponentialHeightFogData(nint addr) : base(addr) { }
        public float FogDensity { get { return this[nameof(FogDensity)].GetValue<float>(); } set { this[nameof(FogDensity)].SetValue<float>(value); } }
        public float FogHeightFalloff { get { return this[nameof(FogHeightFalloff)].GetValue<float>(); } set { this[nameof(FogHeightFalloff)].SetValue<float>(value); } }
        public float FogHeightOffset { get { return this[nameof(FogHeightOffset)].GetValue<float>(); } set { this[nameof(FogHeightOffset)].SetValue<float>(value); } }
    }
    public class FontImportOptionsData : Object
    {
        public FontImportOptionsData(nint addr) : base(addr) { }
        public Object FontName { get { return this[nameof(FontName)]; } set { this[nameof(FontName)] = value; } }
        public float Height { get { return this[nameof(Height)].GetValue<float>(); } set { this[nameof(Height)].SetValue<float>(value); } }
        public bool bEnableAntialiasing { get { return this[nameof(bEnableAntialiasing)].Flag; } set { this[nameof(bEnableAntialiasing)].Flag = value; } }
        public bool bEnableBold { get { return this[nameof(bEnableBold)].Flag; } set { this[nameof(bEnableBold)].Flag = value; } }
        public bool bEnableItalic { get { return this[nameof(bEnableItalic)].Flag; } set { this[nameof(bEnableItalic)].Flag = value; } }
        public bool bEnableUnderline { get { return this[nameof(bEnableUnderline)].Flag; } set { this[nameof(bEnableUnderline)].Flag = value; } }
        public bool bAlphaOnly { get { return this[nameof(bAlphaOnly)].Flag; } set { this[nameof(bAlphaOnly)].Flag = value; } }
        public byte CharacterSet { get { return this[nameof(CharacterSet)].GetValue<byte>(); } set { this[nameof(CharacterSet)].SetValue<byte>(value); } }
        public Object Chars { get { return this[nameof(Chars)]; } set { this[nameof(Chars)] = value; } }
        public Object UnicodeRange { get { return this[nameof(UnicodeRange)]; } set { this[nameof(UnicodeRange)] = value; } }
        public Object CharsFilePath { get { return this[nameof(CharsFilePath)]; } set { this[nameof(CharsFilePath)] = value; } }
        public Object CharsFileWildcard { get { return this[nameof(CharsFileWildcard)]; } set { this[nameof(CharsFileWildcard)] = value; } }
        public bool bCreatePrintableOnly { get { return this[nameof(bCreatePrintableOnly)].Flag; } set { this[nameof(bCreatePrintableOnly)].Flag = value; } }
        public bool bIncludeASCIIRange { get { return this[nameof(bIncludeASCIIRange)].Flag; } set { this[nameof(bIncludeASCIIRange)].Flag = value; } }
        public LinearColor ForegroundColor { get { return this[nameof(ForegroundColor)].As<LinearColor>(); } set { this["ForegroundColor"] = value; } }
        public bool bEnableDropShadow { get { return this[nameof(bEnableDropShadow)].Flag; } set { this[nameof(bEnableDropShadow)].Flag = value; } }
        public int TexturePageWidth { get { return this[nameof(TexturePageWidth)].GetValue<int>(); } set { this[nameof(TexturePageWidth)].SetValue<int>(value); } }
        public int TexturePageMaxHeight { get { return this[nameof(TexturePageMaxHeight)].GetValue<int>(); } set { this[nameof(TexturePageMaxHeight)].SetValue<int>(value); } }
        public int XPadding { get { return this[nameof(XPadding)].GetValue<int>(); } set { this[nameof(XPadding)].SetValue<int>(value); } }
        public int YPadding { get { return this[nameof(YPadding)].GetValue<int>(); } set { this[nameof(YPadding)].SetValue<int>(value); } }
        public int ExtendBoxTop { get { return this[nameof(ExtendBoxTop)].GetValue<int>(); } set { this[nameof(ExtendBoxTop)].SetValue<int>(value); } }
        public int ExtendBoxBottom { get { return this[nameof(ExtendBoxBottom)].GetValue<int>(); } set { this[nameof(ExtendBoxBottom)].SetValue<int>(value); } }
        public int ExtendBoxRight { get { return this[nameof(ExtendBoxRight)].GetValue<int>(); } set { this[nameof(ExtendBoxRight)].SetValue<int>(value); } }
        public int ExtendBoxLeft { get { return this[nameof(ExtendBoxLeft)].GetValue<int>(); } set { this[nameof(ExtendBoxLeft)].SetValue<int>(value); } }
        public bool bEnableLegacyMode { get { return this[nameof(bEnableLegacyMode)].Flag; } set { this[nameof(bEnableLegacyMode)].Flag = value; } }
        public int Kerning { get { return this[nameof(Kerning)].GetValue<int>(); } set { this[nameof(Kerning)].SetValue<int>(value); } }
        public bool bUseDistanceFieldAlpha { get { return this[nameof(bUseDistanceFieldAlpha)].Flag; } set { this[nameof(bUseDistanceFieldAlpha)].Flag = value; } }
        public int DistanceFieldScaleFactor { get { return this[nameof(DistanceFieldScaleFactor)].GetValue<int>(); } set { this[nameof(DistanceFieldScaleFactor)].SetValue<int>(value); } }
        public float DistanceFieldScanRadiusScale { get { return this[nameof(DistanceFieldScanRadiusScale)].GetValue<float>(); } set { this[nameof(DistanceFieldScanRadiusScale)].SetValue<float>(value); } }
    }
    public class BaseAttenuationSettings : Object
    {
        public BaseAttenuationSettings(nint addr) : base(addr) { }
        public EAttenuationDistanceModel DistanceAlgorithm { get { return (EAttenuationDistanceModel)this[nameof(DistanceAlgorithm)].GetValue<int>(); } set { this[nameof(DistanceAlgorithm)].SetValue<int>((int)value); } }
        public byte AttenuationShape { get { return this[nameof(AttenuationShape)].GetValue<byte>(); } set { this[nameof(AttenuationShape)].SetValue<byte>(value); } }
        public ENaturalSoundFalloffMode FalloffMode { get { return (ENaturalSoundFalloffMode)this[nameof(FalloffMode)].GetValue<int>(); } set { this[nameof(FalloffMode)].SetValue<int>((int)value); } }
        public float dBAttenuationAtMax { get { return this[nameof(dBAttenuationAtMax)].GetValue<float>(); } set { this[nameof(dBAttenuationAtMax)].SetValue<float>(value); } }
        public Vector AttenuationShapeExtents { get { return this[nameof(AttenuationShapeExtents)].As<Vector>(); } set { this["AttenuationShapeExtents"] = value; } }
        public float ConeOffset { get { return this[nameof(ConeOffset)].GetValue<float>(); } set { this[nameof(ConeOffset)].SetValue<float>(value); } }
        public float FalloffDistance { get { return this[nameof(FalloffDistance)].GetValue<float>(); } set { this[nameof(FalloffDistance)].SetValue<float>(value); } }
        public float ConeSphereRadius { get { return this[nameof(ConeSphereRadius)].GetValue<float>(); } set { this[nameof(ConeSphereRadius)].SetValue<float>(value); } }
        public float ConeSphereFalloffDistance { get { return this[nameof(ConeSphereFalloffDistance)].GetValue<float>(); } set { this[nameof(ConeSphereFalloffDistance)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomAttenuationCurve { get { return this[nameof(CustomAttenuationCurve)].As<RuntimeFloatCurve>(); } set { this["CustomAttenuationCurve"] = value; } }
    }
    public class ForceFeedbackAttenuationSettings : BaseAttenuationSettings
    {
        public ForceFeedbackAttenuationSettings(nint addr) : base(addr) { }
    }
    public class PredictProjectilePathParams : Object
    {
        public PredictProjectilePathParams(nint addr) : base(addr) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector LaunchVelocity { get { return this[nameof(LaunchVelocity)].As<Vector>(); } set { this["LaunchVelocity"] = value; } }
        public bool bTraceWithCollision { get { return this[nameof(bTraceWithCollision)].Flag; } set { this[nameof(bTraceWithCollision)].Flag = value; } }
        public float ProjectileRadius { get { return this[nameof(ProjectileRadius)].GetValue<float>(); } set { this[nameof(ProjectileRadius)].SetValue<float>(value); } }
        public float MaxSimTime { get { return this[nameof(MaxSimTime)].GetValue<float>(); } set { this[nameof(MaxSimTime)].SetValue<float>(value); } }
        public bool bTraceWithChannel { get { return this[nameof(bTraceWithChannel)].Flag; } set { this[nameof(bTraceWithChannel)].Flag = value; } }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public Array<byte> ObjectTypes { get { return new Array<byte>(this[nameof(ObjectTypes)].Address); } }
        public Array<Actor> ActorsToIgnore { get { return new Array<Actor>(this[nameof(ActorsToIgnore)].Address); } }
        public float SimFrequency { get { return this[nameof(SimFrequency)].GetValue<float>(); } set { this[nameof(SimFrequency)].SetValue<float>(value); } }
        public float OverrideGravityZ { get { return this[nameof(OverrideGravityZ)].GetValue<float>(); } set { this[nameof(OverrideGravityZ)].SetValue<float>(value); } }
        public byte DrawDebugType { get { return this[nameof(DrawDebugType)].GetValue<byte>(); } set { this[nameof(DrawDebugType)].SetValue<byte>(value); } }
        public float DrawDebugTime { get { return this[nameof(DrawDebugTime)].GetValue<float>(); } set { this[nameof(DrawDebugTime)].SetValue<float>(value); } }
        public bool bTraceComplex { get { return this[nameof(bTraceComplex)].Flag; } set { this[nameof(bTraceComplex)].Flag = value; } }
    }
    public class PredictProjectilePathPointData : Object
    {
        public PredictProjectilePathPointData(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
    }
    public class PredictProjectilePathResult : Object
    {
        public PredictProjectilePathResult(nint addr) : base(addr) { }
        public Array<PredictProjectilePathPointData> PathData { get { return new Array<PredictProjectilePathPointData>(this[nameof(PathData)].Address); } }
        public PredictProjectilePathPointData LastTraceDestination { get { return this[nameof(LastTraceDestination)].As<PredictProjectilePathPointData>(); } set { this["LastTraceDestination"] = value; } }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
    }
    public class ActiveHapticFeedbackEffect : Object
    {
        public ActiveHapticFeedbackEffect(nint addr) : base(addr) { }
        public HapticFeedbackEffect_Base HapticEffect { get { return this[nameof(HapticEffect)].As<HapticFeedbackEffect_Base>(); } set { this["HapticEffect"] = value; } }
    }
    public class HapticFeedbackDetails_Curve : Object
    {
        public HapticFeedbackDetails_Curve(nint addr) : base(addr) { }
        public RuntimeFloatCurve Frequency { get { return this[nameof(Frequency)].As<RuntimeFloatCurve>(); } set { this["Frequency"] = value; } }
        public RuntimeFloatCurve Amplitude { get { return this[nameof(Amplitude)].As<RuntimeFloatCurve>(); } set { this["Amplitude"] = value; } }
    }
    public class ClusterNode_DEPRECATED : Object
    {
        public ClusterNode_DEPRECATED(nint addr) : base(addr) { }
        public Vector3f BoundMin { get { return this[nameof(BoundMin)].As<Vector3f>(); } set { this["BoundMin"] = value; } }
        public int FirstChild { get { return this[nameof(FirstChild)].GetValue<int>(); } set { this[nameof(FirstChild)].SetValue<int>(value); } }
        public Vector3f BoundMax { get { return this[nameof(BoundMax)].As<Vector3f>(); } set { this["BoundMax"] = value; } }
        public int LastChild { get { return this[nameof(LastChild)].GetValue<int>(); } set { this[nameof(LastChild)].SetValue<int>(value); } }
        public int FirstInstance { get { return this[nameof(FirstInstance)].GetValue<int>(); } set { this[nameof(FirstInstance)].SetValue<int>(value); } }
        public int LastInstance { get { return this[nameof(LastInstance)].GetValue<int>(); } set { this[nameof(LastInstance)].SetValue<int>(value); } }
    }
    public class ClusterNode : Object
    {
        public ClusterNode(nint addr) : base(addr) { }
        public Vector3f BoundMin { get { return this[nameof(BoundMin)].As<Vector3f>(); } set { this["BoundMin"] = value; } }
        public int FirstChild { get { return this[nameof(FirstChild)].GetValue<int>(); } set { this[nameof(FirstChild)].SetValue<int>(value); } }
        public Vector3f BoundMax { get { return this[nameof(BoundMax)].As<Vector3f>(); } set { this["BoundMax"] = value; } }
        public int LastChild { get { return this[nameof(LastChild)].GetValue<int>(); } set { this[nameof(LastChild)].SetValue<int>(value); } }
        public int FirstInstance { get { return this[nameof(FirstInstance)].GetValue<int>(); } set { this[nameof(FirstInstance)].SetValue<int>(value); } }
        public int LastInstance { get { return this[nameof(LastInstance)].GetValue<int>(); } set { this[nameof(LastInstance)].SetValue<int>(value); } }
        public Vector3f MinInstanceScale { get { return this[nameof(MinInstanceScale)].As<Vector3f>(); } set { this["MinInstanceScale"] = value; } }
        public Vector3f MaxInstanceScale { get { return this[nameof(MaxInstanceScale)].As<Vector3f>(); } set { this["MaxInstanceScale"] = value; } }
    }
    public class HLODSubActorDesc : Object
    {
        public HLODSubActorDesc(nint addr) : base(addr) { }
    }
    public class HLODSubActor : Object
    {
        public HLODSubActor(nint addr) : base(addr) { }
    }
    public class InstancedStaticMeshInstanceData : Object
    {
        public InstancedStaticMeshInstanceData(nint addr) : base(addr) { }
        public Matrix Transform { get { return this[nameof(Transform)].As<Matrix>(); } set { this["Transform"] = value; } }
    }
    public class InstancedStaticMeshMappingInfo : Object
    {
        public InstancedStaticMeshMappingInfo(nint addr) : base(addr) { }
    }
    public class InstancedStaticMeshRandomSeed : Object
    {
        public InstancedStaticMeshRandomSeed(nint addr) : base(addr) { }
        public int StartInstanceIndex { get { return this[nameof(StartInstanceIndex)].GetValue<int>(); } set { this[nameof(StartInstanceIndex)].SetValue<int>(value); } }
        public int RandomSeed { get { return this[nameof(RandomSeed)].GetValue<int>(); } set { this[nameof(RandomSeed)].SetValue<int>(value); } }
    }
    public class InstancedStaticMeshLightMapInstanceData : Object
    {
        public InstancedStaticMeshLightMapInstanceData(nint addr) : base(addr) { }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Array<Guid> MapBuildDataIds { get { return new Array<Guid>(this[nameof(MapBuildDataIds)].Address); } }
    }
    public class InstancedStaticMeshComponentInstanceData : SceneComponentInstanceData
    {
        public InstancedStaticMeshComponentInstanceData(nint addr) : base(addr) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public InstancedStaticMeshLightMapInstanceData CachedStaticLighting { get { return this[nameof(CachedStaticLighting)].As<InstancedStaticMeshLightMapInstanceData>(); } set { this["CachedStaticLighting"] = value; } }
        public Array<InstancedStaticMeshInstanceData> PerInstanceSMData { get { return new Array<InstancedStaticMeshInstanceData>(this[nameof(PerInstanceSMData)].Address); } }
        public Array<float> PerInstanceSMCustomData { get { return new Array<float>(this[nameof(PerInstanceSMCustomData)].Address); } }
        public int InstancingRandomSeed { get { return this[nameof(InstancingRandomSeed)].GetValue<int>(); } set { this[nameof(InstancingRandomSeed)].SetValue<int>(value); } }
        public Array<InstancedStaticMeshRandomSeed> AdditionalRandomSeeds { get { return new Array<InstancedStaticMeshRandomSeed>(this[nameof(AdditionalRandomSeeds)].Address); } }
        public bool bHasPerInstanceHitProxies { get { return this[nameof(bHasPerInstanceHitProxies)].Flag; } set { this[nameof(bHasPerInstanceHitProxies)].Flag = value; } }
    }
    public class UniqueNetIdReplNetSerializerStringStruct : Object
    {
        public UniqueNetIdReplNetSerializerStringStruct(nint addr) : base(addr) { }
        public Object String { get { return this[nameof(String)]; } set { this[nameof(String)] = value; } }
    }
    public class UniqueNetIdReplNetSerializerNameStruct : Object
    {
        public UniqueNetIdReplNetSerializerNameStruct(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class ISMClientHandle : Object
    {
        public ISMClientHandle(nint addr) : base(addr) { }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
    }
    public class ISMClientInstanceManagerData : Object
    {
        public ISMClientInstanceManagerData(nint addr) : base(addr) { }
    }
    public class NewLevelInstanceParams : Object
    {
        public NewLevelInstanceParams(nint addr) : base(addr) { }
        public ELevelInstanceCreationType Type { get { return (ELevelInstanceCreationType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public ELevelInstancePivotType PivotType { get { return (ELevelInstancePivotType)this[nameof(PivotType)].GetValue<int>(); } set { this[nameof(PivotType)].SetValue<int>((int)value); } }
        public Actor PivotActor { get { return this[nameof(PivotActor)].As<Actor>(); } set { this["PivotActor"] = value; } }
        public bool bAlwaysShowDialog { get { return this[nameof(bAlwaysShowDialog)].Flag; } set { this[nameof(bAlwaysShowDialog)].Flag = value; } }
        public World TemplateWorld { get { return this[nameof(TemplateWorld)].As<World>(); } set { this["TemplateWorld"] = value; } }
        public Object LevelPackageName { get { return this[nameof(LevelPackageName)]; } set { this[nameof(LevelPackageName)] = value; } }
        public bool bPromptForSave { get { return this[nameof(bPromptForSave)].Flag; } set { this[nameof(bPromptForSave)].Flag = value; } }
        public Object LevelInstanceClass { get { return this[nameof(LevelInstanceClass)]; } set { this[nameof(LevelInstanceClass)] = value; } }
        public bool bExternalActors { get { return this[nameof(bExternalActors)].Flag; } set { this[nameof(bExternalActors)].Flag = value; } }
        public bool bForceExternalActors { get { return this[nameof(bForceExternalActors)].Flag; } set { this[nameof(bForceExternalActors)].Flag = value; } }
        public bool bHideCreationType { get { return this[nameof(bHideCreationType)].Flag; } set { this[nameof(bHideCreationType)].Flag = value; } }
    }
    public class ParameterGroupData : Object
    {
        public ParameterGroupData(nint addr) : base(addr) { }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public int GroupSortPriority { get { return this[nameof(GroupSortPriority)].GetValue<int>(); } set { this[nameof(GroupSortPriority)].SetValue<int>(value); } }
    }
    public class ExpressionExecOutput : Object
    {
        public ExpressionExecOutput(nint addr) : base(addr) { }
        public MaterialExpression Expression { get { return this[nameof(Expression)].As<MaterialExpression>(); } set { this["Expression"] = value; } }
    }
    public class MaterialExpressionCollection : Object
    {
        public MaterialExpressionCollection(nint addr) : base(addr) { }
        public Array<MaterialExpression> Expressions { get { return new Array<MaterialExpression>(this[nameof(Expressions)].Address); } }
        public Array<MaterialExpressionComment> EditorComments { get { return new Array<MaterialExpressionComment>(this[nameof(EditorComments)].Address); } }
        public MaterialExpressionExecBegin ExpressionExecBegin { get { return this[nameof(ExpressionExecBegin)].As<MaterialExpressionExecBegin>(); } set { this["ExpressionExecBegin"] = value; } }
        public MaterialExpressionExecEnd ExpressionExecEnd { get { return this[nameof(ExpressionExecEnd)].As<MaterialExpressionExecEnd>(); } set { this["ExpressionExecEnd"] = value; } }
    }
    public class CustomInput : Object
    {
        public CustomInput(nint addr) : base(addr) { }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class CustomOutput : Object
    {
        public CustomOutput(nint addr) : base(addr) { }
        public Object OutputName { get { return this[nameof(OutputName)]; } set { this[nameof(OutputName)] = value; } }
        public byte OutputType { get { return this[nameof(OutputType)].GetValue<byte>(); } set { this[nameof(OutputType)].SetValue<byte>(value); } }
    }
    public class CustomDefine : Object
    {
        public CustomDefine(nint addr) : base(addr) { }
        public Object DefineName { get { return this[nameof(DefineName)]; } set { this[nameof(DefineName)] = value; } }
        public Object DefineValue { get { return this[nameof(DefineValue)]; } set { this[nameof(DefineValue)] = value; } }
    }
    public class FunctionExpressionInput : Object
    {
        public FunctionExpressionInput(nint addr) : base(addr) { }
        public MaterialExpressionFunctionInput ExpressionInput { get { return this[nameof(ExpressionInput)].As<MaterialExpressionFunctionInput>(); } set { this["ExpressionInput"] = value; } }
        public Guid ExpressionInputId { get { return this[nameof(ExpressionInputId)].As<Guid>(); } set { this["ExpressionInputId"] = value; } }
        public ExpressionInput Input { get { return this[nameof(Input)].As<ExpressionInput>(); } set { this["Input"] = value; } }
    }
    public class FunctionExpressionOutput : Object
    {
        public FunctionExpressionOutput(nint addr) : base(addr) { }
        public MaterialExpressionFunctionOutput ExpressionOutput { get { return this[nameof(ExpressionOutput)].As<MaterialExpressionFunctionOutput>(); } set { this["ExpressionOutput"] = value; } }
        public Guid ExpressionOutputId { get { return this[nameof(ExpressionOutputId)].As<Guid>(); } set { this["ExpressionOutputId"] = value; } }
        public ExpressionOutput Output { get { return this[nameof(Output)].As<ExpressionOutput>(); } set { this["Output"] = value; } }
    }
    public class CompositeReroute : Object
    {
        public CompositeReroute(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public MaterialExpressionReroute Expression { get { return this[nameof(Expression)].As<MaterialExpressionReroute>(); } set { this["Expression"] = value; } }
    }
    public class MaterialInstanceBasePropertyOverrides : Object
    {
        public MaterialInstanceBasePropertyOverrides(nint addr) : base(addr) { }
        public bool bOverride_OpacityMaskClipValue { get { return this[nameof(bOverride_OpacityMaskClipValue)].Flag; } set { this[nameof(bOverride_OpacityMaskClipValue)].Flag = value; } }
        public bool bOverride_BlendMode { get { return this[nameof(bOverride_BlendMode)].Flag; } set { this[nameof(bOverride_BlendMode)].Flag = value; } }
        public bool bOverride_ShadingModel { get { return this[nameof(bOverride_ShadingModel)].Flag; } set { this[nameof(bOverride_ShadingModel)].Flag = value; } }
        public bool bOverride_DitheredLODTransition { get { return this[nameof(bOverride_DitheredLODTransition)].Flag; } set { this[nameof(bOverride_DitheredLODTransition)].Flag = value; } }
        public bool bOverride_CastDynamicShadowAsMasked { get { return this[nameof(bOverride_CastDynamicShadowAsMasked)].Flag; } set { this[nameof(bOverride_CastDynamicShadowAsMasked)].Flag = value; } }
        public bool bOverride_TwoSided { get { return this[nameof(bOverride_TwoSided)].Flag; } set { this[nameof(bOverride_TwoSided)].Flag = value; } }
        public bool bOverride_OutputTranslucentVelocity { get { return this[nameof(bOverride_OutputTranslucentVelocity)].Flag; } set { this[nameof(bOverride_OutputTranslucentVelocity)].Flag = value; } }
        public bool TwoSided { get { return this[nameof(TwoSided)].Flag; } set { this[nameof(TwoSided)].Flag = value; } }
        public bool DitheredLODTransition { get { return this[nameof(DitheredLODTransition)].Flag; } set { this[nameof(DitheredLODTransition)].Flag = value; } }
        public bool bCastDynamicShadowAsMasked { get { return this[nameof(bCastDynamicShadowAsMasked)].Flag; } set { this[nameof(bCastDynamicShadowAsMasked)].Flag = value; } }
        public bool bOutputTranslucentVelocity { get { return this[nameof(bOutputTranslucentVelocity)].Flag; } set { this[nameof(bOutputTranslucentVelocity)].Flag = value; } }
        public byte BlendMode { get { return this[nameof(BlendMode)].GetValue<byte>(); } set { this[nameof(BlendMode)].SetValue<byte>(value); } }
        public byte ShadingModel { get { return this[nameof(ShadingModel)].GetValue<byte>(); } set { this[nameof(ShadingModel)].SetValue<byte>(value); } }
        public float OpacityMaskClipValue { get { return this[nameof(OpacityMaskClipValue)].GetValue<float>(); } set { this[nameof(OpacityMaskClipValue)].SetValue<float>(value); } }
    }
    public class LightmassMaterialInterfaceSettings : Object
    {
        public LightmassMaterialInterfaceSettings(nint addr) : base(addr) { }
        public float EmissiveBoost { get { return this[nameof(EmissiveBoost)].GetValue<float>(); } set { this[nameof(EmissiveBoost)].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this[nameof(DiffuseBoost)].GetValue<float>(); } set { this[nameof(DiffuseBoost)].SetValue<float>(value); } }
        public float ExportResolutionScale { get { return this[nameof(ExportResolutionScale)].GetValue<float>(); } set { this[nameof(ExportResolutionScale)].SetValue<float>(value); } }
        public bool bCastShadowAsMasked { get { return this[nameof(bCastShadowAsMasked)].Flag; } set { this[nameof(bCastShadowAsMasked)].Flag = value; } }
        public bool bOverrideCastShadowAsMasked { get { return this[nameof(bOverrideCastShadowAsMasked)].Flag; } set { this[nameof(bOverrideCastShadowAsMasked)].Flag = value; } }
        public bool bOverrideEmissiveBoost { get { return this[nameof(bOverrideEmissiveBoost)].Flag; } set { this[nameof(bOverrideEmissiveBoost)].Flag = value; } }
        public bool bOverrideDiffuseBoost { get { return this[nameof(bOverrideDiffuseBoost)].Flag; } set { this[nameof(bOverrideDiffuseBoost)].Flag = value; } }
        public bool bOverrideExportResolutionScale { get { return this[nameof(bOverrideExportResolutionScale)].Flag; } set { this[nameof(bOverrideExportResolutionScale)].Flag = value; } }
    }
    public class MaterialTextureInfo : Object
    {
        public MaterialTextureInfo(nint addr) : base(addr) { }
        public float SamplingScale { get { return this[nameof(SamplingScale)].GetValue<float>(); } set { this[nameof(SamplingScale)].SetValue<float>(value); } }
        public int UVChannelIndex { get { return this[nameof(UVChannelIndex)].GetValue<int>(); } set { this[nameof(UVChannelIndex)].SetValue<int>(value); } }
        public Object TextureName { get { return this[nameof(TextureName)]; } set { this[nameof(TextureName)] = value; } }
    }
    public class MaterialLayersFunctionsEditorOnlyData : Object
    {
        public MaterialLayersFunctionsEditorOnlyData(nint addr) : base(addr) { }
        public Array<bool> LayerStates { get { return new Array<bool>(this[nameof(LayerStates)].Address); } }
        public Array<Object> LayerNames { get { return new Array<Object>(this[nameof(LayerNames)].Address); } }
        public Array<bool> RestrictToLayerRelatives { get { return new Array<bool>(this[nameof(RestrictToLayerRelatives)].Address); } }
        public Array<bool> RestrictToBlendRelatives { get { return new Array<bool>(this[nameof(RestrictToBlendRelatives)].Address); } }
        public Array<Guid> LayerGuids { get { return new Array<Guid>(this[nameof(LayerGuids)].Address); } }
        public Array<EMaterialLayerLinkState> LayerLinkStates { get { return new Array<EMaterialLayerLinkState>(this[nameof(LayerLinkStates)].Address); } }
        public Array<Guid> DeletedParentLayerGuids { get { return new Array<Guid>(this[nameof(DeletedParentLayerGuids)].Address); } }
    }
    public class MaterialLayersFunctionsRuntimeData : Object
    {
        public MaterialLayersFunctionsRuntimeData(nint addr) : base(addr) { }
        public Array<MaterialFunctionInterface> Layers { get { return new Array<MaterialFunctionInterface>(this[nameof(Layers)].Address); } }
        public Array<MaterialFunctionInterface> Blends { get { return new Array<MaterialFunctionInterface>(this[nameof(Blends)].Address); } }
    }
    public class MaterialLayersFunctions : MaterialLayersFunctionsRuntimeData
    {
        public MaterialLayersFunctions(nint addr) : base(addr) { }
        public MaterialLayersFunctionsEditorOnlyData EditorOnly { get { return this[nameof(EditorOnly)].As<MaterialLayersFunctionsEditorOnlyData>(); } set { this["EditorOnly"] = value; } }
        public Array<bool> LayerStates { get { return new Array<bool>(this[nameof(LayerStates)].Address); } }
        public Array<Object> LayerNames { get { return new Array<Object>(this[nameof(LayerNames)].Address); } }
        public Array<bool> RestrictToLayerRelatives { get { return new Array<bool>(this[nameof(RestrictToLayerRelatives)].Address); } }
        public Array<bool> RestrictToBlendRelatives { get { return new Array<bool>(this[nameof(RestrictToBlendRelatives)].Address); } }
        public Array<Guid> LayerGuids { get { return new Array<Guid>(this[nameof(LayerGuids)].Address); } }
        public Array<EMaterialLayerLinkState> LayerLinkStates { get { return new Array<EMaterialLayerLinkState>(this[nameof(LayerLinkStates)].Address); } }
        public Array<Guid> DeletedParentLayerGuids { get { return new Array<Guid>(this[nameof(DeletedParentLayerGuids)].Address); } }
    }
    public class MaterialProxySettings : Object
    {
        public MaterialProxySettings(nint addr) : base(addr) { }
        public byte TextureSizingType { get { return this[nameof(TextureSizingType)].GetValue<byte>(); } set { this[nameof(TextureSizingType)].SetValue<byte>(value); } }
        public IntPoint TextureSize { get { return this[nameof(TextureSize)].As<IntPoint>(); } set { this["TextureSize"] = value; } }
        public float TargetTexelDensityPerMeter { get { return this[nameof(TargetTexelDensityPerMeter)].GetValue<float>(); } set { this[nameof(TargetTexelDensityPerMeter)].SetValue<float>(value); } }
        public float MeshMaxScreenSizePercent { get { return this[nameof(MeshMaxScreenSizePercent)].GetValue<float>(); } set { this[nameof(MeshMaxScreenSizePercent)].SetValue<float>(value); } }
        public float MeshMinDrawDistance { get { return this[nameof(MeshMinDrawDistance)].GetValue<float>(); } set { this[nameof(MeshMinDrawDistance)].SetValue<float>(value); } }
        public float GutterSpace { get { return this[nameof(GutterSpace)].GetValue<float>(); } set { this[nameof(GutterSpace)].SetValue<float>(value); } }
        public float MetallicConstant { get { return this[nameof(MetallicConstant)].GetValue<float>(); } set { this[nameof(MetallicConstant)].SetValue<float>(value); } }
        public float RoughnessConstant { get { return this[nameof(RoughnessConstant)].GetValue<float>(); } set { this[nameof(RoughnessConstant)].SetValue<float>(value); } }
        public float AnisotropyConstant { get { return this[nameof(AnisotropyConstant)].GetValue<float>(); } set { this[nameof(AnisotropyConstant)].SetValue<float>(value); } }
        public float SpecularConstant { get { return this[nameof(SpecularConstant)].GetValue<float>(); } set { this[nameof(SpecularConstant)].SetValue<float>(value); } }
        public float OpacityConstant { get { return this[nameof(OpacityConstant)].GetValue<float>(); } set { this[nameof(OpacityConstant)].SetValue<float>(value); } }
        public float OpacityMaskConstant { get { return this[nameof(OpacityMaskConstant)].GetValue<float>(); } set { this[nameof(OpacityMaskConstant)].SetValue<float>(value); } }
        public float AmbientOcclusionConstant { get { return this[nameof(AmbientOcclusionConstant)].GetValue<float>(); } set { this[nameof(AmbientOcclusionConstant)].SetValue<float>(value); } }
        public byte MaterialMergeType { get { return this[nameof(MaterialMergeType)].GetValue<byte>(); } set { this[nameof(MaterialMergeType)].SetValue<byte>(value); } }
        public byte BlendMode { get { return this[nameof(BlendMode)].GetValue<byte>(); } set { this[nameof(BlendMode)].SetValue<byte>(value); } }
        public bool bAllowTwoSidedMaterial { get { return this[nameof(bAllowTwoSidedMaterial)].Flag; } set { this[nameof(bAllowTwoSidedMaterial)].Flag = value; } }
        public bool bNormalMap { get { return this[nameof(bNormalMap)].Flag; } set { this[nameof(bNormalMap)].Flag = value; } }
        public bool bTangentMap { get { return this[nameof(bTangentMap)].Flag; } set { this[nameof(bTangentMap)].Flag = value; } }
        public bool bMetallicMap { get { return this[nameof(bMetallicMap)].Flag; } set { this[nameof(bMetallicMap)].Flag = value; } }
        public bool bRoughnessMap { get { return this[nameof(bRoughnessMap)].Flag; } set { this[nameof(bRoughnessMap)].Flag = value; } }
        public bool bAnisotropyMap { get { return this[nameof(bAnisotropyMap)].Flag; } set { this[nameof(bAnisotropyMap)].Flag = value; } }
        public bool bSpecularMap { get { return this[nameof(bSpecularMap)].Flag; } set { this[nameof(bSpecularMap)].Flag = value; } }
        public bool bEmissiveMap { get { return this[nameof(bEmissiveMap)].Flag; } set { this[nameof(bEmissiveMap)].Flag = value; } }
        public bool bOpacityMap { get { return this[nameof(bOpacityMap)].Flag; } set { this[nameof(bOpacityMap)].Flag = value; } }
        public bool bOpacityMaskMap { get { return this[nameof(bOpacityMaskMap)].Flag; } set { this[nameof(bOpacityMaskMap)].Flag = value; } }
        public bool bAmbientOcclusionMap { get { return this[nameof(bAmbientOcclusionMap)].Flag; } set { this[nameof(bAmbientOcclusionMap)].Flag = value; } }
        public IntPoint DiffuseTextureSize { get { return this[nameof(DiffuseTextureSize)].As<IntPoint>(); } set { this["DiffuseTextureSize"] = value; } }
        public IntPoint NormalTextureSize { get { return this[nameof(NormalTextureSize)].As<IntPoint>(); } set { this["NormalTextureSize"] = value; } }
        public IntPoint TangentTextureSize { get { return this[nameof(TangentTextureSize)].As<IntPoint>(); } set { this["TangentTextureSize"] = value; } }
        public IntPoint MetallicTextureSize { get { return this[nameof(MetallicTextureSize)].As<IntPoint>(); } set { this["MetallicTextureSize"] = value; } }
        public IntPoint RoughnessTextureSize { get { return this[nameof(RoughnessTextureSize)].As<IntPoint>(); } set { this["RoughnessTextureSize"] = value; } }
        public IntPoint AnisotropyTextureSize { get { return this[nameof(AnisotropyTextureSize)].As<IntPoint>(); } set { this["AnisotropyTextureSize"] = value; } }
        public IntPoint SpecularTextureSize { get { return this[nameof(SpecularTextureSize)].As<IntPoint>(); } set { this["SpecularTextureSize"] = value; } }
        public IntPoint EmissiveTextureSize { get { return this[nameof(EmissiveTextureSize)].As<IntPoint>(); } set { this["EmissiveTextureSize"] = value; } }
        public IntPoint OpacityTextureSize { get { return this[nameof(OpacityTextureSize)].As<IntPoint>(); } set { this["OpacityTextureSize"] = value; } }
        public IntPoint OpacityMaskTextureSize { get { return this[nameof(OpacityMaskTextureSize)].As<IntPoint>(); } set { this["OpacityMaskTextureSize"] = value; } }
        public IntPoint AmbientOcclusionTextureSize { get { return this[nameof(AmbientOcclusionTextureSize)].As<IntPoint>(); } set { this["AmbientOcclusionTextureSize"] = value; } }
    }
    public class MaterialOverrideNanite : Object
    {
        public MaterialOverrideNanite(nint addr) : base(addr) { }
        public Object OverrideMaterialRef { get { return this[nameof(OverrideMaterialRef)]; } set { this[nameof(OverrideMaterialRef)] = value; } }
        public bool bEnableOverride { get { return this[nameof(bEnableOverride)].Flag; } set { this[nameof(bEnableOverride)].Flag = value; } }
        public MaterialInterface OverrideMaterial { get { return this[nameof(OverrideMaterial)].As<MaterialInterface>(); } set { this["OverrideMaterial"] = value; } }
    }
    public class CollectionParameterBase : Object
    {
        public CollectionParameterBase(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
    }
    public class CollectionScalarParameter : CollectionParameterBase
    {
        public CollectionScalarParameter(nint addr) : base(addr) { }
        public float DefaultValue { get { return this[nameof(DefaultValue)].GetValue<float>(); } set { this[nameof(DefaultValue)].SetValue<float>(value); } }
    }
    public class CollectionVectorParameter : CollectionParameterBase
    {
        public CollectionVectorParameter(nint addr) : base(addr) { }
        public LinearColor DefaultValue { get { return this[nameof(DefaultValue)].As<LinearColor>(); } set { this["DefaultValue"] = value; } }
    }
    public class MaterialParameterInfo : Object
    {
        public MaterialParameterInfo(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public byte Association { get { return this[nameof(Association)].GetValue<byte>(); } set { this[nameof(Association)].SetValue<byte>(value); } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
    }
    public class ParameterChannelNames : Object
    {
        public ParameterChannelNames(nint addr) : base(addr) { }
        public Object R { get { return this[nameof(R)]; } set { this[nameof(R)] = value; } }
        public Object G { get { return this[nameof(G)]; } set { this[nameof(G)] = value; } }
        public Object B { get { return this[nameof(B)]; } set { this[nameof(B)] = value; } }
        public Object A { get { return this[nameof(A)]; } set { this[nameof(A)] = value; } }
    }
    public class StaticComponentMaskValue : Object
    {
        public StaticComponentMaskValue(nint addr) : base(addr) { }
        public bool R { get { return this[nameof(R)].Flag; } set { this[nameof(R)].Flag = value; } }
        public bool G { get { return this[nameof(G)].Flag; } set { this[nameof(G)].Flag = value; } }
        public bool B { get { return this[nameof(B)].Flag; } set { this[nameof(B)].Flag = value; } }
        public bool A { get { return this[nameof(A)].Flag; } set { this[nameof(A)].Flag = value; } }
    }
    public class PurchaseInfo : Object
    {
        public PurchaseInfo(nint addr) : base(addr) { }
        public Object Identifier { get { return this[nameof(Identifier)]; } set { this[nameof(Identifier)] = value; } }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public Object DisplayDescription { get { return this[nameof(DisplayDescription)]; } set { this[nameof(DisplayDescription)] = value; } }
        public Object DisplayPrice { get { return this[nameof(DisplayPrice)]; } set { this[nameof(DisplayPrice)] = value; } }
    }
    public class NavigationLinkBase : Object
    {
        public NavigationLinkBase(nint addr) : base(addr) { }
        public float LeftProjectHeight { get { return this[nameof(LeftProjectHeight)].GetValue<float>(); } set { this[nameof(LeftProjectHeight)].SetValue<float>(value); } }
        public float MaxFallDownLength { get { return this[nameof(MaxFallDownLength)].GetValue<float>(); } set { this[nameof(MaxFallDownLength)].SetValue<float>(value); } }
        public float SnapRadius { get { return this[nameof(SnapRadius)].GetValue<float>(); } set { this[nameof(SnapRadius)].SetValue<float>(value); } }
        public float SnapHeight { get { return this[nameof(SnapHeight)].GetValue<float>(); } set { this[nameof(SnapHeight)].SetValue<float>(value); } }
        public NavAgentSelector SupportedAgents { get { return this[nameof(SupportedAgents)].As<NavAgentSelector>(); } set { this["SupportedAgents"] = value; } }
        public bool bSupportsAgent0 { get { return this[nameof(bSupportsAgent0)].Flag; } set { this[nameof(bSupportsAgent0)].Flag = value; } }
        public bool bSupportsAgent1 { get { return this[nameof(bSupportsAgent1)].Flag; } set { this[nameof(bSupportsAgent1)].Flag = value; } }
        public bool bSupportsAgent2 { get { return this[nameof(bSupportsAgent2)].Flag; } set { this[nameof(bSupportsAgent2)].Flag = value; } }
        public bool bSupportsAgent3 { get { return this[nameof(bSupportsAgent3)].Flag; } set { this[nameof(bSupportsAgent3)].Flag = value; } }
        public bool bSupportsAgent4 { get { return this[nameof(bSupportsAgent4)].Flag; } set { this[nameof(bSupportsAgent4)].Flag = value; } }
        public bool bSupportsAgent5 { get { return this[nameof(bSupportsAgent5)].Flag; } set { this[nameof(bSupportsAgent5)].Flag = value; } }
        public bool bSupportsAgent6 { get { return this[nameof(bSupportsAgent6)].Flag; } set { this[nameof(bSupportsAgent6)].Flag = value; } }
        public bool bSupportsAgent7 { get { return this[nameof(bSupportsAgent7)].Flag; } set { this[nameof(bSupportsAgent7)].Flag = value; } }
        public bool bSupportsAgent8 { get { return this[nameof(bSupportsAgent8)].Flag; } set { this[nameof(bSupportsAgent8)].Flag = value; } }
        public bool bSupportsAgent9 { get { return this[nameof(bSupportsAgent9)].Flag; } set { this[nameof(bSupportsAgent9)].Flag = value; } }
        public bool bSupportsAgent10 { get { return this[nameof(bSupportsAgent10)].Flag; } set { this[nameof(bSupportsAgent10)].Flag = value; } }
        public bool bSupportsAgent11 { get { return this[nameof(bSupportsAgent11)].Flag; } set { this[nameof(bSupportsAgent11)].Flag = value; } }
        public bool bSupportsAgent12 { get { return this[nameof(bSupportsAgent12)].Flag; } set { this[nameof(bSupportsAgent12)].Flag = value; } }
        public bool bSupportsAgent13 { get { return this[nameof(bSupportsAgent13)].Flag; } set { this[nameof(bSupportsAgent13)].Flag = value; } }
        public bool bSupportsAgent14 { get { return this[nameof(bSupportsAgent14)].Flag; } set { this[nameof(bSupportsAgent14)].Flag = value; } }
        public bool bSupportsAgent15 { get { return this[nameof(bSupportsAgent15)].Flag; } set { this[nameof(bSupportsAgent15)].Flag = value; } }
        public byte Direction { get { return this[nameof(Direction)].GetValue<byte>(); } set { this[nameof(Direction)].SetValue<byte>(value); } }
        public bool bUseSnapHeight { get { return this[nameof(bUseSnapHeight)].Flag; } set { this[nameof(bUseSnapHeight)].Flag = value; } }
        public bool bSnapToCheapestArea { get { return this[nameof(bSnapToCheapestArea)].Flag; } set { this[nameof(bSnapToCheapestArea)].Flag = value; } }
        public bool bCustomFlag0 { get { return this[nameof(bCustomFlag0)].Flag; } set { this[nameof(bCustomFlag0)].Flag = value; } }
        public bool bCustomFlag1 { get { return this[nameof(bCustomFlag1)].Flag; } set { this[nameof(bCustomFlag1)].Flag = value; } }
        public bool bCustomFlag2 { get { return this[nameof(bCustomFlag2)].Flag; } set { this[nameof(bCustomFlag2)].Flag = value; } }
        public bool bCustomFlag3 { get { return this[nameof(bCustomFlag3)].Flag; } set { this[nameof(bCustomFlag3)].Flag = value; } }
        public bool bCustomFlag4 { get { return this[nameof(bCustomFlag4)].Flag; } set { this[nameof(bCustomFlag4)].Flag = value; } }
        public bool bCustomFlag5 { get { return this[nameof(bCustomFlag5)].Flag; } set { this[nameof(bCustomFlag5)].Flag = value; } }
        public bool bCustomFlag6 { get { return this[nameof(bCustomFlag6)].Flag; } set { this[nameof(bCustomFlag6)].Flag = value; } }
        public bool bCustomFlag7 { get { return this[nameof(bCustomFlag7)].Flag; } set { this[nameof(bCustomFlag7)].Flag = value; } }
        public Object AreaClass { get { return this[nameof(AreaClass)]; } set { this[nameof(AreaClass)] = value; } }
    }
    public class NavAgentSelector : Object
    {
        public NavAgentSelector(nint addr) : base(addr) { }
        public bool bSupportsAgent0 { get { return this[nameof(bSupportsAgent0)].Flag; } set { this[nameof(bSupportsAgent0)].Flag = value; } }
        public bool bSupportsAgent1 { get { return this[nameof(bSupportsAgent1)].Flag; } set { this[nameof(bSupportsAgent1)].Flag = value; } }
        public bool bSupportsAgent2 { get { return this[nameof(bSupportsAgent2)].Flag; } set { this[nameof(bSupportsAgent2)].Flag = value; } }
        public bool bSupportsAgent3 { get { return this[nameof(bSupportsAgent3)].Flag; } set { this[nameof(bSupportsAgent3)].Flag = value; } }
        public bool bSupportsAgent4 { get { return this[nameof(bSupportsAgent4)].Flag; } set { this[nameof(bSupportsAgent4)].Flag = value; } }
        public bool bSupportsAgent5 { get { return this[nameof(bSupportsAgent5)].Flag; } set { this[nameof(bSupportsAgent5)].Flag = value; } }
        public bool bSupportsAgent6 { get { return this[nameof(bSupportsAgent6)].Flag; } set { this[nameof(bSupportsAgent6)].Flag = value; } }
        public bool bSupportsAgent7 { get { return this[nameof(bSupportsAgent7)].Flag; } set { this[nameof(bSupportsAgent7)].Flag = value; } }
        public bool bSupportsAgent8 { get { return this[nameof(bSupportsAgent8)].Flag; } set { this[nameof(bSupportsAgent8)].Flag = value; } }
        public bool bSupportsAgent9 { get { return this[nameof(bSupportsAgent9)].Flag; } set { this[nameof(bSupportsAgent9)].Flag = value; } }
        public bool bSupportsAgent10 { get { return this[nameof(bSupportsAgent10)].Flag; } set { this[nameof(bSupportsAgent10)].Flag = value; } }
        public bool bSupportsAgent11 { get { return this[nameof(bSupportsAgent11)].Flag; } set { this[nameof(bSupportsAgent11)].Flag = value; } }
        public bool bSupportsAgent12 { get { return this[nameof(bSupportsAgent12)].Flag; } set { this[nameof(bSupportsAgent12)].Flag = value; } }
        public bool bSupportsAgent13 { get { return this[nameof(bSupportsAgent13)].Flag; } set { this[nameof(bSupportsAgent13)].Flag = value; } }
        public bool bSupportsAgent14 { get { return this[nameof(bSupportsAgent14)].Flag; } set { this[nameof(bSupportsAgent14)].Flag = value; } }
        public bool bSupportsAgent15 { get { return this[nameof(bSupportsAgent15)].Flag; } set { this[nameof(bSupportsAgent15)].Flag = value; } }
    }
    public class NavigationLink : NavigationLinkBase
    {
        public NavigationLink(nint addr) : base(addr) { }
        public Vector Left { get { return this[nameof(Left)].As<Vector>(); } set { this["Left"] = value; } }
        public Vector Right { get { return this[nameof(Right)].As<Vector>(); } set { this["Right"] = value; } }
    }
    public class NavigationSegmentLink : NavigationLinkBase
    {
        public NavigationSegmentLink(nint addr) : base(addr) { }
        public Vector LeftStart { get { return this[nameof(LeftStart)].As<Vector>(); } set { this["LeftStart"] = value; } }
        public Vector LeftEnd { get { return this[nameof(LeftEnd)].As<Vector>(); } set { this["LeftEnd"] = value; } }
        public Vector RightStart { get { return this[nameof(RightStart)].As<Vector>(); } set { this["RightStart"] = value; } }
        public Vector RightEnd { get { return this[nameof(RightEnd)].As<Vector>(); } set { this["RightEnd"] = value; } }
    }
    public class OverlapResult : Object
    {
        public OverlapResult(nint addr) : base(addr) { }
        public ActorInstanceHandle OverlapObjectHandle { get { return this[nameof(OverlapObjectHandle)].As<ActorInstanceHandle>(); } set { this["OverlapObjectHandle"] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public bool bBlockingHit { get { return this[nameof(bBlockingHit)].Flag; } set { this[nameof(bBlockingHit)].Flag = value; } }
    }
    public class ParticleBurst : Object
    {
        public ParticleBurst(nint addr) : base(addr) { }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
        public int CountLow { get { return this[nameof(CountLow)].GetValue<int>(); } set { this[nameof(CountLow)].SetValue<int>(value); } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
    }
    public class ParticleCurvePair : Object
    {
        public ParticleCurvePair(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public Object CurveObject { get { return this[nameof(CurveObject)].As<Object>(); } set { this["CurveObject"] = value; } }
    }
    public class ParticleRandomSeedInfo : Object
    {
        public ParticleRandomSeedInfo(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public bool bGetSeedFromInstance { get { return this[nameof(bGetSeedFromInstance)].Flag; } set { this[nameof(bGetSeedFromInstance)].Flag = value; } }
        public bool bInstanceSeedIsIndex { get { return this[nameof(bInstanceSeedIsIndex)].Flag; } set { this[nameof(bInstanceSeedIsIndex)].Flag = value; } }
        public bool bResetSeedOnEmitterLooping { get { return this[nameof(bResetSeedOnEmitterLooping)].Flag; } set { this[nameof(bResetSeedOnEmitterLooping)].Flag = value; } }
        public bool bRandomlySelectSeedArray { get { return this[nameof(bRandomlySelectSeedArray)].Flag; } set { this[nameof(bRandomlySelectSeedArray)].Flag = value; } }
        public Array<int> RandomSeeds { get { return new Array<int>(this[nameof(RandomSeeds)].Address); } }
    }
    public class BeamModifierOptions : Object
    {
        public BeamModifierOptions(nint addr) : base(addr) { }
        public bool bModify { get { return this[nameof(bModify)].Flag; } set { this[nameof(bModify)].Flag = value; } }
        public bool bScale { get { return this[nameof(bScale)].Flag; } set { this[nameof(bScale)].Flag = value; } }
        public bool bLock { get { return this[nameof(bLock)].Flag; } set { this[nameof(bLock)].Flag = value; } }
    }
    public class ParticleEvent_GenerateInfo : Object
    {
        public ParticleEvent_GenerateInfo(nint addr) : base(addr) { }
        public byte Type { get { return this[nameof(Type)].GetValue<byte>(); } set { this[nameof(Type)].SetValue<byte>(value); } }
        public int Frequency { get { return this[nameof(Frequency)].GetValue<int>(); } set { this[nameof(Frequency)].SetValue<int>(value); } }
        public int ParticleFrequency { get { return this[nameof(ParticleFrequency)].GetValue<int>(); } set { this[nameof(ParticleFrequency)].SetValue<int>(value); } }
        public bool FirstTimeOnly { get { return this[nameof(FirstTimeOnly)].Flag; } set { this[nameof(FirstTimeOnly)].Flag = value; } }
        public bool LastTimeOnly { get { return this[nameof(LastTimeOnly)].Flag; } set { this[nameof(LastTimeOnly)].Flag = value; } }
        public bool UseReflectedImpactVector { get { return this[nameof(UseReflectedImpactVector)].Flag; } set { this[nameof(UseReflectedImpactVector)].Flag = value; } }
        public bool bUseOrbitOffset { get { return this[nameof(bUseOrbitOffset)].Flag; } set { this[nameof(bUseOrbitOffset)].Flag = value; } }
        public Object CustomName { get { return this[nameof(CustomName)]; } set { this[nameof(CustomName)] = value; } }
        public Array<ParticleModuleEventSendToGame> ParticleModuleEventsToSendToGame { get { return new Array<ParticleModuleEventSendToGame>(this[nameof(ParticleModuleEventsToSendToGame)].Address); } }
    }
    public class LocationBoneSocketInfo : Object
    {
        public LocationBoneSocketInfo(nint addr) : base(addr) { }
        public Object BoneSocketName { get { return this[nameof(BoneSocketName)]; } set { this[nameof(BoneSocketName)] = value; } }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
    }
    public class OrbitOptions : Object
    {
        public OrbitOptions(nint addr) : base(addr) { }
        public bool bProcessDuringSpawn { get { return this[nameof(bProcessDuringSpawn)].Flag; } set { this[nameof(bProcessDuringSpawn)].Flag = value; } }
        public bool bProcessDuringUpdate { get { return this[nameof(bProcessDuringUpdate)].Flag; } set { this[nameof(bProcessDuringUpdate)].Flag = value; } }
        public bool bUseEmitterTime { get { return this[nameof(bUseEmitterTime)].Flag; } set { this[nameof(bUseEmitterTime)].Flag = value; } }
    }
    public class EmitterDynamicParameter : Object
    {
        public EmitterDynamicParameter(nint addr) : base(addr) { }
        public Object ParamName { get { return this[nameof(ParamName)]; } set { this[nameof(ParamName)] = value; } }
        public bool bUseEmitterTime { get { return this[nameof(bUseEmitterTime)].Flag; } set { this[nameof(bUseEmitterTime)].Flag = value; } }
        public bool bSpawnTimeOnly { get { return this[nameof(bSpawnTimeOnly)].Flag; } set { this[nameof(bSpawnTimeOnly)].Flag = value; } }
        public byte ValueMethod { get { return this[nameof(ValueMethod)].GetValue<byte>(); } set { this[nameof(ValueMethod)].SetValue<byte>(value); } }
        public bool bScaleVelocityByParamValue { get { return this[nameof(bScaleVelocityByParamValue)].Flag; } set { this[nameof(bScaleVelocityByParamValue)].Flag = value; } }
        public RawDistributionFloat ParamValue { get { return this[nameof(ParamValue)].As<RawDistributionFloat>(); } set { this["ParamValue"] = value; } }
    }
    public class BeamTargetData : Object
    {
        public BeamTargetData(nint addr) : base(addr) { }
        public Object TargetName { get { return this[nameof(TargetName)]; } set { this[nameof(TargetName)] = value; } }
        public float TargetPercentage { get { return this[nameof(TargetPercentage)].GetValue<float>(); } set { this[nameof(TargetPercentage)].SetValue<float>(value); } }
    }
    public class GPUSpriteLocalVectorFieldInfo : Object
    {
        public GPUSpriteLocalVectorFieldInfo(nint addr) : base(addr) { }
        public VectorField Field { get { return this[nameof(Field)].As<VectorField>(); } set { this["Field"] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Rotator MinInitialRotation { get { return this[nameof(MinInitialRotation)].As<Rotator>(); } set { this["MinInitialRotation"] = value; } }
        public Rotator MaxInitialRotation { get { return this[nameof(MaxInitialRotation)].As<Rotator>(); } set { this["MaxInitialRotation"] = value; } }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Tightness { get { return this[nameof(Tightness)].GetValue<float>(); } set { this[nameof(Tightness)].SetValue<float>(value); } }
        public bool bIgnoreComponentTransform { get { return this[nameof(bIgnoreComponentTransform)].Flag; } set { this[nameof(bIgnoreComponentTransform)].Flag = value; } }
        public bool bTileX { get { return this[nameof(bTileX)].Flag; } set { this[nameof(bTileX)].Flag = value; } }
        public bool bTileY { get { return this[nameof(bTileY)].Flag; } set { this[nameof(bTileY)].Flag = value; } }
        public bool bTileZ { get { return this[nameof(bTileZ)].Flag; } set { this[nameof(bTileZ)].Flag = value; } }
        public bool bUseFixDT { get { return this[nameof(bUseFixDT)].Flag; } set { this[nameof(bUseFixDT)].Flag = value; } }
    }
    public class GPUSpriteEmitterInfo : Object
    {
        public GPUSpriteEmitterInfo(nint addr) : base(addr) { }
        public ParticleModuleRequired RequiredModule { get { return this[nameof(RequiredModule)].As<ParticleModuleRequired>(); } set { this["RequiredModule"] = value; } }
        public ParticleModuleSpawn SpawnModule { get { return this[nameof(SpawnModule)].As<ParticleModuleSpawn>(); } set { this["SpawnModule"] = value; } }
        public ParticleModuleSpawnPerUnit SpawnPerUnitModule { get { return this[nameof(SpawnPerUnitModule)].As<ParticleModuleSpawnPerUnit>(); } set { this["SpawnPerUnitModule"] = value; } }
        public Array<ParticleModule> SpawnModules { get { return new Array<ParticleModule>(this[nameof(SpawnModules)].Address); } }
        public GPUSpriteLocalVectorFieldInfo LocalVectorField { get { return this[nameof(LocalVectorField)].As<GPUSpriteLocalVectorFieldInfo>(); } set { this["LocalVectorField"] = value; } }
        public FloatDistribution VectorFieldScale { get { return this[nameof(VectorFieldScale)].As<FloatDistribution>(); } set { this["VectorFieldScale"] = value; } }
        public FloatDistribution DragCoefficient { get { return this[nameof(DragCoefficient)].As<FloatDistribution>(); } set { this["DragCoefficient"] = value; } }
        public FloatDistribution PointAttractorStrength { get { return this[nameof(PointAttractorStrength)].As<FloatDistribution>(); } set { this["PointAttractorStrength"] = value; } }
        public FloatDistribution Resilience { get { return this[nameof(Resilience)].As<FloatDistribution>(); } set { this["Resilience"] = value; } }
        public Vector ConstantAcceleration { get { return this[nameof(ConstantAcceleration)].As<Vector>(); } set { this["ConstantAcceleration"] = value; } }
        public Vector PointAttractorPosition { get { return this[nameof(PointAttractorPosition)].As<Vector>(); } set { this["PointAttractorPosition"] = value; } }
        public float PointAttractorRadiusSq { get { return this[nameof(PointAttractorRadiusSq)].GetValue<float>(); } set { this[nameof(PointAttractorRadiusSq)].SetValue<float>(value); } }
        public Vector OrbitOffsetBase { get { return this[nameof(OrbitOffsetBase)].As<Vector>(); } set { this["OrbitOffsetBase"] = value; } }
        public Vector OrbitOffsetRange { get { return this[nameof(OrbitOffsetRange)].As<Vector>(); } set { this["OrbitOffsetRange"] = value; } }
        public Vector2D InvMaxSize { get { return this[nameof(InvMaxSize)].As<Vector2D>(); } set { this["InvMaxSize"] = value; } }
        public float InvRotationRateScale { get { return this[nameof(InvRotationRateScale)].GetValue<float>(); } set { this[nameof(InvRotationRateScale)].SetValue<float>(value); } }
        public float MaxLifetime { get { return this[nameof(MaxLifetime)].GetValue<float>(); } set { this[nameof(MaxLifetime)].SetValue<float>(value); } }
        public int MaxParticleCount { get { return this[nameof(MaxParticleCount)].GetValue<int>(); } set { this[nameof(MaxParticleCount)].SetValue<int>(value); } }
        public byte ScreenAlignment { get { return this[nameof(ScreenAlignment)].GetValue<byte>(); } set { this[nameof(ScreenAlignment)].SetValue<byte>(value); } }
        public byte LockAxisFlag { get { return this[nameof(LockAxisFlag)].GetValue<byte>(); } set { this[nameof(LockAxisFlag)].SetValue<byte>(value); } }
        public bool bEnableCollision { get { return this[nameof(bEnableCollision)].Flag; } set { this[nameof(bEnableCollision)].Flag = value; } }
        public byte CollisionMode { get { return this[nameof(CollisionMode)].GetValue<byte>(); } set { this[nameof(CollisionMode)].SetValue<byte>(value); } }
        public bool bRemoveHMDRoll { get { return this[nameof(bRemoveHMDRoll)].Flag; } set { this[nameof(bRemoveHMDRoll)].Flag = value; } }
        public float MinFacingCameraBlendDistance { get { return this[nameof(MinFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MinFacingCameraBlendDistance)].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this[nameof(MaxFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MaxFacingCameraBlendDistance)].SetValue<float>(value); } }
        public RawDistributionVector DynamicColor { get { return this[nameof(DynamicColor)].As<RawDistributionVector>(); } set { this["DynamicColor"] = value; } }
        public RawDistributionFloat DynamicAlpha { get { return this[nameof(DynamicAlpha)].As<RawDistributionFloat>(); } set { this["DynamicAlpha"] = value; } }
        public RawDistributionVector DynamicColorScale { get { return this[nameof(DynamicColorScale)].As<RawDistributionVector>(); } set { this["DynamicColorScale"] = value; } }
        public RawDistributionFloat DynamicAlphaScale { get { return this[nameof(DynamicAlphaScale)].As<RawDistributionFloat>(); } set { this["DynamicAlphaScale"] = value; } }
    }
    public class GPUSpriteResourceData : Object
    {
        public GPUSpriteResourceData(nint addr) : base(addr) { }
        public Array<Color> QuantizedColorSamples { get { return new Array<Color>(this[nameof(QuantizedColorSamples)].Address); } }
        public Array<Color> QuantizedMiscSamples { get { return new Array<Color>(this[nameof(QuantizedMiscSamples)].Address); } }
        public Array<Color> QuantizedSimulationAttrSamples { get { return new Array<Color>(this[nameof(QuantizedSimulationAttrSamples)].Address); } }
        public Vector4 ColorScale { get { return this[nameof(ColorScale)].As<Vector4>(); } set { this["ColorScale"] = value; } }
        public Vector4 ColorBias { get { return this[nameof(ColorBias)].As<Vector4>(); } set { this["ColorBias"] = value; } }
        public Vector4 MiscScale { get { return this[nameof(MiscScale)].As<Vector4>(); } set { this["MiscScale"] = value; } }
        public Vector4 MiscBias { get { return this[nameof(MiscBias)].As<Vector4>(); } set { this["MiscBias"] = value; } }
        public Vector4 SimulationAttrCurveScale { get { return this[nameof(SimulationAttrCurveScale)].As<Vector4>(); } set { this["SimulationAttrCurveScale"] = value; } }
        public Vector4 SimulationAttrCurveBias { get { return this[nameof(SimulationAttrCurveBias)].As<Vector4>(); } set { this["SimulationAttrCurveBias"] = value; } }
        public Vector4 SubImageSize { get { return this[nameof(SubImageSize)].As<Vector4>(); } set { this["SubImageSize"] = value; } }
        public Vector4 SizeBySpeed { get { return this[nameof(SizeBySpeed)].As<Vector4>(); } set { this["SizeBySpeed"] = value; } }
        public Vector ConstantAcceleration { get { return this[nameof(ConstantAcceleration)].As<Vector>(); } set { this["ConstantAcceleration"] = value; } }
        public Vector OrbitOffsetBase { get { return this[nameof(OrbitOffsetBase)].As<Vector>(); } set { this["OrbitOffsetBase"] = value; } }
        public Vector OrbitOffsetRange { get { return this[nameof(OrbitOffsetRange)].As<Vector>(); } set { this["OrbitOffsetRange"] = value; } }
        public Vector OrbitFrequencyBase { get { return this[nameof(OrbitFrequencyBase)].As<Vector>(); } set { this["OrbitFrequencyBase"] = value; } }
        public Vector OrbitFrequencyRange { get { return this[nameof(OrbitFrequencyRange)].As<Vector>(); } set { this["OrbitFrequencyRange"] = value; } }
        public Vector OrbitPhaseBase { get { return this[nameof(OrbitPhaseBase)].As<Vector>(); } set { this["OrbitPhaseBase"] = value; } }
        public Vector OrbitPhaseRange { get { return this[nameof(OrbitPhaseRange)].As<Vector>(); } set { this["OrbitPhaseRange"] = value; } }
        public float GlobalVectorFieldScale { get { return this[nameof(GlobalVectorFieldScale)].GetValue<float>(); } set { this[nameof(GlobalVectorFieldScale)].SetValue<float>(value); } }
        public float GlobalVectorFieldTightness { get { return this[nameof(GlobalVectorFieldTightness)].GetValue<float>(); } set { this[nameof(GlobalVectorFieldTightness)].SetValue<float>(value); } }
        public float PerParticleVectorFieldScale { get { return this[nameof(PerParticleVectorFieldScale)].GetValue<float>(); } set { this[nameof(PerParticleVectorFieldScale)].SetValue<float>(value); } }
        public float PerParticleVectorFieldBias { get { return this[nameof(PerParticleVectorFieldBias)].GetValue<float>(); } set { this[nameof(PerParticleVectorFieldBias)].SetValue<float>(value); } }
        public float DragCoefficientScale { get { return this[nameof(DragCoefficientScale)].GetValue<float>(); } set { this[nameof(DragCoefficientScale)].SetValue<float>(value); } }
        public float DragCoefficientBias { get { return this[nameof(DragCoefficientBias)].GetValue<float>(); } set { this[nameof(DragCoefficientBias)].SetValue<float>(value); } }
        public float ResilienceScale { get { return this[nameof(ResilienceScale)].GetValue<float>(); } set { this[nameof(ResilienceScale)].SetValue<float>(value); } }
        public float ResilienceBias { get { return this[nameof(ResilienceBias)].GetValue<float>(); } set { this[nameof(ResilienceBias)].SetValue<float>(value); } }
        public float CollisionRadiusScale { get { return this[nameof(CollisionRadiusScale)].GetValue<float>(); } set { this[nameof(CollisionRadiusScale)].SetValue<float>(value); } }
        public float CollisionRadiusBias { get { return this[nameof(CollisionRadiusBias)].GetValue<float>(); } set { this[nameof(CollisionRadiusBias)].SetValue<float>(value); } }
        public float CollisionTimeBias { get { return this[nameof(CollisionTimeBias)].GetValue<float>(); } set { this[nameof(CollisionTimeBias)].SetValue<float>(value); } }
        public float CollisionRandomSpread { get { return this[nameof(CollisionRandomSpread)].GetValue<float>(); } set { this[nameof(CollisionRandomSpread)].SetValue<float>(value); } }
        public float CollisionRandomDistribution { get { return this[nameof(CollisionRandomDistribution)].GetValue<float>(); } set { this[nameof(CollisionRandomDistribution)].SetValue<float>(value); } }
        public float OneMinusFriction { get { return this[nameof(OneMinusFriction)].GetValue<float>(); } set { this[nameof(OneMinusFriction)].SetValue<float>(value); } }
        public float RotationRateScale { get { return this[nameof(RotationRateScale)].GetValue<float>(); } set { this[nameof(RotationRateScale)].SetValue<float>(value); } }
        public float CameraMotionBlurAmount { get { return this[nameof(CameraMotionBlurAmount)].GetValue<float>(); } set { this[nameof(CameraMotionBlurAmount)].SetValue<float>(value); } }
        public byte ScreenAlignment { get { return this[nameof(ScreenAlignment)].GetValue<byte>(); } set { this[nameof(ScreenAlignment)].SetValue<byte>(value); } }
        public byte LockAxisFlag { get { return this[nameof(LockAxisFlag)].GetValue<byte>(); } set { this[nameof(LockAxisFlag)].SetValue<byte>(value); } }
        public Vector2D PivotOffset { get { return this[nameof(PivotOffset)].As<Vector2D>(); } set { this["PivotOffset"] = value; } }
        public bool bRemoveHMDRoll { get { return this[nameof(bRemoveHMDRoll)].Flag; } set { this[nameof(bRemoveHMDRoll)].Flag = value; } }
        public float MinFacingCameraBlendDistance { get { return this[nameof(MinFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MinFacingCameraBlendDistance)].SetValue<float>(value); } }
        public float MaxFacingCameraBlendDistance { get { return this[nameof(MaxFacingCameraBlendDistance)].GetValue<float>(); } set { this[nameof(MaxFacingCameraBlendDistance)].SetValue<float>(value); } }
    }
    public class ParticleSystemLOD : Object
    {
        public ParticleSystemLOD(nint addr) : base(addr) { }
    }
    public class LODSoloTrack : Object
    {
        public LODSoloTrack(nint addr) : base(addr) { }
        public Array<byte> SoloEnableSetting { get { return new Array<byte>(this[nameof(SoloEnableSetting)].Address); } }
    }
    public class NamedEmitterMaterial : Object
    {
        public NamedEmitterMaterial(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class ParticleSysParam : Object
    {
        public ParticleSysParam(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public byte ParamType { get { return this[nameof(ParamType)].GetValue<byte>(); } set { this[nameof(ParamType)].SetValue<byte>(value); } }
        public float Scalar { get { return this[nameof(Scalar)].GetValue<float>(); } set { this[nameof(Scalar)].SetValue<float>(value); } }
        public float Scalar_Low { get { return this[nameof(Scalar_Low)].GetValue<float>(); } set { this[nameof(Scalar_Low)].SetValue<float>(value); } }
        public Vector Vector { get { return this[nameof(Vector)].As<Vector>(); } set { this["Vector"] = value; } }
        public Vector Vector_Low { get { return this[nameof(Vector_Low)].As<Vector>(); } set { this["Vector_Low"] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class FXSystemSpawnParameters : Object
    {
        public FXSystemSpawnParameters(nint addr) : base(addr) { }
    }
    public class ParticleEmitterReplayFrame : Object
    {
        public ParticleEmitterReplayFrame(nint addr) : base(addr) { }
    }
    public class ParticleSystemReplayFrame : Object
    {
        public ParticleSystemReplayFrame(nint addr) : base(addr) { }
    }
    public class DelegateArray : Object
    {
        public DelegateArray(nint addr) : base(addr) { }
        public Array<Object> Delegates { get { return new Array<Object>(this[nameof(Delegates)].Address); } }
    }
    public class CameraCacheEntry : Object
    {
        public CameraCacheEntry(nint addr) : base(addr) { }
        public float Timestamp { get { return this[nameof(Timestamp)].GetValue<float>(); } set { this[nameof(Timestamp)].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class TViewTarget : Object
    {
        public TViewTarget(nint addr) : base(addr) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
        public PlayerState PlayerState { get { return this[nameof(PlayerState)].As<PlayerState>(); } set { this["PlayerState"] = value; } }
    }
    public class SpriteCategoryInfo : Object
    {
        public SpriteCategoryInfo(nint addr) : base(addr) { }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
    }
    public class PrimitiveComponentInstanceData : SceneComponentInstanceData
    {
        public PrimitiveComponentInstanceData(nint addr) : base(addr) { }
        public Transform ComponentTransform { get { return this[nameof(ComponentTransform)].As<Transform>(); } set { this["ComponentTransform"] = value; } }
        public int VisibilityId { get { return this[nameof(VisibilityId)].GetValue<int>(); } set { this[nameof(VisibilityId)].SetValue<int>(value); } }
        public PrimitiveComponent LODParent { get { return this[nameof(LODParent)].As<PrimitiveComponent>(); } set { this["LODParent"] = value; } }
    }
    public class LevelNameAndTime : Object
    {
        public LevelNameAndTime(nint addr) : base(addr) { }
        public Object LevelName { get { return this[nameof(LevelName)]; } set { this[nameof(LevelName)] = value; } }
        public uint LevelChangeTimeInMS { get { return this[nameof(LevelChangeTimeInMS)].GetValue<uint>(); } set { this[nameof(LevelChangeTimeInMS)].SetValue<uint>(value); } }
    }
    public class ReverbSettings : Object
    {
        public ReverbSettings(nint addr) : base(addr) { }
        public bool bApplyReverb { get { return this[nameof(bApplyReverb)].Flag; } set { this[nameof(bApplyReverb)].Flag = value; } }
        public ReverbEffect ReverbEffect { get { return this[nameof(ReverbEffect)].As<ReverbEffect>(); } set { this["ReverbEffect"] = value; } }
        public SoundEffectSubmixPreset ReverbPluginEffect { get { return this[nameof(ReverbPluginEffect)].As<SoundEffectSubmixPreset>(); } set { this["ReverbPluginEffect"] = value; } }
        public float Volume { get { return this[nameof(Volume)].GetValue<float>(); } set { this[nameof(Volume)].SetValue<float>(value); } }
        public float FadeTime { get { return this[nameof(FadeTime)].GetValue<float>(); } set { this[nameof(FadeTime)].SetValue<float>(value); } }
    }
    public class CompressedRichCurve : Object
    {
        public CompressedRichCurve(nint addr) : base(addr) { }
    }
    public class ColorGradePerRangeSettings : Object
    {
        public ColorGradePerRangeSettings(nint addr) : base(addr) { }
        public Vector4 Saturation { get { return this[nameof(Saturation)].As<Vector4>(); } set { this["Saturation"] = value; } }
        public Vector4 Contrast { get { return this[nameof(Contrast)].As<Vector4>(); } set { this["Contrast"] = value; } }
        public Vector4 Gamma { get { return this[nameof(Gamma)].As<Vector4>(); } set { this["Gamma"] = value; } }
        public Vector4 Gain { get { return this[nameof(Gain)].As<Vector4>(); } set { this["Gain"] = value; } }
        public Vector4 Offset { get { return this[nameof(Offset)].As<Vector4>(); } set { this["Offset"] = value; } }
    }
    public class ColorGradingSettings : Object
    {
        public ColorGradingSettings(nint addr) : base(addr) { }
        public ColorGradePerRangeSettings Global { get { return this[nameof(Global)].As<ColorGradePerRangeSettings>(); } set { this["Global"] = value; } }
        public ColorGradePerRangeSettings Shadows { get { return this[nameof(Shadows)].As<ColorGradePerRangeSettings>(); } set { this["Shadows"] = value; } }
        public ColorGradePerRangeSettings Midtones { get { return this[nameof(Midtones)].As<ColorGradePerRangeSettings>(); } set { this["Midtones"] = value; } }
        public ColorGradePerRangeSettings Highlights { get { return this[nameof(Highlights)].As<ColorGradePerRangeSettings>(); } set { this["Highlights"] = value; } }
        public float ShadowsMax { get { return this[nameof(ShadowsMax)].GetValue<float>(); } set { this[nameof(ShadowsMax)].SetValue<float>(value); } }
        public float HighlightsMin { get { return this[nameof(HighlightsMin)].GetValue<float>(); } set { this[nameof(HighlightsMin)].SetValue<float>(value); } }
        public float HighlightsMax { get { return this[nameof(HighlightsMax)].GetValue<float>(); } set { this[nameof(HighlightsMax)].SetValue<float>(value); } }
    }
    public class FilmStockSettings : Object
    {
        public FilmStockSettings(nint addr) : base(addr) { }
        public float Slope { get { return this[nameof(Slope)].GetValue<float>(); } set { this[nameof(Slope)].SetValue<float>(value); } }
        public float Toe { get { return this[nameof(Toe)].GetValue<float>(); } set { this[nameof(Toe)].SetValue<float>(value); } }
        public float Shoulder { get { return this[nameof(Shoulder)].GetValue<float>(); } set { this[nameof(Shoulder)].SetValue<float>(value); } }
        public float BlackClip { get { return this[nameof(BlackClip)].GetValue<float>(); } set { this[nameof(BlackClip)].SetValue<float>(value); } }
        public float WhiteClip { get { return this[nameof(WhiteClip)].GetValue<float>(); } set { this[nameof(WhiteClip)].SetValue<float>(value); } }
    }
    public class GaussianSumBloomSettings : Object
    {
        public GaussianSumBloomSettings(nint addr) : base(addr) { }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Threshold { get { return this[nameof(Threshold)].GetValue<float>(); } set { this[nameof(Threshold)].SetValue<float>(value); } }
        public float SizeScale { get { return this[nameof(SizeScale)].GetValue<float>(); } set { this[nameof(SizeScale)].SetValue<float>(value); } }
        public float Filter1Size { get { return this[nameof(Filter1Size)].GetValue<float>(); } set { this[nameof(Filter1Size)].SetValue<float>(value); } }
        public float Filter2Size { get { return this[nameof(Filter2Size)].GetValue<float>(); } set { this[nameof(Filter2Size)].SetValue<float>(value); } }
        public float Filter3Size { get { return this[nameof(Filter3Size)].GetValue<float>(); } set { this[nameof(Filter3Size)].SetValue<float>(value); } }
        public float Filter4Size { get { return this[nameof(Filter4Size)].GetValue<float>(); } set { this[nameof(Filter4Size)].SetValue<float>(value); } }
        public float Filter5Size { get { return this[nameof(Filter5Size)].GetValue<float>(); } set { this[nameof(Filter5Size)].SetValue<float>(value); } }
        public float Filter6Size { get { return this[nameof(Filter6Size)].GetValue<float>(); } set { this[nameof(Filter6Size)].SetValue<float>(value); } }
        public LinearColor Filter1Tint { get { return this[nameof(Filter1Tint)].As<LinearColor>(); } set { this["Filter1Tint"] = value; } }
        public LinearColor Filter2Tint { get { return this[nameof(Filter2Tint)].As<LinearColor>(); } set { this["Filter2Tint"] = value; } }
        public LinearColor Filter3Tint { get { return this[nameof(Filter3Tint)].As<LinearColor>(); } set { this["Filter3Tint"] = value; } }
        public LinearColor Filter4Tint { get { return this[nameof(Filter4Tint)].As<LinearColor>(); } set { this["Filter4Tint"] = value; } }
        public LinearColor Filter5Tint { get { return this[nameof(Filter5Tint)].As<LinearColor>(); } set { this["Filter5Tint"] = value; } }
        public LinearColor Filter6Tint { get { return this[nameof(Filter6Tint)].As<LinearColor>(); } set { this["Filter6Tint"] = value; } }
    }
    public class ConvolutionBloomSettings : Object
    {
        public ConvolutionBloomSettings(nint addr) : base(addr) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public float ScatterDispersion { get { return this[nameof(ScatterDispersion)].GetValue<float>(); } set { this[nameof(ScatterDispersion)].SetValue<float>(value); } }
        public float Size { get { return this[nameof(Size)].GetValue<float>(); } set { this[nameof(Size)].SetValue<float>(value); } }
        public Vector2D CenterUV { get { return this[nameof(CenterUV)].As<Vector2D>(); } set { this["CenterUV"] = value; } }
        public float PreFilterMin { get { return this[nameof(PreFilterMin)].GetValue<float>(); } set { this[nameof(PreFilterMin)].SetValue<float>(value); } }
        public float PreFilterMax { get { return this[nameof(PreFilterMax)].GetValue<float>(); } set { this[nameof(PreFilterMax)].SetValue<float>(value); } }
        public float PreFilterMult { get { return this[nameof(PreFilterMult)].GetValue<float>(); } set { this[nameof(PreFilterMult)].SetValue<float>(value); } }
        public float BufferScale { get { return this[nameof(BufferScale)].GetValue<float>(); } set { this[nameof(BufferScale)].SetValue<float>(value); } }
    }
    public class LensBloomSettings : Object
    {
        public LensBloomSettings(nint addr) : base(addr) { }
        public GaussianSumBloomSettings GaussianSum { get { return this[nameof(GaussianSum)].As<GaussianSumBloomSettings>(); } set { this["GaussianSum"] = value; } }
        public ConvolutionBloomSettings Convolution { get { return this[nameof(Convolution)].As<ConvolutionBloomSettings>(); } set { this["Convolution"] = value; } }
        public byte Method { get { return this[nameof(Method)].GetValue<byte>(); } set { this[nameof(Method)].SetValue<byte>(value); } }
    }
    public class LensImperfectionSettings : Object
    {
        public LensImperfectionSettings(nint addr) : base(addr) { }
        public Texture DirtMask { get { return this[nameof(DirtMask)].As<Texture>(); } set { this["DirtMask"] = value; } }
        public float DirtMaskIntensity { get { return this[nameof(DirtMaskIntensity)].GetValue<float>(); } set { this[nameof(DirtMaskIntensity)].SetValue<float>(value); } }
        public LinearColor DirtMaskTint { get { return this[nameof(DirtMaskTint)].As<LinearColor>(); } set { this["DirtMaskTint"] = value; } }
    }
    public class LensSettings : Object
    {
        public LensSettings(nint addr) : base(addr) { }
        public LensBloomSettings Bloom { get { return this[nameof(Bloom)].As<LensBloomSettings>(); } set { this["Bloom"] = value; } }
        public LensImperfectionSettings Imperfections { get { return this[nameof(Imperfections)].As<LensImperfectionSettings>(); } set { this["Imperfections"] = value; } }
        public float ChromaticAberration { get { return this[nameof(ChromaticAberration)].GetValue<float>(); } set { this[nameof(ChromaticAberration)].SetValue<float>(value); } }
    }
    public class CameraExposureSettings : Object
    {
        public CameraExposureSettings(nint addr) : base(addr) { }
        public byte Method { get { return this[nameof(Method)].GetValue<byte>(); } set { this[nameof(Method)].SetValue<byte>(value); } }
        public float LowPercent { get { return this[nameof(LowPercent)].GetValue<float>(); } set { this[nameof(LowPercent)].SetValue<float>(value); } }
        public float HighPercent { get { return this[nameof(HighPercent)].GetValue<float>(); } set { this[nameof(HighPercent)].SetValue<float>(value); } }
        public float MinBrightness { get { return this[nameof(MinBrightness)].GetValue<float>(); } set { this[nameof(MinBrightness)].SetValue<float>(value); } }
        public float MaxBrightness { get { return this[nameof(MaxBrightness)].GetValue<float>(); } set { this[nameof(MaxBrightness)].SetValue<float>(value); } }
        public float SpeedUp { get { return this[nameof(SpeedUp)].GetValue<float>(); } set { this[nameof(SpeedUp)].SetValue<float>(value); } }
        public float SpeedDown { get { return this[nameof(SpeedDown)].GetValue<float>(); } set { this[nameof(SpeedDown)].SetValue<float>(value); } }
        public float Bias { get { return this[nameof(Bias)].GetValue<float>(); } set { this[nameof(Bias)].SetValue<float>(value); } }
        public CurveFloat BiasCurve { get { return this[nameof(BiasCurve)].As<CurveFloat>(); } set { this["BiasCurve"] = value; } }
        public Texture MeterMask { get { return this[nameof(MeterMask)].As<Texture>(); } set { this["MeterMask"] = value; } }
        public float HistogramLogMin { get { return this[nameof(HistogramLogMin)].GetValue<float>(); } set { this[nameof(HistogramLogMin)].SetValue<float>(value); } }
        public float HistogramLogMax { get { return this[nameof(HistogramLogMax)].GetValue<float>(); } set { this[nameof(HistogramLogMax)].SetValue<float>(value); } }
        public float CalibrationConstant { get { return this[nameof(CalibrationConstant)].GetValue<float>(); } set { this[nameof(CalibrationConstant)].SetValue<float>(value); } }
        public bool ApplyPhysicalCameraExposure { get { return this[nameof(ApplyPhysicalCameraExposure)].Flag; } set { this[nameof(ApplyPhysicalCameraExposure)].Flag = value; } }
    }
    public class SceneViewExtensionIsActiveFunctor : Object
    {
        public SceneViewExtensionIsActiveFunctor(nint addr) : base(addr) { }
    }
    public class SkeletalMeshOptimizationSettings : Object
    {
        public SkeletalMeshOptimizationSettings(nint addr) : base(addr) { }
        public byte TerminationCriterion { get { return this[nameof(TerminationCriterion)].GetValue<byte>(); } set { this[nameof(TerminationCriterion)].SetValue<byte>(value); } }
        public float NumOfTrianglesPercentage { get { return this[nameof(NumOfTrianglesPercentage)].GetValue<float>(); } set { this[nameof(NumOfTrianglesPercentage)].SetValue<float>(value); } }
        public float NumOfVertPercentage { get { return this[nameof(NumOfVertPercentage)].GetValue<float>(); } set { this[nameof(NumOfVertPercentage)].SetValue<float>(value); } }
        public uint MaxNumOfTriangles { get { return this[nameof(MaxNumOfTriangles)].GetValue<uint>(); } set { this[nameof(MaxNumOfTriangles)].SetValue<uint>(value); } }
        public uint MaxNumOfVerts { get { return this[nameof(MaxNumOfVerts)].GetValue<uint>(); } set { this[nameof(MaxNumOfVerts)].SetValue<uint>(value); } }
        public float MaxDeviationPercentage { get { return this[nameof(MaxDeviationPercentage)].GetValue<float>(); } set { this[nameof(MaxDeviationPercentage)].SetValue<float>(value); } }
        public byte ReductionMethod { get { return this[nameof(ReductionMethod)].GetValue<byte>(); } set { this[nameof(ReductionMethod)].SetValue<byte>(value); } }
        public byte SilhouetteImportance { get { return this[nameof(SilhouetteImportance)].GetValue<byte>(); } set { this[nameof(SilhouetteImportance)].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this[nameof(TextureImportance)].GetValue<byte>(); } set { this[nameof(TextureImportance)].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this[nameof(ShadingImportance)].GetValue<byte>(); } set { this[nameof(ShadingImportance)].SetValue<byte>(value); } }
        public byte SkinningImportance { get { return this[nameof(SkinningImportance)].GetValue<byte>(); } set { this[nameof(SkinningImportance)].SetValue<byte>(value); } }
        public bool bRemapMorphTargets { get { return this[nameof(bRemapMorphTargets)].Flag; } set { this[nameof(bRemapMorphTargets)].Flag = value; } }
        public bool bRecalcNormals { get { return this[nameof(bRecalcNormals)].Flag; } set { this[nameof(bRecalcNormals)].Flag = value; } }
        public float WeldingThreshold { get { return this[nameof(WeldingThreshold)].GetValue<float>(); } set { this[nameof(WeldingThreshold)].SetValue<float>(value); } }
        public float NormalsThreshold { get { return this[nameof(NormalsThreshold)].GetValue<float>(); } set { this[nameof(NormalsThreshold)].SetValue<float>(value); } }
        public int MaxBonesPerVertex { get { return this[nameof(MaxBonesPerVertex)].GetValue<int>(); } set { this[nameof(MaxBonesPerVertex)].SetValue<int>(value); } }
        public bool bEnforceBoneBoundaries { get { return this[nameof(bEnforceBoneBoundaries)].Flag; } set { this[nameof(bEnforceBoneBoundaries)].Flag = value; } }
        public bool bMergeCoincidentVertBones { get { return this[nameof(bMergeCoincidentVertBones)].Flag; } set { this[nameof(bMergeCoincidentVertBones)].Flag = value; } }
        public float VolumeImportance { get { return this[nameof(VolumeImportance)].GetValue<float>(); } set { this[nameof(VolumeImportance)].SetValue<float>(value); } }
        public bool bLockEdges { get { return this[nameof(bLockEdges)].Flag; } set { this[nameof(bLockEdges)].Flag = value; } }
        public bool bLockColorBounaries { get { return this[nameof(bLockColorBounaries)].Flag; } set { this[nameof(bLockColorBounaries)].Flag = value; } }
        public int BaseLOD { get { return this[nameof(BaseLOD)].GetValue<int>(); } set { this[nameof(BaseLOD)].SetValue<int>(value); } }
    }
    public class SectionReference : Object
    {
        public SectionReference(nint addr) : base(addr) { }
        public int SectionIndex { get { return this[nameof(SectionIndex)].GetValue<int>(); } set { this[nameof(SectionIndex)].SetValue<int>(value); } }
    }
    public class SkeletalMeshLODInfo : Object
    {
        public SkeletalMeshLODInfo(nint addr) : base(addr) { }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public float LODHysteresis { get { return this[nameof(LODHysteresis)].GetValue<float>(); } set { this[nameof(LODHysteresis)].SetValue<float>(value); } }
        public Array<int> LODMaterialMap { get { return new Array<int>(this[nameof(LODMaterialMap)].Address); } }
        public SkeletalMeshBuildSettings BuildSettings { get { return this[nameof(BuildSettings)].As<SkeletalMeshBuildSettings>(); } set { this["BuildSettings"] = value; } }
        public SkeletalMeshOptimizationSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<SkeletalMeshOptimizationSettings>(); } set { this["ReductionSettings"] = value; } }
        public Array<BoneReference> BonesToRemove { get { return new Array<BoneReference>(this[nameof(BonesToRemove)].Address); } }
        public Array<BoneReference> BonesToPrioritize { get { return new Array<BoneReference>(this[nameof(BonesToPrioritize)].Address); } }
        public Array<SectionReference> SectionsToPrioritize { get { return new Array<SectionReference>(this[nameof(SectionsToPrioritize)].Address); } }
        public float WeightOfPrioritization { get { return this[nameof(WeightOfPrioritization)].GetValue<float>(); } set { this[nameof(WeightOfPrioritization)].SetValue<float>(value); } }
        public AnimSequence BakePose { get { return this[nameof(BakePose)].As<AnimSequence>(); } set { this["BakePose"] = value; } }
        public AnimSequence BakePoseOverride { get { return this[nameof(BakePoseOverride)].As<AnimSequence>(); } set { this["BakePoseOverride"] = value; } }
        public Object SourceImportFilename { get { return this[nameof(SourceImportFilename)]; } set { this[nameof(SourceImportFilename)] = value; } }
        public ESkinCacheUsage SkinCacheUsage { get { return (ESkinCacheUsage)this[nameof(SkinCacheUsage)].GetValue<int>(); } set { this[nameof(SkinCacheUsage)].SetValue<int>((int)value); } }
        public float MorphTargetPositionErrorTolerance { get { return this[nameof(MorphTargetPositionErrorTolerance)].GetValue<float>(); } set { this[nameof(MorphTargetPositionErrorTolerance)].SetValue<float>(value); } }
        public bool bHasBeenSimplified { get { return this[nameof(bHasBeenSimplified)].Flag; } set { this[nameof(bHasBeenSimplified)].Flag = value; } }
        public bool bHasPerLODVertexColors { get { return this[nameof(bHasPerLODVertexColors)].Flag; } set { this[nameof(bHasPerLODVertexColors)].Flag = value; } }
        public bool bAllowCPUAccess { get { return this[nameof(bAllowCPUAccess)].Flag; } set { this[nameof(bAllowCPUAccess)].Flag = value; } }
        public bool bSupportUniformlyDistributedSampling { get { return this[nameof(bSupportUniformlyDistributedSampling)].Flag; } set { this[nameof(bSupportUniformlyDistributedSampling)].Flag = value; } }
    }
    public class SkeletalMaterial : Object
    {
        public SkeletalMaterial(nint addr) : base(addr) { }
        public MaterialInterface MaterialInterface { get { return this[nameof(MaterialInterface)].As<MaterialInterface>(); } set { this["MaterialInterface"] = value; } }
        public Object MaterialSlotName { get { return this[nameof(MaterialSlotName)]; } set { this[nameof(MaterialSlotName)] = value; } }
        public MeshUVChannelInfo UVChannelData { get { return this[nameof(UVChannelData)].As<MeshUVChannelInfo>(); } set { this["UVChannelData"] = value; } }
    }
    public class VertexOffsetUsage : Object
    {
        public VertexOffsetUsage(nint addr) : base(addr) { }
        public int Usage { get { return this[nameof(Usage)].GetValue<int>(); } set { this[nameof(Usage)].SetValue<int>(value); } }
    }
    public class PrecomputedSkyLightInstanceData : SceneComponentInstanceData
    {
        public PrecomputedSkyLightInstanceData(nint addr) : base(addr) { }
        public Guid LightGuid { get { return this[nameof(LightGuid)].As<Guid>(); } set { this["LightGuid"] = value; } }
        public float AverageBrightness { get { return this[nameof(AverageBrightness)].GetValue<float>(); } set { this[nameof(AverageBrightness)].SetValue<float>(value); } }
    }
    public class SoundAttenuationPluginSettings : Object
    {
        public SoundAttenuationPluginSettings(nint addr) : base(addr) { }
        public Array<SpatializationPluginSourceSettingsBase> SpatializationPluginSettingsArray { get { return new Array<SpatializationPluginSourceSettingsBase>(this[nameof(SpatializationPluginSettingsArray)].Address); } }
        public Array<OcclusionPluginSourceSettingsBase> OcclusionPluginSettingsArray { get { return new Array<OcclusionPluginSourceSettingsBase>(this[nameof(OcclusionPluginSettingsArray)].Address); } }
        public Array<ReverbPluginSourceSettingsBase> ReverbPluginSettingsArray { get { return new Array<ReverbPluginSourceSettingsBase>(this[nameof(ReverbPluginSettingsArray)].Address); } }
        public Array<SourceDataOverridePluginSourceSettingsBase> SourceDataOverridePluginSettingsArray { get { return new Array<SourceDataOverridePluginSourceSettingsBase>(this[nameof(SourceDataOverridePluginSettingsArray)].Address); } }
    }
    public class AttenuationSubmixSendSettings : Object
    {
        public AttenuationSubmixSendSettings(nint addr) : base(addr) { }
        public SoundSubmixBase Submix { get { return this[nameof(Submix)].As<SoundSubmixBase>(); } set { this["Submix"] = value; } }
        public ESubmixSendMethod SubmixSendMethod { get { return (ESubmixSendMethod)this[nameof(SubmixSendMethod)].GetValue<int>(); } set { this[nameof(SubmixSendMethod)].SetValue<int>((int)value); } }
        public float SubmixSendLevelMin { get { return this[nameof(SubmixSendLevelMin)].GetValue<float>(); } set { this[nameof(SubmixSendLevelMin)].SetValue<float>(value); } }
        public float SubmixSendLevelMax { get { return this[nameof(SubmixSendLevelMax)].GetValue<float>(); } set { this[nameof(SubmixSendLevelMax)].SetValue<float>(value); } }
        public float SubmixSendDistanceMin { get { return this[nameof(SubmixSendDistanceMin)].GetValue<float>(); } set { this[nameof(SubmixSendDistanceMin)].SetValue<float>(value); } }
        public float SubmixSendDistanceMax { get { return this[nameof(SubmixSendDistanceMax)].GetValue<float>(); } set { this[nameof(SubmixSendDistanceMax)].SetValue<float>(value); } }
        public float ManualSubmixSendLevel { get { return this[nameof(ManualSubmixSendLevel)].GetValue<float>(); } set { this[nameof(ManualSubmixSendLevel)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSubmixSendCurve { get { return this[nameof(CustomSubmixSendCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSubmixSendCurve"] = value; } }
    }
    public class SoundAttenuationSettings : BaseAttenuationSettings
    {
        public SoundAttenuationSettings(nint addr) : base(addr) { }
        public bool bAttenuate { get { return this[nameof(bAttenuate)].Flag; } set { this[nameof(bAttenuate)].Flag = value; } }
        public bool bSpatialize { get { return this[nameof(bSpatialize)].Flag; } set { this[nameof(bSpatialize)].Flag = value; } }
        public bool bAttenuateWithLPF { get { return this[nameof(bAttenuateWithLPF)].Flag; } set { this[nameof(bAttenuateWithLPF)].Flag = value; } }
        public bool bEnableListenerFocus { get { return this[nameof(bEnableListenerFocus)].Flag; } set { this[nameof(bEnableListenerFocus)].Flag = value; } }
        public bool bEnableFocusInterpolation { get { return this[nameof(bEnableFocusInterpolation)].Flag; } set { this[nameof(bEnableFocusInterpolation)].Flag = value; } }
        public bool bEnableOcclusion { get { return this[nameof(bEnableOcclusion)].Flag; } set { this[nameof(bEnableOcclusion)].Flag = value; } }
        public bool bUseComplexCollisionForOcclusion { get { return this[nameof(bUseComplexCollisionForOcclusion)].Flag; } set { this[nameof(bUseComplexCollisionForOcclusion)].Flag = value; } }
        public bool bEnableReverbSend { get { return this[nameof(bEnableReverbSend)].Flag; } set { this[nameof(bEnableReverbSend)].Flag = value; } }
        public bool bEnablePriorityAttenuation { get { return this[nameof(bEnablePriorityAttenuation)].Flag; } set { this[nameof(bEnablePriorityAttenuation)].Flag = value; } }
        public bool bApplyNormalizationToStereoSounds { get { return this[nameof(bApplyNormalizationToStereoSounds)].Flag; } set { this[nameof(bApplyNormalizationToStereoSounds)].Flag = value; } }
        public bool bEnableLogFrequencyScaling { get { return this[nameof(bEnableLogFrequencyScaling)].Flag; } set { this[nameof(bEnableLogFrequencyScaling)].Flag = value; } }
        public bool bEnableSubmixSends { get { return this[nameof(bEnableSubmixSends)].Flag; } set { this[nameof(bEnableSubmixSends)].Flag = value; } }
        public bool bEnableSourceDataOverride { get { return this[nameof(bEnableSourceDataOverride)].Flag; } set { this[nameof(bEnableSourceDataOverride)].Flag = value; } }
        public bool bEnableSendToAudioLink { get { return this[nameof(bEnableSendToAudioLink)].Flag; } set { this[nameof(bEnableSendToAudioLink)].Flag = value; } }
        public byte SpatializationAlgorithm { get { return this[nameof(SpatializationAlgorithm)].GetValue<byte>(); } set { this[nameof(SpatializationAlgorithm)].SetValue<byte>(value); } }
        //public AudioLinkSettingsAbstract AudioLinkSettingsOverride { get { return this[nameof(AudioLinkSettingsOverride)].As<AudioLinkSettingsAbstract>(); } set { this["AudioLinkSettingsOverride"] = value; } }
        public float BinauralRadius { get { return this[nameof(BinauralRadius)].GetValue<float>(); } set { this[nameof(BinauralRadius)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomLowpassAirAbsorptionCurve { get { return this[nameof(CustomLowpassAirAbsorptionCurve)].As<RuntimeFloatCurve>(); } set { this["CustomLowpassAirAbsorptionCurve"] = value; } }
        public RuntimeFloatCurve CustomHighpassAirAbsorptionCurve { get { return this[nameof(CustomHighpassAirAbsorptionCurve)].As<RuntimeFloatCurve>(); } set { this["CustomHighpassAirAbsorptionCurve"] = value; } }
        public EAirAbsorptionMethod AbsorptionMethod { get { return (EAirAbsorptionMethod)this[nameof(AbsorptionMethod)].GetValue<int>(); } set { this[nameof(AbsorptionMethod)].SetValue<int>((int)value); } }
        public byte OcclusionTraceChannel { get { return this[nameof(OcclusionTraceChannel)].GetValue<byte>(); } set { this[nameof(OcclusionTraceChannel)].SetValue<byte>(value); } }
        public EReverbSendMethod ReverbSendMethod { get { return (EReverbSendMethod)this[nameof(ReverbSendMethod)].GetValue<int>(); } set { this[nameof(ReverbSendMethod)].SetValue<int>((int)value); } }
        public EPriorityAttenuationMethod PriorityAttenuationMethod { get { return (EPriorityAttenuationMethod)this[nameof(PriorityAttenuationMethod)].GetValue<int>(); } set { this[nameof(PriorityAttenuationMethod)].SetValue<int>((int)value); } }
        public float OmniRadius { get { return this[nameof(OmniRadius)].GetValue<float>(); } set { this[nameof(OmniRadius)].SetValue<float>(value); } }
        public float StereoSpread { get { return this[nameof(StereoSpread)].GetValue<float>(); } set { this[nameof(StereoSpread)].SetValue<float>(value); } }
        public float LPFRadiusMin { get { return this[nameof(LPFRadiusMin)].GetValue<float>(); } set { this[nameof(LPFRadiusMin)].SetValue<float>(value); } }
        public float LPFRadiusMax { get { return this[nameof(LPFRadiusMax)].GetValue<float>(); } set { this[nameof(LPFRadiusMax)].SetValue<float>(value); } }
        public float LPFFrequencyAtMin { get { return this[nameof(LPFFrequencyAtMin)].GetValue<float>(); } set { this[nameof(LPFFrequencyAtMin)].SetValue<float>(value); } }
        public float LPFFrequencyAtMax { get { return this[nameof(LPFFrequencyAtMax)].GetValue<float>(); } set { this[nameof(LPFFrequencyAtMax)].SetValue<float>(value); } }
        public float HPFFrequencyAtMin { get { return this[nameof(HPFFrequencyAtMin)].GetValue<float>(); } set { this[nameof(HPFFrequencyAtMin)].SetValue<float>(value); } }
        public float HPFFrequencyAtMax { get { return this[nameof(HPFFrequencyAtMax)].GetValue<float>(); } set { this[nameof(HPFFrequencyAtMax)].SetValue<float>(value); } }
        public float FocusAzimuth { get { return this[nameof(FocusAzimuth)].GetValue<float>(); } set { this[nameof(FocusAzimuth)].SetValue<float>(value); } }
        public float NonFocusAzimuth { get { return this[nameof(NonFocusAzimuth)].GetValue<float>(); } set { this[nameof(NonFocusAzimuth)].SetValue<float>(value); } }
        public float FocusDistanceScale { get { return this[nameof(FocusDistanceScale)].GetValue<float>(); } set { this[nameof(FocusDistanceScale)].SetValue<float>(value); } }
        public float NonFocusDistanceScale { get { return this[nameof(NonFocusDistanceScale)].GetValue<float>(); } set { this[nameof(NonFocusDistanceScale)].SetValue<float>(value); } }
        public float FocusPriorityScale { get { return this[nameof(FocusPriorityScale)].GetValue<float>(); } set { this[nameof(FocusPriorityScale)].SetValue<float>(value); } }
        public float NonFocusPriorityScale { get { return this[nameof(NonFocusPriorityScale)].GetValue<float>(); } set { this[nameof(NonFocusPriorityScale)].SetValue<float>(value); } }
        public float FocusVolumeAttenuation { get { return this[nameof(FocusVolumeAttenuation)].GetValue<float>(); } set { this[nameof(FocusVolumeAttenuation)].SetValue<float>(value); } }
        public float NonFocusVolumeAttenuation { get { return this[nameof(NonFocusVolumeAttenuation)].GetValue<float>(); } set { this[nameof(NonFocusVolumeAttenuation)].SetValue<float>(value); } }
        public float FocusAttackInterpSpeed { get { return this[nameof(FocusAttackInterpSpeed)].GetValue<float>(); } set { this[nameof(FocusAttackInterpSpeed)].SetValue<float>(value); } }
        public float FocusReleaseInterpSpeed { get { return this[nameof(FocusReleaseInterpSpeed)].GetValue<float>(); } set { this[nameof(FocusReleaseInterpSpeed)].SetValue<float>(value); } }
        public float OcclusionLowPassFilterFrequency { get { return this[nameof(OcclusionLowPassFilterFrequency)].GetValue<float>(); } set { this[nameof(OcclusionLowPassFilterFrequency)].SetValue<float>(value); } }
        public float OcclusionVolumeAttenuation { get { return this[nameof(OcclusionVolumeAttenuation)].GetValue<float>(); } set { this[nameof(OcclusionVolumeAttenuation)].SetValue<float>(value); } }
        public float OcclusionInterpolationTime { get { return this[nameof(OcclusionInterpolationTime)].GetValue<float>(); } set { this[nameof(OcclusionInterpolationTime)].SetValue<float>(value); } }
        public float ReverbWetLevelMin { get { return this[nameof(ReverbWetLevelMin)].GetValue<float>(); } set { this[nameof(ReverbWetLevelMin)].SetValue<float>(value); } }
        public float ReverbWetLevelMax { get { return this[nameof(ReverbWetLevelMax)].GetValue<float>(); } set { this[nameof(ReverbWetLevelMax)].SetValue<float>(value); } }
        public float ReverbDistanceMin { get { return this[nameof(ReverbDistanceMin)].GetValue<float>(); } set { this[nameof(ReverbDistanceMin)].SetValue<float>(value); } }
        public float ReverbDistanceMax { get { return this[nameof(ReverbDistanceMax)].GetValue<float>(); } set { this[nameof(ReverbDistanceMax)].SetValue<float>(value); } }
        public float ManualReverbSendLevel { get { return this[nameof(ManualReverbSendLevel)].GetValue<float>(); } set { this[nameof(ManualReverbSendLevel)].SetValue<float>(value); } }
        public float PriorityAttenuationMin { get { return this[nameof(PriorityAttenuationMin)].GetValue<float>(); } set { this[nameof(PriorityAttenuationMin)].SetValue<float>(value); } }
        public float PriorityAttenuationMax { get { return this[nameof(PriorityAttenuationMax)].GetValue<float>(); } set { this[nameof(PriorityAttenuationMax)].SetValue<float>(value); } }
        public float PriorityAttenuationDistanceMin { get { return this[nameof(PriorityAttenuationDistanceMin)].GetValue<float>(); } set { this[nameof(PriorityAttenuationDistanceMin)].SetValue<float>(value); } }
        public float PriorityAttenuationDistanceMax { get { return this[nameof(PriorityAttenuationDistanceMax)].GetValue<float>(); } set { this[nameof(PriorityAttenuationDistanceMax)].SetValue<float>(value); } }
        public float ManualPriorityAttenuation { get { return this[nameof(ManualPriorityAttenuation)].GetValue<float>(); } set { this[nameof(ManualPriorityAttenuation)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomReverbSendCurve { get { return this[nameof(CustomReverbSendCurve)].As<RuntimeFloatCurve>(); } set { this["CustomReverbSendCurve"] = value; } }
        public Array<AttenuationSubmixSendSettings> SubmixSendSettings { get { return new Array<AttenuationSubmixSendSettings>(this[nameof(SubmixSendSettings)].Address); } }
        public RuntimeFloatCurve CustomPriorityAttenuationCurve { get { return this[nameof(CustomPriorityAttenuationCurve)].As<RuntimeFloatCurve>(); } set { this["CustomPriorityAttenuationCurve"] = value; } }
        public SoundAttenuationPluginSettings PluginSettings { get { return this[nameof(PluginSettings)].As<SoundAttenuationPluginSettings>(); } set { this["PluginSettings"] = value; } }
    }
    public class SourceEffectChainEntry : Object
    {
        public SourceEffectChainEntry(nint addr) : base(addr) { }
        public SoundEffectSourcePreset Preset { get { return this[nameof(Preset)].As<SoundEffectSourcePreset>(); } set { this["Preset"] = value; } }
        public bool bBypass { get { return this[nameof(bBypass)].Flag; } set { this[nameof(bBypass)].Flag = value; } }
    }
    public class SoundGroup : Object
    {
        public SoundGroup(nint addr) : base(addr) { }
        public byte SoundGroup_value { get { return this[nameof(SoundGroup)].GetValue<byte>(); } set { this[nameof(SoundGroup)].SetValue<byte>(value); } }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public bool bAlwaysDecompressOnLoad { get { return this[nameof(bAlwaysDecompressOnLoad)].Flag; } set { this[nameof(bAlwaysDecompressOnLoad)].Flag = value; } }
        public float DecompressedDuration { get { return this[nameof(DecompressedDuration)].GetValue<float>(); } set { this[nameof(DecompressedDuration)].SetValue<float>(value); } }
    }
    public class ModulatorContinuousParams : Object
    {
        public ModulatorContinuousParams(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public float Default { get { return this[nameof(Default)].GetValue<float>(); } set { this[nameof(Default)].SetValue<float>(value); } }
        public float MinInput { get { return this[nameof(MinInput)].GetValue<float>(); } set { this[nameof(MinInput)].SetValue<float>(value); } }
        public float MaxInput { get { return this[nameof(MaxInput)].GetValue<float>(); } set { this[nameof(MaxInput)].SetValue<float>(value); } }
        public float MinOutput { get { return this[nameof(MinOutput)].GetValue<float>(); } set { this[nameof(MinOutput)].SetValue<float>(value); } }
        public float MaxOutput { get { return this[nameof(MaxOutput)].GetValue<float>(); } set { this[nameof(MaxOutput)].SetValue<float>(value); } }
        public byte ParamMode { get { return this[nameof(ParamMode)].GetValue<byte>(); } set { this[nameof(ParamMode)].SetValue<byte>(value); } }
    }
    public class SoundSourceBusSendInfo : Object
    {
        public SoundSourceBusSendInfo(nint addr) : base(addr) { }
        public ESourceBusSendLevelControlMethod SourceBusSendLevelControlMethod { get { return (ESourceBusSendLevelControlMethod)this[nameof(SourceBusSendLevelControlMethod)].GetValue<int>(); } set { this[nameof(SourceBusSendLevelControlMethod)].SetValue<int>((int)value); } }
        public SoundSourceBus SoundSourceBus { get { return this[nameof(SoundSourceBus)].As<SoundSourceBus>(); } set { this["SoundSourceBus"] = value; } }
        public AudioBus AudioBus { get { return this[nameof(AudioBus)].As<AudioBus>(); } set { this["AudioBus"] = value; } }
        public float SendLevel { get { return this[nameof(SendLevel)].GetValue<float>(); } set { this[nameof(SendLevel)].SetValue<float>(value); } }
        public float MinSendLevel { get { return this[nameof(MinSendLevel)].GetValue<float>(); } set { this[nameof(MinSendLevel)].SetValue<float>(value); } }
        public float MaxSendLevel { get { return this[nameof(MaxSendLevel)].GetValue<float>(); } set { this[nameof(MaxSendLevel)].SetValue<float>(value); } }
        public float MinSendDistance { get { return this[nameof(MinSendDistance)].GetValue<float>(); } set { this[nameof(MinSendDistance)].SetValue<float>(value); } }
        public float MaxSendDistance { get { return this[nameof(MaxSendDistance)].GetValue<float>(); } set { this[nameof(MaxSendDistance)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSendLevelCurve { get { return this[nameof(CustomSendLevelCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSendLevelCurve"] = value; } }
    }
    public class SoundTimecodeOffset : Object
    {
        public SoundTimecodeOffset(nint addr) : base(addr) { }
        public double NumOfSecondsSinceMidnight { get { return this[nameof(NumOfSecondsSinceMidnight)].GetValue<double>(); } set { this[nameof(NumOfSecondsSinceMidnight)].SetValue<double>(value); } }
    }
    public class StreamedAudioPlatformData : Object
    {
        public StreamedAudioPlatformData(nint addr) : base(addr) { }
    }
    public class SoundWaveSpectralData : Object
    {
        public SoundWaveSpectralData(nint addr) : base(addr) { }
        public float FrequencyHz { get { return this[nameof(FrequencyHz)].GetValue<float>(); } set { this[nameof(FrequencyHz)].SetValue<float>(value); } }
        public float Magnitude { get { return this[nameof(Magnitude)].GetValue<float>(); } set { this[nameof(Magnitude)].SetValue<float>(value); } }
        public float NormalizedMagnitude { get { return this[nameof(NormalizedMagnitude)].GetValue<float>(); } set { this[nameof(NormalizedMagnitude)].SetValue<float>(value); } }
    }
    public class SoundWaveSpectralDataPerSound : Object
    {
        public SoundWaveSpectralDataPerSound(nint addr) : base(addr) { }
        public Array<SoundWaveSpectralData> SpectralData { get { return new Array<SoundWaveSpectralData>(this[nameof(SpectralData)].Address); } }
        public float PlaybackTime { get { return this[nameof(PlaybackTime)].GetValue<float>(); } set { this[nameof(PlaybackTime)].SetValue<float>(value); } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
    }
    public class SoundWaveEnvelopeDataPerSound : Object
    {
        public SoundWaveEnvelopeDataPerSound(nint addr) : base(addr) { }
        public float Envelope { get { return this[nameof(Envelope)].GetValue<float>(); } set { this[nameof(Envelope)].SetValue<float>(value); } }
        public float PlaybackTime { get { return this[nameof(PlaybackTime)].GetValue<float>(); } set { this[nameof(PlaybackTime)].SetValue<float>(value); } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
    }
    public class SoundWaveSpectralDataEntry : Object
    {
        public SoundWaveSpectralDataEntry(nint addr) : base(addr) { }
        public float Magnitude { get { return this[nameof(Magnitude)].GetValue<float>(); } set { this[nameof(Magnitude)].SetValue<float>(value); } }
        public float NormalizedMagnitude { get { return this[nameof(NormalizedMagnitude)].GetValue<float>(); } set { this[nameof(NormalizedMagnitude)].SetValue<float>(value); } }
    }
    public class SoundWaveSpectralTimeData : Object
    {
        public SoundWaveSpectralTimeData(nint addr) : base(addr) { }
        public Array<SoundWaveSpectralDataEntry> Data { get { return new Array<SoundWaveSpectralDataEntry>(this[nameof(Data)].Address); } }
        public float TimeSec { get { return this[nameof(TimeSec)].GetValue<float>(); } set { this[nameof(TimeSec)].SetValue<float>(value); } }
    }
    public class SoundWaveEnvelopeTimeData : Object
    {
        public SoundWaveEnvelopeTimeData(nint addr) : base(addr) { }
        public float Amplitude { get { return this[nameof(Amplitude)].GetValue<float>(); } set { this[nameof(Amplitude)].SetValue<float>(value); } }
        public float TimeSec { get { return this[nameof(TimeSec)].GetValue<float>(); } set { this[nameof(TimeSec)].SetValue<float>(value); } }
    }
    public class SoundWaveCuePoint : Object
    {
        public SoundWaveCuePoint(nint addr) : base(addr) { }
        public int CuePointID { get { return this[nameof(CuePointID)].GetValue<int>(); } set { this[nameof(CuePointID)].SetValue<int>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public int FramePosition { get { return this[nameof(FramePosition)].GetValue<int>(); } set { this[nameof(FramePosition)].SetValue<int>(value); } }
        public int FrameLength { get { return this[nameof(FrameLength)].GetValue<int>(); } set { this[nameof(FrameLength)].SetValue<int>(value); } }
    }
    public class SoundWaveTimecodeInfo : Object
    {
        public SoundWaveTimecodeInfo(nint addr) : base(addr) { }
        public ulong NumSamplesSinceMidnight { get { return this[nameof(NumSamplesSinceMidnight)].GetValue<ulong>(); } set { this[nameof(NumSamplesSinceMidnight)].SetValue<ulong>(value); } }
        public uint NumSamplesPerSecond { get { return this[nameof(NumSamplesPerSecond)].GetValue<uint>(); } set { this[nameof(NumSamplesPerSecond)].SetValue<uint>(value); } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object OriginatorTime { get { return this[nameof(OriginatorTime)]; } set { this[nameof(OriginatorTime)] = value; } }
        public Object OriginatorDate { get { return this[nameof(OriginatorDate)]; } set { this[nameof(OriginatorDate)] = value; } }
        public Object OriginatorDescription { get { return this[nameof(OriginatorDescription)]; } set { this[nameof(OriginatorDescription)] = value; } }
        public Object OriginatorReference { get { return this[nameof(OriginatorReference)]; } set { this[nameof(OriginatorReference)] = value; } }
        public FrameRate TimecodeRate { get { return this[nameof(TimecodeRate)].As<FrameRate>(); } set { this["TimecodeRate"] = value; } }
        public bool bTimecodeIsDropFrame { get { return this[nameof(bTimecodeIsDropFrame)].Flag; } set { this[nameof(bTimecodeIsDropFrame)].Flag = value; } }
    }
    public class StaticMeshOptimizationSettings : Object
    {
        public StaticMeshOptimizationSettings(nint addr) : base(addr) { }
        public byte ReductionMethod { get { return this[nameof(ReductionMethod)].GetValue<byte>(); } set { this[nameof(ReductionMethod)].SetValue<byte>(value); } }
        public float NumOfTrianglesPercentage { get { return this[nameof(NumOfTrianglesPercentage)].GetValue<float>(); } set { this[nameof(NumOfTrianglesPercentage)].SetValue<float>(value); } }
        public float MaxDeviationPercentage { get { return this[nameof(MaxDeviationPercentage)].GetValue<float>(); } set { this[nameof(MaxDeviationPercentage)].SetValue<float>(value); } }
        public float WeldingThreshold { get { return this[nameof(WeldingThreshold)].GetValue<float>(); } set { this[nameof(WeldingThreshold)].SetValue<float>(value); } }
        public bool bRecalcNormals { get { return this[nameof(bRecalcNormals)].Flag; } set { this[nameof(bRecalcNormals)].Flag = value; } }
        public float NormalsThreshold { get { return this[nameof(NormalsThreshold)].GetValue<float>(); } set { this[nameof(NormalsThreshold)].SetValue<float>(value); } }
        public byte SilhouetteImportance { get { return this[nameof(SilhouetteImportance)].GetValue<byte>(); } set { this[nameof(SilhouetteImportance)].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this[nameof(TextureImportance)].GetValue<byte>(); } set { this[nameof(TextureImportance)].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this[nameof(ShadingImportance)].GetValue<byte>(); } set { this[nameof(ShadingImportance)].SetValue<byte>(value); } }
    }
    public class MeshSectionInfo : Object
    {
        public MeshSectionInfo(nint addr) : base(addr) { }
        public int MaterialIndex { get { return this[nameof(MaterialIndex)].GetValue<int>(); } set { this[nameof(MaterialIndex)].SetValue<int>(value); } }
        public bool bEnableCollision { get { return this[nameof(bEnableCollision)].Flag; } set { this[nameof(bEnableCollision)].Flag = value; } }
        public bool bCastShadow { get { return this[nameof(bCastShadow)].Flag; } set { this[nameof(bCastShadow)].Flag = value; } }
        public bool bVisibleInRayTracing { get { return this[nameof(bVisibleInRayTracing)].Flag; } set { this[nameof(bVisibleInRayTracing)].Flag = value; } }
        public bool bAffectDistanceFieldLighting { get { return this[nameof(bAffectDistanceFieldLighting)].Flag; } set { this[nameof(bAffectDistanceFieldLighting)].Flag = value; } }
        public bool bForceOpaque { get { return this[nameof(bForceOpaque)].Flag; } set { this[nameof(bForceOpaque)].Flag = value; } }
    }
    public class MeshSectionInfoMap : Object
    {
        public MeshSectionInfoMap(nint addr) : base(addr) { }
        public Object Map { get { return this[nameof(Map)]; } set { this[nameof(Map)] = value; } }
    }
    public class AssetEditorOrbitCameraPosition : Object
    {
        public AssetEditorOrbitCameraPosition(nint addr) : base(addr) { }
        public bool bIsSet { get { return this[nameof(bIsSet)].Flag; } set { this[nameof(bIsSet)].Flag = value; } }
        public Vector CamOrbitPoint { get { return this[nameof(CamOrbitPoint)].As<Vector>(); } set { this["CamOrbitPoint"] = value; } }
        public Vector CamOrbitZoom { get { return this[nameof(CamOrbitZoom)].As<Vector>(); } set { this["CamOrbitZoom"] = value; } }
        public Rotator CamOrbitRotation { get { return this[nameof(CamOrbitRotation)].As<Rotator>(); } set { this["CamOrbitRotation"] = value; } }
    }
    public class StaticMaterial : Object
    {
        public StaticMaterial(nint addr) : base(addr) { }
        public MaterialInterface MaterialInterface { get { return this[nameof(MaterialInterface)].As<MaterialInterface>(); } set { this["MaterialInterface"] = value; } }
        public Object MaterialSlotName { get { return this[nameof(MaterialSlotName)]; } set { this[nameof(MaterialSlotName)] = value; } }
        public Object ImportedMaterialSlotName { get { return this[nameof(ImportedMaterialSlotName)]; } set { this[nameof(ImportedMaterialSlotName)] = value; } }
        public MeshUVChannelInfo UVChannelData { get { return this[nameof(UVChannelData)].As<MeshUVChannelInfo>(); } set { this["UVChannelData"] = value; } }
    }
    public class MaterialRemapIndex : Object
    {
        public MaterialRemapIndex(nint addr) : base(addr) { }
        public uint ImportVersionKey { get { return this[nameof(ImportVersionKey)].GetValue<uint>(); } set { this[nameof(ImportVersionKey)].SetValue<uint>(value); } }
        public Array<int> MaterialRemap { get { return new Array<int>(this[nameof(MaterialRemap)].Address); } }
    }
    public class StaticParameterBase : Object
    {
        public StaticParameterBase(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public bool bOverride { get { return this[nameof(bOverride)].Flag; } set { this[nameof(bOverride)].Flag = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class StaticSwitchParameter : StaticParameterBase
    {
        public StaticSwitchParameter(nint addr) : base(addr) { }
        public bool Value { get { return this[nameof(Value)].Flag; } set { this[nameof(Value)].Flag = value; } }
    }
    public class StaticComponentMaskParameter : StaticParameterBase
    {
        public StaticComponentMaskParameter(nint addr) : base(addr) { }
        public bool R { get { return this[nameof(R)].Flag; } set { this[nameof(R)].Flag = value; } }
        public bool G { get { return this[nameof(G)].Flag; } set { this[nameof(G)].Flag = value; } }
        public bool B { get { return this[nameof(B)].Flag; } set { this[nameof(B)].Flag = value; } }
        public bool A { get { return this[nameof(A)].Flag; } set { this[nameof(A)].Flag = value; } }
    }
    public class StaticTerrainLayerWeightParameter : Object
    {
        public StaticTerrainLayerWeightParameter(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
        public bool bOverride { get { return this[nameof(bOverride)].Flag; } set { this[nameof(bOverride)].Flag = value; } }
        public Object LayerName { get { return this[nameof(LayerName)]; } set { this[nameof(LayerName)] = value; } }
        public int WeightmapIndex { get { return this[nameof(WeightmapIndex)].GetValue<int>(); } set { this[nameof(WeightmapIndex)].SetValue<int>(value); } }
        public bool bWeightBasedBlend { get { return this[nameof(bWeightBasedBlend)].Flag; } set { this[nameof(bWeightBasedBlend)].Flag = value; } }
    }
    public class StaticMaterialLayersParameter : StaticParameterBase
    {
        public StaticMaterialLayersParameter(nint addr) : base(addr) { }
        public MaterialLayersFunctions Value { get { return this[nameof(Value)].As<MaterialLayersFunctions>(); } set { this["Value"] = value; } }
    }
    public class StaticParameterSetRuntimeData : Object
    {
        public StaticParameterSetRuntimeData(nint addr) : base(addr) { }
        public MaterialLayersFunctionsRuntimeData MaterialLayers { get { return this[nameof(MaterialLayers)].As<MaterialLayersFunctionsRuntimeData>(); } set { this["MaterialLayers"] = value; } }
        public bool bHasMaterialLayers { get { return this[nameof(bHasMaterialLayers)].Flag; } set { this[nameof(bHasMaterialLayers)].Flag = value; } }
    }
    public class StaticParameterSetEditorOnlyData : Object
    {
        public StaticParameterSetEditorOnlyData(nint addr) : base(addr) { }
        public Array<StaticSwitchParameter> StaticSwitchParameters { get { return new Array<StaticSwitchParameter>(this[nameof(StaticSwitchParameters)].Address); } }
        public Array<StaticComponentMaskParameter> StaticComponentMaskParameters { get { return new Array<StaticComponentMaskParameter>(this[nameof(StaticComponentMaskParameters)].Address); } }
        public Array<StaticTerrainLayerWeightParameter> TerrainLayerWeightParameters { get { return new Array<StaticTerrainLayerWeightParameter>(this[nameof(TerrainLayerWeightParameters)].Address); } }
        public MaterialLayersFunctionsEditorOnlyData MaterialLayers { get { return this[nameof(MaterialLayers)].As<MaterialLayersFunctionsEditorOnlyData>(); } set { this["MaterialLayers"] = value; } }
    }
    public class StaticParameterSet : StaticParameterSetRuntimeData
    {
        public StaticParameterSet(nint addr) : base(addr) { }
    }
    public class EquirectProps : Object
    {
        public EquirectProps(nint addr) : base(addr) { }
        public Box2D LeftUVRect { get { return this[nameof(LeftUVRect)].As<Box2D>(); } set { this["LeftUVRect"] = value; } }
        public Box2D RightUVRect { get { return this[nameof(RightUVRect)].As<Box2D>(); } set { this["RightUVRect"] = value; } }
        public Vector2D LeftScale { get { return this[nameof(LeftScale)].As<Vector2D>(); } set { this["LeftScale"] = value; } }
        public Vector2D RightScale { get { return this[nameof(RightScale)].As<Vector2D>(); } set { this["RightScale"] = value; } }
        public Vector2D LeftBias { get { return this[nameof(LeftBias)].As<Vector2D>(); } set { this["LeftBias"] = value; } }
        public Vector2D RightBias { get { return this[nameof(RightBias)].As<Vector2D>(); } set { this["RightBias"] = value; } }
    }
    public class TextureSourceBlock : Object
    {
        public TextureSourceBlock(nint addr) : base(addr) { }
        public int BlockX { get { return this[nameof(BlockX)].GetValue<int>(); } set { this[nameof(BlockX)].SetValue<int>(value); } }
        public int BlockY { get { return this[nameof(BlockY)].GetValue<int>(); } set { this[nameof(BlockY)].SetValue<int>(value); } }
        public int SizeX { get { return this[nameof(SizeX)].GetValue<int>(); } set { this[nameof(SizeX)].SetValue<int>(value); } }
        public int SizeY { get { return this[nameof(SizeY)].GetValue<int>(); } set { this[nameof(SizeY)].SetValue<int>(value); } }
        public int NumSlices { get { return this[nameof(NumSlices)].GetValue<int>(); } set { this[nameof(NumSlices)].SetValue<int>(value); } }
        public int NumMips { get { return this[nameof(NumMips)].GetValue<int>(); } set { this[nameof(NumMips)].SetValue<int>(value); } }
    }
    public class TextureSource : Object
    {
        public TextureSource(nint addr) : base(addr) { }
    }
    public class TexturePlatformData : Object
    {
        public TexturePlatformData(nint addr) : base(addr) { }
    }
    public class TextureFormatSettings : Object
    {
        public TextureFormatSettings(nint addr) : base(addr) { }
        public byte CompressionSettings { get { return this[nameof(CompressionSettings)].GetValue<byte>(); } set { this[nameof(CompressionSettings)].SetValue<byte>(value); } }
        public bool CompressionNoAlpha { get { return this[nameof(CompressionNoAlpha)].Flag; } set { this[nameof(CompressionNoAlpha)].Flag = value; } }
        public bool CompressionForceAlpha { get { return this[nameof(CompressionForceAlpha)].Flag; } set { this[nameof(CompressionForceAlpha)].Flag = value; } }
        public bool CompressionNone { get { return this[nameof(CompressionNone)].Flag; } set { this[nameof(CompressionNone)].Flag = value; } }
        public bool CompressionYCoCg { get { return this[nameof(CompressionYCoCg)].Flag; } set { this[nameof(CompressionYCoCg)].Flag = value; } }
        public bool SRGB { get { return this[nameof(SRGB)].Flag; } set { this[nameof(SRGB)].Flag = value; } }
    }
    public class TextureSourceColorSettings : Object
    {
        public TextureSourceColorSettings(nint addr) : base(addr) { }
        public ETextureSourceEncoding EncodingOverride { get { return (ETextureSourceEncoding)this[nameof(EncodingOverride)].GetValue<int>(); } set { this[nameof(EncodingOverride)].SetValue<int>((int)value); } }
        public ETextureColorSpace ColorSpace { get { return (ETextureColorSpace)this[nameof(ColorSpace)].GetValue<int>(); } set { this[nameof(ColorSpace)].SetValue<int>((int)value); } }
        public Vector2D RedChromaticityCoordinate { get { return this[nameof(RedChromaticityCoordinate)].As<Vector2D>(); } set { this["RedChromaticityCoordinate"] = value; } }
        public Vector2D GreenChromaticityCoordinate { get { return this[nameof(GreenChromaticityCoordinate)].As<Vector2D>(); } set { this["GreenChromaticityCoordinate"] = value; } }
        public Vector2D BlueChromaticityCoordinate { get { return this[nameof(BlueChromaticityCoordinate)].As<Vector2D>(); } set { this["BlueChromaticityCoordinate"] = value; } }
        public Vector2D WhiteChromaticityCoordinate { get { return this[nameof(WhiteChromaticityCoordinate)].As<Vector2D>(); } set { this["WhiteChromaticityCoordinate"] = value; } }
        public ETextureChromaticAdaptationMethod ChromaticAdaptationMethod { get { return (ETextureChromaticAdaptationMethod)this[nameof(ChromaticAdaptationMethod)].GetValue<int>(); } set { this[nameof(ChromaticAdaptationMethod)].SetValue<int>((int)value); } }
    }
    public class StreamingRenderAssetPrimitiveInfo : Object
    {
        public StreamingRenderAssetPrimitiveInfo(nint addr) : base(addr) { }
        public StreamableRenderAsset RenderAsset { get { return this[nameof(RenderAsset)].As<StreamableRenderAsset>(); } set { this["RenderAsset"] = value; } }
        public BoxSphereBounds Bounds { get { return this[nameof(Bounds)].As<BoxSphereBounds>(); } set { this["Bounds"] = value; } }
        public float TexelFactor { get { return this[nameof(TexelFactor)].GetValue<float>(); } set { this[nameof(TexelFactor)].SetValue<float>(value); } }
        public uint PackedRelativeBox { get { return this[nameof(PackedRelativeBox)].GetValue<uint>(); } set { this[nameof(PackedRelativeBox)].SetValue<uint>(value); } }
        public bool bAllowInvalidTexelFactorWhenUnregistered { get { return this[nameof(bAllowInvalidTexelFactorWhenUnregistered)].Flag; } set { this[nameof(bAllowInvalidTexelFactorWhenUnregistered)].Flag = value; } }
        public bool bAffectedByComponentScale { get { return this[nameof(bAffectedByComponentScale)].Flag; } set { this[nameof(bAffectedByComponentScale)].Flag = value; } }
    }
    public class TimelineEventEntry : Object
    {
        public TimelineEventEntry(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public Object EventFunc { get { return this[nameof(EventFunc)]; } set { this[nameof(EventFunc)] = value; } }
    }
    public class TimelineVectorTrack : Object
    {
        public TimelineVectorTrack(nint addr) : base(addr) { }
        public CurveVector VectorCurve { get { return this[nameof(VectorCurve)].As<CurveVector>(); } set { this["VectorCurve"] = value; } }
        public Object InterpFunc { get { return this[nameof(InterpFunc)]; } set { this[nameof(InterpFunc)] = value; } }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public Object VectorPropertyName { get { return this[nameof(VectorPropertyName)]; } set { this[nameof(VectorPropertyName)] = value; } }
    }
    public class TimelineFloatTrack : Object
    {
        public TimelineFloatTrack(nint addr) : base(addr) { }
        //public CurveFloat FloatCurve { get { return this[nameof(FloatCurve)].As<CurveFloat>(); } set { this["FloatCurve"] = value; } }
        public Object InterpFunc { get { return this[nameof(InterpFunc)]; } set { this[nameof(InterpFunc)] = value; } }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        //public Object FloatPropertyName { get { return this[nameof(FloatPropertyName)]; } set { this[nameof(FloatPropertyName)] = value; } }
    }
    public class TimelineLinearColorTrack : Object
    {
        public TimelineLinearColorTrack(nint addr) : base(addr) { }
        public CurveLinearColor LinearColorCurve { get { return this[nameof(LinearColorCurve)].As<CurveLinearColor>(); } set { this["LinearColorCurve"] = value; } }
        public Object InterpFunc { get { return this[nameof(InterpFunc)]; } set { this[nameof(InterpFunc)] = value; } }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public Object LinearColorPropertyName { get { return this[nameof(LinearColorPropertyName)]; } set { this[nameof(LinearColorPropertyName)] = value; } }
    }
    public class Timeline : Object
    {
        public Timeline(nint addr) : base(addr) { }
        public byte LengthMode { get { return this[nameof(LengthMode)].GetValue<byte>(); } set { this[nameof(LengthMode)].SetValue<byte>(value); } }
        public bool bLooping { get { return this[nameof(bLooping)].Flag; } set { this[nameof(bLooping)].Flag = value; } }
        public bool bReversePlayback { get { return this[nameof(bReversePlayback)].Flag; } set { this[nameof(bReversePlayback)].Flag = value; } }
        public bool bPlaying { get { return this[nameof(bPlaying)].Flag; } set { this[nameof(bPlaying)].Flag = value; } }
        public float Length { get { return this[nameof(Length)].GetValue<float>(); } set { this[nameof(Length)].SetValue<float>(value); } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public float Position { get { return this[nameof(Position)].GetValue<float>(); } set { this[nameof(Position)].SetValue<float>(value); } }
        public Array<TimelineEventEntry> Events { get { return new Array<TimelineEventEntry>(this[nameof(Events)].Address); } }
        public Array<TimelineVectorTrack> InterpVectors { get { return new Array<TimelineVectorTrack>(this[nameof(InterpVectors)].Address); } }
        public Array<TimelineFloatTrack> InterpFloats { get { return new Array<TimelineFloatTrack>(this[nameof(InterpFloats)].Address); } }
        public Array<TimelineLinearColorTrack> InterpLinearColors { get { return new Array<TimelineLinearColorTrack>(this[nameof(InterpLinearColors)].Address); } }
        public Object TimelinePostUpdateFunc { get { return this[nameof(TimelinePostUpdateFunc)]; } set { this[nameof(TimelinePostUpdateFunc)] = value; } }
        public Object TimelineFinishedFunc { get { return this[nameof(TimelineFinishedFunc)]; } set { this[nameof(TimelineFinishedFunc)] = value; } }
        public Object PropertySetObject { get { return this[nameof(PropertySetObject)]; } set { this[nameof(PropertySetObject)] = value; } }
        public Object DirectionPropertyName { get { return this[nameof(DirectionPropertyName)]; } set { this[nameof(DirectionPropertyName)] = value; } }
    }
    
    public class ActorContainerID : Object
    {
        public ActorContainerID(nint addr) : base(addr) { }
        public ulong ID { get { return this[nameof(ID)].GetValue<ulong>(); } set { this[nameof(ID)].SetValue<ulong>(value); } }
    }
    public class LightmassWorldInfoSettings : Object
    {
        public LightmassWorldInfoSettings(nint addr) : base(addr) { }
        public float StaticLightingLevelScale { get { return this[nameof(StaticLightingLevelScale)].GetValue<float>(); } set { this[nameof(StaticLightingLevelScale)].SetValue<float>(value); } }
        public int NumIndirectLightingBounces { get { return this[nameof(NumIndirectLightingBounces)].GetValue<int>(); } set { this[nameof(NumIndirectLightingBounces)].SetValue<int>(value); } }
        public int NumSkyLightingBounces { get { return this[nameof(NumSkyLightingBounces)].GetValue<int>(); } set { this[nameof(NumSkyLightingBounces)].SetValue<int>(value); } }
        public float IndirectLightingQuality { get { return this[nameof(IndirectLightingQuality)].GetValue<float>(); } set { this[nameof(IndirectLightingQuality)].SetValue<float>(value); } }
        public float IndirectLightingSmoothness { get { return this[nameof(IndirectLightingSmoothness)].GetValue<float>(); } set { this[nameof(IndirectLightingSmoothness)].SetValue<float>(value); } }
        public Color EnvironmentColor { get { return this[nameof(EnvironmentColor)].As<Color>(); } set { this["EnvironmentColor"] = value; } }
        public float EnvironmentIntensity { get { return this[nameof(EnvironmentIntensity)].GetValue<float>(); } set { this[nameof(EnvironmentIntensity)].SetValue<float>(value); } }
        public float EmissiveBoost { get { return this[nameof(EmissiveBoost)].GetValue<float>(); } set { this[nameof(EmissiveBoost)].SetValue<float>(value); } }
        public float DiffuseBoost { get { return this[nameof(DiffuseBoost)].GetValue<float>(); } set { this[nameof(DiffuseBoost)].SetValue<float>(value); } }
        public byte VolumeLightingMethod { get { return this[nameof(VolumeLightingMethod)].GetValue<byte>(); } set { this[nameof(VolumeLightingMethod)].SetValue<byte>(value); } }
        public bool bUseAmbientOcclusion { get { return this[nameof(bUseAmbientOcclusion)].Flag; } set { this[nameof(bUseAmbientOcclusion)].Flag = value; } }
        public bool bGenerateAmbientOcclusionMaterialMask { get { return this[nameof(bGenerateAmbientOcclusionMaterialMask)].Flag; } set { this[nameof(bGenerateAmbientOcclusionMaterialMask)].Flag = value; } }
        public bool bVisualizeMaterialDiffuse { get { return this[nameof(bVisualizeMaterialDiffuse)].Flag; } set { this[nameof(bVisualizeMaterialDiffuse)].Flag = value; } }
        public bool bVisualizeAmbientOcclusion { get { return this[nameof(bVisualizeAmbientOcclusion)].Flag; } set { this[nameof(bVisualizeAmbientOcclusion)].Flag = value; } }
        public bool bCompressLightmaps { get { return this[nameof(bCompressLightmaps)].Flag; } set { this[nameof(bCompressLightmaps)].Flag = value; } }
        public float VolumetricLightmapDetailCellSize { get { return this[nameof(VolumetricLightmapDetailCellSize)].GetValue<float>(); } set { this[nameof(VolumetricLightmapDetailCellSize)].SetValue<float>(value); } }
        public float VolumetricLightmapMaximumBrickMemoryMb { get { return this[nameof(VolumetricLightmapMaximumBrickMemoryMb)].GetValue<float>(); } set { this[nameof(VolumetricLightmapMaximumBrickMemoryMb)].SetValue<float>(value); } }
        public float VolumetricLightmapSphericalHarmonicSmoothing { get { return this[nameof(VolumetricLightmapSphericalHarmonicSmoothing)].GetValue<float>(); } set { this[nameof(VolumetricLightmapSphericalHarmonicSmoothing)].SetValue<float>(value); } }
        public float VolumeLightSamplePlacementScale { get { return this[nameof(VolumeLightSamplePlacementScale)].GetValue<float>(); } set { this[nameof(VolumeLightSamplePlacementScale)].SetValue<float>(value); } }
        public float DirectIlluminationOcclusionFraction { get { return this[nameof(DirectIlluminationOcclusionFraction)].GetValue<float>(); } set { this[nameof(DirectIlluminationOcclusionFraction)].SetValue<float>(value); } }
        public float IndirectIlluminationOcclusionFraction { get { return this[nameof(IndirectIlluminationOcclusionFraction)].GetValue<float>(); } set { this[nameof(IndirectIlluminationOcclusionFraction)].SetValue<float>(value); } }
        public float OcclusionExponent { get { return this[nameof(OcclusionExponent)].GetValue<float>(); } set { this[nameof(OcclusionExponent)].SetValue<float>(value); } }
        public float FullyOccludedSamplesFraction { get { return this[nameof(FullyOccludedSamplesFraction)].GetValue<float>(); } set { this[nameof(FullyOccludedSamplesFraction)].SetValue<float>(value); } }
        public float MaxOcclusionDistance { get { return this[nameof(MaxOcclusionDistance)].GetValue<float>(); } set { this[nameof(MaxOcclusionDistance)].SetValue<float>(value); } }
    }
    public class NetViewer : Object
    {
        public NetViewer(nint addr) : base(addr) { }
        public NetConnection Connection { get { return this[nameof(Connection)].As<NetConnection>(); } set { this["Connection"] = value; } }
        public Actor InViewer { get { return this[nameof(InViewer)].As<Actor>(); } set { this["InViewer"] = value; } }
        public Actor ViewTarget { get { return this[nameof(ViewTarget)].As<Actor>(); } set { this["ViewTarget"] = value; } }
        public Vector ViewLocation { get { return this[nameof(ViewLocation)].As<Vector>(); } set { this["ViewLocation"] = value; } }
        public Vector ViewDir { get { return this[nameof(ViewDir)].As<Vector>(); } set { this["ViewDir"] = value; } }
    }
    public class HierarchicalSimplification : Object
    {
        public HierarchicalSimplification(nint addr) : base(addr) { }
        public float TransitionScreenSize { get { return this[nameof(TransitionScreenSize)].GetValue<float>(); } set { this[nameof(TransitionScreenSize)].SetValue<float>(value); } }
        public float OverrideDrawDistance { get { return this[nameof(OverrideDrawDistance)].GetValue<float>(); } set { this[nameof(OverrideDrawDistance)].SetValue<float>(value); } }
        public bool bUseOverrideDrawDistance { get { return this[nameof(bUseOverrideDrawDistance)].Flag; } set { this[nameof(bUseOverrideDrawDistance)].Flag = value; } }
        public bool bAllowSpecificExclusion { get { return this[nameof(bAllowSpecificExclusion)].Flag; } set { this[nameof(bAllowSpecificExclusion)].Flag = value; } }
        public bool bOnlyGenerateClustersForVolumes { get { return this[nameof(bOnlyGenerateClustersForVolumes)].Flag; } set { this[nameof(bOnlyGenerateClustersForVolumes)].Flag = value; } }
        public bool bReusePreviousLevelClusters { get { return this[nameof(bReusePreviousLevelClusters)].Flag; } set { this[nameof(bReusePreviousLevelClusters)].Flag = value; } }
        public EHierarchicalSimplificationMethod SimplificationMethod { get { return (EHierarchicalSimplificationMethod)this[nameof(SimplificationMethod)].GetValue<int>(); } set { this[nameof(SimplificationMethod)].SetValue<int>((int)value); } }
        public MeshProxySettings ProxySetting { get { return this[nameof(ProxySetting)].As<MeshProxySettings>(); } set { this["ProxySetting"] = value; } }
        public MeshMergingSettings MergeSetting { get { return this[nameof(MergeSetting)].As<MeshMergingSettings>(); } set { this["MergeSetting"] = value; } }
        public MeshApproximationSettings ApproximateSettings { get { return this[nameof(ApproximateSettings)].As<MeshApproximationSettings>(); } set { this["ApproximateSettings"] = value; } }
        public float DesiredBoundRadius { get { return this[nameof(DesiredBoundRadius)].GetValue<float>(); } set { this[nameof(DesiredBoundRadius)].SetValue<float>(value); } }
        public float DesiredFillingPercentage { get { return this[nameof(DesiredFillingPercentage)].GetValue<float>(); } set { this[nameof(DesiredFillingPercentage)].SetValue<float>(value); } }
        public int MinNumberOfActorsToBuild { get { return this[nameof(MinNumberOfActorsToBuild)].GetValue<int>(); } set { this[nameof(MinNumberOfActorsToBuild)].SetValue<int>(value); } }
    }
    public class MeshApproximationSettings : Object
    {
        public MeshApproximationSettings(nint addr) : base(addr) { }
        public EMeshApproximationType OutputType { get { return (EMeshApproximationType)this[nameof(OutputType)].GetValue<int>(); } set { this[nameof(OutputType)].SetValue<int>((int)value); } }
        public float ApproximationAccuracy { get { return this[nameof(ApproximationAccuracy)].GetValue<float>(); } set { this[nameof(ApproximationAccuracy)].SetValue<float>(value); } }
        public int ClampVoxelDimension { get { return this[nameof(ClampVoxelDimension)].GetValue<int>(); } set { this[nameof(ClampVoxelDimension)].SetValue<int>(value); } }
        public bool bAttemptAutoThickening { get { return this[nameof(bAttemptAutoThickening)].Flag; } set { this[nameof(bAttemptAutoThickening)].Flag = value; } }
        public float TargetMinThicknessMultiplier { get { return this[nameof(TargetMinThicknessMultiplier)].GetValue<float>(); } set { this[nameof(TargetMinThicknessMultiplier)].SetValue<float>(value); } }
        public bool bIgnoreTinyParts { get { return this[nameof(bIgnoreTinyParts)].Flag; } set { this[nameof(bIgnoreTinyParts)].Flag = value; } }
        public float TinyPartSizeMultiplier { get { return this[nameof(TinyPartSizeMultiplier)].GetValue<float>(); } set { this[nameof(TinyPartSizeMultiplier)].SetValue<float>(value); } }
        public EMeshApproximationBaseCappingType BaseCapping { get { return (EMeshApproximationBaseCappingType)this[nameof(BaseCapping)].GetValue<int>(); } set { this[nameof(BaseCapping)].SetValue<int>((int)value); } }
        public float WindingThreshold { get { return this[nameof(WindingThreshold)].GetValue<float>(); } set { this[nameof(WindingThreshold)].SetValue<float>(value); } }
        public bool bFillGaps { get { return this[nameof(bFillGaps)].Flag; } set { this[nameof(bFillGaps)].Flag = value; } }
        public float GapDistance { get { return this[nameof(GapDistance)].GetValue<float>(); } set { this[nameof(GapDistance)].SetValue<float>(value); } }
        public EOccludedGeometryFilteringPolicy OcclusionMethod { get { return (EOccludedGeometryFilteringPolicy)this[nameof(OcclusionMethod)].GetValue<int>(); } set { this[nameof(OcclusionMethod)].SetValue<int>((int)value); } }
        public bool bOccludeFromBottom { get { return this[nameof(bOccludeFromBottom)].Flag; } set { this[nameof(bOccludeFromBottom)].Flag = value; } }
        public EMeshApproximationSimplificationPolicy SimplifyMethod { get { return (EMeshApproximationSimplificationPolicy)this[nameof(SimplifyMethod)].GetValue<int>(); } set { this[nameof(SimplifyMethod)].SetValue<int>((int)value); } }
        public int TargetTriCount { get { return this[nameof(TargetTriCount)].GetValue<int>(); } set { this[nameof(TargetTriCount)].SetValue<int>(value); } }
        public float TrianglesPerM { get { return this[nameof(TrianglesPerM)].GetValue<float>(); } set { this[nameof(TrianglesPerM)].SetValue<float>(value); } }
        public float GeometricDeviation { get { return this[nameof(GeometricDeviation)].GetValue<float>(); } set { this[nameof(GeometricDeviation)].SetValue<float>(value); } }
        public EMeshApproximationGroundPlaneClippingPolicy GroundClipping { get { return (EMeshApproximationGroundPlaneClippingPolicy)this[nameof(GroundClipping)].GetValue<int>(); } set { this[nameof(GroundClipping)].SetValue<int>((int)value); } }
        public float GroundClippingZHeight { get { return this[nameof(GroundClippingZHeight)].GetValue<float>(); } set { this[nameof(GroundClippingZHeight)].SetValue<float>(value); } }
        public bool bEstimateHardNormals { get { return this[nameof(bEstimateHardNormals)].Flag; } set { this[nameof(bEstimateHardNormals)].Flag = value; } }
        public float HardNormalAngle { get { return this[nameof(HardNormalAngle)].GetValue<float>(); } set { this[nameof(HardNormalAngle)].SetValue<float>(value); } }
        public EMeshApproximationUVGenerationPolicy UVGenerationMethod { get { return (EMeshApproximationUVGenerationPolicy)this[nameof(UVGenerationMethod)].GetValue<int>(); } set { this[nameof(UVGenerationMethod)].SetValue<int>((int)value); } }
        public int InitialPatchCount { get { return this[nameof(InitialPatchCount)].GetValue<int>(); } set { this[nameof(InitialPatchCount)].SetValue<int>(value); } }
        public float CurvatureAlignment { get { return this[nameof(CurvatureAlignment)].GetValue<float>(); } set { this[nameof(CurvatureAlignment)].SetValue<float>(value); } }
        public float MergingThreshold { get { return this[nameof(MergingThreshold)].GetValue<float>(); } set { this[nameof(MergingThreshold)].SetValue<float>(value); } }
        public float MaxAngleDeviation { get { return this[nameof(MaxAngleDeviation)].GetValue<float>(); } set { this[nameof(MaxAngleDeviation)].SetValue<float>(value); } }
        public bool bGenerateNaniteEnabledMesh { get { return this[nameof(bGenerateNaniteEnabledMesh)].Flag; } set { this[nameof(bGenerateNaniteEnabledMesh)].Flag = value; } }
        public float NaniteProxyTrianglePercent { get { return this[nameof(NaniteProxyTrianglePercent)].GetValue<float>(); } set { this[nameof(NaniteProxyTrianglePercent)].SetValue<float>(value); } }
        public bool bSupportRayTracing { get { return this[nameof(bSupportRayTracing)].Flag; } set { this[nameof(bSupportRayTracing)].Flag = value; } }
        public bool bAllowDistanceField { get { return this[nameof(bAllowDistanceField)].Flag; } set { this[nameof(bAllowDistanceField)].Flag = value; } }
        public int MultiSamplingAA { get { return this[nameof(MultiSamplingAA)].GetValue<int>(); } set { this[nameof(MultiSamplingAA)].SetValue<int>(value); } }
        public int RenderCaptureResolution { get { return this[nameof(RenderCaptureResolution)].GetValue<int>(); } set { this[nameof(RenderCaptureResolution)].SetValue<int>(value); } }
        public MaterialProxySettings MaterialSettings { get { return this[nameof(MaterialSettings)].As<MaterialProxySettings>(); } set { this["MaterialSettings"] = value; } }
        public float CaptureFieldOfView { get { return this[nameof(CaptureFieldOfView)].GetValue<float>(); } set { this[nameof(CaptureFieldOfView)].SetValue<float>(value); } }
        public float NearPlaneDist { get { return this[nameof(NearPlaneDist)].GetValue<float>(); } set { this[nameof(NearPlaneDist)].SetValue<float>(value); } }
        public bool bUseRenderLODMeshes { get { return this[nameof(bUseRenderLODMeshes)].Flag; } set { this[nameof(bUseRenderLODMeshes)].Flag = value; } }
        public bool bEnableSimplifyPrePass { get { return this[nameof(bEnableSimplifyPrePass)].Flag; } set { this[nameof(bEnableSimplifyPrePass)].Flag = value; } }
        public bool bEnableParallelBaking { get { return this[nameof(bEnableParallelBaking)].Flag; } set { this[nameof(bEnableParallelBaking)].Flag = value; } }
        public bool bPrintDebugMessages { get { return this[nameof(bPrintDebugMessages)].Flag; } set { this[nameof(bPrintDebugMessages)].Flag = value; } }
        public bool bEmitFullDebugMesh { get { return this[nameof(bEmitFullDebugMesh)].Flag; } set { this[nameof(bEmitFullDebugMesh)].Flag = value; } }
    }
    public class MeshMergingSettings : Object
    {
        public MeshMergingSettings(nint addr) : base(addr) { }
        public int TargetLightMapResolution { get { return this[nameof(TargetLightMapResolution)].GetValue<int>(); } set { this[nameof(TargetLightMapResolution)].SetValue<int>(value); } }
        public EUVOutput OutputUVs { get { return (EUVOutput)this[nameof(OutputUVs)].GetValue<int>(); } set { this[nameof(OutputUVs)].SetValue<int>((int)value); } }
        public MaterialProxySettings MaterialSettings { get { return this[nameof(MaterialSettings)].As<MaterialProxySettings>(); } set { this["MaterialSettings"] = value; } }
        public int GutterSize { get { return this[nameof(GutterSize)].GetValue<int>(); } set { this[nameof(GutterSize)].SetValue<int>(value); } }
        public EMeshLODSelectionType LODSelectionType { get { return (EMeshLODSelectionType)this[nameof(LODSelectionType)].GetValue<int>(); } set { this[nameof(LODSelectionType)].SetValue<int>((int)value); } }
        public int SpecificLOD { get { return this[nameof(SpecificLOD)].GetValue<int>(); } set { this[nameof(SpecificLOD)].SetValue<int>(value); } }
        public bool bGenerateLightMapUV { get { return this[nameof(bGenerateLightMapUV)].Flag; } set { this[nameof(bGenerateLightMapUV)].Flag = value; } }
        public bool bComputedLightMapResolution { get { return this[nameof(bComputedLightMapResolution)].Flag; } set { this[nameof(bComputedLightMapResolution)].Flag = value; } }
        public bool bPivotPointAtZero { get { return this[nameof(bPivotPointAtZero)].Flag; } set { this[nameof(bPivotPointAtZero)].Flag = value; } }
        public bool bMergePhysicsData { get { return this[nameof(bMergePhysicsData)].Flag; } set { this[nameof(bMergePhysicsData)].Flag = value; } }
        public bool bMergeMaterials { get { return this[nameof(bMergeMaterials)].Flag; } set { this[nameof(bMergeMaterials)].Flag = value; } }
        public bool bCreateMergedMaterial { get { return this[nameof(bCreateMergedMaterial)].Flag; } set { this[nameof(bCreateMergedMaterial)].Flag = value; } }
        public bool bBakeVertexDataToMesh { get { return this[nameof(bBakeVertexDataToMesh)].Flag; } set { this[nameof(bBakeVertexDataToMesh)].Flag = value; } }
        public bool bUseVertexDataForBakingMaterial { get { return this[nameof(bUseVertexDataForBakingMaterial)].Flag; } set { this[nameof(bUseVertexDataForBakingMaterial)].Flag = value; } }
        public bool bUseTextureBinning { get { return this[nameof(bUseTextureBinning)].Flag; } set { this[nameof(bUseTextureBinning)].Flag = value; } }
        public bool bReuseMeshLightmapUVs { get { return this[nameof(bReuseMeshLightmapUVs)].Flag; } set { this[nameof(bReuseMeshLightmapUVs)].Flag = value; } }
        public bool bMergeEquivalentMaterials { get { return this[nameof(bMergeEquivalentMaterials)].Flag; } set { this[nameof(bMergeEquivalentMaterials)].Flag = value; } }
        public bool bUseLandscapeCulling { get { return this[nameof(bUseLandscapeCulling)].Flag; } set { this[nameof(bUseLandscapeCulling)].Flag = value; } }
        public bool bIncludeImposters { get { return this[nameof(bIncludeImposters)].Flag; } set { this[nameof(bIncludeImposters)].Flag = value; } }
        public bool bSupportRayTracing { get { return this[nameof(bSupportRayTracing)].Flag; } set { this[nameof(bSupportRayTracing)].Flag = value; } }
        public bool bAllowDistanceField { get { return this[nameof(bAllowDistanceField)].Flag; } set { this[nameof(bAllowDistanceField)].Flag = value; } }
        public MeshNaniteSettings NaniteSettings { get { return this[nameof(NaniteSettings)].As<MeshNaniteSettings>(); } set { this["NaniteSettings"] = value; } }
    }
    public class MeshProxySettings : Object
    {
        public MeshProxySettings(nint addr) : base(addr) { }
        public int ScreenSize { get { return this[nameof(ScreenSize)].GetValue<int>(); } set { this[nameof(ScreenSize)].SetValue<int>(value); } }
        public float VoxelSize { get { return this[nameof(VoxelSize)].GetValue<float>(); } set { this[nameof(VoxelSize)].SetValue<float>(value); } }
        public MaterialProxySettings MaterialSettings { get { return this[nameof(MaterialSettings)].As<MaterialProxySettings>(); } set { this["MaterialSettings"] = value; } }
        public float MergeDistance { get { return this[nameof(MergeDistance)].GetValue<float>(); } set { this[nameof(MergeDistance)].SetValue<float>(value); } }
        public Color UnresolvedGeometryColor { get { return this[nameof(UnresolvedGeometryColor)].As<Color>(); } set { this["UnresolvedGeometryColor"] = value; } }
        public float MaxRayCastDist { get { return this[nameof(MaxRayCastDist)].GetValue<float>(); } set { this[nameof(MaxRayCastDist)].SetValue<float>(value); } }
        public float HardAngleThreshold { get { return this[nameof(HardAngleThreshold)].GetValue<float>(); } set { this[nameof(HardAngleThreshold)].SetValue<float>(value); } }
        public int LightMapResolution { get { return this[nameof(LightMapResolution)].GetValue<int>(); } set { this[nameof(LightMapResolution)].SetValue<int>(value); } }
        public byte NormalCalculationMethod { get { return this[nameof(NormalCalculationMethod)].GetValue<byte>(); } set { this[nameof(NormalCalculationMethod)].SetValue<byte>(value); } }
        public byte LandscapeCullingPrecision { get { return this[nameof(LandscapeCullingPrecision)].GetValue<byte>(); } set { this[nameof(LandscapeCullingPrecision)].SetValue<byte>(value); } }
        public bool bCalculateCorrectLODModel { get { return this[nameof(bCalculateCorrectLODModel)].Flag; } set { this[nameof(bCalculateCorrectLODModel)].Flag = value; } }
        public bool bOverrideVoxelSize { get { return this[nameof(bOverrideVoxelSize)].Flag; } set { this[nameof(bOverrideVoxelSize)].Flag = value; } }
        public bool bOverrideTransferDistance { get { return this[nameof(bOverrideTransferDistance)].Flag; } set { this[nameof(bOverrideTransferDistance)].Flag = value; } }
        public bool bUseHardAngleThreshold { get { return this[nameof(bUseHardAngleThreshold)].Flag; } set { this[nameof(bUseHardAngleThreshold)].Flag = value; } }
        public bool bComputeLightMapResolution { get { return this[nameof(bComputeLightMapResolution)].Flag; } set { this[nameof(bComputeLightMapResolution)].Flag = value; } }
        public bool bRecalculateNormals { get { return this[nameof(bRecalculateNormals)].Flag; } set { this[nameof(bRecalculateNormals)].Flag = value; } }
        public bool bUseLandscapeCulling { get { return this[nameof(bUseLandscapeCulling)].Flag; } set { this[nameof(bUseLandscapeCulling)].Flag = value; } }
        public bool bSupportRayTracing { get { return this[nameof(bSupportRayTracing)].Flag; } set { this[nameof(bSupportRayTracing)].Flag = value; } }
        public bool bAllowDistanceField { get { return this[nameof(bAllowDistanceField)].Flag; } set { this[nameof(bAllowDistanceField)].Flag = value; } }
        public bool bReuseMeshLightmapUVs { get { return this[nameof(bReuseMeshLightmapUVs)].Flag; } set { this[nameof(bReuseMeshLightmapUVs)].Flag = value; } }
        public bool bGroupIdenticalMeshesForBaking { get { return this[nameof(bGroupIdenticalMeshesForBaking)].Flag; } set { this[nameof(bGroupIdenticalMeshesForBaking)].Flag = value; } }
        public bool bCreateCollision { get { return this[nameof(bCreateCollision)].Flag; } set { this[nameof(bCreateCollision)].Flag = value; } }
        public bool bAllowVertexColors { get { return this[nameof(bAllowVertexColors)].Flag; } set { this[nameof(bAllowVertexColors)].Flag = value; } }
        public bool bGenerateLightmapUVs { get { return this[nameof(bGenerateLightmapUVs)].Flag; } set { this[nameof(bGenerateLightmapUVs)].Flag = value; } }
        public MeshNaniteSettings NaniteSettings { get { return this[nameof(NaniteSettings)].As<MeshNaniteSettings>(); } set { this["NaniteSettings"] = value; } }
    }
    public class BroadphaseSettings : Object
    {
        public BroadphaseSettings(nint addr) : base(addr) { }
        public bool bUseMBPOnClient { get { return this[nameof(bUseMBPOnClient)].Flag; } set { this[nameof(bUseMBPOnClient)].Flag = value; } }
        public bool bUseMBPOnServer { get { return this[nameof(bUseMBPOnServer)].Flag; } set { this[nameof(bUseMBPOnServer)].Flag = value; } }
        public bool bUseMBPOuterBounds { get { return this[nameof(bUseMBPOuterBounds)].Flag; } set { this[nameof(bUseMBPOuterBounds)].Flag = value; } }
        public Box MBPBounds { get { return this[nameof(MBPBounds)].As<Box>(); } set { this["MBPBounds"] = value; } }
        public Box MBPOuterBounds { get { return this[nameof(MBPOuterBounds)].As<Box>(); } set { this["MBPOuterBounds"] = value; } }
        public uint MBPNumSubdivs { get { return this[nameof(MBPNumSubdivs)].GetValue<uint>(); } set { this[nameof(MBPNumSubdivs)].SetValue<uint>(value); } }
    }
    public class AttributeKey : Object
    {
        public AttributeKey(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
    }
    public class AttributeCurve : IndexedCurve
    {
        public AttributeCurve(nint addr) : base(addr) { }
        public Array<AttributeKey> Keys { get { return new Array<AttributeKey>(this[nameof(Keys)].Address); } }
        public SoftObjectPath ScriptStructPath { get { return this[nameof(ScriptStructPath)].As<SoftObjectPath>(); } set { this["ScriptStructPath"] = value; } }
        public ScriptStruct ScriptStruct { get { return this[nameof(ScriptStruct)].As<ScriptStruct>(); } set { this["ScriptStruct"] = value; } }
        public bool bShouldInterpolate { get { return this[nameof(bShouldInterpolate)].Flag; } set { this[nameof(bShouldInterpolate)].Flag = value; } }
    }
    public class QuartzPulseOverrideStep : Object
    {
        public QuartzPulseOverrideStep(nint addr) : base(addr) { }
        public int NumberOfPulses { get { return this[nameof(NumberOfPulses)].GetValue<int>(); } set { this[nameof(NumberOfPulses)].SetValue<int>(value); } }
        public EQuartzCommandQuantization PulseDuration { get { return (EQuartzCommandQuantization)this[nameof(PulseDuration)].GetValue<int>(); } set { this[nameof(PulseDuration)].SetValue<int>((int)value); } }
    }
    public class QuartzTimeSignature : Object
    {
        public QuartzTimeSignature(nint addr) : base(addr) { }
        public int NumBeats { get { return this[nameof(NumBeats)].GetValue<int>(); } set { this[nameof(NumBeats)].SetValue<int>(value); } }
        public EQuartzTimeSignatureQuantization BeatType { get { return (EQuartzTimeSignatureQuantization)this[nameof(BeatType)].GetValue<int>(); } set { this[nameof(BeatType)].SetValue<int>((int)value); } }
        public Array<QuartzPulseOverrideStep> OptionalPulseOverride { get { return new Array<QuartzPulseOverrideStep>(this[nameof(OptionalPulseOverride)].Address); } }
    }
    public class QuartzTransportTimeStamp : Object
    {
        public QuartzTransportTimeStamp(nint addr) : base(addr) { }
        public int Bars { get { return this[nameof(Bars)].GetValue<int>(); } set { this[nameof(Bars)].SetValue<int>(value); } }
        public int Beat { get { return this[nameof(Beat)].GetValue<int>(); } set { this[nameof(Beat)].SetValue<int>(value); } }
        public float BeatFraction { get { return this[nameof(BeatFraction)].GetValue<float>(); } set { this[nameof(BeatFraction)].SetValue<float>(value); } }
        public float Seconds { get { return this[nameof(Seconds)].GetValue<float>(); } set { this[nameof(Seconds)].SetValue<float>(value); } }
    }
    public class QuartzClockSettings : Object
    {
        public QuartzClockSettings(nint addr) : base(addr) { }
        public QuartzTimeSignature TimeSignature { get { return this[nameof(TimeSignature)].As<QuartzTimeSignature>(); } set { this["TimeSignature"] = value; } }
        public bool bIgnoreLevelChange { get { return this[nameof(bIgnoreLevelChange)].Flag; } set { this[nameof(bIgnoreLevelChange)].Flag = value; } }
    }
    public class QuartzQuantizationBoundary : Object
    {
        public QuartzQuantizationBoundary(nint addr) : base(addr) { }
        public EQuartzCommandQuantization Quantization { get { return (EQuartzCommandQuantization)this[nameof(Quantization)].GetValue<int>(); } set { this[nameof(Quantization)].SetValue<int>((int)value); } }
        public float Multiplier { get { return this[nameof(Multiplier)].GetValue<float>(); } set { this[nameof(Multiplier)].SetValue<float>(value); } }
        public EQuarztQuantizationReference CountingReferencePoint { get { return (EQuarztQuantizationReference)this[nameof(CountingReferencePoint)].GetValue<int>(); } set { this[nameof(CountingReferencePoint)].SetValue<int>((int)value); } }
        public bool bFireOnClockStart { get { return this[nameof(bFireOnClockStart)].Flag; } set { this[nameof(bFireOnClockStart)].Flag = value; } }
        public bool bCancelCommandIfClockIsNotRunning { get { return this[nameof(bCancelCommandIfClockIsNotRunning)].Flag; } set { this[nameof(bCancelCommandIfClockIsNotRunning)].Flag = value; } }
        public bool bResetClockOnQueued { get { return this[nameof(bResetClockOnQueued)].Flag; } set { this[nameof(bResetClockOnQueued)].Flag = value; } }
        public bool bResumeClockOnQueued { get { return this[nameof(bResumeClockOnQueued)].Flag; } set { this[nameof(bResumeClockOnQueued)].Flag = value; } }
    }
    public class NavAvoidanceData : Object
    {
        public NavAvoidanceData(nint addr) : base(addr) { }
    }
    public class NavDataConfig : NavAgentProperties
    {
        public NavDataConfig(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Vector DefaultQueryExtent { get { return this[nameof(DefaultQueryExtent)].As<Vector>(); } set { this["DefaultQueryExtent"] = value; } }
        public Object NavigationDataClass { get { return this[nameof(NavigationDataClass)]; } set { this[nameof(NavigationDataClass)] = value; } }
        public Object NavDataClass { get { return this[nameof(NavDataClass)]; } set { this[nameof(NavDataClass)] = value; } }
    }
    public class BlendSampleData : Object
    {
        public BlendSampleData(nint addr) : base(addr) { }
        public int SampleDataIndex { get { return this[nameof(SampleDataIndex)].GetValue<int>(); } set { this[nameof(SampleDataIndex)].SetValue<int>(value); } }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public float TotalWeight { get { return this[nameof(TotalWeight)].GetValue<float>(); } set { this[nameof(TotalWeight)].SetValue<float>(value); } }
        public float WeightRate { get { return this[nameof(WeightRate)].GetValue<float>(); } set { this[nameof(WeightRate)].SetValue<float>(value); } }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float PreviousTime { get { return this[nameof(PreviousTime)].GetValue<float>(); } set { this[nameof(PreviousTime)].SetValue<float>(value); } }
        public float SamplePlayRate { get { return this[nameof(SamplePlayRate)].GetValue<float>(); } set { this[nameof(SamplePlayRate)].SetValue<float>(value); } }
    }
    public class BlendFilter : Object
    {
        public BlendFilter(nint addr) : base(addr) { }
    }
    public class AnimTickRecord : Object
    {
        public AnimTickRecord(nint addr) : base(addr) { }
        public AnimationAsset SourceAsset { get { return this[nameof(SourceAsset)].As<AnimationAsset>(); } set { this["SourceAsset"] = value; } }
    }
    public class AnimGroupInstance : Object
    {
        public AnimGroupInstance(nint addr) : base(addr) { }
    }
    public class AnimationGroupReference : Object
    {
        public AnimationGroupReference(nint addr) : base(addr) { }
        public EAnimSyncMethod Method { get { return (EAnimSyncMethod)this[nameof(Method)].GetValue<int>(); } set { this[nameof(Method)].SetValue<int>((int)value); } }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public byte GroupRole { get { return this[nameof(GroupRole)].GetValue<byte>(); } set { this[nameof(GroupRole)].SetValue<byte>(value); } }
    }
    public class EncounteredStateMachineStack : Object
    {
        public EncounteredStateMachineStack(nint addr) : base(addr) { }
    }
    public class AnimationRecordingSettings : Object
    {
        public AnimationRecordingSettings(nint addr) : base(addr) { }
        public bool bRecordInWorldSpace { get { return this[nameof(bRecordInWorldSpace)].Flag; } set { this[nameof(bRecordInWorldSpace)].Flag = value; } }
        public bool bRemoveRootAnimation { get { return this[nameof(bRemoveRootAnimation)].Flag; } set { this[nameof(bRemoveRootAnimation)].Flag = value; } }
        public bool bAutoSaveAsset { get { return this[nameof(bAutoSaveAsset)].Flag; } set { this[nameof(bAutoSaveAsset)].Flag = value; } }
        public FrameRate SampleFrameRate { get { return this[nameof(SampleFrameRate)].As<FrameRate>(); } set { this["SampleFrameRate"] = value; } }
        public float Length { get { return this[nameof(Length)].GetValue<float>(); } set { this[nameof(Length)].SetValue<float>(value); } }
        public EAnimInterpolationType Interpolation { get { return (EAnimInterpolationType)this[nameof(Interpolation)].GetValue<int>(); } set { this[nameof(Interpolation)].SetValue<int>((int)value); } }
        public byte InterpMode { get { return this[nameof(InterpMode)].GetValue<byte>(); } set { this[nameof(InterpMode)].SetValue<byte>(value); } }
        public byte TangentMode { get { return this[nameof(TangentMode)].GetValue<byte>(); } set { this[nameof(TangentMode)].SetValue<byte>(value); } }
        public bool bRecordTransforms { get { return this[nameof(bRecordTransforms)].Flag; } set { this[nameof(bRecordTransforms)].Flag = value; } }
        public bool bRecordMorphTargets { get { return this[nameof(bRecordMorphTargets)].Flag; } set { this[nameof(bRecordMorphTargets)].Flag = value; } }
        public bool bRecordAttributeCurves { get { return this[nameof(bRecordAttributeCurves)].Flag; } set { this[nameof(bRecordAttributeCurves)].Flag = value; } }
        public bool bRecordMaterialCurves { get { return this[nameof(bRecordMaterialCurves)].Flag; } set { this[nameof(bRecordMaterialCurves)].Flag = value; } }
        public Array<Object> IncludeAnimationNames { get { return new Array<Object>(this[nameof(IncludeAnimationNames)].Address); } }
        public Array<Object> ExcludeAnimationNames { get { return new Array<Object>(this[nameof(ExcludeAnimationNames)].Address); } }
    }
    public class StateMachineStateDebugData : Object
    {
        public StateMachineStateDebugData(nint addr) : base(addr) { }
    }
    public class StateMachineDebugData : Object
    {
        public StateMachineDebugData(nint addr) : base(addr) { }
    }
    public class AnimationFrameSnapshot : Object
    {
        public AnimationFrameSnapshot(nint addr) : base(addr) { }
    }
    public class AnimBlueprintDebugData : Object
    {
        public AnimBlueprintDebugData(nint addr) : base(addr) { }
    }
    public class AnimBlueprintMutableData : Object
    {
        public AnimBlueprintMutableData(nint addr) : base(addr) { }
    }
    public class AnimBlueprintConstantData : Object
    {
        public AnimBlueprintConstantData(nint addr) : base(addr) { }
    }
    public class AnimBlueprintFunctionData : Object
    {
        public AnimBlueprintFunctionData(nint addr) : base(addr) { }
        public Object OutputPoseNodeProperty { get { return this[nameof(OutputPoseNodeProperty)]; } set { this[nameof(OutputPoseNodeProperty)] = value; } }
        public Array<Object> InputPoseNodeProperties { get { return new Array<Object>(this[nameof(InputPoseNodeProperties)].Address); } }
        public Array<Object> InputProperties { get { return new Array<Object>(this[nameof(InputProperties)].Address); } }
    }
    public class AnimBlueprintFunction : Object
    {
        public AnimBlueprintFunction(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int OutputPoseNodeIndex { get { return this[nameof(OutputPoseNodeIndex)].GetValue<int>(); } set { this[nameof(OutputPoseNodeIndex)].SetValue<int>(value); } }
        public Array<Object> InputPoseNames { get { return new Array<Object>(this[nameof(InputPoseNames)].Address); } }
        public Array<int> InputPoseNodeIndices { get { return new Array<int>(this[nameof(InputPoseNodeIndices)].Address); } }
        public bool bImplemented { get { return this[nameof(bImplemented)].Flag; } set { this[nameof(bImplemented)].Flag = value; } }
    }
    public class CachedPoseIndices : Object
    {
        public CachedPoseIndices(nint addr) : base(addr) { }
        public Array<int> OrderedSavedPoseNodeIndices { get { return new Array<int>(this[nameof(OrderedSavedPoseNodeIndices)].Address); } }
    }
    public class GraphAssetPlayerInformation : Object
    {
        public GraphAssetPlayerInformation(nint addr) : base(addr) { }
        public Array<int> PlayerNodeIndices { get { return new Array<int>(this[nameof(PlayerNodeIndices)].Address); } }
    }
    public class AnimGraphBlendOptions : Object
    {
        public AnimGraphBlendOptions(nint addr) : base(addr) { }
        public float BlendInTime { get { return this[nameof(BlendInTime)].GetValue<float>(); } set { this[nameof(BlendInTime)].SetValue<float>(value); } }
        public BlendProfile BlendInProfile { get { return this[nameof(BlendInProfile)].As<BlendProfile>(); } set { this["BlendInProfile"] = value; } }
        public float BlendOutTime { get { return this[nameof(BlendOutTime)].GetValue<float>(); } set { this[nameof(BlendOutTime)].SetValue<float>(value); } }
        public BlendProfile BlendOutProfile { get { return this[nameof(BlendOutProfile)].As<BlendProfile>(); } set { this["BlendOutProfile"] = value; } }
    }
    public class RootMotionExtractionStep : Object
    {
        public RootMotionExtractionStep(nint addr) : base(addr) { }
        public AnimSequence AnimSequence { get { return this[nameof(AnimSequence)].As<AnimSequence>(); } set { this["AnimSequence"] = value; } }
        public float StartPosition { get { return this[nameof(StartPosition)].GetValue<float>(); } set { this[nameof(StartPosition)].SetValue<float>(value); } }
        public float EndPosition { get { return this[nameof(EndPosition)].GetValue<float>(); } set { this[nameof(EndPosition)].SetValue<float>(value); } }
    }
    public class AnimSegment : Object
    {
        public AnimSegment(nint addr) : base(addr) { }
        public AnimSequenceBase AnimReference { get { return this[nameof(AnimReference)].As<AnimSequenceBase>(); } set { this["AnimReference"] = value; } }
        public float StartPos { get { return this[nameof(StartPos)].GetValue<float>(); } set { this[nameof(StartPos)].SetValue<float>(value); } }
        public float AnimStartTime { get { return this[nameof(AnimStartTime)].GetValue<float>(); } set { this[nameof(AnimStartTime)].SetValue<float>(value); } }
        public float AnimEndTime { get { return this[nameof(AnimEndTime)].GetValue<float>(); } set { this[nameof(AnimEndTime)].SetValue<float>(value); } }
        public float AnimPlayRate { get { return this[nameof(AnimPlayRate)].GetValue<float>(); } set { this[nameof(AnimPlayRate)].SetValue<float>(value); } }
        public int LoopingCount { get { return this[nameof(LoopingCount)].GetValue<int>(); } set { this[nameof(LoopingCount)].SetValue<int>(value); } }
    }
    public class AnimTrack : Object
    {
        public AnimTrack(nint addr) : base(addr) { }
        public Array<AnimSegment> AnimSegments { get { return new Array<AnimSegment>(this[nameof(AnimSegments)].Address); } }
    }
    public class BoneAnimationTrack : Object
    {
        public BoneAnimationTrack(nint addr) : base(addr) { }
        public RawAnimSequenceTrack InternalTrackData { get { return this[nameof(InternalTrackData)].As<RawAnimSequenceTrack>(); } set { this["InternalTrackData"] = value; } }
        public int BoneTreeIndex { get { return this[nameof(BoneTreeIndex)].GetValue<int>(); } set { this[nameof(BoneTreeIndex)].SetValue<int>(value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class AnimationCurveData : Object
    {
        public AnimationCurveData(nint addr) : base(addr) { }
        //public Array<FloatCurve> FloatCurves { get { return new Array<FloatCurve>(this[nameof(FloatCurves)].Address); } }
        public Array<TransformCurve> TransformCurves { get { return new Array<TransformCurve>(this[nameof(TransformCurves)].Address); } }
    }
    public class AnimatedBoneAttribute : Object
    {
        public AnimatedBoneAttribute(nint addr) : base(addr) { }
        public AnimationAttributeIdentifier Identifier { get { return this[nameof(Identifier)].As<AnimationAttributeIdentifier>(); } set { this["Identifier"] = value; } }
        public AttributeCurve Curve { get { return this[nameof(Curve)].As<AttributeCurve>(); } set { this["Curve"] = value; } }
    }
    public class AnimExecutionContext : Object
    {
        public AnimExecutionContext(nint addr) : base(addr) { }
    }
    public class AnimInitializationContext : AnimExecutionContext
    {
        public AnimInitializationContext(nint addr) : base(addr) { }
    }
    public class AnimUpdateContext : AnimExecutionContext
    {
        public AnimUpdateContext(nint addr) : base(addr) { }
    }
    public class AnimPoseContext : AnimExecutionContext
    {
        public AnimPoseContext(nint addr) : base(addr) { }
    }
    public class AnimComponentSpacePoseContext : AnimExecutionContext
    {
        public AnimComponentSpacePoseContext(nint addr) : base(addr) { }
    }
    public class A2Pose : Object
    {
        public A2Pose(nint addr) : base(addr) { }
        public Array<Transform> Bones { get { return new Array<Transform>(this[nameof(Bones)].Address); } }
    }
    public class A2CSPose : A2Pose
    {
        public A2CSPose(nint addr) : base(addr) { }
        public Array<byte> ComponentSpaceFlags { get { return new Array<byte>(this[nameof(ComponentSpaceFlags)].Address); } }
    }
    public class SlotEvaluationPose : Object
    {
        public SlotEvaluationPose(nint addr) : base(addr) { }
        public byte AdditiveType { get { return this[nameof(AdditiveType)].GetValue<byte>(); } set { this[nameof(AdditiveType)].SetValue<byte>(value); } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class CompositeSection : AnimLinkableElement
    {
        public CompositeSection(nint addr) : base(addr) { }
        public Object SectionName { get { return this[nameof(SectionName)]; } set { this[nameof(SectionName)] = value; } }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public Object NextSectionName { get { return this[nameof(NextSectionName)]; } set { this[nameof(NextSectionName)] = value; } }
        public Array<AnimMetaData> MetaData { get { return new Array<AnimMetaData>(this[nameof(MetaData)].Address); } }
    }
    public class SlotAnimationTrack : Object
    {
        public SlotAnimationTrack(nint addr) : base(addr) { }
        public Object SlotName { get { return this[nameof(SlotName)]; } set { this[nameof(SlotName)] = value; } }
        public AnimTrack AnimTrack { get { return this[nameof(AnimTrack)].As<AnimTrack>(); } set { this["AnimTrack"] = value; } }
    }
    public class BranchingPoint : AnimLinkableElement
    {
        public BranchingPoint(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public float DisplayTime { get { return this[nameof(DisplayTime)].GetValue<float>(); } set { this[nameof(DisplayTime)].SetValue<float>(value); } }
        public float TriggerTimeOffset { get { return this[nameof(TriggerTimeOffset)].GetValue<float>(); } set { this[nameof(TriggerTimeOffset)].SetValue<float>(value); } }
    }
    public class BranchingPointMarker : Object
    {
        public BranchingPointMarker(nint addr) : base(addr) { }
        public int NotifyIndex { get { return this[nameof(NotifyIndex)].GetValue<int>(); } set { this[nameof(NotifyIndex)].SetValue<int>(value); } }
        public float TriggerTime { get { return this[nameof(TriggerTime)].GetValue<float>(); } set { this[nameof(TriggerTime)].SetValue<float>(value); } }
        public byte NotifyEventType { get { return this[nameof(NotifyEventType)].GetValue<byte>(); } set { this[nameof(NotifyEventType)].SetValue<byte>(value); } }
    }
    public class AnimMontageInstance : Object
    {
        public AnimMontageInstance(nint addr) : base(addr) { }
        public AnimMontage Montage { get { return this[nameof(Montage)].As<AnimMontage>(); } set { this["Montage"] = value; } }
        public bool bPlaying { get { return this[nameof(bPlaying)].Flag; } set { this[nameof(bPlaying)].Flag = value; } }
        public float DefaultBlendTimeMultiplier { get { return this[nameof(DefaultBlendTimeMultiplier)].GetValue<float>(); } set { this[nameof(DefaultBlendTimeMultiplier)].SetValue<float>(value); } }
        public Array<int> NextSections { get { return new Array<int>(this[nameof(NextSections)].Address); } }
        public Array<int> PrevSections { get { return new Array<int>(this[nameof(PrevSections)].Address); } }
        public Array<AnimNotifyEvent> ActiveStateBranchingPoints { get { return new Array<AnimNotifyEvent>(this[nameof(ActiveStateBranchingPoints)].Address); } }
        public float Position { get { return this[nameof(Position)].GetValue<float>(); } set { this[nameof(Position)].SetValue<float>(value); } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public AlphaBlend Blend { get { return this[nameof(Blend)].As<AlphaBlend>(); } set { this["Blend"] = value; } }
        public int DisableRootMotionCount { get { return this[nameof(DisableRootMotionCount)].GetValue<int>(); } set { this[nameof(DisableRootMotionCount)].SetValue<int>(value); } }
    }
    public class AnimNodeData : Object
    {
        public AnimNodeData(nint addr) : base(addr) { }
        public Object AnimClassInterface { get { return this[nameof(AnimClassInterface)]; } set { this[nameof(AnimClassInterface)] = value; } }
        public Array<uint> Entries { get { return new Array<uint>(this[nameof(Entries)].Address); } }
        public int NodeIndex { get { return this[nameof(NodeIndex)].GetValue<int>(); } set { this[nameof(NodeIndex)].SetValue<int>(value); } }
        public EAnimNodeDataFlags Flags { get { return (EAnimNodeDataFlags)this[nameof(Flags)].GetValue<int>(); } set { this[nameof(Flags)].SetValue<int>((int)value); } }
    }
    public class AnimNodeStructData : Object
    {
        public AnimNodeStructData(nint addr) : base(addr) { }
        public Object NameToIndexMap { get { return this[nameof(NameToIndexMap)]; } set { this[nameof(NameToIndexMap)] = value; } }
        public int NumProperties { get { return this[nameof(NumProperties)].GetValue<int>(); } set { this[nameof(NumProperties)].SetValue<int>(value); } }
    }
    public class AnimNodeFunctionRef : Object
    {
        public AnimNodeFunctionRef(nint addr) : base(addr) { }
        public Object ClassName { get { return this[nameof(ClassName)]; } set { this[nameof(ClassName)] = value; } }
        public Object FunctionName { get { return this[nameof(FunctionName)]; } set { this[nameof(FunctionName)] = value; } }
        public Object Class { get { return this[nameof(Class)].As<Object>(); } set { this["Class"] = value; } } // ClassPtrProperty
        public Function Function { get { return this[nameof(Function)].As<Function>(); } set { this["Function"] = value; } }
    }
    public class AnimNode_ConvertComponentToLocalSpace : AnimNode_Base
    {
        public AnimNode_ConvertComponentToLocalSpace(nint addr) : base(addr) { }
        public ComponentSpacePoseLink ComponentPose { get { return this[nameof(ComponentPose)].As<ComponentSpacePoseLink>(); } set { this["ComponentPose"] = value; } }
    }
    public class AnimNode_ConvertLocalToComponentSpace : AnimNode_Base
    {
        public AnimNode_ConvertLocalToComponentSpace(nint addr) : base(addr) { }
        public PoseLink LocalPose { get { return this[nameof(LocalPose)].As<PoseLink>(); } set { this["LocalPose"] = value; } }
    }
    public class AnimNode_ApplyMeshSpaceAdditive : AnimNode_Base
    {
        public AnimNode_ApplyMeshSpaceAdditive(nint addr) : base(addr) { }
        public PoseLink Base { get { return this[nameof(Base)].As<PoseLink>(); } set { this["Base"] = value; } }
        public PoseLink Additive { get { return this[nameof(Additive)].As<PoseLink>(); } set { this["Additive"] = value; } }
        public EAnimAlphaInputType AlphaInputType { get { return (EAnimAlphaInputType)this[nameof(AlphaInputType)].GetValue<int>(); } set { this[nameof(AlphaInputType)].SetValue<int>((int)value); } }
        public float Alpha { get { return this[nameof(Alpha)].GetValue<float>(); } set { this[nameof(Alpha)].SetValue<float>(value); } }
        public bool bAlphaBoolEnabled { get { return this[nameof(bAlphaBoolEnabled)].Flag; } set { this[nameof(bAlphaBoolEnabled)].Flag = value; } }
        public InputAlphaBoolBlend AlphaBoolBlend { get { return this[nameof(AlphaBoolBlend)].As<InputAlphaBoolBlend>(); } set { this["AlphaBoolBlend"] = value; } }
        public Object AlphaCurveName { get { return this[nameof(AlphaCurveName)]; } set { this[nameof(AlphaCurveName)] = value; } }
        public InputScaleBias AlphaScaleBias { get { return this[nameof(AlphaScaleBias)].As<InputScaleBias>(); } set { this["AlphaScaleBias"] = value; } }
        public InputScaleBiasClamp AlphaScaleBiasClamp { get { return this[nameof(AlphaScaleBiasClamp)].As<InputScaleBiasClamp>(); } set { this["AlphaScaleBiasClamp"] = value; } }
        public int LODThreshold { get { return this[nameof(LODThreshold)].GetValue<int>(); } set { this[nameof(LODThreshold)].SetValue<int>(value); } }
    }
    public class InertializationRequest : Object
    {
        public InertializationRequest(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
    }
    public class InertializationPose : Object
    {
        public InertializationPose(nint addr) : base(addr) { }
    }
    public class InertializationBoneDiff : Object
    {
        public InertializationBoneDiff(nint addr) : base(addr) { }
    }
    public class InertializationCurveDiff : Object
    {
        public InertializationCurveDiff(nint addr) : base(addr) { }
    }
    public class InertializationPoseDiff : Object
    {
        public InertializationPoseDiff(nint addr) : base(addr) { }
    }
    public class AnimNode_Inertialization : AnimNode_Base
    {
        public AnimNode_Inertialization(nint addr) : base(addr) { }
        public PoseLink Source { get { return this[nameof(Source)].As<PoseLink>(); } set { this["Source"] = value; } }
        public BlendProfile DefaultBlendProfile { get { return this[nameof(DefaultBlendProfile)].As<BlendProfile>(); } set { this["DefaultBlendProfile"] = value; } }
        public Array<Object> FilteredCurves { get { return new Array<Object>(this[nameof(FilteredCurves)].Address); } }
        public Array<InertializationRequest> RequestQueue { get { return new Array<InertializationRequest>(this[nameof(RequestQueue)].Address); } }
    }
    public class AnimNode_LinkedAnimGraph : AnimNode_CustomProperty
    {
        public AnimNode_LinkedAnimGraph(nint addr) : base(addr) { }
        public Array<PoseLink> InputPoses { get { return new Array<PoseLink>(this[nameof(InputPoses)].Address); } }
        public Array<Object> InputPoseNames { get { return new Array<Object>(this[nameof(InputPoseNames)].Address); } }
        public Object InstanceClass { get { return this[nameof(InstanceClass)]; } set { this[nameof(InstanceClass)] = value; } }
        public BlendProfile PendingBlendOutProfile { get { return this[nameof(PendingBlendOutProfile)].As<BlendProfile>(); } set { this["PendingBlendOutProfile"] = value; } }
        public BlendProfile PendingBlendInProfile { get { return this[nameof(PendingBlendInProfile)].As<BlendProfile>(); } set { this["PendingBlendInProfile"] = value; } }
        public bool bReceiveNotifiesFromLinkedInstances { get { return this[nameof(bReceiveNotifiesFromLinkedInstances)].Flag; } set { this[nameof(bReceiveNotifiesFromLinkedInstances)].Flag = value; } }
        public bool bPropagateNotifiesToLinkedInstances { get { return this[nameof(bPropagateNotifiesToLinkedInstances)].Flag; } set { this[nameof(bPropagateNotifiesToLinkedInstances)].Flag = value; } }
    }
    public class AnimNode_LinkedAnimLayer : AnimNode_LinkedAnimGraph
    {
        public AnimNode_LinkedAnimLayer(nint addr) : base(addr) { }
        public Object Interface { get { return this[nameof(Interface)]; } set { this[nameof(Interface)] = value; } }
        public Object Layer { get { return this[nameof(Layer)]; } set { this[nameof(Layer)] = value; } }
    }
    public class AnimNode_LinkedInputPose : AnimNode_Base
    {
        public AnimNode_LinkedInputPose(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Graph { get { return this[nameof(Graph)]; } set { this[nameof(Graph)] = value; } }
        public PoseLink InputPose { get { return this[nameof(InputPose)].As<PoseLink>(); } set { this["InputPose"] = value; } }
    }
    public class AnimNode_SaveCachedPose : AnimNode_Base
    {
        public AnimNode_SaveCachedPose(nint addr) : base(addr) { }
        public PoseLink Pose { get { return this[nameof(Pose)].As<PoseLink>(); } set { this["Pose"] = value; } }
        public Object CachePoseName { get { return this[nameof(CachePoseName)]; } set { this[nameof(CachePoseName)] = value; } }
    }
    public class AnimNode_SequencePlayerBase : AnimNode_AssetPlayerBase
    {
        public AnimNode_SequencePlayerBase(nint addr) : base(addr) { }
        public InputScaleBiasClampState PlayRateScaleBiasClampState { get { return this[nameof(PlayRateScaleBiasClampState)].As<InputScaleBiasClampState>(); } set { this["PlayRateScaleBiasClampState"] = value; } }
    }
    public class InputScaleBiasClampState : Object
    {
        public InputScaleBiasClampState(nint addr) : base(addr) { }
    }
    public class AnimNode_SequencePlayer : AnimNode_SequencePlayerBase
    {
        public AnimNode_SequencePlayer(nint addr) : base(addr) { }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
    }
    public class AnimNode_SequencePlayer_Standalone : AnimNode_SequencePlayerBase
    {
        public AnimNode_SequencePlayer_Standalone(nint addr) : base(addr) { }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public byte GroupRole { get { return this[nameof(GroupRole)].GetValue<byte>(); } set { this[nameof(GroupRole)].SetValue<byte>(value); } }
        public EAnimSyncMethod Method { get { return (EAnimSyncMethod)this[nameof(Method)].GetValue<int>(); } set { this[nameof(Method)].SetValue<int>((int)value); } }
        public bool bIgnoreForRelevancyTest { get { return this[nameof(bIgnoreForRelevancyTest)].Flag; } set { this[nameof(bIgnoreForRelevancyTest)].Flag = value; } }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
        public float PlayRateBasis { get { return this[nameof(PlayRateBasis)].GetValue<float>(); } set { this[nameof(PlayRateBasis)].SetValue<float>(value); } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public InputScaleBiasClampConstants PlayRateScaleBiasClampConstants { get { return this[nameof(PlayRateScaleBiasClampConstants)].As<InputScaleBiasClampConstants>(); } set { this["PlayRateScaleBiasClampConstants"] = value; } }
        public float StartPosition { get { return this[nameof(StartPosition)].GetValue<float>(); } set { this[nameof(StartPosition)].SetValue<float>(value); } }
        public bool bLoopAnimation { get { return this[nameof(bLoopAnimation)].Flag; } set { this[nameof(bLoopAnimation)].Flag = value; } }
        public bool bStartFromMatchingPose { get { return this[nameof(bStartFromMatchingPose)].Flag; } set { this[nameof(bStartFromMatchingPose)].Flag = value; } }
    }
    public class InputScaleBiasClampConstants : Object
    {
        public InputScaleBiasClampConstants(nint addr) : base(addr) { }
        public bool bMapRange { get { return this[nameof(bMapRange)].Flag; } set { this[nameof(bMapRange)].Flag = value; } }
        public bool bClampResult { get { return this[nameof(bClampResult)].Flag; } set { this[nameof(bClampResult)].Flag = value; } }
        public bool bInterpResult { get { return this[nameof(bInterpResult)].Flag; } set { this[nameof(bInterpResult)].Flag = value; } }
        public InputRange InRange { get { return this[nameof(InRange)].As<InputRange>(); } set { this["InRange"] = value; } }
        public InputRange OutRange { get { return this[nameof(OutRange)].As<InputRange>(); } set { this["OutRange"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public float Bias { get { return this[nameof(Bias)].GetValue<float>(); } set { this[nameof(Bias)].SetValue<float>(value); } }
        public float ClampMin { get { return this[nameof(ClampMin)].GetValue<float>(); } set { this[nameof(ClampMin)].SetValue<float>(value); } }
        public float ClampMax { get { return this[nameof(ClampMax)].GetValue<float>(); } set { this[nameof(ClampMax)].SetValue<float>(value); } }
        public float InterpSpeedIncreasing { get { return this[nameof(InterpSpeedIncreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedIncreasing)].SetValue<float>(value); } }
        public float InterpSpeedDecreasing { get { return this[nameof(InterpSpeedDecreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedDecreasing)].SetValue<float>(value); } }
    }
    public class AnimationActiveTransitionEntry : Object
    {
        public AnimationActiveTransitionEntry(nint addr) : base(addr) { }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
    }
    public class AnimationPotentialTransition : Object
    {
        public AnimationPotentialTransition(nint addr) : base(addr) { }
    }
    public class AnimNode_StateMachine : AnimNode_Base
    {
        public AnimNode_StateMachine(nint addr) : base(addr) { }
        public int StateMachineIndexInClass { get { return this[nameof(StateMachineIndexInClass)].GetValue<int>(); } set { this[nameof(StateMachineIndexInClass)].SetValue<int>(value); } }
        public int MaxTransitionsPerFrame { get { return this[nameof(MaxTransitionsPerFrame)].GetValue<int>(); } set { this[nameof(MaxTransitionsPerFrame)].SetValue<int>(value); } }
        public int MaxTransitionsRequests { get { return this[nameof(MaxTransitionsRequests)].GetValue<int>(); } set { this[nameof(MaxTransitionsRequests)].SetValue<int>(value); } }
        public bool bSkipFirstUpdateTransition { get { return this[nameof(bSkipFirstUpdateTransition)].Flag; } set { this[nameof(bSkipFirstUpdateTransition)].Flag = value; } }
        public bool bReinitializeOnBecomingRelevant { get { return this[nameof(bReinitializeOnBecomingRelevant)].Flag; } set { this[nameof(bReinitializeOnBecomingRelevant)].Flag = value; } }
        public bool bCreateNotifyMetaData { get { return this[nameof(bCreateNotifyMetaData)].Flag; } set { this[nameof(bCreateNotifyMetaData)].Flag = value; } }
        public bool bAllowConduitEntryStates { get { return this[nameof(bAllowConduitEntryStates)].Flag; } set { this[nameof(bAllowConduitEntryStates)].Flag = value; } }
    }
    public class AnimNode_TransitionPoseEvaluator : AnimNode_Base
    {
        public AnimNode_TransitionPoseEvaluator(nint addr) : base(addr) { }
        public int FramesToCachePose { get { return this[nameof(FramesToCachePose)].GetValue<int>(); } set { this[nameof(FramesToCachePose)].SetValue<int>(value); } }
        public byte DataSource { get { return this[nameof(DataSource)].GetValue<byte>(); } set { this[nameof(DataSource)].SetValue<byte>(value); } }
        public byte EvaluatorMode { get { return this[nameof(EvaluatorMode)].GetValue<byte>(); } set { this[nameof(EvaluatorMode)].SetValue<byte>(value); } }
    }
    public class AnimNode_TransitionResult : AnimNode_Base
    {
        public AnimNode_TransitionResult(nint addr) : base(addr) { }
        public bool bCanEnterTransition { get { return this[nameof(bCanEnterTransition)].Flag; } set { this[nameof(bCanEnterTransition)].Flag = value; } }
    }
    public class AnimNode_UseCachedPose : AnimNode_Base
    {
        public AnimNode_UseCachedPose(nint addr) : base(addr) { }
        public PoseLink LinkToCachingNode { get { return this[nameof(LinkToCachingNode)].As<PoseLink>(); } set { this["LinkToCachingNode"] = value; } }
        public Object CachePoseName { get { return this[nameof(CachePoseName)]; } set { this[nameof(CachePoseName)] = value; } }
    }
    public class AnimNotifyContext : Object
    {
        public AnimNotifyContext(nint addr) : base(addr) { }
    }
    public class AnimSequenceTrackContainer : Object
    {
        public AnimSequenceTrackContainer(nint addr) : base(addr) { }
        public Array<RawAnimSequenceTrack> AnimationTracks { get { return new Array<RawAnimSequenceTrack>(this[nameof(AnimationTracks)].Address); } }
        public Array<Object> TrackNames { get { return new Array<Object>(this[nameof(TrackNames)].Address); } }
    }
    public class TranslationTrack : Object
    {
        public TranslationTrack(nint addr) : base(addr) { }
        public Array<Vector3f> PosKeys { get { return new Array<Vector3f>(this[nameof(PosKeys)].Address); } }
        public Array<float> Times { get { return new Array<float>(this[nameof(Times)].Address); } }
    }
    public class RotationTrack : Object
    {
        public RotationTrack(nint addr) : base(addr) { }
        public Array<Quat4f> RotKeys { get { return new Array<Quat4f>(this[nameof(RotKeys)].Address); } }
        public Array<float> Times { get { return new Array<float>(this[nameof(Times)].Address); } }
    }
    public class ScaleTrack : Object
    {
        public ScaleTrack(nint addr) : base(addr) { }
        public Array<Vector3f> ScaleKeys { get { return new Array<Vector3f>(this[nameof(ScaleKeys)].Address); } }
        public Array<float> Times { get { return new Array<float>(this[nameof(Times)].Address); } }
    }
    public class CurveTrack : Object
    {
        public CurveTrack(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public Array<float> CurveWeights { get { return new Array<float>(this[nameof(CurveWeights)].Address); } }
    }
    public class CompressedTrack : Object
    {
        public CompressedTrack(nint addr) : base(addr) { }
        public Array<byte> ByteStream { get { return new Array<byte>(this[nameof(ByteStream)].Address); } }
        public Array<float> Times { get { return new Array<float>(this[nameof(Times)].Address); } }
        public float Mins { get { return this[nameof(Mins)].GetValue<float>(); } set { this[nameof(Mins)].SetValue<float>(value); } }
        public float Ranges { get { return this[nameof(Ranges)].GetValue<float>(); } set { this[nameof(Ranges)].SetValue<float>(value); } }
    }
    public class AnimSetMeshLinkup : Object
    {
        public AnimSetMeshLinkup(nint addr) : base(addr) { }
        public Array<int> BoneToTrackTable { get { return new Array<int>(this[nameof(BoneToTrackTable)].Address); } }
    }
    public class AnimNode_SingleNode : AnimNode_Base
    {
        public AnimNode_SingleNode(nint addr) : base(addr) { }
        public PoseLink SourcePose { get { return this[nameof(SourcePose)].As<PoseLink>(); } set { this["SourcePose"] = value; } }
    }
    public class AnimSingleNodeInstanceProxy : AnimInstanceProxy
    {
        public AnimSingleNodeInstanceProxy(nint addr) : base(addr) { }
    }
    public class AnimationTransitionRule : Object
    {
        public AnimationTransitionRule(nint addr) : base(addr) { }
        public Object RuleToExecute { get { return this[nameof(RuleToExecute)]; } set { this[nameof(RuleToExecute)] = value; } }
        public bool TransitionReturnVal { get { return this[nameof(TransitionReturnVal)].Flag; } set { this[nameof(TransitionReturnVal)].Flag = value; } }
        public int TransitionIndex { get { return this[nameof(TransitionIndex)].GetValue<int>(); } set { this[nameof(TransitionIndex)].SetValue<int>(value); } }
    }
    public class AnimationStateBase : Object
    {
        public AnimationStateBase(nint addr) : base(addr) { }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
    }
    public class AnimationState : AnimationStateBase
    {
        public AnimationState(nint addr) : base(addr) { }
        public Array<AnimationTransitionRule> Transitions { get { return new Array<AnimationTransitionRule>(this[nameof(Transitions)].Address); } }
        public int StateRootNodeIndex { get { return this[nameof(StateRootNodeIndex)].GetValue<int>(); } set { this[nameof(StateRootNodeIndex)].SetValue<int>(value); } }
        public int StartNotify { get { return this[nameof(StartNotify)].GetValue<int>(); } set { this[nameof(StartNotify)].SetValue<int>(value); } }
        public int EndNotify { get { return this[nameof(EndNotify)].GetValue<int>(); } set { this[nameof(EndNotify)].SetValue<int>(value); } }
        public int FullyBlendedNotify { get { return this[nameof(FullyBlendedNotify)].GetValue<int>(); } set { this[nameof(FullyBlendedNotify)].SetValue<int>(value); } }
    }
    public class AnimationTransitionBetweenStates : AnimationStateBase
    {
        public AnimationTransitionBetweenStates(nint addr) : base(addr) { }
        public int PreviousState { get { return this[nameof(PreviousState)].GetValue<int>(); } set { this[nameof(PreviousState)].SetValue<int>(value); } }
        public int NextState { get { return this[nameof(NextState)].GetValue<int>(); } set { this[nameof(NextState)].SetValue<int>(value); } }
        public float CrossfadeDuration { get { return this[nameof(CrossfadeDuration)].GetValue<float>(); } set { this[nameof(CrossfadeDuration)].SetValue<float>(value); } }
        public int StartNotify { get { return this[nameof(StartNotify)].GetValue<int>(); } set { this[nameof(StartNotify)].SetValue<int>(value); } }
        public int EndNotify { get { return this[nameof(EndNotify)].GetValue<int>(); } set { this[nameof(EndNotify)].SetValue<int>(value); } }
        public int InterruptNotify { get { return this[nameof(InterruptNotify)].GetValue<int>(); } set { this[nameof(InterruptNotify)].SetValue<int>(value); } }
        public EAlphaBlendOption BlendMode { get { return (EAlphaBlendOption)this[nameof(BlendMode)].GetValue<int>(); } set { this[nameof(BlendMode)].SetValue<int>((int)value); } }
        public CurveFloat CustomCurve { get { return this[nameof(CustomCurve)].As<CurveFloat>(); } set { this["CustomCurve"] = value; } }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
        public byte LogicType { get { return this[nameof(LogicType)].GetValue<byte>(); } set { this[nameof(LogicType)].SetValue<byte>(value); } }
    }
    public class BakedStateExitTransition : Object
    {
        public BakedStateExitTransition(nint addr) : base(addr) { }
        public int CanTakeDelegateIndex { get { return this[nameof(CanTakeDelegateIndex)].GetValue<int>(); } set { this[nameof(CanTakeDelegateIndex)].SetValue<int>(value); } }
        public int CustomResultNodeIndex { get { return this[nameof(CustomResultNodeIndex)].GetValue<int>(); } set { this[nameof(CustomResultNodeIndex)].SetValue<int>(value); } }
        public int TransitionIndex { get { return this[nameof(TransitionIndex)].GetValue<int>(); } set { this[nameof(TransitionIndex)].SetValue<int>(value); } }
        public bool bDesiredTransitionReturnValue { get { return this[nameof(bDesiredTransitionReturnValue)].Flag; } set { this[nameof(bDesiredTransitionReturnValue)].Flag = value; } }
        public bool bAutomaticRemainingTimeRule { get { return this[nameof(bAutomaticRemainingTimeRule)].Flag; } set { this[nameof(bAutomaticRemainingTimeRule)].Flag = value; } }
        public Object SyncGroupNameToRequireValidMarkersRule { get { return this[nameof(SyncGroupNameToRequireValidMarkersRule)]; } set { this[nameof(SyncGroupNameToRequireValidMarkersRule)] = value; } }
        public Array<int> PoseEvaluatorLinks { get { return new Array<int>(this[nameof(PoseEvaluatorLinks)].Address); } }
    }
    public class BakedAnimationState : Object
    {
        public BakedAnimationState(nint addr) : base(addr) { }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
        public Array<BakedStateExitTransition> Transitions { get { return new Array<BakedStateExitTransition>(this[nameof(Transitions)].Address); } }
        public int StateRootNodeIndex { get { return this[nameof(StateRootNodeIndex)].GetValue<int>(); } set { this[nameof(StateRootNodeIndex)].SetValue<int>(value); } }
        public int StartNotify { get { return this[nameof(StartNotify)].GetValue<int>(); } set { this[nameof(StartNotify)].SetValue<int>(value); } }
        public int EndNotify { get { return this[nameof(EndNotify)].GetValue<int>(); } set { this[nameof(EndNotify)].SetValue<int>(value); } }
        public int FullyBlendedNotify { get { return this[nameof(FullyBlendedNotify)].GetValue<int>(); } set { this[nameof(FullyBlendedNotify)].SetValue<int>(value); } }
        public bool bIsAConduit { get { return this[nameof(bIsAConduit)].Flag; } set { this[nameof(bIsAConduit)].Flag = value; } }
        public int EntryRuleNodeIndex { get { return this[nameof(EntryRuleNodeIndex)].GetValue<int>(); } set { this[nameof(EntryRuleNodeIndex)].SetValue<int>(value); } }
        public Array<int> PlayerNodeIndices { get { return new Array<int>(this[nameof(PlayerNodeIndices)].Address); } }
        public Array<int> LayerNodeIndices { get { return new Array<int>(this[nameof(LayerNodeIndices)].Address); } }
        public bool bAlwaysResetOnEntry { get { return this[nameof(bAlwaysResetOnEntry)].Flag; } set { this[nameof(bAlwaysResetOnEntry)].Flag = value; } }
    }
    public class BakedAnimationStateMachine : Object
    {
        public BakedAnimationStateMachine(nint addr) : base(addr) { }
        public Object MachineName { get { return this[nameof(MachineName)]; } set { this[nameof(MachineName)] = value; } }
        public int InitialState { get { return this[nameof(InitialState)].GetValue<int>(); } set { this[nameof(InitialState)].SetValue<int>(value); } }
        public Array<BakedAnimationState> States { get { return new Array<BakedAnimationState>(this[nameof(States)].Address); } }
        public Array<AnimationTransitionBetweenStates> Transitions { get { return new Array<AnimationTransitionBetweenStates>(this[nameof(Transitions)].Address); } }
    }
    public class AnimSubsystem_Base : AnimSubsystem
    {
        public AnimSubsystem_Base(nint addr) : base(addr) { }
        public Array<ExposedValueHandler> ExposedValueHandlers { get { return new Array<ExposedValueHandler>(this[nameof(ExposedValueHandlers)].Address); } }
    }
    public class ExposedValueHandler : Object
    {
        public ExposedValueHandler(nint addr) : base(addr) { }
        public Array<ExposedValueCopyRecord> CopyRecords { get { return new Array<ExposedValueCopyRecord>(this[nameof(CopyRecords)].Address); } }
        public Function Function { get { return this[nameof(Function)].As<Function>(); } set { this["Function"] = value; } }
        public Object BoundFunction { get { return this[nameof(BoundFunction)]; } set { this[nameof(BoundFunction)] = value; } }
    }
    public class ExposedValueCopyRecord : Object
    {
        public ExposedValueCopyRecord(nint addr) : base(addr) { }
        public int CopyIndex { get { return this[nameof(CopyIndex)].GetValue<int>(); } set { this[nameof(CopyIndex)].SetValue<int>(value); } }
        public EPostCopyOperation PostCopyOperation { get { return (EPostCopyOperation)this[nameof(PostCopyOperation)].GetValue<int>(); } set { this[nameof(PostCopyOperation)].SetValue<int>((int)value); } }
    }
    public class AnimSubsystemInstance_NodeRelevancy : AnimSubsystemInstance
    {
        public AnimSubsystemInstance_NodeRelevancy(nint addr) : base(addr) { }
    }
    public class AnimSubsystem_PropertyAccess : AnimSubsystem
    {
        public AnimSubsystem_PropertyAccess(nint addr) : base(addr) { }
        public PropertyAccessLibrary Library { get { return this[nameof(Library)].As<PropertyAccessLibrary>(); } set { this["Library"] = value; } }
    }
    public class PropertyAccessLibrary : Object
    {
        public PropertyAccessLibrary(nint addr) : base(addr) { }
        public Array<PropertyAccessSegment> PathSegments { get { return new Array<PropertyAccessSegment>(this[nameof(PathSegments)].Address); } }
        public Array<PropertyAccessPath> SrcPaths { get { return new Array<PropertyAccessPath>(this[nameof(SrcPaths)].Address); } }
        public Array<PropertyAccessPath> DestPaths { get { return new Array<PropertyAccessPath>(this[nameof(DestPaths)].Address); } }
        public Array<PropertyAccessCopyBatch> CopyBatchArray { get { return new Array<PropertyAccessCopyBatch>(this[nameof(CopyBatchArray)].Address); } }
    }
    public class PropertyAccessCopyBatch : Object
    {
        public PropertyAccessCopyBatch(nint addr) : base(addr) { }
        public Array<PropertyAccessCopy> Copies { get { return new Array<PropertyAccessCopy>(this[nameof(Copies)].Address); } }
    }
    public class PropertyAccessCopy : Object
    {
        public PropertyAccessCopy(nint addr) : base(addr) { }
        public int AccessIndex { get { return this[nameof(AccessIndex)].GetValue<int>(); } set { this[nameof(AccessIndex)].SetValue<int>(value); } }
        public int DestAccessStartIndex { get { return this[nameof(DestAccessStartIndex)].GetValue<int>(); } set { this[nameof(DestAccessStartIndex)].SetValue<int>(value); } }
        public int DestAccessEndIndex { get { return this[nameof(DestAccessEndIndex)].GetValue<int>(); } set { this[nameof(DestAccessEndIndex)].SetValue<int>(value); } }
        public EPropertyAccessCopyType Type { get { return (EPropertyAccessCopyType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class PropertyAccessPath : Object
    {
        public PropertyAccessPath(nint addr) : base(addr) { }
        public int PathSegmentStartIndex { get { return this[nameof(PathSegmentStartIndex)].GetValue<int>(); } set { this[nameof(PathSegmentStartIndex)].SetValue<int>(value); } }
        public int PathSegmentCount { get { return this[nameof(PathSegmentCount)].GetValue<int>(); } set { this[nameof(PathSegmentCount)].SetValue<int>(value); } }
    }
    public class PropertyAccessSegment : Object
    {
        public PropertyAccessSegment(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Struct Struct { get { return this[nameof(Struct)].As<Struct>(); } set { this["Struct"] = value; } }
        public Object Property { get { return this[nameof(Property)]; } set { this[nameof(Property)] = value; } }
        public Function Function { get { return this[nameof(Function)].As<Function>(); } set { this["Function"] = value; } }
        public int ArrayIndex { get { return this[nameof(ArrayIndex)].GetValue<int>(); } set { this[nameof(ArrayIndex)].SetValue<int>(value); } }
        public ushort Flags { get { return this[nameof(Flags)].GetValue<ushort>(); } set { this[nameof(Flags)].SetValue<ushort>(value); } }
    }
    public class AnimSubsystem_Tag : AnimSubsystem
    {
        public AnimSubsystem_Tag(nint addr) : base(addr) { }
        public Object NodeIndices { get { return this[nameof(NodeIndices)]; } set { this[nameof(NodeIndices)] = value; } }
    }
    public class AssetMapping : Object
    {
        public AssetMapping(nint addr) : base(addr) { }
        public AnimationAsset SourceAsset { get { return this[nameof(SourceAsset)].As<AnimationAsset>(); } set { this["SourceAsset"] = value; } }
        public AnimationAsset TargetAsset { get { return this[nameof(TargetAsset)].As<AnimationAsset>(); } set { this["TargetAsset"] = value; } }
    }
    public class BlendProfileBoneEntry : Object
    {
        public BlendProfileBoneEntry(nint addr) : base(addr) { }
        public BoneReference BoneReference { get { return this[nameof(BoneReference)].As<BoneReference>(); } set { this["BoneReference"] = value; } }
        public float BlendScale { get { return this[nameof(BlendScale)].GetValue<float>(); } set { this[nameof(BlendScale)].SetValue<float>(value); } }
    }
    public class CachedAnimStateData : Object
    {
        public CachedAnimStateData(nint addr) : base(addr) { }
        public Object StateMachineName { get { return this[nameof(StateMachineName)]; } set { this[nameof(StateMachineName)] = value; } }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
    }
    public class CachedAnimStateArray : Object
    {
        public CachedAnimStateArray(nint addr) : base(addr) { }
        public Array<CachedAnimStateData> States { get { return new Array<CachedAnimStateData>(this[nameof(States)].Address); } }
    }
    public class CachedAnimAssetPlayerData : Object
    {
        public CachedAnimAssetPlayerData(nint addr) : base(addr) { }
        public Object StateMachineName { get { return this[nameof(StateMachineName)]; } set { this[nameof(StateMachineName)] = value; } }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
    }
    public class CachedAnimRelevancyData : Object
    {
        public CachedAnimRelevancyData(nint addr) : base(addr) { }
        public Object StateMachineName { get { return this[nameof(StateMachineName)]; } set { this[nameof(StateMachineName)] = value; } }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
    }
    public class CachedAnimTransitionData : Object
    {
        public CachedAnimTransitionData(nint addr) : base(addr) { }
        public Object StateMachineName { get { return this[nameof(StateMachineName)]; } set { this[nameof(StateMachineName)] = value; } }
        public Object FromStateName { get { return this[nameof(FromStateName)]; } set { this[nameof(FromStateName)] = value; } }
        public Object ToStateName { get { return this[nameof(ToStateName)]; } set { this[nameof(ToStateName)] = value; } }
    }
    public class NamedCurveValue : Object
    {
        public NamedCurveValue(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class InputClampConstants : Object
    {
        public InputClampConstants(nint addr) : base(addr) { }
        public bool bClampResult { get { return this[nameof(bClampResult)].Flag; } set { this[nameof(bClampResult)].Flag = value; } }
        public bool bInterpResult { get { return this[nameof(bInterpResult)].Flag; } set { this[nameof(bInterpResult)].Flag = value; } }
        public float ClampMin { get { return this[nameof(ClampMin)].GetValue<float>(); } set { this[nameof(ClampMin)].SetValue<float>(value); } }
        public float ClampMax { get { return this[nameof(ClampMax)].GetValue<float>(); } set { this[nameof(ClampMax)].SetValue<float>(value); } }
        public float InterpSpeedIncreasing { get { return this[nameof(InterpSpeedIncreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedIncreasing)].SetValue<float>(value); } }
        public float InterpSpeedDecreasing { get { return this[nameof(InterpSpeedDecreasing)].GetValue<float>(); } set { this[nameof(InterpSpeedDecreasing)].SetValue<float>(value); } }
    }
    public class InputClampState : Object
    {
        public InputClampState(nint addr) : base(addr) { }
    }
    public class MirrorTableRow : TableRowBase
    {
        public MirrorTableRow(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object MirroredName { get { return this[nameof(MirroredName)]; } set { this[nameof(MirroredName)] = value; } }
        public byte MirrorEntryType { get { return this[nameof(MirrorEntryType)].GetValue<byte>(); } set { this[nameof(MirrorEntryType)].SetValue<byte>(value); } }
    }
    public class MirrorFindReplaceExpression : Object
    {
        public MirrorFindReplaceExpression(nint addr) : base(addr) { }
        public Object FindExpression { get { return this[nameof(FindExpression)]; } set { this[nameof(FindExpression)] = value; } }
        public Object ReplaceExpression { get { return this[nameof(ReplaceExpression)]; } set { this[nameof(ReplaceExpression)] = value; } }
        public byte FindReplaceMethod { get { return this[nameof(FindReplaceMethod)].GetValue<byte>(); } set { this[nameof(FindReplaceMethod)].SetValue<byte>(value); } }
    }
    public class TrajectorySample : Object
    {
        public TrajectorySample(nint addr) : base(addr) { }
        public float AccumulatedSeconds { get { return this[nameof(AccumulatedSeconds)].GetValue<float>(); } set { this[nameof(AccumulatedSeconds)].SetValue<float>(value); } }
        public float AccumulatedDistance { get { return this[nameof(AccumulatedDistance)].GetValue<float>(); } set { this[nameof(AccumulatedDistance)].SetValue<float>(value); } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Vector LinearVelocity { get { return this[nameof(LinearVelocity)].As<Vector>(); } set { this["LinearVelocity"] = value; } }
    }
    public class TrajectorySampleRange : Object
    {
        public TrajectorySampleRange(nint addr) : base(addr) { }
        public Array<TrajectorySample> Samples { get { return new Array<TrajectorySample>(this[nameof(Samples)].Address); } }
        public int SampleRate { get { return this[nameof(SampleRate)].GetValue<int>(); } set { this[nameof(SampleRate)].SetValue<int>(value); } }
    }
    public class NodeItem : Object
    {
        public NodeItem(nint addr) : base(addr) { }
        public Object ParentName { get { return this[nameof(ParentName)]; } set { this[nameof(ParentName)] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
    }
    public class PoseData : Object
    {
        public PoseData(nint addr) : base(addr) { }
        public Array<Transform> LocalSpacePose { get { return new Array<Transform>(this[nameof(LocalSpacePose)].Address); } }
        public Array<float> CurveData { get { return new Array<float>(this[nameof(CurveData)].Address); } }
    }
    public class PoseAssetInfluence : Object
    {
        public PoseAssetInfluence(nint addr) : base(addr) { }
        public int PoseIndex { get { return this[nameof(PoseIndex)].GetValue<int>(); } set { this[nameof(PoseIndex)].SetValue<int>(value); } }
        public int BoneTransformIndex { get { return this[nameof(BoneTransformIndex)].GetValue<int>(); } set { this[nameof(BoneTransformIndex)].SetValue<int>(value); } }
    }
    public class PoseAssetInfluences : Object
    {
        public PoseAssetInfluences(nint addr) : base(addr) { }
        public Array<PoseAssetInfluence> Influences { get { return new Array<PoseAssetInfluence>(this[nameof(Influences)].Address); } }
    }
    public class PoseDataContainer : Object
    {
        public PoseDataContainer(nint addr) : base(addr) { }
        public Array<SmartName> PoseNames { get { return new Array<SmartName>(this[nameof(PoseNames)].Address); } }
        public Array<Object> Tracks { get { return new Array<Object>(this[nameof(Tracks)].Address); } }
        public Array<int> TrackBoneIndices { get { return new Array<int>(this[nameof(TrackBoneIndices)].Address); } }
        public Array<PoseAssetInfluences> TrackPoseInfluenceIndices { get { return new Array<PoseAssetInfluences>(this[nameof(TrackPoseInfluenceIndices)].Address); } }
        public Array<PoseData> Poses { get { return new Array<PoseData>(this[nameof(Poses)].Address); } }
        public Array<AnimCurveBase> Curves { get { return new Array<AnimCurveBase>(this[nameof(Curves)].Address); } }
    }
    public class PreviewAttachedObjectPair : Object
    {
        public PreviewAttachedObjectPair(nint addr) : base(addr) { }
        public Object AttachedObject { get { return this[nameof(AttachedObject)]; } set { this[nameof(AttachedObject)] = value; } }
        public Object Object { get { return this[nameof(Object)].As<Object>(); } set { this["Object"] = value; } }
        public Object AttachedTo { get { return this[nameof(AttachedTo)]; } set { this[nameof(AttachedTo)] = value; } }
    }
    public class PreviewAssetAttachContainer : Object
    {
        public PreviewAssetAttachContainer(nint addr) : base(addr) { }
        public Array<PreviewAttachedObjectPair> AttachedObjects { get { return new Array<PreviewAttachedObjectPair>(this[nameof(AttachedObjects)].Address); } }
    }
    public class PreviewMeshCollectionEntry : Object
    {
        public PreviewMeshCollectionEntry(nint addr) : base(addr) { }
        public Object SkeletalMesh { get { return this[nameof(SkeletalMesh)]; } set { this[nameof(SkeletalMesh)] = value; } }
        public Object AnimBlueprint { get { return this[nameof(AnimBlueprint)]; } set { this[nameof(AnimBlueprint)] = value; } }
    }
    public class Node : Object
    {
        public Node(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object ParentName { get { return this[nameof(ParentName)]; } set { this[nameof(ParentName)] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public bool bAdvanced { get { return this[nameof(bAdvanced)].Flag; } set { this[nameof(bAdvanced)].Flag = value; } }
    }
    public class RigTransformConstraint : Object
    {
        public RigTransformConstraint(nint addr) : base(addr) { }
        public byte TranformType { get { return this[nameof(TranformType)].GetValue<byte>(); } set { this[nameof(TranformType)].SetValue<byte>(value); } }
        public Object ParentSpace { get { return this[nameof(ParentSpace)]; } set { this[nameof(ParentSpace)] = value; } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class TransformBaseConstraint : Object
    {
        public TransformBaseConstraint(nint addr) : base(addr) { }
        public Array<RigTransformConstraint> TransformConstraints { get { return new Array<RigTransformConstraint>(this[nameof(TransformConstraints)].Address); } }
    }
    public class TransformBase : Object
    {
        public TransformBase(nint addr) : base(addr) { }
        public Object Node { get { return this[nameof(Node)]; } set { this[nameof(Node)] = value; } }
        public TransformBaseConstraint Constraints { get { return this[nameof(Constraints)].As<TransformBaseConstraint>(); } set { this["Constraints"] = value; } }
    }
    public class SkeletonToMeshLinkup : Object
    {
        public SkeletonToMeshLinkup(nint addr) : base(addr) { }
        public Array<int> SkeletonToMeshTable { get { return new Array<int>(this[nameof(SkeletonToMeshTable)].Address); } }
        public Array<int> MeshToSkeletonTable { get { return new Array<int>(this[nameof(MeshToSkeletonTable)].Address); } }
    }
    public class BoneNode : Object
    {
        public BoneNode(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public int ParentIndex { get { return this[nameof(ParentIndex)].GetValue<int>(); } set { this[nameof(ParentIndex)].SetValue<int>(value); } }
        public byte TranslationRetargetingMode { get { return this[nameof(TranslationRetargetingMode)].GetValue<byte>(); } set { this[nameof(TranslationRetargetingMode)].SetValue<byte>(value); } }
    }
    public class ReferencePose : Object
    {
        public ReferencePose(nint addr) : base(addr) { }
        public Object PoseName { get { return this[nameof(PoseName)]; } set { this[nameof(PoseName)] = value; } }
        public Array<Transform> ReferencePose_value { get { return new Array<Transform>(this[nameof(ReferencePose)].Address); } }
    }
    public class BoneReductionSetting : Object
    {
        public BoneReductionSetting(nint addr) : base(addr) { }
        public Array<Object> BonesToRemove { get { return new Array<Object>(this[nameof(BonesToRemove)].Address); } }
    }
    public class NameMapping : Object
    {
        public NameMapping(nint addr) : base(addr) { }
        public Object NodeName { get { return this[nameof(NodeName)]; } set { this[nameof(NodeName)] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class RigConfiguration : Object
    {
        public RigConfiguration(nint addr) : base(addr) { }
        public Rig Rig { get { return this[nameof(Rig)].As<Rig>(); } set { this["Rig"] = value; } }
        public Array<NameMapping> BoneMappingTable { get { return new Array<NameMapping>(this[nameof(BoneMappingTable)].Address); } }
    }
    public class AnimSlotGroup : Object
    {
        public AnimSlotGroup(nint addr) : base(addr) { }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public Array<Object> SlotNames { get { return new Array<Object>(this[nameof(SlotNames)].Address); } }
    }
    public class VirtualBone : Object
    {
        public VirtualBone(nint addr) : base(addr) { }
        public Object SourceBoneName { get { return this[nameof(SourceBoneName)]; } set { this[nameof(SourceBoneName)] = value; } }
        public Object TargetBoneName { get { return this[nameof(TargetBoneName)]; } set { this[nameof(TargetBoneName)] = value; } }
        public Object VirtualBoneName { get { return this[nameof(VirtualBoneName)]; } set { this[nameof(VirtualBoneName)] = value; } }
    }
    public class SkinWeightProfileInfo : Object
    {
        public SkinWeightProfileInfo(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public PerPlatformBool DefaultProfile { get { return this[nameof(DefaultProfile)].As<PerPlatformBool>(); } set { this["DefaultProfile"] = value; } }
        public PerPlatformInt DefaultProfileFromLODIndex { get { return this[nameof(DefaultProfileFromLODIndex)].As<PerPlatformInt>(); } set { this["DefaultProfileFromLODIndex"] = value; } }
    }
    public class SkinWeightProfileManagerTickFunction : TickFunction
    {
        public SkinWeightProfileManagerTickFunction(nint addr) : base(addr) { }
    }
    public class CurveMetaData : Object
    {
        public CurveMetaData(nint addr) : base(addr) { }
    }
    public class SmartNameMapping : Object
    {
        public SmartNameMapping(nint addr) : base(addr) { }
    }
    public class SmartNameContainer : Object
    {
        public SmartNameContainer(nint addr) : base(addr) { }
    }
    public class TimeStretchCurveMarker : Object
    {
        public TimeStretchCurveMarker(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float Alpha { get { return this[nameof(Alpha)].GetValue<float>(); } set { this[nameof(Alpha)].SetValue<float>(value); } }
    }
    public class TimeStretchCurve : Object
    {
        public TimeStretchCurve(nint addr) : base(addr) { }
        public float SamplingRate { get { return this[nameof(SamplingRate)].GetValue<float>(); } set { this[nameof(SamplingRate)].SetValue<float>(value); } }
        public float CurveValueMinPrecision { get { return this[nameof(CurveValueMinPrecision)].GetValue<float>(); } set { this[nameof(CurveValueMinPrecision)].SetValue<float>(value); } }
        public Array<TimeStretchCurveMarker> Markers { get { return new Array<TimeStretchCurveMarker>(this[nameof(Markers)].Address); } }
        public float Sum_dT_i_by_C_i { get { return this[nameof(Sum_dT_i_by_C_i)].GetValue<float>(); } set { this[nameof(Sum_dT_i_by_C_i)].SetValue<float>(value); } }
    }
    public class TimeStretchCurveInstance : Object
    {
        public TimeStretchCurveInstance(nint addr) : base(addr) { }
        public bool bHasValidData { get { return this[nameof(bHasValidData)].Flag; } set { this[nameof(bHasValidData)].Flag = value; } }
    }
    public class AnimGroupInfo : Object
    {
        public AnimGroupInfo(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
    }
    public class AnimParentNodeAssetOverride : Object
    {
        public AnimParentNodeAssetOverride(nint addr) : base(addr) { }
        public AnimationAsset NewAsset { get { return this[nameof(NewAsset)].As<AnimationAsset>(); } set { this["NewAsset"] = value; } }
        public Guid ParentNodeGuid { get { return this[nameof(ParentNodeGuid)].As<Guid>(); } set { this["ParentNodeGuid"] = value; } }
    }
    public class AssetCompileData : Object
    {
        public AssetCompileData(nint addr) : base(addr) { }
        public Object Asset { get { return this[nameof(Asset)]; } set { this[nameof(Asset)] = value; } }
    }
    public class PrimaryAssetTypeInfo : Object
    {
        public PrimaryAssetTypeInfo(nint addr) : base(addr) { }
        public Object PrimaryAssetType { get { return this[nameof(PrimaryAssetType)]; } set { this[nameof(PrimaryAssetType)] = value; } }
        public Object AssetBaseClass { get { return this[nameof(AssetBaseClass)]; } set { this[nameof(AssetBaseClass)] = value; } }
        public Object AssetBaseClassLoaded { get { return this[nameof(AssetBaseClassLoaded)].As<Object>(); } set { this["AssetBaseClassLoaded"] = value; } } // ClassPtrProperty
        public bool bHasBlueprintClasses { get { return this[nameof(bHasBlueprintClasses)].Flag; } set { this[nameof(bHasBlueprintClasses)].Flag = value; } }
        public bool bIsEditorOnly { get { return this[nameof(bIsEditorOnly)].Flag; } set { this[nameof(bIsEditorOnly)].Flag = value; } }
        public Array<DirectoryPath> Directories { get { return new Array<DirectoryPath>(this[nameof(Directories)].Address); } }
        public Array<SoftObjectPath> SpecificAssets { get { return new Array<SoftObjectPath>(this[nameof(SpecificAssets)].Address); } }
        public PrimaryAssetRules Rules { get { return this[nameof(Rules)].As<PrimaryAssetRules>(); } set { this["Rules"] = value; } }
        public Array<Object> AssetScanPaths { get { return new Array<Object>(this[nameof(AssetScanPaths)].Address); } }
        public bool bIsDynamicAsset { get { return this[nameof(bIsDynamicAsset)].Flag; } set { this[nameof(bIsDynamicAsset)].Flag = value; } }
        public int NumberOfAssets { get { return this[nameof(NumberOfAssets)].GetValue<int>(); } set { this[nameof(NumberOfAssets)].SetValue<int>(value); } }
    }
    public class AssetManagerSearchRules : Object
    {
        public AssetManagerSearchRules(nint addr) : base(addr) { }
        public Array<Object> AssetScanPaths { get { return new Array<Object>(this[nameof(AssetScanPaths)].Address); } }
        public Array<Object> IncludePatterns { get { return new Array<Object>(this[nameof(IncludePatterns)].Address); } }
        public Array<Object> ExcludePatterns { get { return new Array<Object>(this[nameof(ExcludePatterns)].Address); } }
        public Object AssetBaseClass { get { return this[nameof(AssetBaseClass)].As<Object>(); } set { this["AssetBaseClass"] = value; } } // ClassPtrProperty
        public bool bHasBlueprintClasses { get { return this[nameof(bHasBlueprintClasses)].Flag; } set { this[nameof(bHasBlueprintClasses)].Flag = value; } }
        public bool bForceSynchronousScan { get { return this[nameof(bForceSynchronousScan)].Flag; } set { this[nameof(bForceSynchronousScan)].Flag = value; } }
        public bool bSkipVirtualPathExpansion { get { return this[nameof(bSkipVirtualPathExpansion)].Flag; } set { this[nameof(bSkipVirtualPathExpansion)].Flag = value; } }
        public bool bSkipManagerIncludeCheck { get { return this[nameof(bSkipManagerIncludeCheck)].Flag; } set { this[nameof(bSkipManagerIncludeCheck)].Flag = value; } }
    }
    public class AudioEffectParameters : Object
    {
        public AudioEffectParameters(nint addr) : base(addr) { }
    }
    public class AudioReverbEffect : AudioEffectParameters
    {
        public AudioReverbEffect(nint addr) : base(addr) { }
    }
    public class AudioQualitySettings : Object
    {
        public AudioQualitySettings(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public int MaxChannels { get { return this[nameof(MaxChannels)].GetValue<int>(); } set { this[nameof(MaxChannels)].SetValue<int>(value); } }
    }
    public class SoundDebugEntry : Object
    {
        public SoundDebugEntry(nint addr) : base(addr) { }
        public Object DebugName { get { return this[nameof(DebugName)]; } set { this[nameof(DebugName)] = value; } }
        public SoftObjectPath Sound { get { return this[nameof(Sound)].As<SoftObjectPath>(); } set { this["Sound"] = value; } }
    }
    public class DefaultAudioBusSettings : Object
    {
        public DefaultAudioBusSettings(nint addr) : base(addr) { }
        public SoftObjectPath AudioBus { get { return this[nameof(AudioBus)].As<SoftObjectPath>(); } set { this["AudioBus"] = value; } }
    }
    public class AudioVolumeSubmixSendSettings : Object
    {
        public AudioVolumeSubmixSendSettings(nint addr) : base(addr) { }
        public EAudioVolumeLocationState ListenerLocationState { get { return (EAudioVolumeLocationState)this[nameof(ListenerLocationState)].GetValue<int>(); } set { this[nameof(ListenerLocationState)].SetValue<int>((int)value); } }
        public EAudioVolumeLocationState SourceLocationState { get { return (EAudioVolumeLocationState)this[nameof(SourceLocationState)].GetValue<int>(); } set { this[nameof(SourceLocationState)].SetValue<int>((int)value); } }
        public Array<SoundSubmixSendInfo> SubmixSends { get { return new Array<SoundSubmixSendInfo>(this[nameof(SubmixSends)].Address); } }
    }
    public class SoundSubmixSendInfo : Object
    {
        public SoundSubmixSendInfo(nint addr) : base(addr) { }
        public ESendLevelControlMethod SendLevelControlMethod { get { return (ESendLevelControlMethod)this[nameof(SendLevelControlMethod)].GetValue<int>(); } set { this[nameof(SendLevelControlMethod)].SetValue<int>((int)value); } }
        public ESubmixSendStage SendStage { get { return (ESubmixSendStage)this[nameof(SendStage)].GetValue<int>(); } set { this[nameof(SendStage)].SetValue<int>((int)value); } }
        public SoundSubmixBase SoundSubmix { get { return this[nameof(SoundSubmix)].As<SoundSubmixBase>(); } set { this["SoundSubmix"] = value; } }
        public float SendLevel { get { return this[nameof(SendLevel)].GetValue<float>(); } set { this[nameof(SendLevel)].SetValue<float>(value); } }
        public bool DisableManualSendClamp { get { return this[nameof(DisableManualSendClamp)].Flag; } set { this[nameof(DisableManualSendClamp)].Flag = value; } }
        public float MinSendLevel { get { return this[nameof(MinSendLevel)].GetValue<float>(); } set { this[nameof(MinSendLevel)].SetValue<float>(value); } }
        public float MaxSendLevel { get { return this[nameof(MaxSendLevel)].GetValue<float>(); } set { this[nameof(MaxSendLevel)].SetValue<float>(value); } }
        public float MinSendDistance { get { return this[nameof(MinSendDistance)].GetValue<float>(); } set { this[nameof(MinSendDistance)].SetValue<float>(value); } }
        public float MaxSendDistance { get { return this[nameof(MaxSendDistance)].GetValue<float>(); } set { this[nameof(MaxSendDistance)].SetValue<float>(value); } }
        public RuntimeFloatCurve CustomSendLevelCurve { get { return this[nameof(CustomSendLevelCurve)].As<RuntimeFloatCurve>(); } set { this["CustomSendLevelCurve"] = value; } }
    }
    public class AudioVolumeSubmixOverrideSettings : Object
    {
        public AudioVolumeSubmixOverrideSettings(nint addr) : base(addr) { }
        public SoundSubmix Submix { get { return this[nameof(Submix)].As<SoundSubmix>(); } set { this["Submix"] = value; } }
        public Array<SoundEffectSubmixPreset> SubmixEffectChain { get { return new Array<SoundEffectSubmixPreset>(this[nameof(SubmixEffectChain)].Address); } }
        public float CrossfadeTime { get { return this[nameof(CrossfadeTime)].GetValue<float>(); } set { this[nameof(CrossfadeTime)].SetValue<float>(value); } }
    }
    public class InteriorSettings : Object
    {
        public InteriorSettings(nint addr) : base(addr) { }
        public bool bIsWorldSettings { get { return this[nameof(bIsWorldSettings)].Flag; } set { this[nameof(bIsWorldSettings)].Flag = value; } }
        public float ExteriorVolume { get { return this[nameof(ExteriorVolume)].GetValue<float>(); } set { this[nameof(ExteriorVolume)].SetValue<float>(value); } }
        public float ExteriorTime { get { return this[nameof(ExteriorTime)].GetValue<float>(); } set { this[nameof(ExteriorTime)].SetValue<float>(value); } }
        public float ExteriorLPF { get { return this[nameof(ExteriorLPF)].GetValue<float>(); } set { this[nameof(ExteriorLPF)].SetValue<float>(value); } }
        public float ExteriorLPFTime { get { return this[nameof(ExteriorLPFTime)].GetValue<float>(); } set { this[nameof(ExteriorLPFTime)].SetValue<float>(value); } }
        public float InteriorVolume { get { return this[nameof(InteriorVolume)].GetValue<float>(); } set { this[nameof(InteriorVolume)].SetValue<float>(value); } }
        public float InteriorTime { get { return this[nameof(InteriorTime)].GetValue<float>(); } set { this[nameof(InteriorTime)].SetValue<float>(value); } }
        public float InteriorLPF { get { return this[nameof(InteriorLPF)].GetValue<float>(); } set { this[nameof(InteriorLPF)].SetValue<float>(value); } }
        public float InteriorLPFTime { get { return this[nameof(InteriorLPFTime)].GetValue<float>(); } set { this[nameof(InteriorLPFTime)].SetValue<float>(value); } }
    }
    public class NodeToCodeAssociation : Object
    {
        public NodeToCodeAssociation(nint addr) : base(addr) { }
    }
    public class DebuggingInfoForSingleFunction : Object
    {
        public DebuggingInfoForSingleFunction(nint addr) : base(addr) { }
    }
    public class PointerToUberGraphFrame : Object
    {
        public PointerToUberGraphFrame(nint addr) : base(addr) { }
    }
    public class BlueprintDebugData : Object
    {
        public BlueprintDebugData(nint addr) : base(addr) { }
    }
    public class EventGraphFastCallPair : Object
    {
        public EventGraphFastCallPair(nint addr) : base(addr) { }
        public Function FunctionToPatch { get { return this[nameof(FunctionToPatch)].As<Function>(); } set { this["FunctionToPatch"] = value; } }
        public int EventGraphCallOffset { get { return this[nameof(EventGraphCallOffset)].GetValue<int>(); } set { this[nameof(EventGraphCallOffset)].SetValue<int>(value); } }
    }
    public class BlueprintComponentChangedPropertyInfo : Object
    {
        public BlueprintComponentChangedPropertyInfo(nint addr) : base(addr) { }
        public Object PropertyName { get { return this[nameof(PropertyName)]; } set { this[nameof(PropertyName)] = value; } }
        public int ArrayIndex { get { return this[nameof(ArrayIndex)].GetValue<int>(); } set { this[nameof(ArrayIndex)].SetValue<int>(value); } }
        public Struct PropertyScope { get { return this[nameof(PropertyScope)].As<Struct>(); } set { this["PropertyScope"] = value; } }
    }
    public class BlueprintCookedComponentInstancingData : Object
    {
        public BlueprintCookedComponentInstancingData(nint addr) : base(addr) { }
        public Array<BlueprintComponentChangedPropertyInfo> ChangedPropertyList { get { return new Array<BlueprintComponentChangedPropertyInfo>(this[nameof(ChangedPropertyList)].Address); } }
        public bool bHasValidCookedData { get { return this[nameof(bHasValidCookedData)].Flag; } set { this[nameof(bHasValidCookedData)].Flag = value; } }
    }
    public class BPComponentClassOverride : Object
    {
        public BPComponentClassOverride(nint addr) : base(addr) { }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
        public Object ComponentClass { get { return this[nameof(ComponentClass)].As<Object>(); } set { this["ComponentClass"] = value; } } // ClassPtrProperty
    }
    public class AnimCurveType : Object
    {
        public AnimCurveType(nint addr) : base(addr) { }
    }
    public class BookmarkJumpToSettings : BookmarkBaseJumpToSettings
    {
        public BookmarkJumpToSettings(nint addr) : base(addr) { }
    }
    public class BuilderPoly : Object
    {
        public BuilderPoly(nint addr) : base(addr) { }
        public Array<int> VertexIndices { get { return new Array<int>(this[nameof(VertexIndices)].Address); } }
        public int Direction { get { return this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>(value); } }
        public Object ItemName { get { return this[nameof(ItemName)]; } set { this[nameof(ItemName)] = value; } }
        public int PolyFlags { get { return this[nameof(PolyFlags)].GetValue<int>(); } set { this[nameof(PolyFlags)].SetValue<int>(value); } }
    }
    public class CameraLensInterfaceClassSupport : Object
    {
        public CameraLensInterfaceClassSupport(nint addr) : base(addr) { }
        public Object Class { get { return this[nameof(Class)]; } set { this[nameof(Class)] = value; } }
    }
    public class PooledCameraShakes : Object
    {
        public PooledCameraShakes(nint addr) : base(addr) { }
        public Array<CameraShakeBase> PooledShakes { get { return new Array<CameraShakeBase>(this[nameof(PooledShakes)].Address); } }
    }
    public class ActiveCameraShakeInfo : Object
    {
        public ActiveCameraShakeInfo(nint addr) : base(addr) { }
        public CameraShakeBase ShakeInstance { get { return this[nameof(ShakeInstance)].As<CameraShakeBase>(); } set { this["ShakeInstance"] = value; } }
        public Object ShakeSource { get { return this[nameof(ShakeSource)]; } set { this[nameof(ShakeSource)] = value; } }
        public bool bIsCustomInitialized { get { return this[nameof(bIsCustomInitialized)].Flag; } set { this[nameof(bIsCustomInitialized)].Flag = value; } }
    }
    public class CameraShakeStartParams : Object
    {
        public CameraShakeStartParams(nint addr) : base(addr) { }
        public bool bIsRestarting { get { return this[nameof(bIsRestarting)].Flag; } set { this[nameof(bIsRestarting)].Flag = value; } }
    }
    public class CameraShakeUpdateParams : Object
    {
        public CameraShakeUpdateParams(nint addr) : base(addr) { }
        public float DeltaTime { get { return this[nameof(DeltaTime)].GetValue<float>(); } set { this[nameof(DeltaTime)].SetValue<float>(value); } }
        public float ShakeScale { get { return this[nameof(ShakeScale)].GetValue<float>(); } set { this[nameof(ShakeScale)].SetValue<float>(value); } }
        public float DynamicScale { get { return this[nameof(DynamicScale)].GetValue<float>(); } set { this[nameof(DynamicScale)].SetValue<float>(value); } }
        public float BlendingWeight { get { return this[nameof(BlendingWeight)].GetValue<float>(); } set { this[nameof(BlendingWeight)].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class CameraShakeScrubParams : Object
    {
        public CameraShakeScrubParams(nint addr) : base(addr) { }
        public float AbsoluteTime { get { return this[nameof(AbsoluteTime)].GetValue<float>(); } set { this[nameof(AbsoluteTime)].SetValue<float>(value); } }
        public float ShakeScale { get { return this[nameof(ShakeScale)].GetValue<float>(); } set { this[nameof(ShakeScale)].SetValue<float>(value); } }
        public float DynamicScale { get { return this[nameof(DynamicScale)].GetValue<float>(); } set { this[nameof(DynamicScale)].SetValue<float>(value); } }
        public float BlendingWeight { get { return this[nameof(BlendingWeight)].GetValue<float>(); } set { this[nameof(BlendingWeight)].SetValue<float>(value); } }
        public MinimalViewInfo POV { get { return this[nameof(POV)].As<MinimalViewInfo>(); } set { this["POV"] = value; } }
    }
    public class CameraShakeUpdateResult : Object
    {
        public CameraShakeUpdateResult(nint addr) : base(addr) { }
    }
    public class CameraShakeStopParams : Object
    {
        public CameraShakeStopParams(nint addr) : base(addr) { }
        public bool bImmediately { get { return this[nameof(bImmediately)].Flag; } set { this[nameof(bImmediately)].Flag = value; } }
    }
    public class CameraShakeDuration : Object
    {
        public CameraShakeDuration(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public ECameraShakeDurationType Type { get { return (ECameraShakeDurationType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class CameraShakeInfo : Object
    {
        public CameraShakeInfo(nint addr) : base(addr) { }
        public CameraShakeDuration Duration { get { return this[nameof(Duration)].As<CameraShakeDuration>(); } set { this["Duration"] = value; } }
        public float BlendIn { get { return this[nameof(BlendIn)].GetValue<float>(); } set { this[nameof(BlendIn)].SetValue<float>(value); } }
        public float BlendOut { get { return this[nameof(BlendOut)].GetValue<float>(); } set { this[nameof(BlendOut)].SetValue<float>(value); } }
    }
    public class DummySpacerCameraTypes : Object
    {
        public DummySpacerCameraTypes(nint addr) : base(addr) { }
    }
    public class CollisionResponseTemplate : Object
    {
        public CollisionResponseTemplate(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public byte CollisionEnabled { get { return this[nameof(CollisionEnabled)].GetValue<byte>(); } set { this[nameof(CollisionEnabled)].SetValue<byte>(value); } }
        public bool bCanModify { get { return this[nameof(bCanModify)].Flag; } set { this[nameof(bCanModify)].Flag = value; } }
        public Object ObjectTypeName { get { return this[nameof(ObjectTypeName)]; } set { this[nameof(ObjectTypeName)] = value; } }
        public Array<ResponseChannel> CustomResponses { get { return new Array<ResponseChannel>(this[nameof(CustomResponses)].Address); } }
    }
    public class CustomChannelSetup : Object
    {
        public CustomChannelSetup(nint addr) : base(addr) { }
        public byte Channel { get { return this[nameof(Channel)].GetValue<byte>(); } set { this[nameof(Channel)].SetValue<byte>(value); } }
        public byte DefaultResponse { get { return this[nameof(DefaultResponse)].GetValue<byte>(); } set { this[nameof(DefaultResponse)].SetValue<byte>(value); } }
        public bool bTraceType { get { return this[nameof(bTraceType)].Flag; } set { this[nameof(bTraceType)].Flag = value; } }
        public bool bStaticObject { get { return this[nameof(bStaticObject)].Flag; } set { this[nameof(bStaticObject)].Flag = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class CustomProfile : Object
    {
        public CustomProfile(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Array<ResponseChannel> CustomResponses { get { return new Array<ResponseChannel>(this[nameof(CustomResponses)].Address); } }
    }
    public class BlueprintComponentDelegateBinding : Object
    {
        public BlueprintComponentDelegateBinding(nint addr) : base(addr) { }
        public Object ComponentPropertyName { get { return this[nameof(ComponentPropertyName)]; } set { this[nameof(ComponentPropertyName)] = value; } }
        public Object DelegatePropertyName { get { return this[nameof(DelegatePropertyName)]; } set { this[nameof(DelegatePropertyName)] = value; } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class ActorComponentInstanceSourceInfo : Object
    {
        public ActorComponentInstanceSourceInfo(nint addr) : base(addr) { }
        public Object SourceComponentTemplate { get { return this[nameof(SourceComponentTemplate)].As<Object>(); } set { this["SourceComponentTemplate"] = value; } }
        public EComponentCreationMethod SourceComponentCreationMethod { get { return (EComponentCreationMethod)this[nameof(SourceComponentCreationMethod)].GetValue<int>(); } set { this[nameof(SourceComponentCreationMethod)].SetValue<int>((int)value); } }
        public int SourceComponentTypeSerializedIndex { get { return this[nameof(SourceComponentTypeSerializedIndex)].GetValue<int>(); } set { this[nameof(SourceComponentTypeSerializedIndex)].SetValue<int>(value); } }
    }
    public class ActorInstanceData : InstanceCacheDataBase
    {
        public ActorInstanceData(nint addr) : base(addr) { }
        public Object actorClass { get { return this[nameof(actorClass)]; } set { this[nameof(actorClass)] = value; } }
    }
    public class AudioComponentParam : AudioParameter
    {
        public AudioComponentParam(nint addr) : base(addr) { }
        public SoundWave SoundWaveParam { get { return this[nameof(SoundWaveParam)].As<SoundWave>(); } set { this["SoundWaveParam"] = value; } }
    }
    public class CharacterMovementComponentPrePhysicsTickFunction : TickFunction
    {
        public CharacterMovementComponentPrePhysicsTickFunction(nint addr) : base(addr) { }
    }
    public class ChildActorAttachedActorInfo : Object
    {
        public ChildActorAttachedActorInfo(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Transform RelativeTransform { get { return this[nameof(RelativeTransform)].As<Transform>(); } set { this["RelativeTransform"] = value; } }
    }
    public class ChildActorComponentInstanceData : SceneComponentInstanceData
    {
        public ChildActorComponentInstanceData(nint addr) : base(addr) { }
        public Object ChildActorClass { get { return this[nameof(ChildActorClass)]; } set { this[nameof(ChildActorClass)] = value; } }
        public Object ChildActorName { get { return this[nameof(ChildActorName)]; } set { this[nameof(ChildActorName)] = value; } }
        public Array<ChildActorAttachedActorInfo> AttachedActors { get { return new Array<ChildActorAttachedActorInfo>(this[nameof(AttachedActors)].Address); } }
    }
    public class CachedKeyToActionInfo : Object
    {
        public CachedKeyToActionInfo(nint addr) : base(addr) { }
        public Object PlayerInput { get { return this[nameof(PlayerInput)]; } set { this[nameof(PlayerInput)] = value; } }
    }
    public class PrecomputedLightInstanceData : SceneComponentInstanceData
    {
        public PrecomputedLightInstanceData(nint addr) : base(addr) { }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Guid LightGuid { get { return this[nameof(LightGuid)].As<Guid>(); } set { this["LightGuid"] = value; } }
        public int PreviewShadowMapChannel { get { return this[nameof(PreviewShadowMapChannel)].GetValue<int>(); } set { this[nameof(PreviewShadowMapChannel)].SetValue<int>(value); } }
    }
    public class BatchedLine : Object
    {
        public BatchedLine(nint addr) : base(addr) { }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public float Thickness { get { return this[nameof(Thickness)].GetValue<float>(); } set { this[nameof(Thickness)].SetValue<float>(value); } }
        public float RemainingLifeTime { get { return this[nameof(RemainingLifeTime)].GetValue<float>(); } set { this[nameof(RemainingLifeTime)].SetValue<float>(value); } }
        public byte DepthPriority { get { return this[nameof(DepthPriority)].GetValue<byte>(); } set { this[nameof(DepthPriority)].SetValue<byte>(value); } }
    }
    public class BatchedPoint : Object
    {
        public BatchedPoint(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public float PointSize { get { return this[nameof(PointSize)].GetValue<float>(); } set { this[nameof(PointSize)].SetValue<float>(value); } }
        public float RemainingLifeTime { get { return this[nameof(RemainingLifeTime)].GetValue<float>(); } set { this[nameof(RemainingLifeTime)].SetValue<float>(value); } }
        public byte DepthPriority { get { return this[nameof(DepthPriority)].GetValue<byte>(); } set { this[nameof(DepthPriority)].SetValue<byte>(value); } }
    }
    public class LODMappingData : Object
    {
        public LODMappingData(nint addr) : base(addr) { }
        public Array<int> Mapping { get { return new Array<int>(this[nameof(Mapping)].Address); } }
        public Array<int> InverseMapping { get { return new Array<int>(this[nameof(InverseMapping)].Address); } }
    }
    public class ComponentSync : Object
    {
        public ComponentSync(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public ESyncOption SyncOption { get { return (ESyncOption)this[nameof(SyncOption)].GetValue<int>(); } set { this[nameof(SyncOption)].SetValue<int>((int)value); } }
    }
    public class MaterialSpriteElement : Object
    {
        public MaterialSpriteElement(nint addr) : base(addr) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public CurveFloat DistanceToOpacityCurve { get { return this[nameof(DistanceToOpacityCurve)].As<CurveFloat>(); } set { this["DistanceToOpacityCurve"] = value; } }
        public bool bSizeIsInScreenSpace { get { return this[nameof(bSizeIsInScreenSpace)].Flag; } set { this[nameof(bSizeIsInScreenSpace)].Flag = value; } }
        public float BaseSizeX { get { return this[nameof(BaseSizeX)].GetValue<float>(); } set { this[nameof(BaseSizeX)].SetValue<float>(value); } }
        public float BaseSizeY { get { return this[nameof(BaseSizeY)].GetValue<float>(); } set { this[nameof(BaseSizeY)].SetValue<float>(value); } }
        public CurveFloat DistanceToSizeCurve { get { return this[nameof(DistanceToSizeCurve)].As<CurveFloat>(); } set { this["DistanceToSizeCurve"] = value; } }
    }
    public class EngineShowFlagsSetting : Object
    {
        public EngineShowFlagsSetting(nint addr) : base(addr) { }
        public Object ShowFlagName { get { return this[nameof(ShowFlagName)]; } set { this[nameof(ShowFlagName)] = value; } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
    }
    public class SkeletalMeshComponentEndPhysicsTickFunction : TickFunction
    {
        public SkeletalMeshComponentEndPhysicsTickFunction(nint addr) : base(addr) { }
    }
    public class SkeletalMeshComponentClothTickFunction : TickFunction
    {
        public SkeletalMeshComponentClothTickFunction(nint addr) : base(addr) { }
    }
    public class TentDistribution : Object
    {
        public TentDistribution(nint addr) : base(addr) { }
        public float TipAltitude { get { return this[nameof(TipAltitude)].GetValue<float>(); } set { this[nameof(TipAltitude)].SetValue<float>(value); } }
        public float TipValue { get { return this[nameof(TipValue)].GetValue<float>(); } set { this[nameof(TipValue)].SetValue<float>(value); } }
        public float Width { get { return this[nameof(Width)].GetValue<float>(); } set { this[nameof(Width)].SetValue<float>(value); } }
    }
    public class SplineCurves : Object
    {
        public SplineCurves(nint addr) : base(addr) { }
        public InterpCurveVector Position { get { return this[nameof(Position)].As<InterpCurveVector>(); } set { this["Position"] = value; } }
        public InterpCurveQuat Rotation { get { return this[nameof(Rotation)].As<InterpCurveQuat>(); } set { this["Rotation"] = value; } }
        public InterpCurveVector Scale { get { return this[nameof(Scale)].As<InterpCurveVector>(); } set { this["Scale"] = value; } }
        public InterpCurveFloat ReparamTable { get { return this[nameof(ReparamTable)].As<InterpCurveFloat>(); } set { this["ReparamTable"] = value; } }
        public SplineMetadata MetaData { get { return this[nameof(MetaData)].As<SplineMetadata>(); } set { this["MetaData"] = value; } }
        public uint Version { get { return this[nameof(Version)].GetValue<uint>(); } set { this[nameof(Version)].SetValue<uint>(value); } }
    }
    public class SplinePoint : Object
    {
        public SplinePoint(nint addr) : base(addr) { }
        public float InputKey { get { return this[nameof(InputKey)].GetValue<float>(); } set { this[nameof(InputKey)].SetValue<float>(value); } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector ArriveTangent { get { return this[nameof(ArriveTangent)].As<Vector>(); } set { this["ArriveTangent"] = value; } }
        public Vector LeaveTangent { get { return this[nameof(LeaveTangent)].As<Vector>(); } set { this["LeaveTangent"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public byte Type { get { return this[nameof(Type)].GetValue<byte>(); } set { this[nameof(Type)].SetValue<byte>(value); } }
    }
    public class SplineInstanceData : SceneComponentInstanceData
    {
        public SplineInstanceData(nint addr) : base(addr) { }
        public bool bSplineHasBeenEdited { get { return this[nameof(bSplineHasBeenEdited)].Flag; } set { this[nameof(bSplineHasBeenEdited)].Flag = value; } }
        public SplineCurves SplineCurves { get { return this[nameof(SplineCurves)].As<SplineCurves>(); } set { this["SplineCurves"] = value; } }
        public SplineCurves SplineCurvesPreUCS { get { return this[nameof(SplineCurvesPreUCS)].As<SplineCurves>(); } set { this["SplineCurvesPreUCS"] = value; } }
    }
    public class SplineMeshParams : Object
    {
        public SplineMeshParams(nint addr) : base(addr) { }
        public Vector StartPos { get { return this[nameof(StartPos)].As<Vector>(); } set { this["StartPos"] = value; } }
        public Vector StartTangent { get { return this[nameof(StartTangent)].As<Vector>(); } set { this["StartTangent"] = value; } }
        public Vector2D StartScale { get { return this[nameof(StartScale)].As<Vector2D>(); } set { this["StartScale"] = value; } }
        public float StartRoll { get { return this[nameof(StartRoll)].GetValue<float>(); } set { this[nameof(StartRoll)].SetValue<float>(value); } }
        public Vector2D StartOffset { get { return this[nameof(StartOffset)].As<Vector2D>(); } set { this["StartOffset"] = value; } }
        public Vector EndPos { get { return this[nameof(EndPos)].As<Vector>(); } set { this["EndPos"] = value; } }
        public Vector2D EndScale { get { return this[nameof(EndScale)].As<Vector2D>(); } set { this["EndScale"] = value; } }
        public Vector EndTangent { get { return this[nameof(EndTangent)].As<Vector>(); } set { this["EndTangent"] = value; } }
        public float EndRoll { get { return this[nameof(EndRoll)].GetValue<float>(); } set { this[nameof(EndRoll)].SetValue<float>(value); } }
        public Vector2D EndOffset { get { return this[nameof(EndOffset)].As<Vector2D>(); } set { this["EndOffset"] = value; } }
    }
    public class StaticMeshComponentInstanceData : PrimitiveComponentInstanceData
    {
        public StaticMeshComponentInstanceData(nint addr) : base(addr) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public Array<StaticMeshVertexColorLODData> VertexColorLODs { get { return new Array<StaticMeshVertexColorLODData>(this[nameof(VertexColorLODs)].Address); } }
        public Array<Guid> CachedStaticLighting { get { return new Array<Guid>(this[nameof(CachedStaticLighting)].Address); } }
        public Array<StreamingTextureBuildInfo> StreamingTextureData { get { return new Array<StreamingTextureBuildInfo>(this[nameof(StreamingTextureData)].Address); } }
    }
    public class StaticMeshVertexColorLODData : Object
    {
        public StaticMeshVertexColorLODData(nint addr) : base(addr) { }
        public Array<PaintedVertex> PaintedVertices { get { return new Array<PaintedVertex>(this[nameof(PaintedVertices)].Address); } }
        public Array<Color> VertexBufferColors { get { return new Array<Color>(this[nameof(VertexBufferColors)].Address); } }
        public uint LODIndex { get { return this[nameof(LODIndex)].GetValue<uint>(); } set { this[nameof(LODIndex)].SetValue<uint>(value); } }
    }
    public class PaintedVertex : Object
    {
        public PaintedVertex(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Vector4 Normal { get { return this[nameof(Normal)].As<Vector4>(); } set { this["Normal"] = value; } }
    }
    public class SplineMeshInstanceData : StaticMeshComponentInstanceData
    {
        public SplineMeshInstanceData(nint addr) : base(addr) { }
        public Vector StartPos { get { return this[nameof(StartPos)].As<Vector>(); } set { this["StartPos"] = value; } }
        public Vector EndPos { get { return this[nameof(EndPos)].As<Vector>(); } set { this["EndPos"] = value; } }
        public Vector StartTangent { get { return this[nameof(StartTangent)].As<Vector>(); } set { this["StartTangent"] = value; } }
        public Vector EndTangent { get { return this[nameof(EndTangent)].As<Vector>(); } set { this["EndTangent"] = value; } }
    }
    public class ObjectCookedMetaDataStore : Object
    {
        public ObjectCookedMetaDataStore(nint addr) : base(addr) { }
        public Object ObjectMetaData { get { return this[nameof(ObjectMetaData)]; } set { this[nameof(ObjectMetaData)] = value; } }
    }
    public class FieldCookedMetaDataStore : Object
    {
        public FieldCookedMetaDataStore(nint addr) : base(addr) { }
        public Object FieldMetaData { get { return this[nameof(FieldMetaData)]; } set { this[nameof(FieldMetaData)] = value; } }
    }
    public class StructCookedMetaDataStore : Object
    {
        public StructCookedMetaDataStore(nint addr) : base(addr) { }
        public ObjectCookedMetaDataStore ObjectMetaData { get { return this[nameof(ObjectMetaData)].As<ObjectCookedMetaDataStore>(); } set { this["ObjectMetaData"] = value; } }
        public Object PropertiesMetaData { get { return this[nameof(PropertiesMetaData)]; } set { this[nameof(PropertiesMetaData)] = value; } }
    }
    public class CullDistanceSizePair : Object
    {
        public CullDistanceSizePair(nint addr) : base(addr) { }
        public float Size { get { return this[nameof(Size)].GetValue<float>(); } set { this[nameof(Size)].SetValue<float>(value); } }
        public float CullDistance { get { return this[nameof(CullDistance)].GetValue<float>(); } set { this[nameof(CullDistance)].SetValue<float>(value); } }
    }
    public class RuntimeCurveLinearColor : Object
    {
        public RuntimeCurveLinearColor(nint addr) : base(addr) { }
        public RichCurve ColorCurves { get { return this[nameof(ColorCurves)].As<RichCurve>(); } set { this["ColorCurves"] = value; } }
        public CurveLinearColor ExternalCurve { get { return this[nameof(ExternalCurve)].As<CurveLinearColor>(); } set { this["ExternalCurve"] = value; } }
    }
    public class CurveAtlasColorAdjustments : Object
    {
        public CurveAtlasColorAdjustments(nint addr) : base(addr) { }
        public bool bChromaKeyTexture { get { return this[nameof(bChromaKeyTexture)].Flag; } set { this[nameof(bChromaKeyTexture)].Flag = value; } }
        public float AdjustBrightness { get { return this[nameof(AdjustBrightness)].GetValue<float>(); } set { this[nameof(AdjustBrightness)].SetValue<float>(value); } }
        public float AdjustBrightnessCurve { get { return this[nameof(AdjustBrightnessCurve)].GetValue<float>(); } set { this[nameof(AdjustBrightnessCurve)].SetValue<float>(value); } }
        public float AdjustVibrance { get { return this[nameof(AdjustVibrance)].GetValue<float>(); } set { this[nameof(AdjustVibrance)].SetValue<float>(value); } }
        public float AdjustSaturation { get { return this[nameof(AdjustSaturation)].GetValue<float>(); } set { this[nameof(AdjustSaturation)].SetValue<float>(value); } }
        public float AdjustRGBCurve { get { return this[nameof(AdjustRGBCurve)].GetValue<float>(); } set { this[nameof(AdjustRGBCurve)].SetValue<float>(value); } }
        public float AdjustHue { get { return this[nameof(AdjustHue)].GetValue<float>(); } set { this[nameof(AdjustHue)].SetValue<float>(value); } }
        public float AdjustMinAlpha { get { return this[nameof(AdjustMinAlpha)].GetValue<float>(); } set { this[nameof(AdjustMinAlpha)].SetValue<float>(value); } }
        public float AdjustMaxAlpha { get { return this[nameof(AdjustMaxAlpha)].GetValue<float>(); } set { this[nameof(AdjustMaxAlpha)].SetValue<float>(value); } }
    }
    public class RuntimeVectorCurve : Object
    {
        public RuntimeVectorCurve(nint addr) : base(addr) { }
        public RichCurve VectorCurves { get { return this[nameof(VectorCurves)].As<RichCurve>(); } set { this["VectorCurves"] = value; } }
        public CurveVector ExternalCurve { get { return this[nameof(ExternalCurve)].As<CurveVector>(); } set { this["ExternalCurve"] = value; } }
    }
    public class IntegralKey : Object
    {
        public IntegralKey(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public class IntegralCurve : IndexedCurve
    {
        public IntegralCurve(nint addr) : base(addr) { }
        public Array<IntegralKey> Keys { get { return new Array<IntegralKey>(this[nameof(Keys)].Address); } }
        public int DefaultValue { get { return this[nameof(DefaultValue)].GetValue<int>(); } set { this[nameof(DefaultValue)].SetValue<int>(value); } }
        public bool bUseDefaultValueBeforeFirstKey { get { return this[nameof(bUseDefaultValueBeforeFirstKey)].Flag; } set { this[nameof(bUseDefaultValueBeforeFirstKey)].Flag = value; } }
    }
    public class NameCurveKey : Object
    {
        public NameCurveKey(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class NameCurve : IndexedCurve
    {
        public NameCurve(nint addr) : base(addr) { }
        public Array<NameCurveKey> Keys { get { return new Array<NameCurveKey>(this[nameof(Keys)].Address); } }
    }
    public class SimpleCurveKey : Object
    {
        public SimpleCurveKey(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class SimpleCurve : RealCurve
    {
        public SimpleCurve(nint addr) : base(addr) { }
        public byte InterpMode { get { return this[nameof(InterpMode)].GetValue<byte>(); } set { this[nameof(InterpMode)].SetValue<byte>(value); } }
        public Array<SimpleCurveKey> Keys { get { return new Array<SimpleCurveKey>(this[nameof(Keys)].Address); } }
    }
    public class StringCurveKey : Object
    {
        public StringCurveKey(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class StringCurve : IndexedCurve
    {
        public StringCurve(nint addr) : base(addr) { }
        public Object DefaultValue { get { return this[nameof(DefaultValue)]; } set { this[nameof(DefaultValue)] = value; } }
        public Array<StringCurveKey> Keys { get { return new Array<StringCurveKey>(this[nameof(Keys)].Address); } }
    }
    public class CurveTableRowHandle : Object
    {
        public CurveTableRowHandle(nint addr) : base(addr) { }
        public CurveTable CurveTable { get { return this[nameof(CurveTable)].As<CurveTable>(); } set { this["CurveTable"] = value; } }
        public Object RowName { get { return this[nameof(RowName)]; } set { this[nameof(RowName)] = value; } }
    }
    public class DataDrivenConsoleVariable : Object
    {
        public DataDrivenConsoleVariable(nint addr) : base(addr) { }
        public FDataDrivenCVarType Type { get { return (FDataDrivenCVarType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Tooltip { get { return this[nameof(Tooltip)]; } set { this[nameof(Tooltip)] = value; } }
        public float DefaultValueFloat { get { return this[nameof(DefaultValueFloat)].GetValue<float>(); } set { this[nameof(DefaultValueFloat)].SetValue<float>(value); } }
        public int DefaultValueInt { get { return this[nameof(DefaultValueInt)].GetValue<int>(); } set { this[nameof(DefaultValueInt)].SetValue<int>(value); } }
        public bool DefaultValueBool { get { return this[nameof(DefaultValueBool)].Flag; } set { this[nameof(DefaultValueBool)].Flag = value; } }
    }
    public class DataTableCategoryHandle : Object
    {
        public DataTableCategoryHandle(nint addr) : base(addr) { }
        public DataTable DataTable { get { return this[nameof(DataTable)].As<DataTable>(); } set { this["DataTable"] = value; } }
        public Object ColumnName { get { return this[nameof(ColumnName)]; } set { this[nameof(ColumnName)] = value; } }
        public Object RowContents { get { return this[nameof(RowContents)]; } set { this[nameof(RowContents)] = value; } }
    }
    public class DebugCameraControllerSettingsViewModeIndex : Object
    {
        public DebugCameraControllerSettingsViewModeIndex(nint addr) : base(addr) { }
        public byte ViewModeIndex { get { return this[nameof(ViewModeIndex)].GetValue<byte>(); } set { this[nameof(ViewModeIndex)].SetValue<byte>(value); } }
    }
    public class RollbackNetStartupActorInfo : Object
    {
        public RollbackNetStartupActorInfo(nint addr) : base(addr) { }
        public Object Archetype { get { return this[nameof(Archetype)].As<Object>(); } set { this["Archetype"] = value; } }
        public Array<Object> ObjReferences { get { return new Array<Object>(this[nameof(ObjReferences)].Address); } }
    }
    public class MulticastRecordOptions : Object
    {
        public MulticastRecordOptions(nint addr) : base(addr) { }
        public Object FuncPathName { get { return this[nameof(FuncPathName)]; } set { this[nameof(FuncPathName)] = value; } }
        public bool bServerSkip { get { return this[nameof(bServerSkip)].Flag; } set { this[nameof(bServerSkip)].Flag = value; } }
        public bool bClientSkip { get { return this[nameof(bClientSkip)].Flag; } set { this[nameof(bClientSkip)].Flag = value; } }
    }
    public class SelectedFragmentProperties : Object
    {
        public SelectedFragmentProperties(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Object Fragment { get { return this[nameof(Fragment)]; } set { this[nameof(Fragment)] = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
    }
    public class DPMatchingIfCondition : Object
    {
        public DPMatchingIfCondition(nint addr) : base(addr) { }
        public Object Operator { get { return this[nameof(Operator)]; } set { this[nameof(Operator)] = value; } }
        public Object Arg1 { get { return this[nameof(Arg1)]; } set { this[nameof(Arg1)] = value; } }
        public Object Arg2 { get { return this[nameof(Arg2)]; } set { this[nameof(Arg2)] = value; } }
    }
    public class DPMatchingRulestructBase : Object
    {
        public DPMatchingRulestructBase(nint addr) : base(addr) { }
        public Object RuleName { get { return this[nameof(RuleName)]; } set { this[nameof(RuleName)] = value; } }
        public Array<DPMatchingIfCondition> IfConditions { get { return new Array<DPMatchingIfCondition>(this[nameof(IfConditions)].Address); } }
        public Object AppendFragments { get { return this[nameof(AppendFragments)]; } set { this[nameof(AppendFragments)] = value; } }
        public Object SetUserVar { get { return this[nameof(SetUserVar)]; } set { this[nameof(SetUserVar)] = value; } }
    }
    public class DPMatchingRulestructA : DPMatchingRulestructBase
    {
        public DPMatchingRulestructA(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructBase> OnTrue { get { return new Array<DPMatchingRulestructBase>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructBase> OnFalse { get { return new Array<DPMatchingRulestructBase>(this[nameof(OnFalse)].Address); } }
    }
    public class DPMatchingRulestructB : DPMatchingRulestructBase
    {
        public DPMatchingRulestructB(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructA> OnTrue { get { return new Array<DPMatchingRulestructA>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructA> OnFalse { get { return new Array<DPMatchingRulestructA>(this[nameof(OnFalse)].Address); } }
    }
    public class DPMatchingRulestructC : DPMatchingRulestructBase
    {
        public DPMatchingRulestructC(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructB> OnTrue { get { return new Array<DPMatchingRulestructB>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructB> OnFalse { get { return new Array<DPMatchingRulestructB>(this[nameof(OnFalse)].Address); } }
    }
    public class DPMatchingRulestructD : DPMatchingRulestructBase
    {
        public DPMatchingRulestructD(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructC> OnTrue { get { return new Array<DPMatchingRulestructC>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructC> OnFalse { get { return new Array<DPMatchingRulestructC>(this[nameof(OnFalse)].Address); } }
    }
    public class DPMatchingRulestructE : DPMatchingRulestructBase
    {
        public DPMatchingRulestructE(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructD> OnTrue { get { return new Array<DPMatchingRulestructD>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructD> OnFalse { get { return new Array<DPMatchingRulestructD>(this[nameof(OnFalse)].Address); } }
    }
    public class DPMatchingRulestruct : DPMatchingRulestructBase
    {
        public DPMatchingRulestruct(nint addr) : base(addr) { }
        public Array<DPMatchingRulestructE> OnTrue { get { return new Array<DPMatchingRulestructE>(this[nameof(OnTrue)].Address); } }
        public Array<DPMatchingRulestructE> OnFalse { get { return new Array<DPMatchingRulestructE>(this[nameof(OnFalse)].Address); } }
    }
    public class DialogueContext : Object
    {
        public DialogueContext(nint addr) : base(addr) { }
        public DialogueVoice Speaker { get { return this[nameof(Speaker)].As<DialogueVoice>(); } set { this["Speaker"] = value; } }
        public Array<DialogueVoice> Targets { get { return new Array<DialogueVoice>(this[nameof(Targets)].Address); } }
    }
    public class DialogueWaveParameter : Object
    {
        public DialogueWaveParameter(nint addr) : base(addr) { }
        public DialogueWave DialogueWave { get { return this[nameof(DialogueWave)].As<DialogueWave>(); } set { this["DialogueWave"] = value; } }
        public DialogueContext Context { get { return this[nameof(Context)].As<DialogueContext>(); } set { this["Context"] = value; } }
    }
    public class DialogueContextMapping : Object
    {
        public DialogueContextMapping(nint addr) : base(addr) { }
        public DialogueContext Context { get { return this[nameof(Context)].As<DialogueContext>(); } set { this["Context"] = value; } }
        public SoundWave SoundWave { get { return this[nameof(SoundWave)].As<SoundWave>(); } set { this["SoundWave"] = value; } }
        public Object LocalizationKeyFormat { get { return this[nameof(LocalizationKeyFormat)]; } set { this[nameof(LocalizationKeyFormat)] = value; } }
        public DialogueSoundWaveProxy Proxy { get { return this[nameof(Proxy)].As<DialogueSoundWaveProxy>(); } set { this["Proxy"] = value; } }
    }
    public class GraphReference : Object
    {
        public GraphReference(nint addr) : base(addr) { }
        public EdGraph MacroGraph { get { return this[nameof(MacroGraph)].As<EdGraph>(); } set { this["MacroGraph"] = value; } }
        public Blueprint GraphBlueprint { get { return this[nameof(GraphBlueprint)].As<Blueprint>(); } set { this["GraphBlueprint"] = value; } }
        public Guid GraphGuid { get { return this[nameof(GraphGuid)].As<Guid>(); } set { this["GraphGuid"] = value; } }
    }
    public class AssetImportInfo : Object
    {
        public AssetImportInfo(nint addr) : base(addr) { }
    }
    public class TypedElementDeletionOptions : Object
    {
        public TypedElementDeletionOptions(nint addr) : base(addr) { }
        public bool bVerifyDeletionCanHappen { get { return this[nameof(bVerifyDeletionCanHappen)].Flag; } set { this[nameof(bVerifyDeletionCanHappen)].Flag = value; } }
        public bool bWarnAboutReferences { get { return this[nameof(bWarnAboutReferences)].Flag; } set { this[nameof(bWarnAboutReferences)].Flag = value; } }
        public bool bWarnAboutSoftReferences { get { return this[nameof(bWarnAboutSoftReferences)].Flag; } set { this[nameof(bWarnAboutSoftReferences)].Flag = value; } }
    }
    public class DamageEvent : Object
    {
        public DamageEvent(nint addr) : base(addr) { }
        public Object DamageTypeClass { get { return this[nameof(DamageTypeClass)]; } set { this[nameof(DamageTypeClass)] = value; } }
    }
    public class PointDamageEvent : DamageEvent
    {
        public PointDamageEvent(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public Vector_NetQuantizeNormal ShotDirection { get { return this[nameof(ShotDirection)].As<Vector_NetQuantizeNormal>(); } set { this["ShotDirection"] = value; } }
        public HitResult HitInfo { get { return this[nameof(HitInfo)].As<HitResult>(); } set { this["HitInfo"] = value; } }
    }
    public class RadialDamageParams : Object
    {
        public RadialDamageParams(nint addr) : base(addr) { }
        public float BaseDamage { get { return this[nameof(BaseDamage)].GetValue<float>(); } set { this[nameof(BaseDamage)].SetValue<float>(value); } }
        public float MinimumDamage { get { return this[nameof(MinimumDamage)].GetValue<float>(); } set { this[nameof(MinimumDamage)].SetValue<float>(value); } }
        public float InnerRadius { get { return this[nameof(InnerRadius)].GetValue<float>(); } set { this[nameof(InnerRadius)].SetValue<float>(value); } }
        public float OuterRadius { get { return this[nameof(OuterRadius)].GetValue<float>(); } set { this[nameof(OuterRadius)].SetValue<float>(value); } }
        public float DamageFalloff { get { return this[nameof(DamageFalloff)].GetValue<float>(); } set { this[nameof(DamageFalloff)].SetValue<float>(value); } }
    }
    public class RadialDamageEvent : DamageEvent
    {
        public RadialDamageEvent(nint addr) : base(addr) { }
        public RadialDamageParams Params { get { return this[nameof(Params)].As<RadialDamageParams>(); } set { this["Params"] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public Array<HitResult> ComponentHits { get { return new Array<HitResult>(this[nameof(ComponentHits)].Address); } }
    }
    public class RigidBodyState : Object
    {
        public RigidBodyState(nint addr) : base(addr) { }
        public Vector_NetQuantize100 Position { get { return this[nameof(Position)].As<Vector_NetQuantize100>(); } set { this["Position"] = value; } }
        public Quat Quaternion { get { return this[nameof(Quaternion)].As<Quat>(); } set { this["Quaternion"] = value; } }
        public Vector_NetQuantize100 LinVel { get { return this[nameof(LinVel)].As<Vector_NetQuantize100>(); } set { this["LinVel"] = value; } }
        public Vector_NetQuantize100 AngVel { get { return this[nameof(AngVel)].As<Vector_NetQuantize100>(); } set { this["AngVel"] = value; } }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
    }
    public class FontCharacter : Object
    {
        public FontCharacter(nint addr) : base(addr) { }
        public int StartU { get { return this[nameof(StartU)].GetValue<int>(); } set { this[nameof(StartU)].SetValue<int>(value); } }
        public int StartV { get { return this[nameof(StartV)].GetValue<int>(); } set { this[nameof(StartV)].SetValue<int>(value); } }
        public int USize { get { return this[nameof(USize)].GetValue<int>(); } set { this[nameof(USize)].SetValue<int>(value); } }
        public int VSize { get { return this[nameof(VSize)].GetValue<int>(); } set { this[nameof(VSize)].SetValue<int>(value); } }
        public byte TextureIndex { get { return this[nameof(TextureIndex)].GetValue<byte>(); } set { this[nameof(TextureIndex)].SetValue<byte>(value); } }
        public int VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<int>(); } set { this[nameof(VerticalOffset)].SetValue<int>(value); } }
    }
    public class ForceFeedbackChannelDetails : Object
    {
        public ForceFeedbackChannelDetails(nint addr) : base(addr) { }
        public bool bAffectsLeftLarge { get { return this[nameof(bAffectsLeftLarge)].Flag; } set { this[nameof(bAffectsLeftLarge)].Flag = value; } }
        public bool bAffectsLeftSmall { get { return this[nameof(bAffectsLeftSmall)].Flag; } set { this[nameof(bAffectsLeftSmall)].Flag = value; } }
        public bool bAffectsRightLarge { get { return this[nameof(bAffectsRightLarge)].Flag; } set { this[nameof(bAffectsRightLarge)].Flag = value; } }
        public bool bAffectsRightSmall { get { return this[nameof(bAffectsRightSmall)].Flag; } set { this[nameof(bAffectsRightSmall)].Flag = value; } }
        public RuntimeFloatCurve Curve { get { return this[nameof(Curve)].As<RuntimeFloatCurve>(); } set { this["Curve"] = value; } }
    }
    public class RootMotionSourceStatus : Object
    {
        public RootMotionSourceStatus(nint addr) : base(addr) { }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
    }
    public class RootMotionFinishVelocitySettings : Object
    {
        public RootMotionFinishVelocitySettings(nint addr) : base(addr) { }
        public ERootMotionFinishVelocityMode Mode { get { return (ERootMotionFinishVelocityMode)this[nameof(Mode)].GetValue<int>(); } set { this[nameof(Mode)].SetValue<int>((int)value); } }
        public Vector SetVelocity { get { return this[nameof(SetVelocity)].As<Vector>(); } set { this["SetVelocity"] = value; } }
        public float ClampVelocity { get { return this[nameof(ClampVelocity)].GetValue<float>(); } set { this[nameof(ClampVelocity)].SetValue<float>(value); } }
    }
    public class RootMotionSource : Object
    {
        public RootMotionSource(nint addr) : base(addr) { }
        public ushort Priority { get { return this[nameof(Priority)].GetValue<ushort>(); } set { this[nameof(Priority)].SetValue<ushort>(value); } }
        public ushort LocalID { get { return this[nameof(LocalID)].GetValue<ushort>(); } set { this[nameof(LocalID)].SetValue<ushort>(value); } }
        public ERootMotionAccumulateMode AccumulateMode { get { return (ERootMotionAccumulateMode)this[nameof(AccumulateMode)].GetValue<int>(); } set { this[nameof(AccumulateMode)].SetValue<int>((int)value); } }
        public Object InstanceName { get { return this[nameof(InstanceName)]; } set { this[nameof(InstanceName)] = value; } }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public float CurrentTime { get { return this[nameof(CurrentTime)].GetValue<float>(); } set { this[nameof(CurrentTime)].SetValue<float>(value); } }
        public float PreviousTime { get { return this[nameof(PreviousTime)].GetValue<float>(); } set { this[nameof(PreviousTime)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public RootMotionSourceStatus Status { get { return this[nameof(Status)].As<RootMotionSourceStatus>(); } set { this["Status"] = value; } }
        public RootMotionSourceSettings Settings { get { return this[nameof(Settings)].As<RootMotionSourceSettings>(); } set { this["Settings"] = value; } }
        public bool bInLocalSpace { get { return this[nameof(bInLocalSpace)].Flag; } set { this[nameof(bInLocalSpace)].Flag = value; } }
        public RootMotionMovementParams RootMotionParams { get { return this[nameof(RootMotionParams)].As<RootMotionMovementParams>(); } set { this["RootMotionParams"] = value; } }
        public RootMotionFinishVelocitySettings FinishVelocityParams { get { return this[nameof(FinishVelocityParams)].As<RootMotionFinishVelocitySettings>(); } set { this["FinishVelocityParams"] = value; } }
    }
    public class RootMotionSource_ConstantForce : RootMotionSource
    {
        public RootMotionSource_ConstantForce(nint addr) : base(addr) { }
        public Vector Force { get { return this[nameof(Force)].As<Vector>(); } set { this["Force"] = value; } }
        public CurveFloat StrengthOverTime { get { return this[nameof(StrengthOverTime)].As<CurveFloat>(); } set { this["StrengthOverTime"] = value; } }
    }
    public class RootMotionSource_RadialForce : RootMotionSource
    {
        public RootMotionSource_RadialForce(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Actor LocationActor { get { return this[nameof(LocationActor)].As<Actor>(); } set { this["LocationActor"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float Strength { get { return this[nameof(Strength)].GetValue<float>(); } set { this[nameof(Strength)].SetValue<float>(value); } }
        public bool bIsPush { get { return this[nameof(bIsPush)].Flag; } set { this[nameof(bIsPush)].Flag = value; } }
        public bool bNoZForce { get { return this[nameof(bNoZForce)].Flag; } set { this[nameof(bNoZForce)].Flag = value; } }
        public CurveFloat StrengthDistanceFalloff { get { return this[nameof(StrengthDistanceFalloff)].As<CurveFloat>(); } set { this["StrengthDistanceFalloff"] = value; } }
        public CurveFloat StrengthOverTime { get { return this[nameof(StrengthOverTime)].As<CurveFloat>(); } set { this["StrengthOverTime"] = value; } }
        public bool bUseFixedWorldDirection { get { return this[nameof(bUseFixedWorldDirection)].Flag; } set { this[nameof(bUseFixedWorldDirection)].Flag = value; } }
        public Rotator FixedWorldDirection { get { return this[nameof(FixedWorldDirection)].As<Rotator>(); } set { this["FixedWorldDirection"] = value; } }
    }
    public class RootMotionSource_MoveToForce : RootMotionSource
    {
        public RootMotionSource_MoveToForce(nint addr) : base(addr) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public bool bRestrictSpeedToExpected { get { return this[nameof(bRestrictSpeedToExpected)].Flag; } set { this[nameof(bRestrictSpeedToExpected)].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
    }
    public class RootMotionSource_MoveToDynamicForce : RootMotionSource
    {
        public RootMotionSource_MoveToDynamicForce(nint addr) : base(addr) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector InitialTargetLocation { get { return this[nameof(InitialTargetLocation)].As<Vector>(); } set { this["InitialTargetLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public bool bRestrictSpeedToExpected { get { return this[nameof(bRestrictSpeedToExpected)].Flag; } set { this[nameof(bRestrictSpeedToExpected)].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
        public CurveFloat TimeMappingCurve { get { return this[nameof(TimeMappingCurve)].As<CurveFloat>(); } set { this["TimeMappingCurve"] = value; } }
    }
    public class RootMotionSource_JumpForce : RootMotionSource
    {
        public RootMotionSource_JumpForce(nint addr) : base(addr) { }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public float Height { get { return this[nameof(Height)].GetValue<float>(); } set { this[nameof(Height)].SetValue<float>(value); } }
        public bool bDisableTimeout { get { return this[nameof(bDisableTimeout)].Flag; } set { this[nameof(bDisableTimeout)].Flag = value; } }
        public CurveVector PathOffsetCurve { get { return this[nameof(PathOffsetCurve)].As<CurveVector>(); } set { this["PathOffsetCurve"] = value; } }
        public CurveFloat TimeMappingCurve { get { return this[nameof(TimeMappingCurve)].As<CurveFloat>(); } set { this["TimeMappingCurve"] = value; } }
    }
    public class TouchInputControl : Object
    {
        public TouchInputControl(nint addr) : base(addr) { }
        public Texture2D Image1 { get { return this[nameof(Image1)].As<Texture2D>(); } set { this["Image1"] = value; } }
        public Texture2D Image2 { get { return this[nameof(Image2)].As<Texture2D>(); } set { this["Image2"] = value; } }
        public Vector2D Center { get { return this[nameof(Center)].As<Vector2D>(); } set { this["Center"] = value; } }
        public Vector2D VisualSize { get { return this[nameof(VisualSize)].As<Vector2D>(); } set { this["VisualSize"] = value; } }
        public Vector2D ThumbSize { get { return this[nameof(ThumbSize)].As<Vector2D>(); } set { this["ThumbSize"] = value; } }
        public Vector2D InteractionSize { get { return this[nameof(InteractionSize)].As<Vector2D>(); } set { this["InteractionSize"] = value; } }
        public Vector2D InputScale { get { return this[nameof(InputScale)].As<Vector2D>(); } set { this["InputScale"] = value; } }
        public Key MainInputKey { get { return this[nameof(MainInputKey)].As<Key>(); } set { this["MainInputKey"] = value; } }
        public Key AltInputKey { get { return this[nameof(AltInputKey)].As<Key>(); } set { this["AltInputKey"] = value; } }
    }
    public class HLODISMComponentDesc : Object
    {
        public HLODISMComponentDesc(nint addr) : base(addr) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public Array<Transform> Instances { get { return new Array<Transform>(this[nameof(Instances)].Address); } }
        public Array<CustomPrimitiveData> InstancesCustomPrimitiveData { get { return new Array<CustomPrimitiveData>(this[nameof(InstancesCustomPrimitiveData)].Address); } }
    }
    public class HLODProxyMesh : Object
    {
        public HLODProxyMesh(nint addr) : base(addr) { }
        public Object LODActor { get { return this[nameof(LODActor)]; } set { this[nameof(LODActor)] = value; } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
    }
    public class ComponentKey : Object
    {
        public ComponentKey(nint addr) : base(addr) { }
        public Object OwnerClass { get { return this[nameof(OwnerClass)].As<Object>(); } set { this["OwnerClass"] = value; } } // ClassPtrProperty
        public Object SCSVariableName { get { return this[nameof(SCSVariableName)]; } set { this[nameof(SCSVariableName)] = value; } }
        public Guid AssociatedGuid { get { return this[nameof(AssociatedGuid)].As<Guid>(); } set { this["AssociatedGuid"] = value; } }
    }
    public class ComponentOverrideRecord : Object
    {
        public ComponentOverrideRecord(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)].As<Object>(); } set { this["ComponentClass"] = value; } } // ClassPtrProperty
        public ActorComponent ComponentTemplate { get { return this[nameof(ComponentTemplate)].As<ActorComponent>(); } set { this["ComponentTemplate"] = value; } }
        public ComponentKey ComponentKey { get { return this[nameof(ComponentKey)].As<ComponentKey>(); } set { this["ComponentKey"] = value; } }
        public BlueprintCookedComponentInstancingData CookedComponentInstancingData { get { return this[nameof(CookedComponentInstancingData)].As<BlueprintCookedComponentInstancingData>(); } set { this["CookedComponentInstancingData"] = value; } }
    }
    public class BlueprintInputDelegateBinding : Object
    {
        public BlueprintInputDelegateBinding(nint addr) : base(addr) { }
        public bool bConsumeInput { get { return this[nameof(bConsumeInput)].Flag; } set { this[nameof(bConsumeInput)].Flag = value; } }
        public bool bExecuteWhenPaused { get { return this[nameof(bExecuteWhenPaused)].Flag; } set { this[nameof(bExecuteWhenPaused)].Flag = value; } }
        public bool bOverrideParentBinding { get { return this[nameof(bOverrideParentBinding)].Flag; } set { this[nameof(bOverrideParentBinding)].Flag = value; } }
    }
    public class BlueprintInputActionDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputActionDelegateBinding(nint addr) : base(addr) { }
        public Object InputActionName { get { return this[nameof(InputActionName)]; } set { this[nameof(InputActionName)] = value; } }
        public byte InputKeyEvent { get { return this[nameof(InputKeyEvent)].GetValue<byte>(); } set { this[nameof(InputKeyEvent)].SetValue<byte>(value); } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class BlueprintInputAxisDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputAxisDelegateBinding(nint addr) : base(addr) { }
        public Object InputAxisName { get { return this[nameof(InputAxisName)]; } set { this[nameof(InputAxisName)] = value; } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class BlueprintInputAxisKeyDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputAxisKeyDelegateBinding(nint addr) : base(addr) { }
        public Key AxisKey { get { return this[nameof(AxisKey)].As<Key>(); } set { this["AxisKey"] = value; } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class BlueprintInputKeyDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputKeyDelegateBinding(nint addr) : base(addr) { }
        public InputChord InputChord { get { return this[nameof(InputChord)].As<InputChord>(); } set { this["InputChord"] = value; } }
        public byte InputKeyEvent { get { return this[nameof(InputKeyEvent)].GetValue<byte>(); } set { this[nameof(InputKeyEvent)].SetValue<byte>(value); } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class BlueprintInputTouchDelegateBinding : BlueprintInputDelegateBinding
    {
        public BlueprintInputTouchDelegateBinding(nint addr) : base(addr) { }
        public byte InputKeyEvent { get { return this[nameof(InputKeyEvent)].GetValue<byte>(); } set { this[nameof(InputKeyEvent)].SetValue<byte>(value); } }
        public Object FunctionNameToBind { get { return this[nameof(FunctionNameToBind)]; } set { this[nameof(FunctionNameToBind)] = value; } }
    }
    public class CurveEdEntry : Object
    {
        public CurveEdEntry(nint addr) : base(addr) { }
        public Object CurveObject { get { return this[nameof(CurveObject)].As<Object>(); } set { this["CurveObject"] = value; } }
        public Color CurveColor { get { return this[nameof(CurveColor)].As<Color>(); } set { this["CurveColor"] = value; } }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public int bHideCurve { get { return this[nameof(bHideCurve)].GetValue<int>(); } set { this[nameof(bHideCurve)].SetValue<int>(value); } }
        public int bColorCurve { get { return this[nameof(bColorCurve)].GetValue<int>(); } set { this[nameof(bColorCurve)].SetValue<int>(value); } }
        public int bFloatingPointColorCurve { get { return this[nameof(bFloatingPointColorCurve)].GetValue<int>(); } set { this[nameof(bFloatingPointColorCurve)].SetValue<int>(value); } }
        public int bClamp { get { return this[nameof(bClamp)].GetValue<int>(); } set { this[nameof(bClamp)].SetValue<int>(value); } }
        public float ClampLow { get { return this[nameof(ClampLow)].GetValue<float>(); } set { this[nameof(ClampLow)].SetValue<float>(value); } }
        public float ClampHigh { get { return this[nameof(ClampHigh)].GetValue<float>(); } set { this[nameof(ClampHigh)].SetValue<float>(value); } }
    }
    public class CurveEdTab : Object
    {
        public CurveEdTab(nint addr) : base(addr) { }
        public Object TabName { get { return this[nameof(TabName)]; } set { this[nameof(TabName)] = value; } }
        public Array<CurveEdEntry> Curves { get { return new Array<CurveEdEntry>(this[nameof(Curves)].Address); } }
        public float ViewStartInput { get { return this[nameof(ViewStartInput)].GetValue<float>(); } set { this[nameof(ViewStartInput)].SetValue<float>(value); } }
        public float ViewEndInput { get { return this[nameof(ViewEndInput)].GetValue<float>(); } set { this[nameof(ViewEndInput)].SetValue<float>(value); } }
        public float ViewStartOutput { get { return this[nameof(ViewStartOutput)].GetValue<float>(); } set { this[nameof(ViewStartOutput)].SetValue<float>(value); } }
        public float ViewEndOutput { get { return this[nameof(ViewEndOutput)].GetValue<float>(); } set { this[nameof(ViewEndOutput)].SetValue<float>(value); } }
    }
    public class ISMComponentInstance : Object
    {
        public ISMComponentInstance(nint addr) : base(addr) { }
        public int ClientIndex { get { return this[nameof(ClientIndex)].GetValue<int>(); } set { this[nameof(ClientIndex)].SetValue<int>(value); } }
        public int InstanceIndex { get { return this[nameof(InstanceIndex)].GetValue<int>(); } set { this[nameof(InstanceIndex)].SetValue<int>(value); } }
        public int InstanceSubIndex { get { return this[nameof(InstanceSubIndex)].GetValue<int>(); } set { this[nameof(InstanceSubIndex)].SetValue<int>(value); } }
    }
    public class ISMClientInstance : Object
    {
        public ISMClientInstance(nint addr) : base(addr) { }
        public Array<int> ComponentIndices { get { return new Array<int>(this[nameof(ComponentIndices)].Address); } }
    }
    public class ISMClientData : Object
    {
        public ISMClientData(nint addr) : base(addr) { }
        public Array<ISMClientInstance> Instances { get { return new Array<ISMClientInstance>(this[nameof(Instances)].Address); } }
    }
    public class ISMComponentData : Object
    {
        public ISMComponentData(nint addr) : base(addr) { }
    }
    public class ISMComponentDescriptor : Object
    {
        public ISMComponentDescriptor(nint addr) : base(addr) { }
    }
    public class SlateModifierKeysState : Object
    {
        public SlateModifierKeysState(nint addr) : base(addr) { }
        public byte ModifierKeysStateMask { get { return this[nameof(ModifierKeysStateMask)].GetValue<byte>(); } set { this[nameof(ModifierKeysStateMask)].SetValue<byte>(value); } }
    }
    public class DrawToRenderTargetContext : Object
    {
        public DrawToRenderTargetContext(nint addr) : base(addr) { }
        public TextureRenderTarget2D RenderTarget { get { return this[nameof(RenderTarget)].As<TextureRenderTarget2D>(); } set { this["RenderTarget"] = value; } }
    }
    public class ImportanceTexture : Object
    {
        public ImportanceTexture(nint addr) : base(addr) { }
        public IntPoint Size { get { return this[nameof(Size)].As<IntPoint>(); } set { this["Size"] = value; } }
        public int NumMips { get { return this[nameof(NumMips)].GetValue<int>(); } set { this[nameof(NumMips)].SetValue<int>(value); } }
        public Array<float> MarginalCDF { get { return new Array<float>(this[nameof(MarginalCDF)].Address); } }
        public Array<float> ConditionalCDF { get { return new Array<float>(this[nameof(ConditionalCDF)].Address); } }
        public Array<Color> TextureData { get { return new Array<Color>(this[nameof(TextureData)].Address); } }
        public Object Texture { get { return this[nameof(Texture)]; } set { this[nameof(Texture)] = value; } }
        public byte Weighting { get { return this[nameof(Weighting)].GetValue<byte>(); } set { this[nameof(Weighting)].SetValue<byte>(value); } }
    }
    public class LatentActionManager : Object
    {
        public LatentActionManager(nint addr) : base(addr) { }
    }
    public class LayerActorStats : Object
    {
        public LayerActorStats(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)].As<Object>(); } set { this["Type"] = value; } } // ClassPtrProperty
        public int Total { get { return this[nameof(Total)].GetValue<int>(); } set { this[nameof(Total)].SetValue<int>(value); } }
    }
    public class ActorFolderSet : Object
    {
        public ActorFolderSet(nint addr) : base(addr) { }
        public Object ActorFolders { get { return this[nameof(ActorFolders)]; } set { this[nameof(ActorFolders)] = value; } }
    }
    public class StreamableTextureInstance : Object
    {
        public StreamableTextureInstance(nint addr) : base(addr) { }
    }
    public class DynamicTextureInstance : StreamableTextureInstance
    {
        public DynamicTextureInstance(nint addr) : base(addr) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public bool bAttached { get { return this[nameof(bAttached)].Flag; } set { this[nameof(bAttached)].Flag = value; } }
        public float OriginalRadius { get { return this[nameof(OriginalRadius)].GetValue<float>(); } set { this[nameof(OriginalRadius)].SetValue<float>(value); } }
    }
    public class LevelSimplificationDetails : Object
    {
        public LevelSimplificationDetails(nint addr) : base(addr) { }
        public bool bCreatePackagePerAsset { get { return this[nameof(bCreatePackagePerAsset)].Flag; } set { this[nameof(bCreatePackagePerAsset)].Flag = value; } }
        public float DetailsPercentage { get { return this[nameof(DetailsPercentage)].GetValue<float>(); } set { this[nameof(DetailsPercentage)].SetValue<float>(value); } }
        public MaterialProxySettings StaticMeshMaterialSettings { get { return this[nameof(StaticMeshMaterialSettings)].As<MaterialProxySettings>(); } set { this["StaticMeshMaterialSettings"] = value; } }
        public bool bOverrideLandscapeExportLOD { get { return this[nameof(bOverrideLandscapeExportLOD)].Flag; } set { this[nameof(bOverrideLandscapeExportLOD)].Flag = value; } }
        public int LandscapeExportLOD { get { return this[nameof(LandscapeExportLOD)].GetValue<int>(); } set { this[nameof(LandscapeExportLOD)].SetValue<int>(value); } }
        public MaterialProxySettings LandscapeMaterialSettings { get { return this[nameof(LandscapeMaterialSettings)].As<MaterialProxySettings>(); } set { this["LandscapeMaterialSettings"] = value; } }
        public bool bBakeFoliageToLandscape { get { return this[nameof(bBakeFoliageToLandscape)].Flag; } set { this[nameof(bBakeFoliageToLandscape)].Flag = value; } }
        public bool bBakeGrassToLandscape { get { return this[nameof(bBakeGrassToLandscape)].Flag; } set { this[nameof(bBakeGrassToLandscape)].Flag = value; } }
    }
    public class ReplicatedStaticActorDestructionInfo : Object
    {
        public ReplicatedStaticActorDestructionInfo(nint addr) : base(addr) { }
        public Object ObjClass { get { return this[nameof(ObjClass)].As<Object>(); } set { this["ObjClass"] = value; } } // ClassPtrProperty
    }
    public class ClientReceiveData : Object
    {
        public ClientReceiveData(nint addr) : base(addr) { }
        public PlayerController LocalPC { get { return this[nameof(LocalPC)].As<PlayerController>(); } set { this["LocalPC"] = value; } }
        public Object MessageType { get { return this[nameof(MessageType)]; } set { this[nameof(MessageType)] = value; } }
        public int MessageIndex { get { return this[nameof(MessageIndex)].GetValue<int>(); } set { this[nameof(MessageIndex)].SetValue<int>(value); } }
        public Object MessageString { get { return this[nameof(MessageString)]; } set { this[nameof(MessageString)] = value; } }
        public Object OptionalObject { get { return this[nameof(OptionalObject)].As<Object>(); } set { this["OptionalObject"] = value; } }
    }
    public class HLODInstancingKey : Object
    {
        public HLODInstancingKey(nint addr) : base(addr) { }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
    }
    public class MaterialFunctionInfo : Object
    {
        public MaterialFunctionInfo(nint addr) : base(addr) { }
        public Guid StateId { get { return this[nameof(StateId)].As<Guid>(); } set { this["StateId"] = value; } }
        public MaterialFunctionInterface Function { get { return this[nameof(Function)].As<MaterialFunctionInterface>(); } set { this["Function"] = value; } }
    }
    public class MaterialParameterCollectionInfo : Object
    {
        public MaterialParameterCollectionInfo(nint addr) : base(addr) { }
        public Guid StateId { get { return this[nameof(StateId)].As<Guid>(); } set { this["StateId"] = value; } }
        public MaterialParameterCollection ParameterCollection { get { return this[nameof(ParameterCollection)].As<MaterialParameterCollection>(); } set { this["ParameterCollection"] = value; } }
    }
    public class MaterialCachedParameterEditorInfo : Object
    {
        public MaterialCachedParameterEditorInfo(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
        public int AssetIndex { get { return this[nameof(AssetIndex)].GetValue<int>(); } set { this[nameof(AssetIndex)].SetValue<int>(value); } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class MaterialCachedParameterEntry : Object
    {
        public MaterialCachedParameterEntry(nint addr) : base(addr) { }
        public Object ParameterInfoSet { get { return this[nameof(ParameterInfoSet)]; } set { this[nameof(ParameterInfoSet)] = value; } }
    }
    public class MaterialCachedParameterEditorEntry : Object
    {
        public MaterialCachedParameterEditorEntry(nint addr) : base(addr) { }
        public Array<MaterialCachedParameterEditorInfo> EditorInfo { get { return new Array<MaterialCachedParameterEditorInfo>(this[nameof(EditorInfo)].Address); } }
    }
    public class MaterialCachedExpressionEditorOnlyData : Object
    {
        public MaterialCachedExpressionEditorOnlyData(nint addr) : base(addr) { }
        public MaterialCachedParameterEntry EditorOnlyEntries { get { return this[nameof(EditorOnlyEntries)].As<MaterialCachedParameterEntry>(); } set { this["EditorOnlyEntries"] = value; } }
        public MaterialCachedParameterEditorEntry EditorEntries { get { return this[nameof(EditorEntries)].As<MaterialCachedParameterEditorEntry>(); } set { this["EditorEntries"] = value; } }
        public Array<bool> StaticSwitchValues { get { return new Array<bool>(this[nameof(StaticSwitchValues)].Address); } }
        public Array<StaticComponentMaskValue> StaticComponentMaskValues { get { return new Array<StaticComponentMaskValue>(this[nameof(StaticComponentMaskValues)].Address); } }
        public Array<Vector2D> ScalarMinMaxValues { get { return new Array<Vector2D>(this[nameof(ScalarMinMaxValues)].Address); } }
        public Array<Object> ScalarCurveValues { get { return new Array<Object>(this[nameof(ScalarCurveValues)].Address); } }
        public Array<Object> ScalarCurveAtlasValues { get { return new Array<Object>(this[nameof(ScalarCurveAtlasValues)].Address); } }
        public Array<ParameterChannelNames> VectorChannelNameValues { get { return new Array<ParameterChannelNames>(this[nameof(VectorChannelNameValues)].Address); } }
        public Array<bool> VectorUsedAsChannelMaskValues { get { return new Array<bool>(this[nameof(VectorUsedAsChannelMaskValues)].Address); } }
        public Array<ParameterChannelNames> TextureChannelNameValues { get { return new Array<ParameterChannelNames>(this[nameof(TextureChannelNameValues)].Address); } }
        public MaterialLayersFunctionsEditorOnlyData MaterialLayers { get { return this[nameof(MaterialLayers)].As<MaterialLayersFunctionsEditorOnlyData>(); } set { this["MaterialLayers"] = value; } }
        public Array<Object> AssetPaths { get { return new Array<Object>(this[nameof(AssetPaths)].Address); } }
        public Array<Object> LandscapeLayerNames { get { return new Array<Object>(this[nameof(LandscapeLayerNames)].Address); } }
    }
    public class MaterialCachedExpressionData : Object
    {
        public MaterialCachedExpressionData(nint addr) : base(addr) { }
        public MaterialCachedParameterEntry RuntimeEntries { get { return this[nameof(RuntimeEntries)].As<MaterialCachedParameterEntry>(); } set { this["RuntimeEntries"] = value; } }
        public Array<int> ScalarPrimitiveDataIndexValues { get { return new Array<int>(this[nameof(ScalarPrimitiveDataIndexValues)].Address); } }
        public Array<int> VectorPrimitiveDataIndexValues { get { return new Array<int>(this[nameof(VectorPrimitiveDataIndexValues)].Address); } }
        public Array<float> ScalarValues { get { return new Array<float>(this[nameof(ScalarValues)].Address); } }
        public Array<LinearColor> VectorValues { get { return new Array<LinearColor>(this[nameof(VectorValues)].Address); } }
        public Array<Vector4d> DoubleVectorValues { get { return new Array<Vector4d>(this[nameof(DoubleVectorValues)].Address); } }
        public Array<Object> TextureValues { get { return new Array<Object>(this[nameof(TextureValues)].Address); } }
        public Array<Object> FontValues { get { return new Array<Object>(this[nameof(FontValues)].Address); } }
        public Array<int> FontPageValues { get { return new Array<int>(this[nameof(FontPageValues)].Address); } }
        public Array<Object> RuntimeVirtualTextureValues { get { return new Array<Object>(this[nameof(RuntimeVirtualTextureValues)].Address); } }
        public Array<Object> ReferencedTextures { get { return new Array<Object>(this[nameof(ReferencedTextures)].Address); } }
        public Array<MaterialFunctionInfo> FunctionInfos { get { return new Array<MaterialFunctionInfo>(this[nameof(FunctionInfos)].Address); } }
        public Array<MaterialParameterCollectionInfo> ParameterCollectionInfos { get { return new Array<MaterialParameterCollectionInfo>(this[nameof(ParameterCollectionInfos)].Address); } }
        public Array<LandscapeGrassType> GrassTypes { get { return new Array<LandscapeGrassType>(this[nameof(GrassTypes)].Address); } }
        public MaterialLayersFunctionsRuntimeData MaterialLayers { get { return this[nameof(MaterialLayers)].As<MaterialLayersFunctionsRuntimeData>(); } set { this["MaterialLayers"] = value; } }
        public Array<Object> DynamicParameterNames { get { return new Array<Object>(this[nameof(DynamicParameterNames)].Address); } }
        public Array<bool> QualityLevelsUsed { get { return new Array<bool>(this[nameof(QualityLevelsUsed)].Address); } }
        public bool bHasMaterialLayers { get { return this[nameof(bHasMaterialLayers)].Flag; } set { this[nameof(bHasMaterialLayers)].Flag = value; } }
        public bool bHasRuntimeVirtualTextureOutput { get { return this[nameof(bHasRuntimeVirtualTextureOutput)].Flag; } set { this[nameof(bHasRuntimeVirtualTextureOutput)].Flag = value; } }
        public bool bHasSceneColor { get { return this[nameof(bHasSceneColor)].Flag; } set { this[nameof(bHasSceneColor)].Flag = value; } }
        public bool bHasPerInstanceCustomData { get { return this[nameof(bHasPerInstanceCustomData)].Flag; } set { this[nameof(bHasPerInstanceCustomData)].Flag = value; } }
        public bool bHasPerInstanceRandom { get { return this[nameof(bHasPerInstanceRandom)].Flag; } set { this[nameof(bHasPerInstanceRandom)].Flag = value; } }
        public bool bHasVertexInterpolator { get { return this[nameof(bHasVertexInterpolator)].Flag; } set { this[nameof(bHasVertexInterpolator)].Flag = value; } }
        public uint PropertyConnectedBitmask { get { return this[nameof(PropertyConnectedBitmask)].GetValue<uint>(); } set { this[nameof(PropertyConnectedBitmask)].SetValue<uint>(value); } }
    }
    public class ScalarParameterAtlasInstanceData : Object
    {
        public ScalarParameterAtlasInstanceData(nint addr) : base(addr) { }
        public bool bIsUsedAsAtlasPosition { get { return this[nameof(bIsUsedAsAtlasPosition)].Flag; } set { this[nameof(bIsUsedAsAtlasPosition)].Flag = value; } }
        public Object Curve { get { return this[nameof(Curve)]; } set { this[nameof(Curve)] = value; } }
        public Object Atlas { get { return this[nameof(Atlas)]; } set { this[nameof(Atlas)] = value; } }
    }
    public class ScalarParameterValue : Object
    {
        public ScalarParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public float ParameterValue { get { return this[nameof(ParameterValue)].GetValue<float>(); } set { this[nameof(ParameterValue)].SetValue<float>(value); } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class VectorParameterValue : Object
    {
        public VectorParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public LinearColor ParameterValue { get { return this[nameof(ParameterValue)].As<LinearColor>(); } set { this["ParameterValue"] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class DoubleVectorParameterValue : Object
    {
        public DoubleVectorParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Vector4d ParameterValue { get { return this[nameof(ParameterValue)].As<Vector4d>(); } set { this["ParameterValue"] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class TextureParameterValue : Object
    {
        public TextureParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Texture ParameterValue { get { return this[nameof(ParameterValue)].As<Texture>(); } set { this["ParameterValue"] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class RuntimeVirtualTextureParameterValue : Object
    {
        public RuntimeVirtualTextureParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public RuntimeVirtualTexture ParameterValue { get { return this[nameof(ParameterValue)].As<RuntimeVirtualTexture>(); } set { this["ParameterValue"] = value; } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class FontParameterValue : Object
    {
        public FontParameterValue(nint addr) : base(addr) { }
        public MaterialParameterInfo ParameterInfo { get { return this[nameof(ParameterInfo)].As<MaterialParameterInfo>(); } set { this["ParameterInfo"] = value; } }
        public Font FontValue { get { return this[nameof(FontValue)].As<Font>(); } set { this["FontValue"] = value; } }
        public int FontPage { get { return this[nameof(FontPage)].GetValue<int>(); } set { this[nameof(FontPage)].SetValue<int>(value); } }
        public Guid ExpressionGUID { get { return this[nameof(ExpressionGUID)].As<Guid>(); } set { this["ExpressionGUID"] = value; } }
    }
    public class MaterialInstanceCachedData : Object
    {
        public MaterialInstanceCachedData(nint addr) : base(addr) { }
        public Array<int> ParentLayerIndexRemap { get { return new Array<int>(this[nameof(ParentLayerIndexRemap)].Address); } }
    }
    public class MemberReference : Object
    {
        public MemberReference(nint addr) : base(addr) { }
        public Object MemberParent { get { return this[nameof(MemberParent)].As<Object>(); } set { this["MemberParent"] = value; } }
        public Object MemberScope { get { return this[nameof(MemberScope)]; } set { this[nameof(MemberScope)] = value; } }
        public Object MemberName { get { return this[nameof(MemberName)]; } set { this[nameof(MemberName)] = value; } }
        public Guid MemberGuid { get { return this[nameof(MemberGuid)].As<Guid>(); } set { this["MemberGuid"] = value; } }
        public bool bSelfContext { get { return this[nameof(bSelfContext)].Flag; } set { this[nameof(bSelfContext)].Flag = value; } }
        public bool bWasDeprecated { get { return this[nameof(bWasDeprecated)].Flag; } set { this[nameof(bWasDeprecated)].Flag = value; } }
    }
    public class MeshReductionSettings : Object
    {
        public MeshReductionSettings(nint addr) : base(addr) { }
        public float PercentTriangles { get { return this[nameof(PercentTriangles)].GetValue<float>(); } set { this[nameof(PercentTriangles)].SetValue<float>(value); } }
        public float PercentVertices { get { return this[nameof(PercentVertices)].GetValue<float>(); } set { this[nameof(PercentVertices)].SetValue<float>(value); } }
        public float MaxDeviation { get { return this[nameof(MaxDeviation)].GetValue<float>(); } set { this[nameof(MaxDeviation)].SetValue<float>(value); } }
        public float PixelError { get { return this[nameof(PixelError)].GetValue<float>(); } set { this[nameof(PixelError)].SetValue<float>(value); } }
        public float WeldingThreshold { get { return this[nameof(WeldingThreshold)].GetValue<float>(); } set { this[nameof(WeldingThreshold)].SetValue<float>(value); } }
        public float HardAngleThreshold { get { return this[nameof(HardAngleThreshold)].GetValue<float>(); } set { this[nameof(HardAngleThreshold)].SetValue<float>(value); } }
        public int BaseLODModel { get { return this[nameof(BaseLODModel)].GetValue<int>(); } set { this[nameof(BaseLODModel)].SetValue<int>(value); } }
        public byte SilhouetteImportance { get { return this[nameof(SilhouetteImportance)].GetValue<byte>(); } set { this[nameof(SilhouetteImportance)].SetValue<byte>(value); } }
        public byte TextureImportance { get { return this[nameof(TextureImportance)].GetValue<byte>(); } set { this[nameof(TextureImportance)].SetValue<byte>(value); } }
        public byte ShadingImportance { get { return this[nameof(ShadingImportance)].GetValue<byte>(); } set { this[nameof(ShadingImportance)].SetValue<byte>(value); } }
        public bool bRecalculateNormals { get { return this[nameof(bRecalculateNormals)].Flag; } set { this[nameof(bRecalculateNormals)].Flag = value; } }
        public bool bGenerateUniqueLightmapUVs { get { return this[nameof(bGenerateUniqueLightmapUVs)].Flag; } set { this[nameof(bGenerateUniqueLightmapUVs)].Flag = value; } }
        public bool bKeepSymmetry { get { return this[nameof(bKeepSymmetry)].Flag; } set { this[nameof(bKeepSymmetry)].Flag = value; } }
        public bool bVisibilityAided { get { return this[nameof(bVisibilityAided)].Flag; } set { this[nameof(bVisibilityAided)].Flag = value; } }
        public bool bCullOccluded { get { return this[nameof(bCullOccluded)].Flag; } set { this[nameof(bCullOccluded)].Flag = value; } }
        public EStaticMeshReductionTerimationCriterion TerminationCriterion { get { return (EStaticMeshReductionTerimationCriterion)this[nameof(TerminationCriterion)].GetValue<int>(); } set { this[nameof(TerminationCriterion)].SetValue<int>((int)value); } }
        public byte VisibilityAggressiveness { get { return this[nameof(VisibilityAggressiveness)].GetValue<byte>(); } set { this[nameof(VisibilityAggressiveness)].SetValue<byte>(value); } }
        public byte VertexColorImportance { get { return this[nameof(VertexColorImportance)].GetValue<byte>(); } set { this[nameof(VertexColorImportance)].SetValue<byte>(value); } }
    }
    public class MeshInstancingSettings : Object
    {
        public MeshInstancingSettings(nint addr) : base(addr) { }
        public Object ActorClassToUse { get { return this[nameof(ActorClassToUse)]; } set { this[nameof(ActorClassToUse)] = value; } }
        public int InstanceReplacementThreshold { get { return this[nameof(InstanceReplacementThreshold)].GetValue<int>(); } set { this[nameof(InstanceReplacementThreshold)].SetValue<int>(value); } }
        public bool bSkipMeshesWithVertexColors { get { return this[nameof(bSkipMeshesWithVertexColors)].Flag; } set { this[nameof(bSkipMeshesWithVertexColors)].Flag = value; } }
        public bool bUseHLODVolumes { get { return this[nameof(bUseHLODVolumes)].Flag; } set { this[nameof(bUseHLODVolumes)].Flag = value; } }
        public Object ISMComponentToUse { get { return this[nameof(ISMComponentToUse)]; } set { this[nameof(ISMComponentToUse)] = value; } }
    }
    public class PacketSimulationSettings : Object
    {
        public PacketSimulationSettings(nint addr) : base(addr) { }
        public int PktLoss { get { return this[nameof(PktLoss)].GetValue<int>(); } set { this[nameof(PktLoss)].SetValue<int>(value); } }
        public int PktLossMaxSize { get { return this[nameof(PktLossMaxSize)].GetValue<int>(); } set { this[nameof(PktLossMaxSize)].SetValue<int>(value); } }
        public int PktLossMinSize { get { return this[nameof(PktLossMinSize)].GetValue<int>(); } set { this[nameof(PktLossMinSize)].SetValue<int>(value); } }
        public int PktOrder { get { return this[nameof(PktOrder)].GetValue<int>(); } set { this[nameof(PktOrder)].SetValue<int>(value); } }
        public int PktDup { get { return this[nameof(PktDup)].GetValue<int>(); } set { this[nameof(PktDup)].SetValue<int>(value); } }
        public int PktLag { get { return this[nameof(PktLag)].GetValue<int>(); } set { this[nameof(PktLag)].SetValue<int>(value); } }
        public int PktLagVariance { get { return this[nameof(PktLagVariance)].GetValue<int>(); } set { this[nameof(PktLagVariance)].SetValue<int>(value); } }
        public int PktLagMin { get { return this[nameof(PktLagMin)].GetValue<int>(); } set { this[nameof(PktLagMin)].SetValue<int>(value); } }
        public int PktLagMax { get { return this[nameof(PktLagMax)].GetValue<int>(); } set { this[nameof(PktLagMax)].SetValue<int>(value); } }
        public int PktIncomingLagMin { get { return this[nameof(PktIncomingLagMin)].GetValue<int>(); } set { this[nameof(PktIncomingLagMin)].SetValue<int>(value); } }
        public int PktIncomingLagMax { get { return this[nameof(PktIncomingLagMax)].GetValue<int>(); } set { this[nameof(PktIncomingLagMax)].SetValue<int>(value); } }
        public int PktIncomingLoss { get { return this[nameof(PktIncomingLoss)].GetValue<int>(); } set { this[nameof(PktIncomingLoss)].SetValue<int>(value); } }
        public int PktJitter { get { return this[nameof(PktJitter)].GetValue<int>(); } set { this[nameof(PktJitter)].SetValue<int>(value); } }
    }
    public class ChannelDefinition : Object
    {
        public ChannelDefinition(nint addr) : base(addr) { }
        public Object ChannelName { get { return this[nameof(ChannelName)]; } set { this[nameof(ChannelName)] = value; } }
        public Object ClassName { get { return this[nameof(ClassName)]; } set { this[nameof(ClassName)] = value; } }
        public Object ChannelClass { get { return this[nameof(ChannelClass)].As<Object>(); } set { this["ChannelClass"] = value; } } // ClassPtrProperty
        public int StaticChannelIndex { get { return this[nameof(StaticChannelIndex)].GetValue<int>(); } set { this[nameof(StaticChannelIndex)].SetValue<int>(value); } }
        public bool bTickOnCreate { get { return this[nameof(bTickOnCreate)].Flag; } set { this[nameof(bTickOnCreate)].Flag = value; } }
        public bool bServerOpen { get { return this[nameof(bServerOpen)].Flag; } set { this[nameof(bServerOpen)].Flag = value; } }
        public bool bClientOpen { get { return this[nameof(bClientOpen)].Flag; } set { this[nameof(bClientOpen)].Flag = value; } }
        public bool bInitialServer { get { return this[nameof(bInitialServer)].Flag; } set { this[nameof(bInitialServer)].Flag = value; } }
        public bool bInitialClient { get { return this[nameof(bInitialClient)].Flag; } set { this[nameof(bInitialClient)].Flag = value; } }
    }
    public class NetworkEmulationProfileDescription : Object
    {
        public NetworkEmulationProfileDescription(nint addr) : base(addr) { }
        public Object ProfileName { get { return this[nameof(ProfileName)]; } set { this[nameof(ProfileName)] = value; } }
        public Object Tooltip { get { return this[nameof(Tooltip)]; } set { this[nameof(Tooltip)] = value; } }
    }
    public class BandwidthTestItem : Object
    {
        public BandwidthTestItem(nint addr) : base(addr) { }
        public Array<byte> Kilobyte { get { return new Array<byte>(this[nameof(Kilobyte)].Address); } }
    }
    public class BandwidthTestGenerator : Object
    {
        public BandwidthTestGenerator(nint addr) : base(addr) { }
        public Array<BandwidthTestItem> ReplicatedBuffers { get { return new Array<BandwidthTestItem>(this[nameof(ReplicatedBuffers)].Address); } }
    }
    public class RPCDoSState : Object
    {
        public RPCDoSState(nint addr) : base(addr) { }
        public bool bLogEscalate { get { return this[nameof(bLogEscalate)].Flag; } set { this[nameof(bLogEscalate)].Flag = value; } }
        public bool bSendEscalateAnalytics { get { return this[nameof(bSendEscalateAnalytics)].Flag; } set { this[nameof(bSendEscalateAnalytics)].Flag = value; } }
        public bool bKickPlayer { get { return this[nameof(bKickPlayer)].Flag; } set { this[nameof(bKickPlayer)].Flag = value; } }
        public bool bTrackRecentRPCs { get { return this[nameof(bTrackRecentRPCs)].Flag; } set { this[nameof(bTrackRecentRPCs)].Flag = value; } }
        public short EscalateQuotaRPCsPerFrame { get { return this[nameof(EscalateQuotaRPCsPerFrame)].GetValue<short>(); } set { this[nameof(EscalateQuotaRPCsPerFrame)].SetValue<short>(value); } }
        public short EscalateTimeQuotaMSPerFrame { get { return this[nameof(EscalateTimeQuotaMSPerFrame)].GetValue<short>(); } set { this[nameof(EscalateTimeQuotaMSPerFrame)].SetValue<short>(value); } }
        public short EscalateQuotaRPCsPerPeriod { get { return this[nameof(EscalateQuotaRPCsPerPeriod)].GetValue<short>(); } set { this[nameof(EscalateQuotaRPCsPerPeriod)].SetValue<short>(value); } }
        public short EscalateTimeQuotaMSPerPeriod { get { return this[nameof(EscalateTimeQuotaMSPerPeriod)].GetValue<short>(); } set { this[nameof(EscalateTimeQuotaMSPerPeriod)].SetValue<short>(value); } }
        public byte EscalateQuotaTimePeriod { get { return this[nameof(EscalateQuotaTimePeriod)].GetValue<byte>(); } set { this[nameof(EscalateQuotaTimePeriod)].SetValue<byte>(value); } }
        public byte EscalationCountTolerance { get { return this[nameof(EscalationCountTolerance)].GetValue<byte>(); } set { this[nameof(EscalationCountTolerance)].SetValue<byte>(value); } }
        public short EscalationTimeToleranceMS { get { return this[nameof(EscalationTimeToleranceMS)].GetValue<short>(); } set { this[nameof(EscalationTimeToleranceMS)].SetValue<short>(value); } }
        public short RPCRepeatLimitPerPeriod { get { return this[nameof(RPCRepeatLimitPerPeriod)].GetValue<short>(); } set { this[nameof(RPCRepeatLimitPerPeriod)].SetValue<short>(value); } }
        public short RPCRepeatLimitMSPerPeriod { get { return this[nameof(RPCRepeatLimitMSPerPeriod)].GetValue<short>(); } set { this[nameof(RPCRepeatLimitMSPerPeriod)].SetValue<short>(value); } }
        public byte RPCRepeatLimitTimePeriod { get { return this[nameof(RPCRepeatLimitTimePeriod)].GetValue<byte>(); } set { this[nameof(RPCRepeatLimitTimePeriod)].SetValue<byte>(value); } }
        public short CooloffTime { get { return this[nameof(CooloffTime)].GetValue<short>(); } set { this[nameof(CooloffTime)].SetValue<short>(value); } }
        public short AutoEscalateTime { get { return this[nameof(AutoEscalateTime)].GetValue<short>(); } set { this[nameof(AutoEscalateTime)].SetValue<short>(value); } }
    }
    public class RPCDoSStateConfig : RPCDoSState
    {
        public RPCDoSStateConfig(nint addr) : base(addr) { }
    }
    public class RPCAnalyticsThreshold : Object
    {
        public RPCAnalyticsThreshold(nint addr) : base(addr) { }
        public Object RPC { get { return this[nameof(RPC)]; } set { this[nameof(RPC)] = value; } }
        public int CountPerSec { get { return this[nameof(CountPerSec)].GetValue<int>(); } set { this[nameof(CountPerSec)].SetValue<int>(value); } }
        public double TimePerSec { get { return this[nameof(TimePerSec)].GetValue<double>(); } set { this[nameof(TimePerSec)].SetValue<double>(value); } }
    }
    public class ParticleSystemWorldManagerTickFunction : TickFunction
    {
        public ParticleSystemWorldManagerTickFunction(nint addr) : base(addr) { }
    }
    public class PSCPoolElem : Object
    {
        public PSCPoolElem(nint addr) : base(addr) { }
        public ParticleSystemComponent PSC { get { return this[nameof(PSC)].As<ParticleSystemComponent>(); } set { this["PSC"] = value; } }
    }
    public class PSCPool : Object
    {
        public PSCPool(nint addr) : base(addr) { }
        public Array<PSCPoolElem> FreeElements { get { return new Array<PSCPoolElem>(this[nameof(FreeElements)].Address); } }
    }
    public class WorldPSCPool : Object
    {
        public WorldPSCPool(nint addr) : base(addr) { }
        public Object WorldParticleSystemPools { get { return this[nameof(WorldParticleSystemPools)]; } set { this[nameof(WorldParticleSystemPools)] = value; } }
    }
    public class FreezablePerPlatformInt : Object
    {
        public FreezablePerPlatformInt(nint addr) : base(addr) { }
    }
    public class PerQualityLevelInt : Object
    {
        public PerQualityLevelInt(nint addr) : base(addr) { }
        public int Default { get { return this[nameof(Default)].GetValue<int>(); } set { this[nameof(Default)].SetValue<int>(value); } }
        public Object PerQuality { get { return this[nameof(PerQuality)]; } set { this[nameof(PerQuality)] = value; } }
    }
    public class ConstraintDrive : Object
    {
        public ConstraintDrive(nint addr) : base(addr) { }
        public float Stiffness { get { return this[nameof(Stiffness)].GetValue<float>(); } set { this[nameof(Stiffness)].SetValue<float>(value); } }
        public float Damping { get { return this[nameof(Damping)].GetValue<float>(); } set { this[nameof(Damping)].SetValue<float>(value); } }
        public float MaxForce { get { return this[nameof(MaxForce)].GetValue<float>(); } set { this[nameof(MaxForce)].SetValue<float>(value); } }
        public bool bEnablePositionDrive { get { return this[nameof(bEnablePositionDrive)].Flag; } set { this[nameof(bEnablePositionDrive)].Flag = value; } }
        public bool bEnableVelocityDrive { get { return this[nameof(bEnableVelocityDrive)].Flag; } set { this[nameof(bEnableVelocityDrive)].Flag = value; } }
    }
    public class LinearDriveConstraint : Object
    {
        public LinearDriveConstraint(nint addr) : base(addr) { }
        public Vector PositionTarget { get { return this[nameof(PositionTarget)].As<Vector>(); } set { this["PositionTarget"] = value; } }
        public Vector VelocityTarget { get { return this[nameof(VelocityTarget)].As<Vector>(); } set { this["VelocityTarget"] = value; } }
        public ConstraintDrive XDrive { get { return this[nameof(XDrive)].As<ConstraintDrive>(); } set { this["XDrive"] = value; } }
        public ConstraintDrive YDrive { get { return this[nameof(YDrive)].As<ConstraintDrive>(); } set { this["YDrive"] = value; } }
        public ConstraintDrive ZDrive { get { return this[nameof(ZDrive)].As<ConstraintDrive>(); } set { this["ZDrive"] = value; } }
        public bool bEnablePositionDrive { get { return this[nameof(bEnablePositionDrive)].Flag; } set { this[nameof(bEnablePositionDrive)].Flag = value; } }
    }
    public class AngularDriveConstraint : Object
    {
        public AngularDriveConstraint(nint addr) : base(addr) { }
        public ConstraintDrive TwistDrive { get { return this[nameof(TwistDrive)].As<ConstraintDrive>(); } set { this["TwistDrive"] = value; } }
        public ConstraintDrive SwingDrive { get { return this[nameof(SwingDrive)].As<ConstraintDrive>(); } set { this["SwingDrive"] = value; } }
        public ConstraintDrive SlerpDrive { get { return this[nameof(SlerpDrive)].As<ConstraintDrive>(); } set { this["SlerpDrive"] = value; } }
        public Rotator OrientationTarget { get { return this[nameof(OrientationTarget)].As<Rotator>(); } set { this["OrientationTarget"] = value; } }
        public Vector AngularVelocityTarget { get { return this[nameof(AngularVelocityTarget)].As<Vector>(); } set { this["AngularVelocityTarget"] = value; } }
        public byte AngularDriveMode { get { return this[nameof(AngularDriveMode)].GetValue<byte>(); } set { this[nameof(AngularDriveMode)].SetValue<byte>(value); } }
    }
    public class ConstraintProfileProperties : Object
    {
        public ConstraintProfileProperties(nint addr) : base(addr) { }
        public float ProjectionLinearTolerance { get { return this[nameof(ProjectionLinearTolerance)].GetValue<float>(); } set { this[nameof(ProjectionLinearTolerance)].SetValue<float>(value); } }
        public float ProjectionAngularTolerance { get { return this[nameof(ProjectionAngularTolerance)].GetValue<float>(); } set { this[nameof(ProjectionAngularTolerance)].SetValue<float>(value); } }
        public float ProjectionLinearAlpha { get { return this[nameof(ProjectionLinearAlpha)].GetValue<float>(); } set { this[nameof(ProjectionLinearAlpha)].SetValue<float>(value); } }
        public float ProjectionAngularAlpha { get { return this[nameof(ProjectionAngularAlpha)].GetValue<float>(); } set { this[nameof(ProjectionAngularAlpha)].SetValue<float>(value); } }
        public float ShockPropagationAlpha { get { return this[nameof(ShockPropagationAlpha)].GetValue<float>(); } set { this[nameof(ShockPropagationAlpha)].SetValue<float>(value); } }
        public float LinearBreakThreshold { get { return this[nameof(LinearBreakThreshold)].GetValue<float>(); } set { this[nameof(LinearBreakThreshold)].SetValue<float>(value); } }
        public float LinearPlasticityThreshold { get { return this[nameof(LinearPlasticityThreshold)].GetValue<float>(); } set { this[nameof(LinearPlasticityThreshold)].SetValue<float>(value); } }
        public float AngularBreakThreshold { get { return this[nameof(AngularBreakThreshold)].GetValue<float>(); } set { this[nameof(AngularBreakThreshold)].SetValue<float>(value); } }
        public float AngularPlasticityThreshold { get { return this[nameof(AngularPlasticityThreshold)].GetValue<float>(); } set { this[nameof(AngularPlasticityThreshold)].SetValue<float>(value); } }
        public float ContactTransferScale { get { return this[nameof(ContactTransferScale)].GetValue<float>(); } set { this[nameof(ContactTransferScale)].SetValue<float>(value); } }
        public LinearConstraint LinearLimit { get { return this[nameof(LinearLimit)].As<LinearConstraint>(); } set { this["LinearLimit"] = value; } }
        public ConeConstraint ConeLimit { get { return this[nameof(ConeLimit)].As<ConeConstraint>(); } set { this["ConeLimit"] = value; } }
        public TwistConstraint TwistLimit { get { return this[nameof(TwistLimit)].As<TwistConstraint>(); } set { this["TwistLimit"] = value; } }
        public bool bDisableCollision { get { return this[nameof(bDisableCollision)].Flag; } set { this[nameof(bDisableCollision)].Flag = value; } }
        public bool bParentDominates { get { return this[nameof(bParentDominates)].Flag; } set { this[nameof(bParentDominates)].Flag = value; } }
        public bool bEnableShockPropagation { get { return this[nameof(bEnableShockPropagation)].Flag; } set { this[nameof(bEnableShockPropagation)].Flag = value; } }
        public bool bEnableProjection { get { return this[nameof(bEnableProjection)].Flag; } set { this[nameof(bEnableProjection)].Flag = value; } }
        public bool bAngularBreakable { get { return this[nameof(bAngularBreakable)].Flag; } set { this[nameof(bAngularBreakable)].Flag = value; } }
        public bool bAngularPlasticity { get { return this[nameof(bAngularPlasticity)].Flag; } set { this[nameof(bAngularPlasticity)].Flag = value; } }
        public bool bLinearBreakable { get { return this[nameof(bLinearBreakable)].Flag; } set { this[nameof(bLinearBreakable)].Flag = value; } }
        public bool bLinearPlasticity { get { return this[nameof(bLinearPlasticity)].Flag; } set { this[nameof(bLinearPlasticity)].Flag = value; } }
        public LinearDriveConstraint LinearDrive { get { return this[nameof(LinearDrive)].As<LinearDriveConstraint>(); } set { this["LinearDrive"] = value; } }
        public AngularDriveConstraint AngularDrive { get { return this[nameof(AngularDrive)].As<AngularDriveConstraint>(); } set { this["AngularDrive"] = value; } }
        public byte LinearPlasticityType { get { return this[nameof(LinearPlasticityType)].GetValue<byte>(); } set { this[nameof(LinearPlasticityType)].SetValue<byte>(value); } }
    }
    public class ConstraintBaseParams : Object
    {
        public ConstraintBaseParams(nint addr) : base(addr) { }
        public float Stiffness { get { return this[nameof(Stiffness)].GetValue<float>(); } set { this[nameof(Stiffness)].SetValue<float>(value); } }
        public float Damping { get { return this[nameof(Damping)].GetValue<float>(); } set { this[nameof(Damping)].SetValue<float>(value); } }
        public float Restitution { get { return this[nameof(Restitution)].GetValue<float>(); } set { this[nameof(Restitution)].SetValue<float>(value); } }
        public float ContactDistance { get { return this[nameof(ContactDistance)].GetValue<float>(); } set { this[nameof(ContactDistance)].SetValue<float>(value); } }
        public bool bSoftConstraint { get { return this[nameof(bSoftConstraint)].Flag; } set { this[nameof(bSoftConstraint)].Flag = value; } }
    }
    public class TwistConstraint : ConstraintBaseParams
    {
        public TwistConstraint(nint addr) : base(addr) { }
        public float TwistLimitDegrees { get { return this[nameof(TwistLimitDegrees)].GetValue<float>(); } set { this[nameof(TwistLimitDegrees)].SetValue<float>(value); } }
        public byte TwistMotion { get { return this[nameof(TwistMotion)].GetValue<byte>(); } set { this[nameof(TwistMotion)].SetValue<byte>(value); } }
    }
    public class ConeConstraint : ConstraintBaseParams
    {
        public ConeConstraint(nint addr) : base(addr) { }
        public float Swing1LimitDegrees { get { return this[nameof(Swing1LimitDegrees)].GetValue<float>(); } set { this[nameof(Swing1LimitDegrees)].SetValue<float>(value); } }
        public float Swing2LimitDegrees { get { return this[nameof(Swing2LimitDegrees)].GetValue<float>(); } set { this[nameof(Swing2LimitDegrees)].SetValue<float>(value); } }
        public byte Swing1Motion { get { return this[nameof(Swing1Motion)].GetValue<byte>(); } set { this[nameof(Swing1Motion)].SetValue<byte>(value); } }
        public byte Swing2Motion { get { return this[nameof(Swing2Motion)].GetValue<byte>(); } set { this[nameof(Swing2Motion)].SetValue<byte>(value); } }
    }
    public class LinearConstraint : ConstraintBaseParams
    {
        public LinearConstraint(nint addr) : base(addr) { }
        public float Limit { get { return this[nameof(Limit)].GetValue<float>(); } set { this[nameof(Limit)].SetValue<float>(value); } }
        public byte XMotion { get { return this[nameof(XMotion)].GetValue<byte>(); } set { this[nameof(XMotion)].SetValue<byte>(value); } }
        public byte YMotion { get { return this[nameof(YMotion)].GetValue<byte>(); } set { this[nameof(YMotion)].SetValue<byte>(value); } }
        public byte ZMotion { get { return this[nameof(ZMotion)].GetValue<byte>(); } set { this[nameof(ZMotion)].SetValue<byte>(value); } }
    }
    public class ConstraintInstanceBase : Object
    {
        public ConstraintInstanceBase(nint addr) : base(addr) { }
    }
    public class ConstraintInstance : ConstraintInstanceBase
    {
        public ConstraintInstance(nint addr) : base(addr) { }
        public Object JointName { get { return this[nameof(JointName)]; } set { this[nameof(JointName)] = value; } }
        public Object ConstraintBone1 { get { return this[nameof(ConstraintBone1)]; } set { this[nameof(ConstraintBone1)] = value; } }
        public Object ConstraintBone2 { get { return this[nameof(ConstraintBone2)]; } set { this[nameof(ConstraintBone2)] = value; } }
        public Vector Pos1 { get { return this[nameof(Pos1)].As<Vector>(); } set { this["Pos1"] = value; } }
        public Vector PriAxis1 { get { return this[nameof(PriAxis1)].As<Vector>(); } set { this["PriAxis1"] = value; } }
        public Vector SecAxis1 { get { return this[nameof(SecAxis1)].As<Vector>(); } set { this["SecAxis1"] = value; } }
        public Vector Pos2 { get { return this[nameof(Pos2)].As<Vector>(); } set { this["Pos2"] = value; } }
        public Vector PriAxis2 { get { return this[nameof(PriAxis2)].As<Vector>(); } set { this["PriAxis2"] = value; } }
        public Vector SecAxis2 { get { return this[nameof(SecAxis2)].As<Vector>(); } set { this["SecAxis2"] = value; } }
        public Rotator AngularRotationOffset { get { return this[nameof(AngularRotationOffset)].As<Rotator>(); } set { this["AngularRotationOffset"] = value; } }
        public bool bScaleLinearLimits { get { return this[nameof(bScaleLinearLimits)].Flag; } set { this[nameof(bScaleLinearLimits)].Flag = value; } }
        public ConstraintProfileProperties ProfileInstance { get { return this[nameof(ProfileInstance)].As<ConstraintProfileProperties>(); } set { this["ProfileInstance"] = value; } }
    }
    public class PhysicalAnimationData : Object
    {
        public PhysicalAnimationData(nint addr) : base(addr) { }
        public Object BodyName { get { return this[nameof(BodyName)]; } set { this[nameof(BodyName)] = value; } }
        public bool bIsLocalSimulation { get { return this[nameof(bIsLocalSimulation)].Flag; } set { this[nameof(bIsLocalSimulation)].Flag = value; } }
        public float OrientationStrength { get { return this[nameof(OrientationStrength)].GetValue<float>(); } set { this[nameof(OrientationStrength)].SetValue<float>(value); } }
        public float AngularVelocityStrength { get { return this[nameof(AngularVelocityStrength)].GetValue<float>(); } set { this[nameof(AngularVelocityStrength)].SetValue<float>(value); } }
        public float PositionStrength { get { return this[nameof(PositionStrength)].GetValue<float>(); } set { this[nameof(PositionStrength)].SetValue<float>(value); } }
        public float VelocityStrength { get { return this[nameof(VelocityStrength)].GetValue<float>(); } set { this[nameof(VelocityStrength)].SetValue<float>(value); } }
        public float MaxLinearForce { get { return this[nameof(MaxLinearForce)].GetValue<float>(); } set { this[nameof(MaxLinearForce)].SetValue<float>(value); } }
        public float MaxAngularForce { get { return this[nameof(MaxAngularForce)].GetValue<float>(); } set { this[nameof(MaxAngularForce)].SetValue<float>(value); } }
    }
    public class PhysicsAssetSolverSettings : Object
    {
        public PhysicsAssetSolverSettings(nint addr) : base(addr) { }
        public int PositionIterations { get { return this[nameof(PositionIterations)].GetValue<int>(); } set { this[nameof(PositionIterations)].SetValue<int>(value); } }
        public int VelocityIterations { get { return this[nameof(VelocityIterations)].GetValue<int>(); } set { this[nameof(VelocityIterations)].SetValue<int>(value); } }
        public int ProjectionIterations { get { return this[nameof(ProjectionIterations)].GetValue<int>(); } set { this[nameof(ProjectionIterations)].SetValue<int>(value); } }
        public float CullDistance { get { return this[nameof(CullDistance)].GetValue<float>(); } set { this[nameof(CullDistance)].SetValue<float>(value); } }
        public float MaxDepenetrationVelocity { get { return this[nameof(MaxDepenetrationVelocity)].GetValue<float>(); } set { this[nameof(MaxDepenetrationVelocity)].SetValue<float>(value); } }
        public float FixedTimeStep { get { return this[nameof(FixedTimeStep)].GetValue<float>(); } set { this[nameof(FixedTimeStep)].SetValue<float>(value); } }
        public bool bUseLinearJointSolver { get { return this[nameof(bUseLinearJointSolver)].Flag; } set { this[nameof(bUseLinearJointSolver)].Flag = value; } }
    }
    public class SolverIterations : Object
    {
        public SolverIterations(nint addr) : base(addr) { }
        public int SolverIterations_value { get { return this[nameof(SolverIterations)].GetValue<int>(); } set { this[nameof(SolverIterations)].SetValue<int>(value); } }
        public int JointIterations { get { return this[nameof(JointIterations)].GetValue<int>(); } set { this[nameof(JointIterations)].SetValue<int>(value); } }
        public int CollisionIterations { get { return this[nameof(CollisionIterations)].GetValue<int>(); } set { this[nameof(CollisionIterations)].SetValue<int>(value); } }
        public int SolverPushOutIterations { get { return this[nameof(SolverPushOutIterations)].GetValue<int>(); } set { this[nameof(SolverPushOutIterations)].SetValue<int>(value); } }
        public int JointPushOutIterations { get { return this[nameof(JointPushOutIterations)].GetValue<int>(); } set { this[nameof(JointPushOutIterations)].SetValue<int>(value); } }
        public int CollisionPushOutIterations { get { return this[nameof(CollisionPushOutIterations)].GetValue<int>(); } set { this[nameof(CollisionPushOutIterations)].SetValue<int>(value); } }
    }
    public class PhysicalAnimationProfile : Object
    {
        public PhysicalAnimationProfile(nint addr) : base(addr) { }
        public Object ProfileName { get { return this[nameof(ProfileName)]; } set { this[nameof(ProfileName)] = value; } }
        public PhysicalAnimationData PhysicalAnimationData { get { return this[nameof(PhysicalAnimationData)].As<PhysicalAnimationData>(); } set { this["PhysicalAnimationData"] = value; } }
    }
    public class PhysicsConstraintProfileHandle : Object
    {
        public PhysicsConstraintProfileHandle(nint addr) : base(addr) { }
        public ConstraintProfileProperties ProfileProperties { get { return this[nameof(ProfileProperties)].As<ConstraintProfileProperties>(); } set { this["ProfileProperties"] = value; } }
        public Object ProfileName { get { return this[nameof(ProfileName)]; } set { this[nameof(ProfileName)] = value; } }
    }
    public class PhysicalSurfaceName : Object
    {
        public PhysicalSurfaceName(nint addr) : base(addr) { }
        public byte Type { get { return this[nameof(Type)].GetValue<byte>(); } set { this[nameof(Type)].SetValue<byte>(value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class ChaosPhysicsSettings : Object
    {
        public ChaosPhysicsSettings(nint addr) : base(addr) { }
        public EChaosThreadingMode DefaultThreadingModel { get { return (EChaosThreadingMode)this[nameof(DefaultThreadingModel)].GetValue<int>(); } set { this[nameof(DefaultThreadingModel)].SetValue<int>((int)value); } }
        public EChaosSolverTickMode DedicatedThreadTickMode { get { return (EChaosSolverTickMode)this[nameof(DedicatedThreadTickMode)].GetValue<int>(); } set { this[nameof(DedicatedThreadTickMode)].SetValue<int>((int)value); } }
        public EChaosBufferMode DedicatedThreadBufferMode { get { return (EChaosBufferMode)this[nameof(DedicatedThreadBufferMode)].GetValue<int>(); } set { this[nameof(DedicatedThreadBufferMode)].SetValue<int>((int)value); } }
    }
    public class PlayerMuteList : Object
    {
        public PlayerMuteList(nint addr) : base(addr) { }
        public bool bHasVoiceHandshakeCompleted { get { return this[nameof(bHasVoiceHandshakeCompleted)].Flag; } set { this[nameof(bHasVoiceHandshakeCompleted)].Flag = value; } }
        public int VoiceChannelIdx { get { return this[nameof(VoiceChannelIdx)].GetValue<int>(); } set { this[nameof(VoiceChannelIdx)].SetValue<int>(value); } }
    }
    public class PropertyAccessIndirection : Object
    {
        public PropertyAccessIndirection(nint addr) : base(addr) { }
        public Object Property { get { return this[nameof(Property)]; } set { this[nameof(Property)] = value; } }
        public Function Function { get { return this[nameof(Function)].As<Function>(); } set { this["Function"] = value; } }
        public int ReturnBufferSize { get { return this[nameof(ReturnBufferSize)].GetValue<int>(); } set { this[nameof(ReturnBufferSize)].SetValue<int>(value); } }
        public int ReturnBufferAlignment { get { return this[nameof(ReturnBufferAlignment)].GetValue<int>(); } set { this[nameof(ReturnBufferAlignment)].SetValue<int>(value); } }
        public int ArrayIndex { get { return this[nameof(ArrayIndex)].GetValue<int>(); } set { this[nameof(ArrayIndex)].SetValue<int>(value); } }
        public uint Offset { get { return this[nameof(Offset)].GetValue<uint>(); } set { this[nameof(Offset)].SetValue<uint>(value); } }
        public EPropertyAccessObjectType ObjectType { get { return (EPropertyAccessObjectType)this[nameof(ObjectType)].GetValue<int>(); } set { this[nameof(ObjectType)].SetValue<int>((int)value); } }
        public EPropertyAccessIndirectionType Type { get { return (EPropertyAccessIndirectionType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class PropertyAccessIndirectionChain : Object
    {
        public PropertyAccessIndirectionChain(nint addr) : base(addr) { }
        public Object Property { get { return this[nameof(Property)]; } set { this[nameof(Property)] = value; } }
        public int IndirectionStartIndex { get { return this[nameof(IndirectionStartIndex)].GetValue<int>(); } set { this[nameof(IndirectionStartIndex)].SetValue<int>(value); } }
        public int IndirectionEndIndex { get { return this[nameof(IndirectionEndIndex)].GetValue<int>(); } set { this[nameof(IndirectionEndIndex)].SetValue<int>(value); } }
    }
    public class SubsurfaceProfileStruct : Object
    {
        public SubsurfaceProfileStruct(nint addr) : base(addr) { }
        public LinearColor SurfaceAlbedo { get { return this[nameof(SurfaceAlbedo)].As<LinearColor>(); } set { this["SurfaceAlbedo"] = value; } }
        public LinearColor MeanFreePathColor { get { return this[nameof(MeanFreePathColor)].As<LinearColor>(); } set { this["MeanFreePathColor"] = value; } }
        public float MeanFreePathDistance { get { return this[nameof(MeanFreePathDistance)].GetValue<float>(); } set { this[nameof(MeanFreePathDistance)].SetValue<float>(value); } }
        public float WorldUnitScale { get { return this[nameof(WorldUnitScale)].GetValue<float>(); } set { this[nameof(WorldUnitScale)].SetValue<float>(value); } }
        public bool bEnableBurley { get { return this[nameof(bEnableBurley)].Flag; } set { this[nameof(bEnableBurley)].Flag = value; } }
        public bool bEnableMeanFreePath { get { return this[nameof(bEnableMeanFreePath)].Flag; } set { this[nameof(bEnableMeanFreePath)].Flag = value; } }
        public LinearColor Tint { get { return this[nameof(Tint)].As<LinearColor>(); } set { this["Tint"] = value; } }
        public float ScatterRadius { get { return this[nameof(ScatterRadius)].GetValue<float>(); } set { this[nameof(ScatterRadius)].SetValue<float>(value); } }
        public LinearColor SubsurfaceColor { get { return this[nameof(SubsurfaceColor)].As<LinearColor>(); } set { this["SubsurfaceColor"] = value; } }
        public LinearColor FalloffColor { get { return this[nameof(FalloffColor)].As<LinearColor>(); } set { this["FalloffColor"] = value; } }
        public LinearColor BoundaryColorBleed { get { return this[nameof(BoundaryColorBleed)].As<LinearColor>(); } set { this["BoundaryColorBleed"] = value; } }
        public float ExtinctionScale { get { return this[nameof(ExtinctionScale)].GetValue<float>(); } set { this[nameof(ExtinctionScale)].SetValue<float>(value); } }
        public float NormalScale { get { return this[nameof(NormalScale)].GetValue<float>(); } set { this[nameof(NormalScale)].SetValue<float>(value); } }
        public float ScatteringDistribution { get { return this[nameof(ScatteringDistribution)].GetValue<float>(); } set { this[nameof(ScatteringDistribution)].SetValue<float>(value); } }
        public float IOR { get { return this[nameof(IOR)].GetValue<float>(); } set { this[nameof(IOR)].SetValue<float>(value); } }
        public float Roughness0 { get { return this[nameof(Roughness0)].GetValue<float>(); } set { this[nameof(Roughness0)].SetValue<float>(value); } }
        public float Roughness1 { get { return this[nameof(Roughness1)].GetValue<float>(); } set { this[nameof(Roughness1)].SetValue<float>(value); } }
        public float LobeMix { get { return this[nameof(LobeMix)].GetValue<float>(); } set { this[nameof(LobeMix)].SetValue<float>(value); } }
        public LinearColor TransmissionTintColor { get { return this[nameof(TransmissionTintColor)].As<LinearColor>(); } set { this["TransmissionTintColor"] = value; } }
    }
    public class BoneMirrorInfo : Object
    {
        public BoneMirrorInfo(nint addr) : base(addr) { }
        public int SourceIndex { get { return this[nameof(SourceIndex)].GetValue<int>(); } set { this[nameof(SourceIndex)].SetValue<int>(value); } }
        public byte BoneFlipAxis { get { return this[nameof(BoneFlipAxis)].GetValue<byte>(); } set { this[nameof(BoneFlipAxis)].SetValue<byte>(value); } }
    }
    public class BoneMirrorExport : Object
    {
        public BoneMirrorExport(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public Object SourceBoneName { get { return this[nameof(SourceBoneName)]; } set { this[nameof(SourceBoneName)] = value; } }
        public byte BoneFlipAxis { get { return this[nameof(BoneFlipAxis)].GetValue<byte>(); } set { this[nameof(BoneFlipAxis)].SetValue<byte>(value); } }
    }
    public class SkeletalMeshClothBuildParams : Object
    {
        public SkeletalMeshClothBuildParams(nint addr) : base(addr) { }
        public Object TargetAsset { get { return this[nameof(TargetAsset)]; } set { this[nameof(TargetAsset)] = value; } }
        public int TargetLod { get { return this[nameof(TargetLod)].GetValue<int>(); } set { this[nameof(TargetLod)].SetValue<int>(value); } }
        public bool bRemapParameters { get { return this[nameof(bRemapParameters)].Flag; } set { this[nameof(bRemapParameters)].Flag = value; } }
        public Object AssetName { get { return this[nameof(AssetName)]; } set { this[nameof(AssetName)] = value; } }
        public int LODIndex { get { return this[nameof(LODIndex)].GetValue<int>(); } set { this[nameof(LODIndex)].SetValue<int>(value); } }
        public int SourceSection { get { return this[nameof(SourceSection)].GetValue<int>(); } set { this[nameof(SourceSection)].SetValue<int>(value); } }
        public bool bRemoveFromMesh { get { return this[nameof(bRemoveFromMesh)].Flag; } set { this[nameof(bRemoveFromMesh)].Flag = value; } }
        public Object PhysicsAsset { get { return this[nameof(PhysicsAsset)]; } set { this[nameof(PhysicsAsset)] = value; } }
    }
    public class ClothPhysicsProperties_Legacy : Object
    {
        public ClothPhysicsProperties_Legacy(nint addr) : base(addr) { }
        public float VerticalResistance { get { return this[nameof(VerticalResistance)].GetValue<float>(); } set { this[nameof(VerticalResistance)].SetValue<float>(value); } }
        public float HorizontalResistance { get { return this[nameof(HorizontalResistance)].GetValue<float>(); } set { this[nameof(HorizontalResistance)].SetValue<float>(value); } }
        public float BendResistance { get { return this[nameof(BendResistance)].GetValue<float>(); } set { this[nameof(BendResistance)].SetValue<float>(value); } }
        public float ShearResistance { get { return this[nameof(ShearResistance)].GetValue<float>(); } set { this[nameof(ShearResistance)].SetValue<float>(value); } }
        public float Friction { get { return this[nameof(Friction)].GetValue<float>(); } set { this[nameof(Friction)].SetValue<float>(value); } }
        public float Damping { get { return this[nameof(Damping)].GetValue<float>(); } set { this[nameof(Damping)].SetValue<float>(value); } }
        public float TetherStiffness { get { return this[nameof(TetherStiffness)].GetValue<float>(); } set { this[nameof(TetherStiffness)].SetValue<float>(value); } }
        public float TetherLimit { get { return this[nameof(TetherLimit)].GetValue<float>(); } set { this[nameof(TetherLimit)].SetValue<float>(value); } }
        public float Drag { get { return this[nameof(Drag)].GetValue<float>(); } set { this[nameof(Drag)].SetValue<float>(value); } }
        public float StiffnessFrequency { get { return this[nameof(StiffnessFrequency)].GetValue<float>(); } set { this[nameof(StiffnessFrequency)].SetValue<float>(value); } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float MassScale { get { return this[nameof(MassScale)].GetValue<float>(); } set { this[nameof(MassScale)].SetValue<float>(value); } }
        public float InertiaBlend { get { return this[nameof(InertiaBlend)].GetValue<float>(); } set { this[nameof(InertiaBlend)].SetValue<float>(value); } }
        public float SelfCollisionThickness { get { return this[nameof(SelfCollisionThickness)].GetValue<float>(); } set { this[nameof(SelfCollisionThickness)].SetValue<float>(value); } }
        public float SelfCollisionSquashScale { get { return this[nameof(SelfCollisionSquashScale)].GetValue<float>(); } set { this[nameof(SelfCollisionSquashScale)].SetValue<float>(value); } }
        public float SelfCollisionStiffness { get { return this[nameof(SelfCollisionStiffness)].GetValue<float>(); } set { this[nameof(SelfCollisionStiffness)].SetValue<float>(value); } }
        public float SolverFrequency { get { return this[nameof(SolverFrequency)].GetValue<float>(); } set { this[nameof(SolverFrequency)].SetValue<float>(value); } }
        public float FiberCompression { get { return this[nameof(FiberCompression)].GetValue<float>(); } set { this[nameof(FiberCompression)].SetValue<float>(value); } }
        public float FiberExpansion { get { return this[nameof(FiberExpansion)].GetValue<float>(); } set { this[nameof(FiberExpansion)].SetValue<float>(value); } }
        public float FiberResistance { get { return this[nameof(FiberResistance)].GetValue<float>(); } set { this[nameof(FiberResistance)].SetValue<float>(value); } }
    }
    public class ClothingAssetData_Legacy : Object
    {
        public ClothingAssetData_Legacy(nint addr) : base(addr) { }
        public Object AssetName { get { return this[nameof(AssetName)]; } set { this[nameof(AssetName)] = value; } }
        public Object ApexFileName { get { return this[nameof(ApexFileName)]; } set { this[nameof(ApexFileName)] = value; } }
        public bool bClothPropertiesChanged { get { return this[nameof(bClothPropertiesChanged)].Flag; } set { this[nameof(bClothPropertiesChanged)].Flag = value; } }
        public ClothPhysicsProperties_Legacy PhysicsProperties { get { return this[nameof(PhysicsProperties)].As<ClothPhysicsProperties_Legacy>(); } set { this["PhysicsProperties"] = value; } }
    }
    public class BoneFilter : Object
    {
        public BoneFilter(nint addr) : base(addr) { }
        public bool bExcludeSelf { get { return this[nameof(bExcludeSelf)].Flag; } set { this[nameof(bExcludeSelf)].Flag = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class SkeletalMeshLODGroupSettings : Object
    {
        public SkeletalMeshLODGroupSettings(nint addr) : base(addr) { }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public float LODHysteresis { get { return this[nameof(LODHysteresis)].GetValue<float>(); } set { this[nameof(LODHysteresis)].SetValue<float>(value); } }
        public EBoneFilterActionOption BoneFilterActionOption { get { return (EBoneFilterActionOption)this[nameof(BoneFilterActionOption)].GetValue<int>(); } set { this[nameof(BoneFilterActionOption)].SetValue<int>((int)value); } }
        public Array<BoneFilter> BoneList { get { return new Array<BoneFilter>(this[nameof(BoneList)].Address); } }
        public Array<Object> BonesToPrioritize { get { return new Array<Object>(this[nameof(BonesToPrioritize)].Address); } }
        public Array<int> SectionsToPrioritize { get { return new Array<int>(this[nameof(SectionsToPrioritize)].Address); } }
        public float WeightOfPrioritization { get { return this[nameof(WeightOfPrioritization)].GetValue<float>(); } set { this[nameof(WeightOfPrioritization)].SetValue<float>(value); } }
        public AnimSequence BakePose { get { return this[nameof(BakePose)].As<AnimSequence>(); } set { this["BakePose"] = value; } }
        public SkeletalMeshOptimizationSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<SkeletalMeshOptimizationSettings>(); } set { this["ReductionSettings"] = value; } }
    }
    public class SkelMeshMergeSectionMapping : Object
    {
        public SkelMeshMergeSectionMapping(nint addr) : base(addr) { }
        public Array<int> SectionIDs { get { return new Array<int>(this[nameof(SectionIDs)].Address); } }
    }
    public class SkelMeshMergeMeshUVTransforms : Object
    {
        public SkelMeshMergeMeshUVTransforms(nint addr) : base(addr) { }
        public Array<Transform> UVTransforms { get { return new Array<Transform>(this[nameof(UVTransforms)].Address); } }
    }
    public class SkelMeshMergeUVTransformMapping : Object
    {
        public SkelMeshMergeUVTransformMapping(nint addr) : base(addr) { }
        public Array<SkelMeshMergeMeshUVTransforms> UVTransformsPerMesh { get { return new Array<SkelMeshMergeMeshUVTransforms>(this[nameof(UVTransformsPerMesh)].Address); } }
    }
    public class SkeletalMeshSamplingRegionBuiltData : Object
    {
        public SkeletalMeshSamplingRegionBuiltData(nint addr) : base(addr) { }
    }
    public class SkeletalMeshSamplingLODBuiltData : Object
    {
        public SkeletalMeshSamplingLODBuiltData(nint addr) : base(addr) { }
    }
    public class SkeletalMeshSamplingBuiltData : Object
    {
        public SkeletalMeshSamplingBuiltData(nint addr) : base(addr) { }
        public Array<SkeletalMeshSamplingLODBuiltData> WholeMeshBuiltData { get { return new Array<SkeletalMeshSamplingLODBuiltData>(this[nameof(WholeMeshBuiltData)].Address); } }
        public Array<SkeletalMeshSamplingRegionBuiltData> RegionBuiltData { get { return new Array<SkeletalMeshSamplingRegionBuiltData>(this[nameof(RegionBuiltData)].Address); } }
    }
    public class SkeletalMeshSamplingRegionBoneFilter : Object
    {
        public SkeletalMeshSamplingRegionBoneFilter(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public bool bIncludeOrExclude { get { return this[nameof(bIncludeOrExclude)].Flag; } set { this[nameof(bIncludeOrExclude)].Flag = value; } }
        public bool bApplyToChildren { get { return this[nameof(bApplyToChildren)].Flag; } set { this[nameof(bApplyToChildren)].Flag = value; } }
    }
    public class SkeletalMeshSamplingRegionMaterialFilter : Object
    {
        public SkeletalMeshSamplingRegionMaterialFilter(nint addr) : base(addr) { }
        public Object MaterialName { get { return this[nameof(MaterialName)]; } set { this[nameof(MaterialName)] = value; } }
    }
    public class SkeletalMeshSamplingRegion : Object
    {
        public SkeletalMeshSamplingRegion(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public int LODIndex { get { return this[nameof(LODIndex)].GetValue<int>(); } set { this[nameof(LODIndex)].SetValue<int>(value); } }
        public bool bSupportUniformlyDistributedSampling { get { return this[nameof(bSupportUniformlyDistributedSampling)].Flag; } set { this[nameof(bSupportUniformlyDistributedSampling)].Flag = value; } }
        public Array<SkeletalMeshSamplingRegionMaterialFilter> MaterialFilters { get { return new Array<SkeletalMeshSamplingRegionMaterialFilter>(this[nameof(MaterialFilters)].Address); } }
        public Array<SkeletalMeshSamplingRegionBoneFilter> BoneFilters { get { return new Array<SkeletalMeshSamplingRegionBoneFilter>(this[nameof(BoneFilters)].Address); } }
    }
    public class SkeletalMeshSamplingInfo : Object
    {
        public SkeletalMeshSamplingInfo(nint addr) : base(addr) { }
        public Array<SkeletalMeshSamplingRegion> Regions { get { return new Array<SkeletalMeshSamplingRegion>(this[nameof(Regions)].Address); } }
        public SkeletalMeshSamplingBuiltData BuiltData { get { return this[nameof(BuiltData)].As<SkeletalMeshSamplingBuiltData>(); } set { this["BuiltData"] = value; } }
    }
    public class SoundClassEditorData : Object
    {
        public SoundClassEditorData(nint addr) : base(addr) { }
    }
    public class SoundClassProperties : Object
    {
        public SoundClassProperties(nint addr) : base(addr) { }
        public float Volume { get { return this[nameof(Volume)].GetValue<float>(); } set { this[nameof(Volume)].SetValue<float>(value); } }
        public float Pitch { get { return this[nameof(Pitch)].GetValue<float>(); } set { this[nameof(Pitch)].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this[nameof(LowPassFilterFrequency)].GetValue<float>(); } set { this[nameof(LowPassFilterFrequency)].SetValue<float>(value); } }
        public float AttenuationDistanceScale { get { return this[nameof(AttenuationDistanceScale)].GetValue<float>(); } set { this[nameof(AttenuationDistanceScale)].SetValue<float>(value); } }
        public float LFEBleed { get { return this[nameof(LFEBleed)].GetValue<float>(); } set { this[nameof(LFEBleed)].SetValue<float>(value); } }
        public float VoiceCenterChannelVolume { get { return this[nameof(VoiceCenterChannelVolume)].GetValue<float>(); } set { this[nameof(VoiceCenterChannelVolume)].SetValue<float>(value); } }
        public float RadioFilterVolume { get { return this[nameof(RadioFilterVolume)].GetValue<float>(); } set { this[nameof(RadioFilterVolume)].SetValue<float>(value); } }
        public float RadioFilterVolumeThreshold { get { return this[nameof(RadioFilterVolumeThreshold)].GetValue<float>(); } set { this[nameof(RadioFilterVolumeThreshold)].SetValue<float>(value); } }
        public bool bApplyEffects { get { return this[nameof(bApplyEffects)].Flag; } set { this[nameof(bApplyEffects)].Flag = value; } }
        public bool bAlwaysPlay { get { return this[nameof(bAlwaysPlay)].Flag; } set { this[nameof(bAlwaysPlay)].Flag = value; } }
        public bool bIsUISound { get { return this[nameof(bIsUISound)].Flag; } set { this[nameof(bIsUISound)].Flag = value; } }
        public bool bIsMusic { get { return this[nameof(bIsMusic)].Flag; } set { this[nameof(bIsMusic)].Flag = value; } }
        public bool bCenterChannelOnly { get { return this[nameof(bCenterChannelOnly)].Flag; } set { this[nameof(bCenterChannelOnly)].Flag = value; } }
        public bool bApplyAmbientVolumes { get { return this[nameof(bApplyAmbientVolumes)].Flag; } set { this[nameof(bApplyAmbientVolumes)].Flag = value; } }
        public bool bReverb { get { return this[nameof(bReverb)].Flag; } set { this[nameof(bReverb)].Flag = value; } }
        public float Default2DReverbSendAmount { get { return this[nameof(Default2DReverbSendAmount)].GetValue<float>(); } set { this[nameof(Default2DReverbSendAmount)].SetValue<float>(value); } }
        public SoundModulationDefaultSettings ModulationSettings { get { return this[nameof(ModulationSettings)].As<SoundModulationDefaultSettings>(); } set { this["ModulationSettings"] = value; } }
        public byte OutputTarget { get { return this[nameof(OutputTarget)].GetValue<byte>(); } set { this[nameof(OutputTarget)].SetValue<byte>(value); } }
        public ESoundWaveLoadingBehavior LoadingBehavior { get { return (ESoundWaveLoadingBehavior)this[nameof(LoadingBehavior)].GetValue<int>(); } set { this[nameof(LoadingBehavior)].SetValue<int>((int)value); } }
        public SoundSubmix DefaultSubmix { get { return this[nameof(DefaultSubmix)].As<SoundSubmix>(); } set { this["DefaultSubmix"] = value; } }
    }
    public class SoundModulationDefaultSettings : Object
    {
        public SoundModulationDefaultSettings(nint addr) : base(addr) { }
        public SoundModulationDestinationSettings VolumeModulationDestination { get { return this[nameof(VolumeModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["VolumeModulationDestination"] = value; } }
        public SoundModulationDestinationSettings PitchModulationDestination { get { return this[nameof(PitchModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["PitchModulationDestination"] = value; } }
        public SoundModulationDestinationSettings HighpassModulationDestination { get { return this[nameof(HighpassModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["HighpassModulationDestination"] = value; } }
        public SoundModulationDestinationSettings LowpassModulationDestination { get { return this[nameof(LowpassModulationDestination)].As<SoundModulationDestinationSettings>(); } set { this["LowpassModulationDestination"] = value; } }
    }
    public class PassiveSoundMixModifier : Object
    {
        public PassiveSoundMixModifier(nint addr) : base(addr) { }
        public SoundMix SoundMix { get { return this[nameof(SoundMix)].As<SoundMix>(); } set { this["SoundMix"] = value; } }
        public float MinVolumeThreshold { get { return this[nameof(MinVolumeThreshold)].GetValue<float>(); } set { this[nameof(MinVolumeThreshold)].SetValue<float>(value); } }
        public float MaxVolumeThreshold { get { return this[nameof(MaxVolumeThreshold)].GetValue<float>(); } set { this[nameof(MaxVolumeThreshold)].SetValue<float>(value); } }
    }
    public class SoundConcurrencySettings : Object
    {
        public SoundConcurrencySettings(nint addr) : base(addr) { }
        public int MaxCount { get { return this[nameof(MaxCount)].GetValue<int>(); } set { this[nameof(MaxCount)].SetValue<int>(value); } }
        public bool bLimitToOwner { get { return this[nameof(bLimitToOwner)].Flag; } set { this[nameof(bLimitToOwner)].Flag = value; } }
        public bool bVolumeScaleCanRelease { get { return this[nameof(bVolumeScaleCanRelease)].Flag; } set { this[nameof(bVolumeScaleCanRelease)].Flag = value; } }
        public byte ResolutionRule { get { return this[nameof(ResolutionRule)].GetValue<byte>(); } set { this[nameof(ResolutionRule)].SetValue<byte>(value); } }
        public float RetriggerTime { get { return this[nameof(RetriggerTime)].GetValue<float>(); } set { this[nameof(RetriggerTime)].SetValue<float>(value); } }
        public float VolumeScale { get { return this[nameof(VolumeScale)].GetValue<float>(); } set { this[nameof(VolumeScale)].SetValue<float>(value); } }
        public EConcurrencyVolumeScaleMode VolumeScaleMode { get { return (EConcurrencyVolumeScaleMode)this[nameof(VolumeScaleMode)].GetValue<int>(); } set { this[nameof(VolumeScaleMode)].SetValue<int>((int)value); } }
        public float VolumeScaleAttackTime { get { return this[nameof(VolumeScaleAttackTime)].GetValue<float>(); } set { this[nameof(VolumeScaleAttackTime)].SetValue<float>(value); } }
        public float VolumeScaleReleaseTime { get { return this[nameof(VolumeScaleReleaseTime)].GetValue<float>(); } set { this[nameof(VolumeScaleReleaseTime)].SetValue<float>(value); } }
        public float VoiceStealReleaseTime { get { return this[nameof(VoiceStealReleaseTime)].GetValue<float>(); } set { this[nameof(VoiceStealReleaseTime)].SetValue<float>(value); } }
    }
    public class SoundNodeEditorData : Object
    {
        public SoundNodeEditorData(nint addr) : base(addr) { }
    }
    public class AudioEQEffect : AudioEffectParameters
    {
        public AudioEQEffect(nint addr) : base(addr) { }
        public float FrequencyCenter0 { get { return this[nameof(FrequencyCenter0)].GetValue<float>(); } set { this[nameof(FrequencyCenter0)].SetValue<float>(value); } }
        public float Gain0 { get { return this[nameof(Gain0)].GetValue<float>(); } set { this[nameof(Gain0)].SetValue<float>(value); } }
        public float Bandwidth0 { get { return this[nameof(Bandwidth0)].GetValue<float>(); } set { this[nameof(Bandwidth0)].SetValue<float>(value); } }
        public float FrequencyCenter1 { get { return this[nameof(FrequencyCenter1)].GetValue<float>(); } set { this[nameof(FrequencyCenter1)].SetValue<float>(value); } }
        public float Gain1 { get { return this[nameof(Gain1)].GetValue<float>(); } set { this[nameof(Gain1)].SetValue<float>(value); } }
        public float Bandwidth1 { get { return this[nameof(Bandwidth1)].GetValue<float>(); } set { this[nameof(Bandwidth1)].SetValue<float>(value); } }
        public float FrequencyCenter2 { get { return this[nameof(FrequencyCenter2)].GetValue<float>(); } set { this[nameof(FrequencyCenter2)].SetValue<float>(value); } }
        public float Gain2 { get { return this[nameof(Gain2)].GetValue<float>(); } set { this[nameof(Gain2)].SetValue<float>(value); } }
        public float Bandwidth2 { get { return this[nameof(Bandwidth2)].GetValue<float>(); } set { this[nameof(Bandwidth2)].SetValue<float>(value); } }
        public float FrequencyCenter3 { get { return this[nameof(FrequencyCenter3)].GetValue<float>(); } set { this[nameof(FrequencyCenter3)].SetValue<float>(value); } }
        public float Gain3 { get { return this[nameof(Gain3)].GetValue<float>(); } set { this[nameof(Gain3)].SetValue<float>(value); } }
        public float Bandwidth3 { get { return this[nameof(Bandwidth3)].GetValue<float>(); } set { this[nameof(Bandwidth3)].SetValue<float>(value); } }
    }
    public class SoundClassAdjuster : Object
    {
        public SoundClassAdjuster(nint addr) : base(addr) { }
        public SoundClass SoundClassObject { get { return this[nameof(SoundClassObject)].As<SoundClass>(); } set { this["SoundClassObject"] = value; } }
        public float VolumeAdjuster { get { return this[nameof(VolumeAdjuster)].GetValue<float>(); } set { this[nameof(VolumeAdjuster)].SetValue<float>(value); } }
        public float PitchAdjuster { get { return this[nameof(PitchAdjuster)].GetValue<float>(); } set { this[nameof(PitchAdjuster)].SetValue<float>(value); } }
        public float LowPassFilterFrequency { get { return this[nameof(LowPassFilterFrequency)].GetValue<float>(); } set { this[nameof(LowPassFilterFrequency)].SetValue<float>(value); } }
        public bool bApplyToChildren { get { return this[nameof(bApplyToChildren)].Flag; } set { this[nameof(bApplyToChildren)].Flag = value; } }
        public float VoiceCenterChannelVolumeAdjuster { get { return this[nameof(VoiceCenterChannelVolumeAdjuster)].GetValue<float>(); } set { this[nameof(VoiceCenterChannelVolumeAdjuster)].SetValue<float>(value); } }
    }
    public class SoundModulationDefaultRoutingSettings : SoundModulationDefaultSettings
    {
        public SoundModulationDefaultRoutingSettings(nint addr) : base(addr) { }
        public EModulationRouting VolumeRouting { get { return (EModulationRouting)this[nameof(VolumeRouting)].GetValue<int>(); } set { this[nameof(VolumeRouting)].SetValue<int>((int)value); } }
        public EModulationRouting PitchRouting { get { return (EModulationRouting)this[nameof(PitchRouting)].GetValue<int>(); } set { this[nameof(PitchRouting)].SetValue<int>((int)value); } }
        public EModulationRouting HighpassRouting { get { return (EModulationRouting)this[nameof(HighpassRouting)].GetValue<int>(); } set { this[nameof(HighpassRouting)].SetValue<int>((int)value); } }
        public EModulationRouting LowpassRouting { get { return (EModulationRouting)this[nameof(LowpassRouting)].GetValue<int>(); } set { this[nameof(LowpassRouting)].SetValue<int>((int)value); } }
    }
    public class DistanceDatum : Object
    {
        public DistanceDatum(nint addr) : base(addr) { }
        public float FadeInDistanceStart { get { return this[nameof(FadeInDistanceStart)].GetValue<float>(); } set { this[nameof(FadeInDistanceStart)].SetValue<float>(value); } }
        public float FadeInDistanceEnd { get { return this[nameof(FadeInDistanceEnd)].GetValue<float>(); } set { this[nameof(FadeInDistanceEnd)].SetValue<float>(value); } }
        public float FadeOutDistanceStart { get { return this[nameof(FadeOutDistanceStart)].GetValue<float>(); } set { this[nameof(FadeOutDistanceStart)].SetValue<float>(value); } }
        public float FadeOutDistanceEnd { get { return this[nameof(FadeOutDistanceEnd)].GetValue<float>(); } set { this[nameof(FadeOutDistanceEnd)].SetValue<float>(value); } }
        public float Volume { get { return this[nameof(Volume)].GetValue<float>(); } set { this[nameof(Volume)].SetValue<float>(value); } }
    }
    public class SoundSubmixSpectralAnalysisBandSettings : Object
    {
        public SoundSubmixSpectralAnalysisBandSettings(nint addr) : base(addr) { }
        public float BandFrequency { get { return this[nameof(BandFrequency)].GetValue<float>(); } set { this[nameof(BandFrequency)].SetValue<float>(value); } }
        public int AttackTimeMsec { get { return this[nameof(AttackTimeMsec)].GetValue<int>(); } set { this[nameof(AttackTimeMsec)].SetValue<int>(value); } }
        public int ReleaseTimeMsec { get { return this[nameof(ReleaseTimeMsec)].GetValue<int>(); } set { this[nameof(ReleaseTimeMsec)].SetValue<int>(value); } }
        public float QFactor { get { return this[nameof(QFactor)].GetValue<float>(); } set { this[nameof(QFactor)].SetValue<float>(value); } }
    }
    public class StaticMeshSourceModel : Object
    {
        public StaticMeshSourceModel(nint addr) : base(addr) { }
        public MeshBuildSettings BuildSettings { get { return this[nameof(BuildSettings)].As<MeshBuildSettings>(); } set { this["BuildSettings"] = value; } }
        public MeshReductionSettings ReductionSettings { get { return this[nameof(ReductionSettings)].As<MeshReductionSettings>(); } set { this["ReductionSettings"] = value; } }
        public float LODDistance { get { return this[nameof(LODDistance)].GetValue<float>(); } set { this[nameof(LODDistance)].SetValue<float>(value); } }
        public PerPlatformFloat ScreenSize { get { return this[nameof(ScreenSize)].As<PerPlatformFloat>(); } set { this["ScreenSize"] = value; } }
        public Object SourceImportFilename { get { return this[nameof(SourceImportFilename)]; } set { this[nameof(SourceImportFilename)] = value; } }
    }
    public class StreamableTexture : Object
    {
        public StreamableTexture(nint addr) : base(addr) { }
    }
    public class ExternalToolDefinition : Object
    {
        public ExternalToolDefinition(nint addr) : base(addr) { }
        public Object ToolName { get { return this[nameof(ToolName)]; } set { this[nameof(ToolName)] = value; } }
        public FilePath ExecutablePath { get { return this[nameof(ExecutablePath)].As<FilePath>(); } set { this["ExecutablePath"] = value; } }
        public Object CommandLineOptions { get { return this[nameof(CommandLineOptions)]; } set { this[nameof(CommandLineOptions)] = value; } }
        public DirectoryPath WorkingDirectory { get { return this[nameof(WorkingDirectory)].As<DirectoryPath>(); } set { this["WorkingDirectory"] = value; } }
        public Object ScriptExtension { get { return this[nameof(ScriptExtension)]; } set { this[nameof(ScriptExtension)] = value; } }
        public DirectoryPath ScriptDirectory { get { return this[nameof(ScriptDirectory)].As<DirectoryPath>(); } set { this["ScriptDirectory"] = value; } }
    }
    public class ImportFactorySettingValues : Object
    {
        public ImportFactorySettingValues(nint addr) : base(addr) { }
        public Object SettingName { get { return this[nameof(SettingName)]; } set { this[nameof(SettingName)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class EditorImportExportTestDefinition : Object
    {
        public EditorImportExportTestDefinition(nint addr) : base(addr) { }
        public FilePath ImportFilePath { get { return this[nameof(ImportFilePath)].As<FilePath>(); } set { this["ImportFilePath"] = value; } }
        public Object ExportFileExtension { get { return this[nameof(ExportFileExtension)]; } set { this[nameof(ExportFileExtension)] = value; } }
        public bool bSkipExport { get { return this[nameof(bSkipExport)].Flag; } set { this[nameof(bSkipExport)].Flag = value; } }
        public Array<ImportFactorySettingValues> FactorySettings { get { return new Array<ImportFactorySettingValues>(this[nameof(FactorySettings)].Address); } }
    }
    public class EditorImportWorkflowDefinition : Object
    {
        public EditorImportWorkflowDefinition(nint addr) : base(addr) { }
        public FilePath ImportFilePath { get { return this[nameof(ImportFilePath)].As<FilePath>(); } set { this["ImportFilePath"] = value; } }
        public Array<ImportFactorySettingValues> FactorySettings { get { return new Array<ImportFactorySettingValues>(this[nameof(FactorySettings)].Address); } }
    }
    public class BuildPromotionImportWorkflowSettings : Object
    {
        public BuildPromotionImportWorkflowSettings(nint addr) : base(addr) { }
        public EditorImportWorkflowDefinition Diffuse { get { return this[nameof(Diffuse)].As<EditorImportWorkflowDefinition>(); } set { this["Diffuse"] = value; } }
        public EditorImportWorkflowDefinition Normal { get { return this[nameof(Normal)].As<EditorImportWorkflowDefinition>(); } set { this["Normal"] = value; } }
        public EditorImportWorkflowDefinition StaticMesh { get { return this[nameof(StaticMesh)].As<EditorImportWorkflowDefinition>(); } set { this["StaticMesh"] = value; } }
        public EditorImportWorkflowDefinition ReimportStaticMesh { get { return this[nameof(ReimportStaticMesh)].As<EditorImportWorkflowDefinition>(); } set { this["ReimportStaticMesh"] = value; } }
        public EditorImportWorkflowDefinition BlendShapeMesh { get { return this[nameof(BlendShapeMesh)].As<EditorImportWorkflowDefinition>(); } set { this["BlendShapeMesh"] = value; } }
        public EditorImportWorkflowDefinition MorphMesh { get { return this[nameof(MorphMesh)].As<EditorImportWorkflowDefinition>(); } set { this["MorphMesh"] = value; } }
        public EditorImportWorkflowDefinition SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<EditorImportWorkflowDefinition>(); } set { this["SkeletalMesh"] = value; } }
        public EditorImportWorkflowDefinition Animation { get { return this[nameof(Animation)].As<EditorImportWorkflowDefinition>(); } set { this["Animation"] = value; } }
        public EditorImportWorkflowDefinition Sound { get { return this[nameof(Sound)].As<EditorImportWorkflowDefinition>(); } set { this["Sound"] = value; } }
        public EditorImportWorkflowDefinition SurroundSound { get { return this[nameof(SurroundSound)].As<EditorImportWorkflowDefinition>(); } set { this["SurroundSound"] = value; } }
        public Array<EditorImportWorkflowDefinition> OtherAssetsToImport { get { return new Array<EditorImportWorkflowDefinition>(this[nameof(OtherAssetsToImport)].Address); } }
    }
    public class BuildPromotionOpenAssetSettings : Object
    {
        public BuildPromotionOpenAssetSettings(nint addr) : base(addr) { }
        public FilePath BlueprintAsset { get { return this[nameof(BlueprintAsset)].As<FilePath>(); } set { this["BlueprintAsset"] = value; } }
        public FilePath MaterialAsset { get { return this[nameof(MaterialAsset)].As<FilePath>(); } set { this["MaterialAsset"] = value; } }
        public FilePath ParticleSystemAsset { get { return this[nameof(ParticleSystemAsset)].As<FilePath>(); } set { this["ParticleSystemAsset"] = value; } }
        public FilePath SkeletalMeshAsset { get { return this[nameof(SkeletalMeshAsset)].As<FilePath>(); } set { this["SkeletalMeshAsset"] = value; } }
        public FilePath StaticMeshAsset { get { return this[nameof(StaticMeshAsset)].As<FilePath>(); } set { this["StaticMeshAsset"] = value; } }
        public FilePath TextureAsset { get { return this[nameof(TextureAsset)].As<FilePath>(); } set { this["TextureAsset"] = value; } }
    }
    public class BuildPromotionNewProjectSettings : Object
    {
        public BuildPromotionNewProjectSettings(nint addr) : base(addr) { }
        public DirectoryPath NewProjectFolderOverride { get { return this[nameof(NewProjectFolderOverride)].As<DirectoryPath>(); } set { this["NewProjectFolderOverride"] = value; } }
        public Object NewProjectNameOverride { get { return this[nameof(NewProjectNameOverride)]; } set { this[nameof(NewProjectNameOverride)] = value; } }
    }
    public class MaterialEditorPromotionSettings : Object
    {
        public MaterialEditorPromotionSettings(nint addr) : base(addr) { }
        public FilePath DefaultMaterialAsset { get { return this[nameof(DefaultMaterialAsset)].As<FilePath>(); } set { this["DefaultMaterialAsset"] = value; } }
        public FilePath DefaultDiffuseTexture { get { return this[nameof(DefaultDiffuseTexture)].As<FilePath>(); } set { this["DefaultDiffuseTexture"] = value; } }
        public FilePath DefaultNormalTexture { get { return this[nameof(DefaultNormalTexture)].As<FilePath>(); } set { this["DefaultNormalTexture"] = value; } }
    }
    public class ParticleEditorPromotionSettings : Object
    {
        public ParticleEditorPromotionSettings(nint addr) : base(addr) { }
        public FilePath DefaultParticleAsset { get { return this[nameof(DefaultParticleAsset)].As<FilePath>(); } set { this["DefaultParticleAsset"] = value; } }
    }
    public class BlueprintEditorPromotionSettings : Object
    {
        public BlueprintEditorPromotionSettings(nint addr) : base(addr) { }
        public FilePath FirstMeshPath { get { return this[nameof(FirstMeshPath)].As<FilePath>(); } set { this["FirstMeshPath"] = value; } }
        public FilePath SecondMeshPath { get { return this[nameof(SecondMeshPath)].As<FilePath>(); } set { this["SecondMeshPath"] = value; } }
        public FilePath DefaultParticleAsset { get { return this[nameof(DefaultParticleAsset)].As<FilePath>(); } set { this["DefaultParticleAsset"] = value; } }
    }
    public class BuildPromotionTestSettings : Object
    {
        public BuildPromotionTestSettings(nint addr) : base(addr) { }
        public FilePath DefaultStaticMeshAsset { get { return this[nameof(DefaultStaticMeshAsset)].As<FilePath>(); } set { this["DefaultStaticMeshAsset"] = value; } }
        public BuildPromotionImportWorkflowSettings ImportWorkflow { get { return this[nameof(ImportWorkflow)].As<BuildPromotionImportWorkflowSettings>(); } set { this["ImportWorkflow"] = value; } }
        public BuildPromotionOpenAssetSettings OpenAssets { get { return this[nameof(OpenAssets)].As<BuildPromotionOpenAssetSettings>(); } set { this["OpenAssets"] = value; } }
        public BuildPromotionNewProjectSettings NewProjectSettings { get { return this[nameof(NewProjectSettings)].As<BuildPromotionNewProjectSettings>(); } set { this["NewProjectSettings"] = value; } }
        public FilePath SourceControlMaterial { get { return this[nameof(SourceControlMaterial)].As<FilePath>(); } set { this["SourceControlMaterial"] = value; } }
    }
    public class EditorMapPerformanceTestDefinition : Object
    {
        public EditorMapPerformanceTestDefinition(nint addr) : base(addr) { }
        public SoftObjectPath PerformanceTestmap { get { return this[nameof(PerformanceTestmap)].As<SoftObjectPath>(); } set { this["PerformanceTestmap"] = value; } }
        public int TestTimer { get { return this[nameof(TestTimer)].GetValue<int>(); } set { this[nameof(TestTimer)].SetValue<int>(value); } }
    }
    public class LaunchOnTestSettings : Object
    {
        public LaunchOnTestSettings(nint addr) : base(addr) { }
        public FilePath LaunchOnTestmap { get { return this[nameof(LaunchOnTestmap)].As<FilePath>(); } set { this["LaunchOnTestmap"] = value; } }
        public Object DeviceID { get { return this[nameof(DeviceID)]; } set { this[nameof(DeviceID)] = value; } }
    }
    public class TextureLODGroup : Object
    {
        public TextureLODGroup(nint addr) : base(addr) { }
        public byte Group { get { return this[nameof(Group)].GetValue<byte>(); } set { this[nameof(Group)].SetValue<byte>(value); } }
        public int LODBias { get { return this[nameof(LODBias)].GetValue<int>(); } set { this[nameof(LODBias)].SetValue<int>(value); } }
        public int LODBias_Smaller { get { return this[nameof(LODBias_Smaller)].GetValue<int>(); } set { this[nameof(LODBias_Smaller)].SetValue<int>(value); } }
        public int LODBias_Smallest { get { return this[nameof(LODBias_Smallest)].GetValue<int>(); } set { this[nameof(LODBias_Smallest)].SetValue<int>(value); } }
        public int NumStreamedMips { get { return this[nameof(NumStreamedMips)].GetValue<int>(); } set { this[nameof(NumStreamedMips)].SetValue<int>(value); } }
        public byte MipGenSettings { get { return this[nameof(MipGenSettings)].GetValue<byte>(); } set { this[nameof(MipGenSettings)].SetValue<byte>(value); } }
        public int MinLODSize { get { return this[nameof(MinLODSize)].GetValue<int>(); } set { this[nameof(MinLODSize)].SetValue<int>(value); } }
        public int MaxLODSize { get { return this[nameof(MaxLODSize)].GetValue<int>(); } set { this[nameof(MaxLODSize)].SetValue<int>(value); } }
        public int MaxLODSize_Smaller { get { return this[nameof(MaxLODSize_Smaller)].GetValue<int>(); } set { this[nameof(MaxLODSize_Smaller)].SetValue<int>(value); } }
        public int MaxLODSize_Smallest { get { return this[nameof(MaxLODSize_Smallest)].GetValue<int>(); } set { this[nameof(MaxLODSize_Smallest)].SetValue<int>(value); } }
        public int MaxLODSize_VT { get { return this[nameof(MaxLODSize_VT)].GetValue<int>(); } set { this[nameof(MaxLODSize_VT)].SetValue<int>(value); } }
        public int OptionalLODBias { get { return this[nameof(OptionalLODBias)].GetValue<int>(); } set { this[nameof(OptionalLODBias)].SetValue<int>(value); } }
        public int OptionalMaxLODSize { get { return this[nameof(OptionalMaxLODSize)].GetValue<int>(); } set { this[nameof(OptionalMaxLODSize)].SetValue<int>(value); } }
        public Object MinMagFilter { get { return this[nameof(MinMagFilter)]; } set { this[nameof(MinMagFilter)] = value; } }
        public Object MipFilter { get { return this[nameof(MipFilter)]; } set { this[nameof(MipFilter)] = value; } }
        public ETextureMipLoadOptions MipLoadOptions { get { return (ETextureMipLoadOptions)this[nameof(MipLoadOptions)].GetValue<int>(); } set { this[nameof(MipLoadOptions)].SetValue<int>((int)value); } }
        public bool HighPriorityLoad { get { return this[nameof(HighPriorityLoad)].Flag; } set { this[nameof(HighPriorityLoad)].Flag = value; } }
        public bool DuplicateNonOptionalMips { get { return this[nameof(DuplicateNonOptionalMips)].Flag; } set { this[nameof(DuplicateNonOptionalMips)].Flag = value; } }
        public float Downscale { get { return this[nameof(Downscale)].GetValue<float>(); } set { this[nameof(Downscale)].SetValue<float>(value); } }
        public ETextureDownscaleOptions DownscaleOptions { get { return (ETextureDownscaleOptions)this[nameof(DownscaleOptions)].GetValue<int>(); } set { this[nameof(DownscaleOptions)].SetValue<int>((int)value); } }
        public int VirtualTextureTileCountBias { get { return this[nameof(VirtualTextureTileCountBias)].GetValue<int>(); } set { this[nameof(VirtualTextureTileCountBias)].SetValue<int>(value); } }
        public int VirtualTextureTileSizeBias { get { return this[nameof(VirtualTextureTileSizeBias)].GetValue<int>(); } set { this[nameof(VirtualTextureTileSizeBias)].SetValue<int>(value); } }
        public byte LossyCompressionAmount { get { return this[nameof(LossyCompressionAmount)].GetValue<byte>(); } set { this[nameof(LossyCompressionAmount)].SetValue<byte>(value); } }
    }
    public class TTTrackBase : Object
    {
        public TTTrackBase(nint addr) : base(addr) { }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public bool bIsExternalCurve { get { return this[nameof(bIsExternalCurve)].Flag; } set { this[nameof(bIsExternalCurve)].Flag = value; } }
    }
    public class TTTrackId : Object
    {
        public TTTrackId(nint addr) : base(addr) { }
        public int TrackType { get { return this[nameof(TrackType)].GetValue<int>(); } set { this[nameof(TrackType)].SetValue<int>(value); } }
        public int TrackIndex { get { return this[nameof(TrackIndex)].GetValue<int>(); } set { this[nameof(TrackIndex)].SetValue<int>(value); } }
    }
    public class TTEventTrack : TTTrackBase
    {
        public TTEventTrack(nint addr) : base(addr) { }
        public Object FunctionName { get { return this[nameof(FunctionName)]; } set { this[nameof(FunctionName)] = value; } }
        public CurveFloat CurveKeys { get { return this[nameof(CurveKeys)].As<CurveFloat>(); } set { this["CurveKeys"] = value; } }
    }
    public class TTPropertyTrack : TTTrackBase
    {
        public TTPropertyTrack(nint addr) : base(addr) { }
        public Object PropertyName { get { return this[nameof(PropertyName)]; } set { this[nameof(PropertyName)] = value; } }
    }
    public class TTFloatTrack : TTPropertyTrack
    {
        public TTFloatTrack(nint addr) : base(addr) { }
        public CurveFloat CurveFloat { get { return this[nameof(CurveFloat)].As<CurveFloat>(); } set { this["CurveFloat"] = value; } }
    }
    public class TTVectorTrack : TTPropertyTrack
    {
        public TTVectorTrack(nint addr) : base(addr) { }
        public CurveVector CurveVector { get { return this[nameof(CurveVector)].As<CurveVector>(); } set { this["CurveVector"] = value; } }
    }
    public class TTLinearColorTrack : TTPropertyTrack
    {
        public TTLinearColorTrack(nint addr) : base(addr) { }
        public CurveLinearColor CurveLinearColor { get { return this[nameof(CurveLinearColor)].As<CurveLinearColor>(); } set { this["CurveLinearColor"] = value; } }
    }
    public class HardwareCursorReference : Object
    {
        public HardwareCursorReference(nint addr) : base(addr) { }
        public Object CursorPath { get { return this[nameof(CursorPath)]; } set { this[nameof(CursorPath)] = value; } }
        public Vector2D HotSpot { get { return this[nameof(HotSpot)].As<Vector2D>(); } set { this["HotSpot"] = value; } }
    }
    public class CanvasIcon : Object
    {
        public CanvasIcon(nint addr) : base(addr) { }
        public Texture Texture { get { return this[nameof(Texture)].As<Texture>(); } set { this["Texture"] = value; } }
        public float U { get { return this[nameof(U)].GetValue<float>(); } set { this[nameof(U)].SetValue<float>(value); } }
        public float V { get { return this[nameof(V)].GetValue<float>(); } set { this[nameof(V)].SetValue<float>(value); } }
        public float UL { get { return this[nameof(UL)].GetValue<float>(); } set { this[nameof(UL)].SetValue<float>(value); } }
        public float VL { get { return this[nameof(VL)].GetValue<float>(); } set { this[nameof(VL)].SetValue<float>(value); } }
    }
    public class AutoCompleteNode : Object
    {
        public AutoCompleteNode(nint addr) : base(addr) { }
        public int IndexChar { get { return this[nameof(IndexChar)].GetValue<int>(); } set { this[nameof(IndexChar)].SetValue<int>(value); } }
        public Array<int> AutoCompleteListIndices { get { return new Array<int>(this[nameof(AutoCompleteListIndices)].Address); } }
    }
    public class InputAxisProperties : Object
    {
        public InputAxisProperties(nint addr) : base(addr) { }
        public float DeadZone { get { return this[nameof(DeadZone)].GetValue<float>(); } set { this[nameof(DeadZone)].SetValue<float>(value); } }
        public float Sensitivity { get { return this[nameof(Sensitivity)].GetValue<float>(); } set { this[nameof(Sensitivity)].SetValue<float>(value); } }
        public float Exponent { get { return this[nameof(Exponent)].GetValue<float>(); } set { this[nameof(Exponent)].SetValue<float>(value); } }
        public bool bInvert { get { return this[nameof(bInvert)].Flag; } set { this[nameof(bInvert)].Flag = value; } }
    }
    public class InputAxisConfigEntry : Object
    {
        public InputAxisConfigEntry(nint addr) : base(addr) { }
        public Object AxisKeyName { get { return this[nameof(AxisKeyName)]; } set { this[nameof(AxisKeyName)] = value; } }
        public InputAxisProperties AxisProperties { get { return this[nameof(AxisProperties)].As<InputAxisProperties>(); } set { this["AxisProperties"] = value; } }
    }
    public class InputActionSpeechMapping : Object
    {
        public InputActionSpeechMapping(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public Object SpeechKeyword { get { return this[nameof(SpeechKeyword)]; } set { this[nameof(SpeechKeyword)] = value; } }
    }
    public class VoiceSettings : Object
    {
        public VoiceSettings(nint addr) : base(addr) { }
        public SceneComponent ComponentToAttachTo { get { return this[nameof(ComponentToAttachTo)].As<SceneComponent>(); } set { this["ComponentToAttachTo"] = value; } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public SoundEffectSourcePresetChain SourceEffectChain { get { return this[nameof(SourceEffectChain)].As<SoundEffectSourcePresetChain>(); } set { this["SourceEffectChain"] = value; } }
    }
    public class VirtualTextureBuildSettings : Object
    {
        public VirtualTextureBuildSettings(nint addr) : base(addr) { }
        public int TileSize { get { return this[nameof(TileSize)].GetValue<int>(); } set { this[nameof(TileSize)].SetValue<int>(value); } }
        public int TileBorderSize { get { return this[nameof(TileBorderSize)].GetValue<int>(); } set { this[nameof(TileBorderSize)].SetValue<int>(value); } }
    }
    public class VirtualTextureSpacePoolConfig : Object
    {
        public VirtualTextureSpacePoolConfig(nint addr) : base(addr) { }
        public int MinTileSize { get { return this[nameof(MinTileSize)].GetValue<int>(); } set { this[nameof(MinTileSize)].SetValue<int>(value); } }
        public int MaxTileSize { get { return this[nameof(MaxTileSize)].GetValue<int>(); } set { this[nameof(MaxTileSize)].SetValue<int>(value); } }
        public Array<byte> Formats { get { return new Array<byte>(this[nameof(Formats)].Address); } }
        public int SizeInMegabyte { get { return this[nameof(SizeInMegabyte)].GetValue<int>(); } set { this[nameof(SizeInMegabyte)].SetValue<int>(value); } }
        public bool bEnableResidencyMipMapBias { get { return this[nameof(bEnableResidencyMipMapBias)].Flag; } set { this[nameof(bEnableResidencyMipMapBias)].Flag = value; } }
        public bool bAllowSizeScale { get { return this[nameof(bAllowSizeScale)].Flag; } set { this[nameof(bAllowSizeScale)].Flag = value; } }
        public uint ScalabilityGroup { get { return this[nameof(ScalabilityGroup)].GetValue<uint>(); } set { this[nameof(ScalabilityGroup)].SetValue<uint>(value); } }
        public int MinScaledSizeInMegabyte { get { return this[nameof(MinScaledSizeInMegabyte)].GetValue<int>(); } set { this[nameof(MinScaledSizeInMegabyte)].SetValue<int>(value); } }
        public int MaxScaledSizeInMegabyte { get { return this[nameof(MaxScaledSizeInMegabyte)].GetValue<int>(); } set { this[nameof(MaxScaledSizeInMegabyte)].SetValue<int>(value); } }
    }
    public class LevelViewportInfo : Object
    {
        public LevelViewportInfo(nint addr) : base(addr) { }
        public Vector CamPosition { get { return this[nameof(CamPosition)].As<Vector>(); } set { this["CamPosition"] = value; } }
        public Rotator CamRotation { get { return this[nameof(CamRotation)].As<Rotator>(); } set { this["CamRotation"] = value; } }
        public float CamOrthoZoom { get { return this[nameof(CamOrthoZoom)].GetValue<float>(); } set { this[nameof(CamOrthoZoom)].SetValue<float>(value); } }
        public bool CamUpdated { get { return this[nameof(CamUpdated)].Flag; } set { this[nameof(CamUpdated)].Flag = value; } }
    }
    public class StartPhysicsTickFunction : TickFunction
    {
        public StartPhysicsTickFunction(nint addr) : base(addr) { }
    }
    public class EndPhysicsTickFunction : TickFunction
    {
        public EndPhysicsTickFunction(nint addr) : base(addr) { }
    }
    public class LevelCollection : Object
    {
        public LevelCollection(nint addr) : base(addr) { }
        public GameStateBase GameState { get { return this[nameof(GameState)].As<GameStateBase>(); } set { this["GameState"] = value; } }
        public NetDriver NetDriver { get { return this[nameof(NetDriver)].As<NetDriver>(); } set { this["NetDriver"] = value; } }
        public DemoNetDriver DemoNetDriver { get { return this[nameof(DemoNetDriver)].As<DemoNetDriver>(); } set { this["DemoNetDriver"] = value; } }
        public Level PersistentLevel { get { return this[nameof(PersistentLevel)].As<Level>(); } set { this["PersistentLevel"] = value; } }
        public Object Levels { get { return this[nameof(Levels)]; } set { this[nameof(Levels)] = value; } }
    }
    public class StreamingLevelsToConsider : Object
    {
        public StreamingLevelsToConsider(nint addr) : base(addr) { }
        public Array<LevelStreaming> StreamingLevels { get { return new Array<LevelStreaming>(this[nameof(StreamingLevels)].Address); } }
    }
    public class ActorDesc : Object
    {
        public ActorDesc(nint addr) : base(addr) { }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
        public SoftObjectPath Class { get { return this[nameof(Class)].As<SoftObjectPath>(); } set { this["Class"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Box Bounds { get { return this[nameof(Bounds)].As<Box>(); } set { this["Bounds"] = value; } }
        public Object RuntimeGrid { get { return this[nameof(RuntimeGrid)]; } set { this[nameof(RuntimeGrid)] = value; } }
        public bool bIsSpatiallyLoaded { get { return this[nameof(bIsSpatiallyLoaded)].Flag; } set { this[nameof(bIsSpatiallyLoaded)].Flag = value; } }
        public bool bActorIsEditorOnly { get { return this[nameof(bActorIsEditorOnly)].Flag; } set { this[nameof(bActorIsEditorOnly)].Flag = value; } }
        public Object ActorPackage { get { return this[nameof(ActorPackage)]; } set { this[nameof(ActorPackage)] = value; } }
        public Object ActorPath { get { return this[nameof(ActorPath)]; } set { this[nameof(ActorPath)] = value; } }
    }
    public class ActorPlacementDataLayers : Object
    {
        public ActorPlacementDataLayers(nint addr) : base(addr) { }
        public Array<Object> DataLayerInstanceNames { get { return new Array<Object>(this[nameof(DataLayerInstanceNames)].Address); } }
        public int ContextID { get { return this[nameof(ContextID)].GetValue<int>(); } set { this[nameof(ContextID)].SetValue<int>(value); } }
    }
    public class WorldPartitionPerWorldSettings : Object
    {
        public WorldPartitionPerWorldSettings(nint addr) : base(addr) { }
    }
    public class WorldPartitionRuntimeCellObjectMapping : Object
    {
        public WorldPartitionRuntimeCellObjectMapping(nint addr) : base(addr) { }
    }
    public class WorldPartitionRuntimeCellDebugInfo : Object
    {
        public WorldPartitionRuntimeCellDebugInfo(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object GridName { get { return this[nameof(GridName)]; } set { this[nameof(GridName)] = value; } }
        public long CoordX { get { return this[nameof(CoordX)].GetValue<long>(); } set { this[nameof(CoordX)].SetValue<long>(value); } }
        public long CoordY { get { return this[nameof(CoordY)].GetValue<long>(); } set { this[nameof(CoordY)].SetValue<long>(value); } }
        public long CoordZ { get { return this[nameof(CoordZ)].GetValue<long>(); } set { this[nameof(CoordZ)].SetValue<long>(value); } }
    }
    public class SpatialHashStreamingGridLayerCell : Object
    {
        public SpatialHashStreamingGridLayerCell(nint addr) : base(addr) { }
        public Array<WorldPartitionRuntimeSpatialHashCell> GridCells { get { return new Array<WorldPartitionRuntimeSpatialHashCell>(this[nameof(GridCells)].Address); } }
    }
    public class SpatialHashStreamingGridLevel : Object
    {
        public SpatialHashStreamingGridLevel(nint addr) : base(addr) { }
        public Array<SpatialHashStreamingGridLayerCell> LayerCells { get { return new Array<SpatialHashStreamingGridLayerCell>(this[nameof(LayerCells)].Address); } }
        public Object LayerCellsMapping { get { return this[nameof(LayerCellsMapping)]; } set { this[nameof(LayerCellsMapping)] = value; } }
    }
    public class SpatialHashStreamingGrid : Object
    {
        public SpatialHashStreamingGrid(nint addr) : base(addr) { }
        public Object GridName { get { return this[nameof(GridName)]; } set { this[nameof(GridName)] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public int CellSize { get { return this[nameof(CellSize)].GetValue<int>(); } set { this[nameof(CellSize)].SetValue<int>(value); } }
        public float LoadingRange { get { return this[nameof(LoadingRange)].GetValue<float>(); } set { this[nameof(LoadingRange)].SetValue<float>(value); } }
        public bool bBlockOnSlowStreaming { get { return this[nameof(bBlockOnSlowStreaming)].Flag; } set { this[nameof(bBlockOnSlowStreaming)].Flag = value; } }
        public LinearColor DebugColor { get { return this[nameof(DebugColor)].As<LinearColor>(); } set { this["DebugColor"] = value; } }
        public Array<SpatialHashStreamingGridLevel> GridLevels { get { return new Array<SpatialHashStreamingGridLevel>(this[nameof(GridLevels)].Address); } }
        public Box WorldBounds { get { return this[nameof(WorldBounds)].As<Box>(); } set { this["WorldBounds"] = value; } }
        public bool bClientOnlyVisible { get { return this[nameof(bClientOnlyVisible)].Flag; } set { this[nameof(bClientOnlyVisible)].Flag = value; } }
        public HLODLayer HLODLayer { get { return this[nameof(HLODLayer)].As<HLODLayer>(); } set { this["HLODLayer"] = value; } }
    }
    public class SpatialHashRuntimeGrid : Object
    {
        public SpatialHashRuntimeGrid(nint addr) : base(addr) { }
    }
    public class WorldPartitionRuntimeSpatialHashGridPreviewer : Object
    {
        public WorldPartitionRuntimeSpatialHashGridPreviewer(nint addr) : base(addr) { }
    }
    public enum Default__EnumCookedMetaData : int
    {
    }
    public class Default__ClassCookedMetaData : Object
    {
        public Default__ClassCookedMetaData(nint addr) : base(addr) { }
        //public None None 
    }
}
